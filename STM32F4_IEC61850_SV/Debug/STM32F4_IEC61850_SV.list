
STM32F4_IEC61850_SV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000150d0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b54  08015280  08015280  00016280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017dd4  08017dd4  000194f0  2**0
                  CONTENTS
  4 .ARM          00000008  08017dd4  08017dd4  00018dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017ddc  08017ddc  000194f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017ddc  08017ddc  00018ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017de0  08017de0  00018de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004f0  20000000  08017de4  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000194f0  2**0
                  CONTENTS
 10 .bss          0000de1c  200004f0  200004f0  000194f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000e30c  2000e30c  000194f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000194f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002baba  00000000  00000000  00019520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000758e  00000000  00000000  00044fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002398  00000000  00000000  0004c568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001be3  00000000  00000000  0004e900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011773  00000000  00000000  000504e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000351f5  00000000  00000000  00061c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff8d0  00000000  00000000  00096e4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0019671b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009d28  00000000  00000000  00196760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  001a0488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200004f0 	.word	0x200004f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08015268 	.word	0x08015268

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200004f4 	.word	0x200004f4
 80001ec:	08015268 	.word	0x08015268

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	@ 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2f>:
 800086c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000870:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000874:	bf24      	itt	cs
 8000876:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800087a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800087e:	d90d      	bls.n	800089c <__aeabi_d2f+0x30>
 8000880:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000884:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000888:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800088c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000890:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000894:	bf08      	it	eq
 8000896:	f020 0001 	biceq.w	r0, r0, #1
 800089a:	4770      	bx	lr
 800089c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008a0:	d121      	bne.n	80008e6 <__aeabi_d2f+0x7a>
 80008a2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008a6:	bfbc      	itt	lt
 80008a8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008ac:	4770      	bxlt	lr
 80008ae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008b6:	f1c2 0218 	rsb	r2, r2, #24
 80008ba:	f1c2 0c20 	rsb	ip, r2, #32
 80008be:	fa10 f30c 	lsls.w	r3, r0, ip
 80008c2:	fa20 f002 	lsr.w	r0, r0, r2
 80008c6:	bf18      	it	ne
 80008c8:	f040 0001 	orrne.w	r0, r0, #1
 80008cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008d8:	ea40 000c 	orr.w	r0, r0, ip
 80008dc:	fa23 f302 	lsr.w	r3, r3, r2
 80008e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008e4:	e7cc      	b.n	8000880 <__aeabi_d2f+0x14>
 80008e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ea:	d107      	bne.n	80008fc <__aeabi_d2f+0x90>
 80008ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008f0:	bf1e      	ittt	ne
 80008f2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008f6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008fa:	4770      	bxne	lr
 80008fc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000900:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <__aeabi_uldivmod>:
 800090c:	b953      	cbnz	r3, 8000924 <__aeabi_uldivmod+0x18>
 800090e:	b94a      	cbnz	r2, 8000924 <__aeabi_uldivmod+0x18>
 8000910:	2900      	cmp	r1, #0
 8000912:	bf08      	it	eq
 8000914:	2800      	cmpeq	r0, #0
 8000916:	bf1c      	itt	ne
 8000918:	f04f 31ff 	movne.w	r1, #4294967295
 800091c:	f04f 30ff 	movne.w	r0, #4294967295
 8000920:	f000 b96a 	b.w	8000bf8 <__aeabi_idiv0>
 8000924:	f1ad 0c08 	sub.w	ip, sp, #8
 8000928:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800092c:	f000 f806 	bl	800093c <__udivmoddi4>
 8000930:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000934:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000938:	b004      	add	sp, #16
 800093a:	4770      	bx	lr

0800093c <__udivmoddi4>:
 800093c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000940:	9d08      	ldr	r5, [sp, #32]
 8000942:	460c      	mov	r4, r1
 8000944:	2b00      	cmp	r3, #0
 8000946:	d14e      	bne.n	80009e6 <__udivmoddi4+0xaa>
 8000948:	4694      	mov	ip, r2
 800094a:	458c      	cmp	ip, r1
 800094c:	4686      	mov	lr, r0
 800094e:	fab2 f282 	clz	r2, r2
 8000952:	d962      	bls.n	8000a1a <__udivmoddi4+0xde>
 8000954:	b14a      	cbz	r2, 800096a <__udivmoddi4+0x2e>
 8000956:	f1c2 0320 	rsb	r3, r2, #32
 800095a:	4091      	lsls	r1, r2
 800095c:	fa20 f303 	lsr.w	r3, r0, r3
 8000960:	fa0c fc02 	lsl.w	ip, ip, r2
 8000964:	4319      	orrs	r1, r3
 8000966:	fa00 fe02 	lsl.w	lr, r0, r2
 800096a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800096e:	fa1f f68c 	uxth.w	r6, ip
 8000972:	fbb1 f4f7 	udiv	r4, r1, r7
 8000976:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800097a:	fb07 1114 	mls	r1, r7, r4, r1
 800097e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000982:	fb04 f106 	mul.w	r1, r4, r6
 8000986:	4299      	cmp	r1, r3
 8000988:	d90a      	bls.n	80009a0 <__udivmoddi4+0x64>
 800098a:	eb1c 0303 	adds.w	r3, ip, r3
 800098e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000992:	f080 8112 	bcs.w	8000bba <__udivmoddi4+0x27e>
 8000996:	4299      	cmp	r1, r3
 8000998:	f240 810f 	bls.w	8000bba <__udivmoddi4+0x27e>
 800099c:	3c02      	subs	r4, #2
 800099e:	4463      	add	r3, ip
 80009a0:	1a59      	subs	r1, r3, r1
 80009a2:	fa1f f38e 	uxth.w	r3, lr
 80009a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80009aa:	fb07 1110 	mls	r1, r7, r0, r1
 80009ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009b2:	fb00 f606 	mul.w	r6, r0, r6
 80009b6:	429e      	cmp	r6, r3
 80009b8:	d90a      	bls.n	80009d0 <__udivmoddi4+0x94>
 80009ba:	eb1c 0303 	adds.w	r3, ip, r3
 80009be:	f100 31ff 	add.w	r1, r0, #4294967295
 80009c2:	f080 80fc 	bcs.w	8000bbe <__udivmoddi4+0x282>
 80009c6:	429e      	cmp	r6, r3
 80009c8:	f240 80f9 	bls.w	8000bbe <__udivmoddi4+0x282>
 80009cc:	4463      	add	r3, ip
 80009ce:	3802      	subs	r0, #2
 80009d0:	1b9b      	subs	r3, r3, r6
 80009d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009d6:	2100      	movs	r1, #0
 80009d8:	b11d      	cbz	r5, 80009e2 <__udivmoddi4+0xa6>
 80009da:	40d3      	lsrs	r3, r2
 80009dc:	2200      	movs	r2, #0
 80009de:	e9c5 3200 	strd	r3, r2, [r5]
 80009e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e6:	428b      	cmp	r3, r1
 80009e8:	d905      	bls.n	80009f6 <__udivmoddi4+0xba>
 80009ea:	b10d      	cbz	r5, 80009f0 <__udivmoddi4+0xb4>
 80009ec:	e9c5 0100 	strd	r0, r1, [r5]
 80009f0:	2100      	movs	r1, #0
 80009f2:	4608      	mov	r0, r1
 80009f4:	e7f5      	b.n	80009e2 <__udivmoddi4+0xa6>
 80009f6:	fab3 f183 	clz	r1, r3
 80009fa:	2900      	cmp	r1, #0
 80009fc:	d146      	bne.n	8000a8c <__udivmoddi4+0x150>
 80009fe:	42a3      	cmp	r3, r4
 8000a00:	d302      	bcc.n	8000a08 <__udivmoddi4+0xcc>
 8000a02:	4290      	cmp	r0, r2
 8000a04:	f0c0 80f0 	bcc.w	8000be8 <__udivmoddi4+0x2ac>
 8000a08:	1a86      	subs	r6, r0, r2
 8000a0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000a0e:	2001      	movs	r0, #1
 8000a10:	2d00      	cmp	r5, #0
 8000a12:	d0e6      	beq.n	80009e2 <__udivmoddi4+0xa6>
 8000a14:	e9c5 6300 	strd	r6, r3, [r5]
 8000a18:	e7e3      	b.n	80009e2 <__udivmoddi4+0xa6>
 8000a1a:	2a00      	cmp	r2, #0
 8000a1c:	f040 8090 	bne.w	8000b40 <__udivmoddi4+0x204>
 8000a20:	eba1 040c 	sub.w	r4, r1, ip
 8000a24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a28:	fa1f f78c 	uxth.w	r7, ip
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a36:	fb08 4416 	mls	r4, r8, r6, r4
 8000a3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a3e:	fb07 f006 	mul.w	r0, r7, r6
 8000a42:	4298      	cmp	r0, r3
 8000a44:	d908      	bls.n	8000a58 <__udivmoddi4+0x11c>
 8000a46:	eb1c 0303 	adds.w	r3, ip, r3
 8000a4a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a4e:	d202      	bcs.n	8000a56 <__udivmoddi4+0x11a>
 8000a50:	4298      	cmp	r0, r3
 8000a52:	f200 80cd 	bhi.w	8000bf0 <__udivmoddi4+0x2b4>
 8000a56:	4626      	mov	r6, r4
 8000a58:	1a1c      	subs	r4, r3, r0
 8000a5a:	fa1f f38e 	uxth.w	r3, lr
 8000a5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a62:	fb08 4410 	mls	r4, r8, r0, r4
 8000a66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a6a:	fb00 f707 	mul.w	r7, r0, r7
 8000a6e:	429f      	cmp	r7, r3
 8000a70:	d908      	bls.n	8000a84 <__udivmoddi4+0x148>
 8000a72:	eb1c 0303 	adds.w	r3, ip, r3
 8000a76:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a7a:	d202      	bcs.n	8000a82 <__udivmoddi4+0x146>
 8000a7c:	429f      	cmp	r7, r3
 8000a7e:	f200 80b0 	bhi.w	8000be2 <__udivmoddi4+0x2a6>
 8000a82:	4620      	mov	r0, r4
 8000a84:	1bdb      	subs	r3, r3, r7
 8000a86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a8a:	e7a5      	b.n	80009d8 <__udivmoddi4+0x9c>
 8000a8c:	f1c1 0620 	rsb	r6, r1, #32
 8000a90:	408b      	lsls	r3, r1
 8000a92:	fa22 f706 	lsr.w	r7, r2, r6
 8000a96:	431f      	orrs	r7, r3
 8000a98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000aa0:	ea43 030c 	orr.w	r3, r3, ip
 8000aa4:	40f4      	lsrs	r4, r6
 8000aa6:	fa00 f801 	lsl.w	r8, r0, r1
 8000aaa:	0c38      	lsrs	r0, r7, #16
 8000aac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ab0:	fbb4 fef0 	udiv	lr, r4, r0
 8000ab4:	fa1f fc87 	uxth.w	ip, r7
 8000ab8:	fb00 441e 	mls	r4, r0, lr, r4
 8000abc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ac0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ac4:	45a1      	cmp	r9, r4
 8000ac6:	fa02 f201 	lsl.w	r2, r2, r1
 8000aca:	d90a      	bls.n	8000ae2 <__udivmoddi4+0x1a6>
 8000acc:	193c      	adds	r4, r7, r4
 8000ace:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ad2:	f080 8084 	bcs.w	8000bde <__udivmoddi4+0x2a2>
 8000ad6:	45a1      	cmp	r9, r4
 8000ad8:	f240 8081 	bls.w	8000bde <__udivmoddi4+0x2a2>
 8000adc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ae0:	443c      	add	r4, r7
 8000ae2:	eba4 0409 	sub.w	r4, r4, r9
 8000ae6:	fa1f f983 	uxth.w	r9, r3
 8000aea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000aee:	fb00 4413 	mls	r4, r0, r3, r4
 8000af2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000af6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000afa:	45a4      	cmp	ip, r4
 8000afc:	d907      	bls.n	8000b0e <__udivmoddi4+0x1d2>
 8000afe:	193c      	adds	r4, r7, r4
 8000b00:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b04:	d267      	bcs.n	8000bd6 <__udivmoddi4+0x29a>
 8000b06:	45a4      	cmp	ip, r4
 8000b08:	d965      	bls.n	8000bd6 <__udivmoddi4+0x29a>
 8000b0a:	3b02      	subs	r3, #2
 8000b0c:	443c      	add	r4, r7
 8000b0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b12:	fba0 9302 	umull	r9, r3, r0, r2
 8000b16:	eba4 040c 	sub.w	r4, r4, ip
 8000b1a:	429c      	cmp	r4, r3
 8000b1c:	46ce      	mov	lr, r9
 8000b1e:	469c      	mov	ip, r3
 8000b20:	d351      	bcc.n	8000bc6 <__udivmoddi4+0x28a>
 8000b22:	d04e      	beq.n	8000bc2 <__udivmoddi4+0x286>
 8000b24:	b155      	cbz	r5, 8000b3c <__udivmoddi4+0x200>
 8000b26:	ebb8 030e 	subs.w	r3, r8, lr
 8000b2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b32:	40cb      	lsrs	r3, r1
 8000b34:	431e      	orrs	r6, r3
 8000b36:	40cc      	lsrs	r4, r1
 8000b38:	e9c5 6400 	strd	r6, r4, [r5]
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	e750      	b.n	80009e2 <__udivmoddi4+0xa6>
 8000b40:	f1c2 0320 	rsb	r3, r2, #32
 8000b44:	fa20 f103 	lsr.w	r1, r0, r3
 8000b48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b50:	4094      	lsls	r4, r2
 8000b52:	430c      	orrs	r4, r1
 8000b54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b5c:	fa1f f78c 	uxth.w	r7, ip
 8000b60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b64:	fb08 3110 	mls	r1, r8, r0, r3
 8000b68:	0c23      	lsrs	r3, r4, #16
 8000b6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b6e:	fb00 f107 	mul.w	r1, r0, r7
 8000b72:	4299      	cmp	r1, r3
 8000b74:	d908      	bls.n	8000b88 <__udivmoddi4+0x24c>
 8000b76:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b7e:	d22c      	bcs.n	8000bda <__udivmoddi4+0x29e>
 8000b80:	4299      	cmp	r1, r3
 8000b82:	d92a      	bls.n	8000bda <__udivmoddi4+0x29e>
 8000b84:	3802      	subs	r0, #2
 8000b86:	4463      	add	r3, ip
 8000b88:	1a5b      	subs	r3, r3, r1
 8000b8a:	b2a4      	uxth	r4, r4
 8000b8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b90:	fb08 3311 	mls	r3, r8, r1, r3
 8000b94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b98:	fb01 f307 	mul.w	r3, r1, r7
 8000b9c:	42a3      	cmp	r3, r4
 8000b9e:	d908      	bls.n	8000bb2 <__udivmoddi4+0x276>
 8000ba0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ba4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ba8:	d213      	bcs.n	8000bd2 <__udivmoddi4+0x296>
 8000baa:	42a3      	cmp	r3, r4
 8000bac:	d911      	bls.n	8000bd2 <__udivmoddi4+0x296>
 8000bae:	3902      	subs	r1, #2
 8000bb0:	4464      	add	r4, ip
 8000bb2:	1ae4      	subs	r4, r4, r3
 8000bb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000bb8:	e739      	b.n	8000a2e <__udivmoddi4+0xf2>
 8000bba:	4604      	mov	r4, r0
 8000bbc:	e6f0      	b.n	80009a0 <__udivmoddi4+0x64>
 8000bbe:	4608      	mov	r0, r1
 8000bc0:	e706      	b.n	80009d0 <__udivmoddi4+0x94>
 8000bc2:	45c8      	cmp	r8, r9
 8000bc4:	d2ae      	bcs.n	8000b24 <__udivmoddi4+0x1e8>
 8000bc6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000bca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bce:	3801      	subs	r0, #1
 8000bd0:	e7a8      	b.n	8000b24 <__udivmoddi4+0x1e8>
 8000bd2:	4631      	mov	r1, r6
 8000bd4:	e7ed      	b.n	8000bb2 <__udivmoddi4+0x276>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	e799      	b.n	8000b0e <__udivmoddi4+0x1d2>
 8000bda:	4630      	mov	r0, r6
 8000bdc:	e7d4      	b.n	8000b88 <__udivmoddi4+0x24c>
 8000bde:	46d6      	mov	lr, sl
 8000be0:	e77f      	b.n	8000ae2 <__udivmoddi4+0x1a6>
 8000be2:	4463      	add	r3, ip
 8000be4:	3802      	subs	r0, #2
 8000be6:	e74d      	b.n	8000a84 <__udivmoddi4+0x148>
 8000be8:	4606      	mov	r6, r0
 8000bea:	4623      	mov	r3, r4
 8000bec:	4608      	mov	r0, r1
 8000bee:	e70f      	b.n	8000a10 <__udivmoddi4+0xd4>
 8000bf0:	3e02      	subs	r6, #2
 8000bf2:	4463      	add	r3, ip
 8000bf4:	e730      	b.n	8000a58 <__udivmoddi4+0x11c>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_idiv0>:
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c00:	f000 fc48 	bl	8001494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c04:	f000 f818 	bl	8000c38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c08:	f000 f8d2 	bl	8000db0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c0c:	f000 f884 	bl	8000d18 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c10:	f004 f91c 	bl	8004e4c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c14:	4a05      	ldr	r2, [pc, #20]	@ (8000c2c <main+0x30>)
 8000c16:	2100      	movs	r1, #0
 8000c18:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <main+0x34>)
 8000c1a:	f004 f976 	bl	8004f0a <osThreadNew>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4a04      	ldr	r2, [pc, #16]	@ (8000c34 <main+0x38>)
 8000c22:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c24:	f004 f936 	bl	8004e94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <main+0x2c>
 8000c2c:	08017a64 	.word	0x08017a64
 8000c30:	08000e39 	.word	0x08000e39
 8000c34:	20000554 	.word	0x20000554

08000c38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b094      	sub	sp, #80	@ 0x50
 8000c3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3e:	f107 0320 	add.w	r3, r7, #32
 8000c42:	2230      	movs	r2, #48	@ 0x30
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f013 fd19 	bl	801467e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	4b2b      	ldr	r3, [pc, #172]	@ (8000d10 <SystemClock_Config+0xd8>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c64:	4a2a      	ldr	r2, [pc, #168]	@ (8000d10 <SystemClock_Config+0xd8>)
 8000c66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c6c:	4b28      	ldr	r3, [pc, #160]	@ (8000d10 <SystemClock_Config+0xd8>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c78:	2300      	movs	r3, #0
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	4b25      	ldr	r3, [pc, #148]	@ (8000d14 <SystemClock_Config+0xdc>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a24      	ldr	r2, [pc, #144]	@ (8000d14 <SystemClock_Config+0xdc>)
 8000c82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c86:	6013      	str	r3, [r2, #0]
 8000c88:	4b22      	ldr	r3, [pc, #136]	@ (8000d14 <SystemClock_Config+0xdc>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c94:	2301      	movs	r3, #1
 8000c96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ca2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000ca8:	230f      	movs	r3, #15
 8000caa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000cac:	23d8      	movs	r3, #216	@ 0xd8
 8000cae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cb4:	2304      	movs	r3, #4
 8000cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb8:	f107 0320 	add.w	r3, r7, #32
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f002 f997 	bl	8002ff0 <HAL_RCC_OscConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cc8:	f000 f8dc 	bl	8000e84 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ccc:	f002 f940 	bl	8002f50 <HAL_PWREx_EnableOverDrive>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000cd6:	f000 f8d5 	bl	8000e84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cda:	230f      	movs	r3, #15
 8000cdc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ce6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000cea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cf0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	2105      	movs	r1, #5
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f002 fbf1 	bl	80034e0 <HAL_RCC_ClockConfig>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000d04:	f000 f8be 	bl	8000e84 <Error_Handler>
  }
}
 8000d08:	bf00      	nop
 8000d0a:	3750      	adds	r7, #80	@ 0x50
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40007000 	.word	0x40007000

08000d18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1e:	f107 0308 	add.w	r3, r7, #8
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d34:	4b1d      	ldr	r3, [pc, #116]	@ (8000dac <MX_TIM2_Init+0x94>)
 8000d36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dac <MX_TIM2_Init+0x94>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d42:	4b1a      	ldr	r3, [pc, #104]	@ (8000dac <MX_TIM2_Init+0x94>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7030;
 8000d48:	4b18      	ldr	r3, [pc, #96]	@ (8000dac <MX_TIM2_Init+0x94>)
 8000d4a:	f641 3276 	movw	r2, #7030	@ 0x1b76
 8000d4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d50:	4b16      	ldr	r3, [pc, #88]	@ (8000dac <MX_TIM2_Init+0x94>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d56:	4b15      	ldr	r3, [pc, #84]	@ (8000dac <MX_TIM2_Init+0x94>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d5c:	4813      	ldr	r0, [pc, #76]	@ (8000dac <MX_TIM2_Init+0x94>)
 8000d5e:	f002 fdbd 	bl	80038dc <HAL_TIM_Base_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d68:	f000 f88c 	bl	8000e84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	4619      	mov	r1, r3
 8000d78:	480c      	ldr	r0, [pc, #48]	@ (8000dac <MX_TIM2_Init+0x94>)
 8000d7a:	f002 ff5f 	bl	8003c3c <HAL_TIM_ConfigClockSource>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d84:	f000 f87e 	bl	8000e84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d90:	463b      	mov	r3, r7
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	@ (8000dac <MX_TIM2_Init+0x94>)
 8000d96:	f003 f987 	bl	80040a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000da0:	f000 f870 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	2000050c 	.word	0x2000050c

08000db0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b1e      	ldr	r3, [pc, #120]	@ (8000e34 <MX_GPIO_Init+0x84>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a1d      	ldr	r2, [pc, #116]	@ (8000e34 <MX_GPIO_Init+0x84>)
 8000dc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e34 <MX_GPIO_Init+0x84>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	4b17      	ldr	r3, [pc, #92]	@ (8000e34 <MX_GPIO_Init+0x84>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	4a16      	ldr	r2, [pc, #88]	@ (8000e34 <MX_GPIO_Init+0x84>)
 8000ddc:	f043 0304 	orr.w	r3, r3, #4
 8000de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de2:	4b14      	ldr	r3, [pc, #80]	@ (8000e34 <MX_GPIO_Init+0x84>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	f003 0304 	and.w	r3, r3, #4
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	4b10      	ldr	r3, [pc, #64]	@ (8000e34 <MX_GPIO_Init+0x84>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	4a0f      	ldr	r2, [pc, #60]	@ (8000e34 <MX_GPIO_Init+0x84>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000e34 <MX_GPIO_Init+0x84>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	603b      	str	r3, [r7, #0]
 8000e0e:	4b09      	ldr	r3, [pc, #36]	@ (8000e34 <MX_GPIO_Init+0x84>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	4a08      	ldr	r2, [pc, #32]	@ (8000e34 <MX_GPIO_Init+0x84>)
 8000e14:	f043 0302 	orr.w	r3, r3, #2
 8000e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1a:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <MX_GPIO_Init+0x84>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e26:	bf00      	nop
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800

08000e38 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000e40:	f003 f9c2 	bl	80041c8 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

  // Start new task for IEC61850 SV (SV frame assembling and publishing)
  osThreadNew(IEC61850_SV_Task, NULL, &SVTask_attributes);
 8000e44:	4a04      	ldr	r2, [pc, #16]	@ (8000e58 <StartDefaultTask+0x20>)
 8000e46:	2100      	movs	r1, #0
 8000e48:	4804      	ldr	r0, [pc, #16]	@ (8000e5c <StartDefaultTask+0x24>)
 8000e4a:	f004 f85e 	bl	8004f0a <osThreadNew>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f004 f8ed 	bl	800502e <osDelay>
 8000e54:	e7fb      	b.n	8000e4e <StartDefaultTask+0x16>
 8000e56:	bf00      	nop
 8000e58:	08017a88 	.word	0x08017a88
 8000e5c:	08012809 	.word	0x08012809

08000e60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a04      	ldr	r2, [pc, #16]	@ (8000e80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d101      	bne.n	8000e76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e72:	f000 fb31 	bl	80014d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40010000 	.word	0x40010000

08000e84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e88:	b672      	cpsid	i
}
 8000e8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <Error_Handler+0x8>

08000e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <HAL_MspInit+0x54>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9e:	4a11      	ldr	r2, [pc, #68]	@ (8000ee4 <HAL_MspInit+0x54>)
 8000ea0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <HAL_MspInit+0x54>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	603b      	str	r3, [r7, #0]
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee4 <HAL_MspInit+0x54>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee4 <HAL_MspInit+0x54>)
 8000ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ec0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec2:	4b08      	ldr	r3, [pc, #32]	@ (8000ee4 <HAL_MspInit+0x54>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	210f      	movs	r1, #15
 8000ed2:	f06f 0001 	mvn.w	r0, #1
 8000ed6:	f000 fbfb 	bl	80016d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800

08000ee8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ef8:	d115      	bne.n	8000f26 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b0c      	ldr	r3, [pc, #48]	@ (8000f30 <HAL_TIM_Base_MspInit+0x48>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f02:	4a0b      	ldr	r2, [pc, #44]	@ (8000f30 <HAL_TIM_Base_MspInit+0x48>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f0a:	4b09      	ldr	r3, [pc, #36]	@ (8000f30 <HAL_TIM_Base_MspInit+0x48>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2105      	movs	r1, #5
 8000f1a:	201c      	movs	r0, #28
 8000f1c:	f000 fbd8 	bl	80016d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f20:	201c      	movs	r0, #28
 8000f22:	f000 fbf1 	bl	8001708 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800

08000f34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08c      	sub	sp, #48	@ 0x30
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000f40:	2300      	movs	r3, #0
 8000f42:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f44:	2300      	movs	r3, #0
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	4b2f      	ldr	r3, [pc, #188]	@ (8001008 <HAL_InitTick+0xd4>)
 8000f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4c:	4a2e      	ldr	r2, [pc, #184]	@ (8001008 <HAL_InitTick+0xd4>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f54:	4b2c      	ldr	r3, [pc, #176]	@ (8001008 <HAL_InitTick+0xd4>)
 8000f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f60:	f107 020c 	add.w	r2, r7, #12
 8000f64:	f107 0310 	add.w	r3, r7, #16
 8000f68:	4611      	mov	r1, r2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f002 fc84 	bl	8003878 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000f70:	f002 fc6e 	bl	8003850 <HAL_RCC_GetPCLK2Freq>
 8000f74:	4603      	mov	r3, r0
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f7c:	4a23      	ldr	r2, [pc, #140]	@ (800100c <HAL_InitTick+0xd8>)
 8000f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f82:	0c9b      	lsrs	r3, r3, #18
 8000f84:	3b01      	subs	r3, #1
 8000f86:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f88:	4b21      	ldr	r3, [pc, #132]	@ (8001010 <HAL_InitTick+0xdc>)
 8000f8a:	4a22      	ldr	r2, [pc, #136]	@ (8001014 <HAL_InitTick+0xe0>)
 8000f8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f8e:	4b20      	ldr	r3, [pc, #128]	@ (8001010 <HAL_InitTick+0xdc>)
 8000f90:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f94:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f96:	4a1e      	ldr	r2, [pc, #120]	@ (8001010 <HAL_InitTick+0xdc>)
 8000f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f9a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001010 <HAL_InitTick+0xdc>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8001010 <HAL_InitTick+0xdc>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa8:	4b19      	ldr	r3, [pc, #100]	@ (8001010 <HAL_InitTick+0xdc>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000fae:	4818      	ldr	r0, [pc, #96]	@ (8001010 <HAL_InitTick+0xdc>)
 8000fb0:	f002 fc94 	bl	80038dc <HAL_TIM_Base_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000fba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d11b      	bne.n	8000ffa <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000fc2:	4813      	ldr	r0, [pc, #76]	@ (8001010 <HAL_InitTick+0xdc>)
 8000fc4:	f002 fcda 	bl	800397c <HAL_TIM_Base_Start_IT>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000fce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d111      	bne.n	8000ffa <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000fd6:	2019      	movs	r0, #25
 8000fd8:	f000 fb96 	bl	8001708 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b0f      	cmp	r3, #15
 8000fe0:	d808      	bhi.n	8000ff4 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	2019      	movs	r0, #25
 8000fe8:	f000 fb72 	bl	80016d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fec:	4a0a      	ldr	r2, [pc, #40]	@ (8001018 <HAL_InitTick+0xe4>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	e002      	b.n	8000ffa <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ffa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3730      	adds	r7, #48	@ 0x30
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800
 800100c:	431bde83 	.word	0x431bde83
 8001010:	20000558 	.word	0x20000558
 8001014:	40010000 	.word	0x40010000
 8001018:	20000004 	.word	0x20000004

0800101c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <NMI_Handler+0x4>

08001024 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <HardFault_Handler+0x4>

0800102c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <MemManage_Handler+0x4>

08001034 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <BusFault_Handler+0x4>

0800103c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <UsageFault_Handler+0x4>

08001044 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001058:	4802      	ldr	r0, [pc, #8]	@ (8001064 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800105a:	f002 fcff 	bl	8003a5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000558 	.word	0x20000558

08001068 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800106c:	4802      	ldr	r0, [pc, #8]	@ (8001078 <ETH_IRQHandler+0x10>)
 800106e:	f000 fee7 	bl	8001e40 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200050ec 	.word	0x200050ec

0800107c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return 1;
 8001080:	2301      	movs	r3, #1
}
 8001082:	4618      	mov	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <_kill>:

int _kill(int pid, int sig)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001096:	4b05      	ldr	r3, [pc, #20]	@ (80010ac <_kill+0x20>)
 8001098:	2216      	movs	r2, #22
 800109a:	601a      	str	r2, [r3, #0]
  return -1;
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	2000e138 	.word	0x2000e138

080010b0 <_exit>:

void _exit (int status)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010b8:	f04f 31ff 	mov.w	r1, #4294967295
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ffe5 	bl	800108c <_kill>
  while (1) {}    /* Make sure we hang here */
 80010c2:	bf00      	nop
 80010c4:	e7fd      	b.n	80010c2 <_exit+0x12>

080010c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b086      	sub	sp, #24
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	60f8      	str	r0, [r7, #12]
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	e00a      	b.n	80010ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010d8:	f3af 8000 	nop.w
 80010dc:	4601      	mov	r1, r0
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	1c5a      	adds	r2, r3, #1
 80010e2:	60ba      	str	r2, [r7, #8]
 80010e4:	b2ca      	uxtb	r2, r1
 80010e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	3301      	adds	r3, #1
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	dbf0      	blt.n	80010d8 <_read+0x12>
  }

  return len;
 80010f6:	687b      	ldr	r3, [r7, #4]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	e009      	b.n	8001126 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	1c5a      	adds	r2, r3, #1
 8001116:	60ba      	str	r2, [r7, #8]
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	3301      	adds	r3, #1
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	429a      	cmp	r2, r3
 800112c:	dbf1      	blt.n	8001112 <_write+0x12>
  }
  return len;
 800112e:	687b      	ldr	r3, [r7, #4]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <_close>:

int _close(int file)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001140:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001160:	605a      	str	r2, [r3, #4]
  return 0;
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <_isatty>:

int _isatty(int file)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001178:	2301      	movs	r3, #1
}
 800117a:	4618      	mov	r0, r3
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001186:	b480      	push	{r7}
 8001188:	b085      	sub	sp, #20
 800118a:	af00      	add	r7, sp, #0
 800118c:	60f8      	str	r0, [r7, #12]
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b087      	sub	sp, #28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a8:	4a14      	ldr	r2, [pc, #80]	@ (80011fc <_sbrk+0x5c>)
 80011aa:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <_sbrk+0x60>)
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b4:	4b13      	ldr	r3, [pc, #76]	@ (8001204 <_sbrk+0x64>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d102      	bne.n	80011c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <_sbrk+0x64>)
 80011be:	4a12      	ldr	r2, [pc, #72]	@ (8001208 <_sbrk+0x68>)
 80011c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011c2:	4b10      	ldr	r3, [pc, #64]	@ (8001204 <_sbrk+0x64>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d205      	bcs.n	80011dc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80011d0:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <_sbrk+0x6c>)
 80011d2:	220c      	movs	r2, #12
 80011d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295
 80011da:	e009      	b.n	80011f0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80011dc:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <_sbrk+0x64>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011e2:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <_sbrk+0x64>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	4a06      	ldr	r2, [pc, #24]	@ (8001204 <_sbrk+0x64>)
 80011ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ee:	68fb      	ldr	r3, [r7, #12]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	371c      	adds	r7, #28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	20030000 	.word	0x20030000
 8001200:	00000400 	.word	0x00000400
 8001204:	200005a0 	.word	0x200005a0
 8001208:	2000e310 	.word	0x2000e310
 800120c:	2000e138 	.word	0x2000e138

08001210 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001214:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <SystemInit+0x20>)
 8001216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800121a:	4a05      	ldr	r2, [pc, #20]	@ (8001230 <SystemInit+0x20>)
 800121c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001220:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001234:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800126c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001238:	f7ff ffea 	bl	8001210 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800123c:	480c      	ldr	r0, [pc, #48]	@ (8001270 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800123e:	490d      	ldr	r1, [pc, #52]	@ (8001274 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001240:	4a0d      	ldr	r2, [pc, #52]	@ (8001278 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001244:	e002      	b.n	800124c <LoopCopyDataInit>

08001246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124a:	3304      	adds	r3, #4

0800124c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800124c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800124e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001250:	d3f9      	bcc.n	8001246 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001252:	4a0a      	ldr	r2, [pc, #40]	@ (800127c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001254:	4c0a      	ldr	r4, [pc, #40]	@ (8001280 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001258:	e001      	b.n	800125e <LoopFillZerobss>

0800125a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800125c:	3204      	adds	r2, #4

0800125e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800125e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001260:	d3fb      	bcc.n	800125a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001262:	f013 fa71 	bl	8014748 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001266:	f7ff fcc9 	bl	8000bfc <main>
  bx  lr    
 800126a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800126c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001274:	200004f0 	.word	0x200004f0
  ldr r2, =_sidata
 8001278:	08017de4 	.word	0x08017de4
  ldr r2, =_sbss
 800127c:	200004f0 	.word	0x200004f0
  ldr r4, =_ebss
 8001280:	2000e30c 	.word	0x2000e30c

08001284 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001284:	e7fe      	b.n	8001284 <ADC_IRQHandler>

08001286 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00b      	beq.n	80012ae <DP83848_RegisterBusIO+0x28>
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d007      	beq.n	80012ae <DP83848_RegisterBusIO+0x28>
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <DP83848_RegisterBusIO+0x28>
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d102      	bne.n	80012b4 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
 80012b2:	e014      	b.n	80012de <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	68da      	ldr	r2, [r3, #12]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <DP83848_Init>:
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ADDRESS_ERROR if cannot find device address
  *         DP83848_STATUS_READ_ERROR if connot read register
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b086      	sub	sp, #24
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d139      	bne.n	800137a <DP83848_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d002      	beq.n	8001314 <DP83848_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2220      	movs	r2, #32
 8001318:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	e01c      	b.n	800135a <DP83848_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	f107 020c 	add.w	r2, r7, #12
 8001328:	2119      	movs	r1, #25
 800132a:	6978      	ldr	r0, [r7, #20]
 800132c:	4798      	blx	r3
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	da03      	bge.n	800133c <DP83848_Init+0x52>
       {
         status = DP83848_STATUS_READ_ERROR;
 8001334:	f06f 0304 	mvn.w	r3, #4
 8001338:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800133a:	e00b      	b.n	8001354 <DP83848_Init+0x6a>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 031f 	and.w	r3, r3, #31
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	429a      	cmp	r2, r3
 8001346:	d105      	bne.n	8001354 <DP83848_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
         break;
 8001352:	e005      	b.n	8001360 <DP83848_Init+0x76>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	3301      	adds	r3, #1
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	2b1f      	cmp	r3, #31
 800135e:	d9df      	bls.n	8001320 <DP83848_Init+0x36>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b1f      	cmp	r3, #31
 8001366:	d902      	bls.n	800136e <DP83848_Init+0x84>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8001368:	f06f 0302 	mvn.w	r3, #2
 800136c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d102      	bne.n	800137a <DP83848_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 800137a:	693b      	ldr	r3, [r7, #16]
 }
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6810      	ldr	r0, [r2, #0]
 8001398:	f107 020c 	add.w	r2, r7, #12
 800139c:	2101      	movs	r1, #1
 800139e:	4798      	blx	r3
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	da02      	bge.n	80013ac <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 80013a6:	f06f 0304 	mvn.w	r3, #4
 80013aa:	e06e      	b.n	800148a <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6810      	ldr	r0, [r2, #0]
 80013b4:	f107 020c 	add.w	r2, r7, #12
 80013b8:	2101      	movs	r1, #1
 80013ba:	4798      	blx	r3
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	da02      	bge.n	80013c8 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 80013c2:	f06f 0304 	mvn.w	r3, #4
 80013c6:	e060      	b.n	800148a <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 0304 	and.w	r3, r3, #4
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e059      	b.n	800148a <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	6810      	ldr	r0, [r2, #0]
 80013de:	f107 020c 	add.w	r2, r7, #12
 80013e2:	2100      	movs	r1, #0
 80013e4:	4798      	blx	r3
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	da02      	bge.n	80013f2 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 80013ec:	f06f 0304 	mvn.w	r3, #4
 80013f0:	e04b      	b.n	800148a <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d11b      	bne.n	8001434 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d006      	beq.n	8001414 <DP83848_GetLinkState+0x90>
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8001410:	2302      	movs	r3, #2
 8001412:	e03a      	b.n	800148a <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 800141e:	2303      	movs	r3, #3
 8001420:	e033      	b.n	800148a <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 800142c:	2304      	movs	r3, #4
 800142e:	e02c      	b.n	800148a <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8001430:	2305      	movs	r3, #5
 8001432:	e02a      	b.n	800148a <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	6810      	ldr	r0, [r2, #0]
 800143c:	f107 020c 	add.w	r2, r7, #12
 8001440:	2110      	movs	r1, #16
 8001442:	4798      	blx	r3
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	da02      	bge.n	8001450 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 800144a:	f06f 0304 	mvn.w	r3, #4
 800144e:	e01c      	b.n	800148a <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f003 0310 	and.w	r3, r3, #16
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 800145a:	2306      	movs	r3, #6
 800145c:	e015      	b.n	800148a <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f003 0306 	and.w	r3, r3, #6
 8001464:	2b04      	cmp	r3, #4
 8001466:	d101      	bne.n	800146c <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8001468:	2302      	movs	r3, #2
 800146a:	e00e      	b.n	800148a <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 0306 	and.w	r3, r3, #6
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8001476:	2303      	movs	r3, #3
 8001478:	e007      	b.n	800148a <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f003 0306 	and.w	r3, r3, #6
 8001480:	2b06      	cmp	r3, #6
 8001482:	d101      	bne.n	8001488 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8001484:	2304      	movs	r3, #4
 8001486:	e000      	b.n	800148a <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8001488:	2305      	movs	r3, #5
    }
  }
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001498:	4b0e      	ldr	r3, [pc, #56]	@ (80014d4 <HAL_Init+0x40>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0d      	ldr	r2, [pc, #52]	@ (80014d4 <HAL_Init+0x40>)
 800149e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014a4:	4b0b      	ldr	r3, [pc, #44]	@ (80014d4 <HAL_Init+0x40>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a0a      	ldr	r2, [pc, #40]	@ (80014d4 <HAL_Init+0x40>)
 80014aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b0:	4b08      	ldr	r3, [pc, #32]	@ (80014d4 <HAL_Init+0x40>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a07      	ldr	r2, [pc, #28]	@ (80014d4 <HAL_Init+0x40>)
 80014b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014bc:	2003      	movs	r0, #3
 80014be:	f000 f8fc 	bl	80016ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014c2:	200f      	movs	r0, #15
 80014c4:	f7ff fd36 	bl	8000f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c8:	f7ff fce2 	bl	8000e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40023c00 	.word	0x40023c00

080014d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <HAL_IncTick+0x20>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <HAL_IncTick+0x24>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	4a04      	ldr	r2, [pc, #16]	@ (80014fc <HAL_IncTick+0x24>)
 80014ea:	6013      	str	r3, [r2, #0]
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000008 	.word	0x20000008
 80014fc:	200005a4 	.word	0x200005a4

08001500 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return uwTick;
 8001504:	4b03      	ldr	r3, [pc, #12]	@ (8001514 <HAL_GetTick+0x14>)
 8001506:	681b      	ldr	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	200005a4 	.word	0x200005a4

08001518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001520:	f7ff ffee 	bl	8001500 <HAL_GetTick>
 8001524:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001530:	d005      	beq.n	800153e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001532:	4b0a      	ldr	r3, [pc, #40]	@ (800155c <HAL_Delay+0x44>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4413      	add	r3, r2
 800153c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800153e:	bf00      	nop
 8001540:	f7ff ffde 	bl	8001500 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	429a      	cmp	r2, r3
 800154e:	d8f7      	bhi.n	8001540 <HAL_Delay+0x28>
  {
  }
}
 8001550:	bf00      	nop
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000008 	.word	0x20000008

08001560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001570:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800157c:	4013      	ands	r3, r2
 800157e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001588:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800158c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001592:	4a04      	ldr	r2, [pc, #16]	@ (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	60d3      	str	r3, [r2, #12]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ac:	4b04      	ldr	r3, [pc, #16]	@ (80015c0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	f003 0307 	and.w	r3, r3, #7
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	db0b      	blt.n	80015ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	f003 021f 	and.w	r2, r3, #31
 80015dc:	4907      	ldr	r1, [pc, #28]	@ (80015fc <__NVIC_EnableIRQ+0x38>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	095b      	lsrs	r3, r3, #5
 80015e4:	2001      	movs	r0, #1
 80015e6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000e100 	.word	0xe000e100

08001600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	6039      	str	r1, [r7, #0]
 800160a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	2b00      	cmp	r3, #0
 8001612:	db0a      	blt.n	800162a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	b2da      	uxtb	r2, r3
 8001618:	490c      	ldr	r1, [pc, #48]	@ (800164c <__NVIC_SetPriority+0x4c>)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	0112      	lsls	r2, r2, #4
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	440b      	add	r3, r1
 8001624:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001628:	e00a      	b.n	8001640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	b2da      	uxtb	r2, r3
 800162e:	4908      	ldr	r1, [pc, #32]	@ (8001650 <__NVIC_SetPriority+0x50>)
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	3b04      	subs	r3, #4
 8001638:	0112      	lsls	r2, r2, #4
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	440b      	add	r3, r1
 800163e:	761a      	strb	r2, [r3, #24]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000e100 	.word	0xe000e100
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	@ 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f1c3 0307 	rsb	r3, r3, #7
 800166e:	2b04      	cmp	r3, #4
 8001670:	bf28      	it	cs
 8001672:	2304      	movcs	r3, #4
 8001674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3304      	adds	r3, #4
 800167a:	2b06      	cmp	r3, #6
 800167c:	d902      	bls.n	8001684 <NVIC_EncodePriority+0x30>
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3b03      	subs	r3, #3
 8001682:	e000      	b.n	8001686 <NVIC_EncodePriority+0x32>
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	f04f 32ff 	mov.w	r2, #4294967295
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43da      	mvns	r2, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	401a      	ands	r2, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800169c:	f04f 31ff 	mov.w	r1, #4294967295
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	43d9      	mvns	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	4313      	orrs	r3, r2
         );
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3724      	adds	r7, #36	@ 0x24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ff4c 	bl	8001560 <__NVIC_SetPriorityGrouping>
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
 80016dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e2:	f7ff ff61 	bl	80015a8 <__NVIC_GetPriorityGrouping>
 80016e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	68b9      	ldr	r1, [r7, #8]
 80016ec:	6978      	ldr	r0, [r7, #20]
 80016ee:	f7ff ffb1 	bl	8001654 <NVIC_EncodePriority>
 80016f2:	4602      	mov	r2, r0
 80016f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff ff80 	bl	8001600 <__NVIC_SetPriority>
}
 8001700:	bf00      	nop
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff ff54 	bl	80015c4 <__NVIC_EnableIRQ>
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e08a      	b.n	800184c <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800173c:	2b00      	cmp	r3, #0
 800173e:	d106      	bne.n	800174e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2223      	movs	r2, #35	@ 0x23
 8001744:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f003 f935 	bl	80049b8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	4b40      	ldr	r3, [pc, #256]	@ (8001854 <HAL_ETH_Init+0x130>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001756:	4a3f      	ldr	r2, [pc, #252]	@ (8001854 <HAL_ETH_Init+0x130>)
 8001758:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800175c:	6453      	str	r3, [r2, #68]	@ 0x44
 800175e:	4b3d      	ldr	r3, [pc, #244]	@ (8001854 <HAL_ETH_Init+0x130>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001762:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800176a:	4b3b      	ldr	r3, [pc, #236]	@ (8001858 <HAL_ETH_Init+0x134>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	4a3a      	ldr	r2, [pc, #232]	@ (8001858 <HAL_ETH_Init+0x134>)
 8001770:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001774:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001776:	4b38      	ldr	r3, [pc, #224]	@ (8001858 <HAL_ETH_Init+0x134>)
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	4936      	ldr	r1, [pc, #216]	@ (8001858 <HAL_ETH_Init+0x134>)
 8001780:	4313      	orrs	r3, r2
 8001782:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001784:	4b34      	ldr	r3, [pc, #208]	@ (8001858 <HAL_ETH_Init+0x134>)
 8001786:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800179e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017a0:	f7ff feae 	bl	8001500 <HAL_GetTick>
 80017a4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80017a6:	e011      	b.n	80017cc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80017a8:	f7ff feaa 	bl	8001500 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017b6:	d909      	bls.n	80017cc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2204      	movs	r2, #4
 80017bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	22e0      	movs	r2, #224	@ 0xe0
 80017c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e03f      	b.n	800184c <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1e4      	bne.n	80017a8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 ff4c 	bl	800267c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 fff7 	bl	80027d8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f001 f84d 	bl	800288a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	461a      	mov	r2, r3
 80017f6:	2100      	movs	r1, #0
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 ffb5 	bl	8002768 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800180c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800181e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001822:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001836:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2210      	movs	r2, #16
 8001846:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40023800 	.word	0x40023800
 8001858:	40013800 	.word	0x40013800

0800185c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800186a:	2b10      	cmp	r3, #16
 800186c:	d161      	bne.n	8001932 <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2223      	movs	r2, #35	@ 0x23
 8001872:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2204      	movs	r2, #4
 8001880:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f9f4 	bl	8001c70 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001890:	2001      	movs	r0, #1
 8001892:	f7ff fe41 	bl	8001518 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018b4:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	f043 0302 	orr.w	r3, r3, #2
 80018c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018cc:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 fd71 	bl	80023b6 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0208 	orr.w	r2, r2, #8
 80018e2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018ec:	2001      	movs	r0, #1
 80018ee:	f7ff fe13 	bl	8001518 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f042 0204 	orr.w	r2, r2, #4
 8001908:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 800191c:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8001920:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001924:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2223      	movs	r2, #35	@ 0x23
 800192a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	e000      	b.n	8001934 <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
  }
}
 8001934:	4618      	mov	r0, r3
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800194a:	2b23      	cmp	r3, #35	@ 0x23
 800194c:	d170      	bne.n	8001a30 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2223      	movs	r2, #35	@ 0x23
 8001952:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8001968:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 800196c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001970:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001984:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001988:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	f023 0302 	bic.w	r3, r3, #2
 800199c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019a0:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0204 	bic.w	r2, r2, #4
 80019b0:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019ba:	2001      	movs	r0, #1
 80019bc:	f7ff fdac 	bl	8001518 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 fcf4 	bl	80023b6 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0208 	bic.w	r2, r2, #8
 80019dc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019e6:	2001      	movs	r0, #1
 80019e8:	f7ff fd96 	bl	8001518 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	e00e      	b.n	8001a18 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	3212      	adds	r2, #18
 8001a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a04:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	3301      	adds	r3, #1
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d9ed      	bls.n	80019fa <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2210      	movs	r2, #16
 8001a28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	e000      	b.n	8001a32 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
  }
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d109      	bne.n	8001a5e <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a50:	f043 0201 	orr.w	r2, r3, #1
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e045      	b.n	8001aea <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a64:	2b23      	cmp	r3, #35	@ 0x23
 8001a66:	d13f      	bne.n	8001ae8 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001a70:	2201      	movs	r2, #1
 8001a72:	6839      	ldr	r1, [r7, #0]
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 ff77 	bl	8002968 <ETH_Prepare_Tx_Descriptors>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d009      	beq.n	8001a94 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a86:	f043 0202 	orr.w	r2, r3, #2
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e02a      	b.n	8001aea <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8001a94:	f3bf 8f4f 	dsb	sy
}
 8001a98:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	629a      	str	r2, [r3, #40]	@ 0x28
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d904      	bls.n	8001ab6 <HAL_ETH_Transmit_IT+0x7c>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab0:	1f1a      	subs	r2, r3, #4
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00d      	beq.n	8001ae4 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ade:	461a      	mov	r2, r3
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	e000      	b.n	8001aea <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
  }
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b088      	sub	sp, #32
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d109      	bne.n	8001b1e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b10:	f043 0201 	orr.w	r2, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e0a4      	b.n	8001c68 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b24:	2b23      	cmp	r3, #35	@ 0x23
 8001b26:	d001      	beq.n	8001b2c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e09d      	b.n	8001c68 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b30:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69fa      	ldr	r2, [r7, #28]
 8001b36:	3212      	adds	r2, #18
 8001b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b3c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b42:	f1c3 0304 	rsb	r3, r3, #4
 8001b46:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001b48:	e066      	b.n	8001c18 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d007      	beq.n	8001b66 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	69da      	ldr	r2, [r3, #28]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	699a      	ldr	r2, [r3, #24]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d103      	bne.n	8001b7a <HAL_ETH_ReadData+0x88>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d03c      	beq.n	8001bf4 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d005      	beq.n	8001b92 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	0c1b      	lsrs	r3, r3, #16
 8001b98:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b9c:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d005      	beq.n	8001bb6 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	f003 f8aa 	bl	8004d2c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	441a      	add	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	61fb      	str	r3, [r7, #28]
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	2b03      	cmp	r3, #3
 8001bfe:	d902      	bls.n	8001c06 <HAL_ETH_ReadData+0x114>
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	3b04      	subs	r3, #4
 8001c04:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69fa      	ldr	r2, [r7, #28]
 8001c0a:	3212      	adds	r2, #18
 8001c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c10:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	3301      	adds	r3, #1
 8001c16:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	db06      	blt.n	8001c2e <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d202      	bcs.n	8001c2e <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8001c28:	7cfb      	ldrb	r3, [r7, #19]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d08d      	beq.n	8001b4a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	441a      	add	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d002      	beq.n	8001c48 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f814 	bl	8001c70 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69fa      	ldr	r2, [r7, #28]
 8001c4c:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001c4e:	7cfb      	ldrb	r3, [r7, #19]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d108      	bne.n	8001c66 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	e000      	b.n	8001c68 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3720      	adds	r7, #32
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c84:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69fa      	ldr	r2, [r7, #28]
 8001c8a:	3212      	adds	r2, #18
 8001c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c90:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c96:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001c98:	e044      	b.n	8001d24 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d112      	bne.n	8001cc8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001ca2:	f107 0308 	add.w	r3, r7, #8
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f003 f810 	bl	8004ccc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d102      	bne.n	8001cb8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	74fb      	strb	r3, [r7, #19]
 8001cb6:	e007      	b.n	8001cc8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001cc8:	7cfb      	ldrb	r3, [r7, #19]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d02a      	beq.n	8001d24 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d108      	bne.n	8001ce8 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001cde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	6053      	str	r3, [r2, #4]
 8001ce6:	e005      	b.n	8001cf4 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	3301      	adds	r3, #1
 8001d04:	61fb      	str	r3, [r7, #28]
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	2b03      	cmp	r3, #3
 8001d0a:	d902      	bls.n	8001d12 <ETH_UpdateDescriptor+0xa2>
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	3b04      	subs	r3, #4
 8001d10:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69fa      	ldr	r2, [r7, #28]
 8001d16:	3212      	adds	r2, #18
 8001d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d1c:	617b      	str	r3, [r7, #20]
      desccount--;
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	3b01      	subs	r3, #1
 8001d22:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d002      	beq.n	8001d30 <ETH_UpdateDescriptor+0xc0>
 8001d2a:	7cfb      	ldrb	r3, [r7, #19]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1b4      	bne.n	8001c9a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d01a      	beq.n	8001d70 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001d44:	f3bf 8f5f 	dmb	sy
}
 8001d48:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6919      	ldr	r1, [r3, #16]
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	4613      	mov	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	18ca      	adds	r2, r1, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d62:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001d70:	bf00      	nop
 8001d72:	3720      	adds	r7, #32
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3318      	adds	r3, #24
 8001d84:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d8a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d90:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001d92:	2301      	movs	r3, #1
 8001d94:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001d96:	e047      	b.n	8001e28 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	3304      	adds	r3, #4
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10a      	bne.n	8001dc8 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	3301      	adds	r3, #1
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	d902      	bls.n	8001dc4 <HAL_ETH_ReleaseTxPacket+0x4c>
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	3b04      	subs	r3, #4
 8001dc2:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001dc8:	7bbb      	ldrb	r3, [r7, #14]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d02c      	beq.n	8001e28 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68d9      	ldr	r1, [r3, #12]
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	440b      	add	r3, r1
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	db1f      	blt.n	8001e24 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001de4:	68ba      	ldr	r2, [r7, #8]
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	3304      	adds	r3, #4
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f002 ffdb 	bl	8004dac <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	2200      	movs	r2, #0
 8001e02:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	3301      	adds	r3, #1
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	2b03      	cmp	r3, #3
 8001e0e:	d902      	bls.n	8001e16 <HAL_ETH_ReleaseTxPacket+0x9e>
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	3b04      	subs	r3, #4
 8001e14:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e22:	e001      	b.n	8001e28 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d002      	beq.n	8001e34 <HAL_ETH_ReleaseTxPacket+0xbc>
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1b1      	bne.n	8001d98 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e4e:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8001e68:	4b4b      	ldr	r3, [pc, #300]	@ (8001f98 <HAL_ETH_IRQHandler+0x158>)
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00e      	beq.n	8001e96 <HAL_ETH_IRQHandler+0x56>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d009      	beq.n	8001e96 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4b43      	ldr	r3, [pc, #268]	@ (8001f9c <HAL_ETH_IRQHandler+0x15c>)
 8001e8e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f002 fae5 	bl	8004460 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00f      	beq.n	8001ec0 <HAL_ETH_IRQHandler+0x80>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00a      	beq.n	8001ec0 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001eb8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f002 fae0 	bl	8004480 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d042      	beq.n	8001f50 <HAL_ETH_IRQHandler+0x110>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d03d      	beq.n	8001f50 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eda:	f043 0208 	orr.w	r2, r3, #8
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d01a      	beq.n	8001f24 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ef6:	695a      	ldr	r2, [r3, #20]
 8001ef8:	4b29      	ldr	r3, [pc, #164]	@ (8001fa0 <HAL_ETH_IRQHandler+0x160>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8001f14:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f18:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	22e0      	movs	r2, #224	@ 0xe0
 8001f1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001f22:	e012      	b.n	8001f4a <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f2c:	695a      	ldr	r2, [r3, #20]
 8001f2e:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001f32:	4013      	ands	r3, r2
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f42:	461a      	mov	r2, r3
 8001f44:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001f48:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f002 faa8 	bl	80044a0 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00e      	beq.n	8001f78 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f60:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f81a 	bl	8001fa4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d006      	beq.n	8001f90 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001f82:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <HAL_ETH_IRQHandler+0x158>)
 8001f84:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001f88:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f814 	bl	8001fb8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001f90:	bf00      	nop
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40013c00 	.word	0x40013c00
 8001f9c:	00010040 	.word	0x00010040
 8001fa0:	007e2000 	.word	0x007e2000

08001fa4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
 8001fd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f003 031c 	and.w	r3, r3, #28
 8001fe8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	02db      	lsls	r3, r3, #11
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	019b      	lsls	r3, r3, #6
 8001ffa:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	4313      	orrs	r3, r2
 8002002:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f023 0302 	bic.w	r3, r3, #2
 800200a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800201c:	f7ff fa70 	bl	8001500 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002022:	e00d      	b.n	8002040 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002024:	f7ff fa6c 	bl	8001500 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002032:	d301      	bcc.n	8002038 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e010      	b.n	800205a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1ec      	bne.n	8002024 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	b29b      	uxth	r3, r3
 8002052:	461a      	mov	r2, r3
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b086      	sub	sp, #24
 8002066:	af00      	add	r7, sp, #0
 8002068:	60f8      	str	r0, [r7, #12]
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
 800206e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f003 031c 	and.w	r3, r3, #28
 800207e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	02db      	lsls	r3, r3, #11
 8002084:	b29b      	uxth	r3, r3
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	4313      	orrs	r3, r2
 800208a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	019b      	lsls	r3, r3, #6
 8002090:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	4313      	orrs	r3, r2
 8002098:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f043 0302 	orr.w	r3, r3, #2
 80020a0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020bc:	f7ff fa20 	bl	8001500 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80020c2:	e00d      	b.n	80020e0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80020c4:	f7ff fa1c 	bl	8001500 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020d2:	d301      	bcc.n	80020d8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e009      	b.n	80020ec <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1ec      	bne.n	80020c4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0e6      	b.n	80022d6 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0310 	and.w	r3, r3, #16
 8002112:	2b00      	cmp	r3, #0
 8002114:	bf14      	ite	ne
 8002116:	2301      	movne	r3, #1
 8002118:	2300      	moveq	r3, #0
 800211a:	b2db      	uxtb	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800213c:	2b00      	cmp	r3, #0
 800213e:	bf0c      	ite	eq
 8002140:	2301      	moveq	r3, #1
 8002142:	2300      	movne	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	461a      	mov	r2, r3
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf14      	ite	ne
 800215c:	2301      	movne	r3, #1
 800215e:	2300      	moveq	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002172:	2b00      	cmp	r3, #0
 8002174:	bf0c      	ite	eq
 8002176:	2301      	moveq	r3, #1
 8002178:	2300      	movne	r3, #0
 800217a:	b2db      	uxtb	r3, r3
 800217c:	461a      	mov	r2, r3
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf14      	ite	ne
 8002190:	2301      	movne	r3, #1
 8002192:	2300      	moveq	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	461a      	mov	r2, r3
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	bf0c      	ite	eq
 80021c6:	2301      	moveq	r3, #1
 80021c8:	2300      	movne	r3, #0
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	461a      	mov	r2, r3
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	bf0c      	ite	eq
 80021e0:	2301      	moveq	r3, #1
 80021e2:	2300      	movne	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	bf14      	ite	ne
 80021fa:	2301      	movne	r3, #1
 80021fc:	2300      	moveq	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800221e:	2b00      	cmp	r3, #0
 8002220:	bf14      	ite	ne
 8002222:	2301      	movne	r3, #1
 8002224:	2300      	moveq	r3, #0
 8002226:	b2db      	uxtb	r3, r3
 8002228:	461a      	mov	r2, r3
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	bf14      	ite	ne
 800223c:	2301      	movne	r3, #1
 800223e:	2300      	moveq	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	bf14      	ite	ne
 8002256:	2301      	movne	r3, #1
 8002258:	2300      	moveq	r3, #0
 800225a:	b2db      	uxtb	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800226e:	2b00      	cmp	r3, #0
 8002270:	bf0c      	ite	eq
 8002272:	2301      	moveq	r3, #1
 8002274:	2300      	movne	r3, #0
 8002276:	b2db      	uxtb	r3, r3
 8002278:	461a      	mov	r2, r3
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	0c1b      	lsrs	r3, r3, #16
 8002296:	b29a      	uxth	r2, r3
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	bf14      	ite	ne
 80022aa:	2301      	movne	r3, #1
 80022ac:	2300      	moveq	r3, #0
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	461a      	mov	r2, r3
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	bf14      	ite	ne
 80022c6:	2301      	movne	r3, #1
 80022c8:	2300      	moveq	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e00b      	b.n	800230e <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022fc:	2b10      	cmp	r3, #16
 80022fe:	d105      	bne.n	800230c <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002300:	6839      	ldr	r1, [r7, #0]
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f87c 	bl	8002400 <ETH_SetMACConfig>

    return HAL_OK;
 8002308:	2300      	movs	r3, #0
 800230a:	e000      	b.n	800230e <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
  }
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f023 031c 	bic.w	r3, r3, #28
 800232e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002330:	f001 fa82 	bl	8003838 <HAL_RCC_GetHCLKFreq>
 8002334:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	4a14      	ldr	r2, [pc, #80]	@ (800238c <HAL_ETH_SetMDIOClockRange+0x74>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d804      	bhi.n	8002348 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f043 0308 	orr.w	r3, r3, #8
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	e019      	b.n	800237c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	4a11      	ldr	r2, [pc, #68]	@ (8002390 <HAL_ETH_SetMDIOClockRange+0x78>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d204      	bcs.n	800235a <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f043 030c 	orr.w	r3, r3, #12
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	e010      	b.n	800237c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	4a0d      	ldr	r2, [pc, #52]	@ (8002394 <HAL_ETH_SetMDIOClockRange+0x7c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d90c      	bls.n	800237c <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	4a0c      	ldr	r2, [pc, #48]	@ (8002398 <HAL_ETH_SetMDIOClockRange+0x80>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d804      	bhi.n	8002374 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f043 0304 	orr.w	r3, r3, #4
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	e003      	b.n	800237c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f043 0310 	orr.w	r3, r3, #16
 800237a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	611a      	str	r2, [r3, #16]
}
 8002384:	bf00      	nop
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	02160ebf 	.word	0x02160ebf
 8002390:	03938700 	.word	0x03938700
 8002394:	05f5e0ff 	.word	0x05f5e0ff
 8002398:	08f0d17f 	.word	0x08f0d17f

0800239c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023d8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023e6:	2001      	movs	r0, #1
 80023e8:	f7ff f896 	bl	8001518 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023f6:	6193      	str	r3, [r2, #24]
}
 80023f8:	bf00      	nop
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	4b53      	ldr	r3, [pc, #332]	@ (8002564 <ETH_SetMACConfig+0x164>)
 8002416:	4013      	ands	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	7b9b      	ldrb	r3, [r3, #14]
 800241e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	7c12      	ldrb	r2, [r2, #16]
 8002424:	2a00      	cmp	r2, #0
 8002426:	d102      	bne.n	800242e <ETH_SetMACConfig+0x2e>
 8002428:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800242c:	e000      	b.n	8002430 <ETH_SetMACConfig+0x30>
 800242e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002430:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	7c52      	ldrb	r2, [r2, #17]
 8002436:	2a00      	cmp	r2, #0
 8002438:	d102      	bne.n	8002440 <ETH_SetMACConfig+0x40>
 800243a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800243e:	e000      	b.n	8002442 <ETH_SetMACConfig+0x42>
 8002440:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002442:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002448:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	7fdb      	ldrb	r3, [r3, #31]
 800244e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002450:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002456:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	7f92      	ldrb	r2, [r2, #30]
 800245c:	2a00      	cmp	r2, #0
 800245e:	d102      	bne.n	8002466 <ETH_SetMACConfig+0x66>
 8002460:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002464:	e000      	b.n	8002468 <ETH_SetMACConfig+0x68>
 8002466:	2200      	movs	r2, #0
                        macconf->Speed |
 8002468:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	7f1b      	ldrb	r3, [r3, #28]
 800246e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002470:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002476:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	791b      	ldrb	r3, [r3, #4]
 800247c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800247e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002486:	2a00      	cmp	r2, #0
 8002488:	d102      	bne.n	8002490 <ETH_SetMACConfig+0x90>
 800248a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800248e:	e000      	b.n	8002492 <ETH_SetMACConfig+0x92>
 8002490:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002492:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	7bdb      	ldrb	r3, [r3, #15]
 8002498:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800249a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80024a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80024a8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80024aa:	4313      	orrs	r3, r2
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024c2:	2001      	movs	r0, #1
 80024c4:	f7ff f828 	bl	8001518 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80024de:	4013      	ands	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024e6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80024ee:	2a00      	cmp	r2, #0
 80024f0:	d101      	bne.n	80024f6 <ETH_SetMACConfig+0xf6>
 80024f2:	2280      	movs	r2, #128	@ 0x80
 80024f4:	e000      	b.n	80024f8 <ETH_SetMACConfig+0xf8>
 80024f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024f8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80024fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002506:	2a01      	cmp	r2, #1
 8002508:	d101      	bne.n	800250e <ETH_SetMACConfig+0x10e>
 800250a:	2208      	movs	r2, #8
 800250c:	e000      	b.n	8002510 <ETH_SetMACConfig+0x110>
 800250e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002510:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002518:	2a01      	cmp	r2, #1
 800251a:	d101      	bne.n	8002520 <ETH_SetMACConfig+0x120>
 800251c:	2204      	movs	r2, #4
 800251e:	e000      	b.n	8002522 <ETH_SetMACConfig+0x122>
 8002520:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002522:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800252a:	2a01      	cmp	r2, #1
 800252c:	d101      	bne.n	8002532 <ETH_SetMACConfig+0x132>
 800252e:	2202      	movs	r2, #2
 8002530:	e000      	b.n	8002534 <ETH_SetMACConfig+0x134>
 8002532:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002534:	4313      	orrs	r3, r2
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4313      	orrs	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800254c:	2001      	movs	r0, #1
 800254e:	f7fe ffe3 	bl	8001518 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	619a      	str	r2, [r3, #24]
}
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	fd20810f 	.word	0xfd20810f

08002568 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4b3d      	ldr	r3, [pc, #244]	@ (8002678 <ETH_SetDMAConfig+0x110>)
 8002582:	4013      	ands	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	7b1b      	ldrb	r3, [r3, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d102      	bne.n	8002594 <ETH_SetDMAConfig+0x2c>
 800258e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002592:	e000      	b.n	8002596 <ETH_SetDMAConfig+0x2e>
 8002594:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	7b5b      	ldrb	r3, [r3, #13]
 800259a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800259c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	7f52      	ldrb	r2, [r2, #29]
 80025a2:	2a00      	cmp	r2, #0
 80025a4:	d102      	bne.n	80025ac <ETH_SetDMAConfig+0x44>
 80025a6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80025aa:	e000      	b.n	80025ae <ETH_SetDMAConfig+0x46>
 80025ac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80025ae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	7b9b      	ldrb	r3, [r3, #14]
 80025b4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80025b6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80025bc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	7f1b      	ldrb	r3, [r3, #28]
 80025c2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80025c4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	7f9b      	ldrb	r3, [r3, #30]
 80025ca:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80025cc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80025d2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025da:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80025dc:	4313      	orrs	r3, r2
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025ec:	461a      	mov	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025fe:	2001      	movs	r0, #1
 8002600:	f7fe ff8a 	bl	8001518 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800260c:	461a      	mov	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	791b      	ldrb	r3, [r3, #4]
 8002616:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800261c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002622:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002628:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002630:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002632:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002638:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800263a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002640:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800264a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800264e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800265c:	2001      	movs	r0, #1
 800265e:	f7fe ff5b 	bl	8001518 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800266a:	461a      	mov	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6013      	str	r3, [r2, #0]
}
 8002670:	bf00      	nop
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	f8de3f23 	.word	0xf8de3f23

0800267c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b0a6      	sub	sp, #152	@ 0x98
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002684:	2301      	movs	r3, #1
 8002686:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800268a:	2301      	movs	r3, #1
 800268c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002690:	2300      	movs	r3, #0
 8002692:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002694:	2300      	movs	r3, #0
 8002696:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800269a:	2301      	movs	r3, #1
 800269c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80026a0:	2300      	movs	r3, #0
 80026a2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80026a6:	2301      	movs	r3, #1
 80026a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80026ac:	2301      	movs	r3, #1
 80026ae:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80026b8:	2300      	movs	r3, #0
 80026ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80026be:	2300      	movs	r3, #0
 80026c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80026c2:	2300      	movs	r3, #0
 80026c4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80026d2:	2300      	movs	r3, #0
 80026d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80026d8:	2300      	movs	r3, #0
 80026da:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80026de:	2300      	movs	r3, #0
 80026e0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80026e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80026e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80026ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80026ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80026f0:	2300      	movs	r3, #0
 80026f2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80026f6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80026fa:	4619      	mov	r1, r3
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff fe7f 	bl	8002400 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002702:	2301      	movs	r3, #1
 8002704:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002706:	2301      	movs	r3, #1
 8002708:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800270a:	2301      	movs	r3, #1
 800270c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002710:	2301      	movs	r3, #1
 8002712:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002714:	2300      	movs	r3, #0
 8002716:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002718:	2300      	movs	r3, #0
 800271a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800271e:	2300      	movs	r3, #0
 8002720:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002724:	2300      	movs	r3, #0
 8002726:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002728:	2301      	movs	r3, #1
 800272a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800272e:	2301      	movs	r3, #1
 8002730:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002732:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002736:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002738:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800273c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800273e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002742:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002744:	2301      	movs	r3, #1
 8002746:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800274a:	2300      	movs	r3, #0
 800274c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800274e:	2300      	movs	r3, #0
 8002750:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002752:	f107 0308 	add.w	r3, r7, #8
 8002756:	4619      	mov	r1, r3
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7ff ff05 	bl	8002568 <ETH_SetDMAConfig>
}
 800275e:	bf00      	nop
 8002760:	3798      	adds	r7, #152	@ 0x98
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002768:	b480      	push	{r7}
 800276a:	b087      	sub	sp, #28
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3305      	adds	r3, #5
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	021b      	lsls	r3, r3, #8
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	3204      	adds	r2, #4
 8002780:	7812      	ldrb	r2, [r2, #0]
 8002782:	4313      	orrs	r3, r2
 8002784:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	4b11      	ldr	r3, [pc, #68]	@ (80027d0 <ETH_MACAddressConfig+0x68>)
 800278a:	4413      	add	r3, r2
 800278c:	461a      	mov	r2, r3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3303      	adds	r3, #3
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	061a      	lsls	r2, r3, #24
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3302      	adds	r3, #2
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	041b      	lsls	r3, r3, #16
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3301      	adds	r3, #1
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	021b      	lsls	r3, r3, #8
 80027ac:	4313      	orrs	r3, r2
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	7812      	ldrb	r2, [r2, #0]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	4b06      	ldr	r3, [pc, #24]	@ (80027d4 <ETH_MACAddressConfig+0x6c>)
 80027ba:	4413      	add	r3, r2
 80027bc:	461a      	mov	r2, r3
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	6013      	str	r3, [r2, #0]
}
 80027c2:	bf00      	nop
 80027c4:	371c      	adds	r7, #28
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40028040 	.word	0x40028040
 80027d4:	40028044 	.word	0x40028044

080027d8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027e0:	2300      	movs	r3, #0
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	e03e      	b.n	8002864 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68d9      	ldr	r1, [r3, #12]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	440b      	add	r3, r1
 80027f6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2200      	movs	r2, #0
 8002802:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2200      	movs	r2, #0
 8002808:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2200      	movs	r2, #0
 800280e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	3206      	adds	r2, #6
 8002818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d80c      	bhi.n	8002848 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68d9      	ldr	r1, [r3, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1c5a      	adds	r2, r3, #1
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	440b      	add	r3, r1
 8002840:	461a      	mov	r2, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	e004      	b.n	8002852 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	461a      	mov	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	3301      	adds	r3, #1
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2b03      	cmp	r3, #3
 8002868:	d9bd      	bls.n	80027e6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800287c:	611a      	str	r2, [r3, #16]
}
 800287e:	bf00      	nop
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800288a:	b480      	push	{r7}
 800288c:	b085      	sub	sp, #20
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	e048      	b.n	800292a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6919      	ldr	r1, [r3, #16]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	440b      	add	r3, r1
 80028a8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2200      	movs	r2, #0
 80028b4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2200      	movs	r2, #0
 80028ba:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2200      	movs	r2, #0
 80028c0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	2200      	movs	r2, #0
 80028c6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2200      	movs	r2, #0
 80028cc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80028d4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80028ee:	68b9      	ldr	r1, [r7, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	3212      	adds	r2, #18
 80028f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d80c      	bhi.n	800291a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6919      	ldr	r1, [r3, #16]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	440b      	add	r3, r1
 8002912:	461a      	mov	r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	60da      	str	r2, [r3, #12]
 8002918:	e004      	b.n	8002924 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	461a      	mov	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	3301      	adds	r3, #1
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2b03      	cmp	r3, #3
 800292e:	d9b3      	bls.n	8002898 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691a      	ldr	r2, [r3, #16]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800295a:	60da      	str	r2, [r3, #12]
}
 800295c:	bf00      	nop
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002968:	b480      	push	{r7}
 800296a:	b091      	sub	sp, #68	@ 0x44
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	3318      	adds	r3, #24
 8002978:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800297a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800298a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800298e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002992:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800299e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80029a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029aa:	d007      	beq.n	80029bc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80029ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029b0:	3304      	adds	r3, #4
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80029bc:	2302      	movs	r3, #2
 80029be:	e115      	b.n	8002bec <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 80029c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029c2:	3301      	adds	r3, #1
 80029c4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80029c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ce:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80029d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80029d8:	f023 031f 	bic.w	r3, r3, #31
 80029dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029de:	6852      	ldr	r2, [r2, #4]
 80029e0:	431a      	orrs	r2, r3
 80029e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d008      	beq.n	8002a04 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80029f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a02:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0320 	and.w	r3, r3, #32
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a20:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a38:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a44:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002a46:	e084      	b.n	8002b52 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a52:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d006      	beq.n	8002a68 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	e005      	b.n	8002a74 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a72:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a76:	3301      	adds	r3, #1
 8002a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d902      	bls.n	8002a86 <ETH_Prepare_Tx_Descriptors+0x11e>
 8002a80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a82:	3b04      	subs	r3, #4
 8002a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a8e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002a98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a9c:	d007      	beq.n	8002aae <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d029      	beq.n	8002b02 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aba:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002abc:	2300      	movs	r3, #0
 8002abe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ac0:	e019      	b.n	8002af6 <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8002ac2:	f3bf 8f5f 	dmb	sy
}
 8002ac6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad2:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002ad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d902      	bls.n	8002ae6 <ETH_Prepare_Tx_Descriptors+0x17e>
 8002ae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ae2:	3b04      	subs	r3, #4
 8002ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aee:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002af2:	3301      	adds	r3, #1
 8002af4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002af6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d3e1      	bcc.n	8002ac2 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8002afe:	2302      	movs	r3, #2
 8002b00:	e074      	b.n	8002bec <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b10:	3301      	adds	r3, #1
 8002b12:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b22:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002b2c:	f023 031f 	bic.w	r3, r3, #31
 8002b30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b32:	6852      	ldr	r2, [r2, #4]
 8002b34:	431a      	orrs	r2, r3
 8002b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b38:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002b40:	f3bf 8f5f 	dmb	sy
}
 8002b44:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b50:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f47f af76 	bne.w	8002a48 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d006      	beq.n	8002b70 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	e005      	b.n	8002b7c <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b7a:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b86:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8a:	6a3a      	ldr	r2, [r7, #32]
 8002b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b90:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002b92:	f3bf 8f5f 	dmb	sy
}
 8002b96:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba2:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ba8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002baa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bac:	3304      	adds	r3, #4
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002bb8:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002bba:	f3ef 8310 	mrs	r3, PRIMASK
 8002bbe:	613b      	str	r3, [r7, #16]
  return(result);
 8002bc0:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002bc2:	61fb      	str	r3, [r7, #28]
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f383 8810 	msr	PRIMASK, r3
}
 8002bce:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bd6:	4413      	add	r3, r2
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	629a      	str	r2, [r3, #40]	@ 0x28
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	f383 8810 	msr	PRIMASK, r3
}
 8002be8:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3744      	adds	r7, #68	@ 0x44
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b089      	sub	sp, #36	@ 0x24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61fb      	str	r3, [r7, #28]
 8002c12:	e177      	b.n	8002f04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c14:	2201      	movs	r2, #1
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	4013      	ands	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	f040 8166 	bne.w	8002efe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d005      	beq.n	8002c4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d130      	bne.n	8002cac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	2203      	movs	r2, #3
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c80:	2201      	movs	r2, #1
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	091b      	lsrs	r3, r3, #4
 8002c96:	f003 0201 	and.w	r2, r3, #1
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 0303 	and.w	r3, r3, #3
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d017      	beq.n	8002ce8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 0303 	and.w	r3, r3, #3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d123      	bne.n	8002d3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	08da      	lsrs	r2, r3, #3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3208      	adds	r2, #8
 8002cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	220f      	movs	r2, #15
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	08da      	lsrs	r2, r3, #3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	3208      	adds	r2, #8
 8002d36:	69b9      	ldr	r1, [r7, #24]
 8002d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	2203      	movs	r2, #3
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 0203 	and.w	r2, r3, #3
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 80c0 	beq.w	8002efe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	4b66      	ldr	r3, [pc, #408]	@ (8002f1c <HAL_GPIO_Init+0x324>)
 8002d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d86:	4a65      	ldr	r2, [pc, #404]	@ (8002f1c <HAL_GPIO_Init+0x324>)
 8002d88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d8e:	4b63      	ldr	r3, [pc, #396]	@ (8002f1c <HAL_GPIO_Init+0x324>)
 8002d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d9a:	4a61      	ldr	r2, [pc, #388]	@ (8002f20 <HAL_GPIO_Init+0x328>)
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	089b      	lsrs	r3, r3, #2
 8002da0:	3302      	adds	r3, #2
 8002da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	220f      	movs	r2, #15
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43db      	mvns	r3, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a58      	ldr	r2, [pc, #352]	@ (8002f24 <HAL_GPIO_Init+0x32c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d037      	beq.n	8002e36 <HAL_GPIO_Init+0x23e>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a57      	ldr	r2, [pc, #348]	@ (8002f28 <HAL_GPIO_Init+0x330>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d031      	beq.n	8002e32 <HAL_GPIO_Init+0x23a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a56      	ldr	r2, [pc, #344]	@ (8002f2c <HAL_GPIO_Init+0x334>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d02b      	beq.n	8002e2e <HAL_GPIO_Init+0x236>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a55      	ldr	r2, [pc, #340]	@ (8002f30 <HAL_GPIO_Init+0x338>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d025      	beq.n	8002e2a <HAL_GPIO_Init+0x232>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a54      	ldr	r2, [pc, #336]	@ (8002f34 <HAL_GPIO_Init+0x33c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d01f      	beq.n	8002e26 <HAL_GPIO_Init+0x22e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a53      	ldr	r2, [pc, #332]	@ (8002f38 <HAL_GPIO_Init+0x340>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d019      	beq.n	8002e22 <HAL_GPIO_Init+0x22a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a52      	ldr	r2, [pc, #328]	@ (8002f3c <HAL_GPIO_Init+0x344>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d013      	beq.n	8002e1e <HAL_GPIO_Init+0x226>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a51      	ldr	r2, [pc, #324]	@ (8002f40 <HAL_GPIO_Init+0x348>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d00d      	beq.n	8002e1a <HAL_GPIO_Init+0x222>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a50      	ldr	r2, [pc, #320]	@ (8002f44 <HAL_GPIO_Init+0x34c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d007      	beq.n	8002e16 <HAL_GPIO_Init+0x21e>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a4f      	ldr	r2, [pc, #316]	@ (8002f48 <HAL_GPIO_Init+0x350>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d101      	bne.n	8002e12 <HAL_GPIO_Init+0x21a>
 8002e0e:	2309      	movs	r3, #9
 8002e10:	e012      	b.n	8002e38 <HAL_GPIO_Init+0x240>
 8002e12:	230a      	movs	r3, #10
 8002e14:	e010      	b.n	8002e38 <HAL_GPIO_Init+0x240>
 8002e16:	2308      	movs	r3, #8
 8002e18:	e00e      	b.n	8002e38 <HAL_GPIO_Init+0x240>
 8002e1a:	2307      	movs	r3, #7
 8002e1c:	e00c      	b.n	8002e38 <HAL_GPIO_Init+0x240>
 8002e1e:	2306      	movs	r3, #6
 8002e20:	e00a      	b.n	8002e38 <HAL_GPIO_Init+0x240>
 8002e22:	2305      	movs	r3, #5
 8002e24:	e008      	b.n	8002e38 <HAL_GPIO_Init+0x240>
 8002e26:	2304      	movs	r3, #4
 8002e28:	e006      	b.n	8002e38 <HAL_GPIO_Init+0x240>
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e004      	b.n	8002e38 <HAL_GPIO_Init+0x240>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e002      	b.n	8002e38 <HAL_GPIO_Init+0x240>
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <HAL_GPIO_Init+0x240>
 8002e36:	2300      	movs	r3, #0
 8002e38:	69fa      	ldr	r2, [r7, #28]
 8002e3a:	f002 0203 	and.w	r2, r2, #3
 8002e3e:	0092      	lsls	r2, r2, #2
 8002e40:	4093      	lsls	r3, r2
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e48:	4935      	ldr	r1, [pc, #212]	@ (8002f20 <HAL_GPIO_Init+0x328>)
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	089b      	lsrs	r3, r3, #2
 8002e4e:	3302      	adds	r3, #2
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e56:	4b3d      	ldr	r3, [pc, #244]	@ (8002f4c <HAL_GPIO_Init+0x354>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4013      	ands	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e7a:	4a34      	ldr	r2, [pc, #208]	@ (8002f4c <HAL_GPIO_Init+0x354>)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e80:	4b32      	ldr	r3, [pc, #200]	@ (8002f4c <HAL_GPIO_Init+0x354>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ea4:	4a29      	ldr	r2, [pc, #164]	@ (8002f4c <HAL_GPIO_Init+0x354>)
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eaa:	4b28      	ldr	r3, [pc, #160]	@ (8002f4c <HAL_GPIO_Init+0x354>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ece:	4a1f      	ldr	r2, [pc, #124]	@ (8002f4c <HAL_GPIO_Init+0x354>)
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f4c <HAL_GPIO_Init+0x354>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	43db      	mvns	r3, r3
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ef8:	4a14      	ldr	r2, [pc, #80]	@ (8002f4c <HAL_GPIO_Init+0x354>)
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	3301      	adds	r3, #1
 8002f02:	61fb      	str	r3, [r7, #28]
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	2b0f      	cmp	r3, #15
 8002f08:	f67f ae84 	bls.w	8002c14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	bf00      	nop
 8002f10:	3724      	adds	r7, #36	@ 0x24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	40013800 	.word	0x40013800
 8002f24:	40020000 	.word	0x40020000
 8002f28:	40020400 	.word	0x40020400
 8002f2c:	40020800 	.word	0x40020800
 8002f30:	40020c00 	.word	0x40020c00
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40021400 	.word	0x40021400
 8002f3c:	40021800 	.word	0x40021800
 8002f40:	40021c00 	.word	0x40021c00
 8002f44:	40022000 	.word	0x40022000
 8002f48:	40022400 	.word	0x40022400
 8002f4c:	40013c00 	.word	0x40013c00

08002f50 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	603b      	str	r3, [r7, #0]
 8002f5e:	4b20      	ldr	r3, [pc, #128]	@ (8002fe0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f62:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002f64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f68:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f72:	603b      	str	r3, [r7, #0]
 8002f74:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f76:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f7c:	f7fe fac0 	bl	8001500 <HAL_GetTick>
 8002f80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f82:	e009      	b.n	8002f98 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f84:	f7fe fabc 	bl	8001500 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f92:	d901      	bls.n	8002f98 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e01f      	b.n	8002fd8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f98:	4b13      	ldr	r3, [pc, #76]	@ (8002fe8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fa4:	d1ee      	bne.n	8002f84 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002fa6:	4b11      	ldr	r3, [pc, #68]	@ (8002fec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fa8:	2201      	movs	r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fac:	f7fe faa8 	bl	8001500 <HAL_GetTick>
 8002fb0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002fb2:	e009      	b.n	8002fc8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002fb4:	f7fe faa4 	bl	8001500 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002fc2:	d901      	bls.n	8002fc8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e007      	b.n	8002fd8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002fc8:	4b07      	ldr	r3, [pc, #28]	@ (8002fe8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002fd4:	d1ee      	bne.n	8002fb4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	420e0040 	.word	0x420e0040
 8002fe8:	40007000 	.word	0x40007000
 8002fec:	420e0044 	.word	0x420e0044

08002ff0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e267      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d075      	beq.n	80030fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800300e:	4b88      	ldr	r3, [pc, #544]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	2b04      	cmp	r3, #4
 8003018:	d00c      	beq.n	8003034 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800301a:	4b85      	ldr	r3, [pc, #532]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003022:	2b08      	cmp	r3, #8
 8003024:	d112      	bne.n	800304c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003026:	4b82      	ldr	r3, [pc, #520]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800302e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003032:	d10b      	bne.n	800304c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003034:	4b7e      	ldr	r3, [pc, #504]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d05b      	beq.n	80030f8 <HAL_RCC_OscConfig+0x108>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d157      	bne.n	80030f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e242      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003054:	d106      	bne.n	8003064 <HAL_RCC_OscConfig+0x74>
 8003056:	4b76      	ldr	r3, [pc, #472]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a75      	ldr	r2, [pc, #468]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 800305c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	e01d      	b.n	80030a0 <HAL_RCC_OscConfig+0xb0>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800306c:	d10c      	bne.n	8003088 <HAL_RCC_OscConfig+0x98>
 800306e:	4b70      	ldr	r3, [pc, #448]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a6f      	ldr	r2, [pc, #444]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003074:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	4b6d      	ldr	r3, [pc, #436]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a6c      	ldr	r2, [pc, #432]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	e00b      	b.n	80030a0 <HAL_RCC_OscConfig+0xb0>
 8003088:	4b69      	ldr	r3, [pc, #420]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a68      	ldr	r2, [pc, #416]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 800308e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	4b66      	ldr	r3, [pc, #408]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a65      	ldr	r2, [pc, #404]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 800309a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800309e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d013      	beq.n	80030d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7fe fa2a 	bl	8001500 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b0:	f7fe fa26 	bl	8001500 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b64      	cmp	r3, #100	@ 0x64
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e207      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0xc0>
 80030ce:	e014      	b.n	80030fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7fe fa16 	bl	8001500 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d8:	f7fe fa12 	bl	8001500 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	@ 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e1f3      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ea:	4b51      	ldr	r3, [pc, #324]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0xe8>
 80030f6:	e000      	b.n	80030fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d063      	beq.n	80031ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003106:	4b4a      	ldr	r3, [pc, #296]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00b      	beq.n	800312a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003112:	4b47      	ldr	r3, [pc, #284]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800311a:	2b08      	cmp	r3, #8
 800311c:	d11c      	bne.n	8003158 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800311e:	4b44      	ldr	r3, [pc, #272]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d116      	bne.n	8003158 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312a:	4b41      	ldr	r3, [pc, #260]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d005      	beq.n	8003142 <HAL_RCC_OscConfig+0x152>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d001      	beq.n	8003142 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e1c7      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003142:	4b3b      	ldr	r3, [pc, #236]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	4937      	ldr	r1, [pc, #220]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003156:	e03a      	b.n	80031ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d020      	beq.n	80031a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003160:	4b34      	ldr	r3, [pc, #208]	@ (8003234 <HAL_RCC_OscConfig+0x244>)
 8003162:	2201      	movs	r2, #1
 8003164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003166:	f7fe f9cb 	bl	8001500 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800316e:	f7fe f9c7 	bl	8001500 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e1a8      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003180:	4b2b      	ldr	r3, [pc, #172]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0f0      	beq.n	800316e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318c:	4b28      	ldr	r3, [pc, #160]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4925      	ldr	r1, [pc, #148]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 800319c:	4313      	orrs	r3, r2
 800319e:	600b      	str	r3, [r1, #0]
 80031a0:	e015      	b.n	80031ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031a2:	4b24      	ldr	r3, [pc, #144]	@ (8003234 <HAL_RCC_OscConfig+0x244>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7fe f9aa 	bl	8001500 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b0:	f7fe f9a6 	bl	8001500 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e187      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f0      	bne.n	80031b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d036      	beq.n	8003248 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d016      	beq.n	8003210 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e2:	4b15      	ldr	r3, [pc, #84]	@ (8003238 <HAL_RCC_OscConfig+0x248>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e8:	f7fe f98a 	bl	8001500 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f0:	f7fe f986 	bl	8001500 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e167      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003202:	4b0b      	ldr	r3, [pc, #44]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0x200>
 800320e:	e01b      	b.n	8003248 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003210:	4b09      	ldr	r3, [pc, #36]	@ (8003238 <HAL_RCC_OscConfig+0x248>)
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003216:	f7fe f973 	bl	8001500 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800321c:	e00e      	b.n	800323c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800321e:	f7fe f96f 	bl	8001500 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d907      	bls.n	800323c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e150      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
 8003230:	40023800 	.word	0x40023800
 8003234:	42470000 	.word	0x42470000
 8003238:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800323c:	4b88      	ldr	r3, [pc, #544]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 800323e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1ea      	bne.n	800321e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 8097 	beq.w	8003384 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003256:	2300      	movs	r3, #0
 8003258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800325a:	4b81      	ldr	r3, [pc, #516]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10f      	bne.n	8003286 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	60bb      	str	r3, [r7, #8]
 800326a:	4b7d      	ldr	r3, [pc, #500]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	4a7c      	ldr	r2, [pc, #496]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 8003270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003274:	6413      	str	r3, [r2, #64]	@ 0x40
 8003276:	4b7a      	ldr	r3, [pc, #488]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800327e:	60bb      	str	r3, [r7, #8]
 8003280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003282:	2301      	movs	r3, #1
 8003284:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003286:	4b77      	ldr	r3, [pc, #476]	@ (8003464 <HAL_RCC_OscConfig+0x474>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800328e:	2b00      	cmp	r3, #0
 8003290:	d118      	bne.n	80032c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003292:	4b74      	ldr	r3, [pc, #464]	@ (8003464 <HAL_RCC_OscConfig+0x474>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a73      	ldr	r2, [pc, #460]	@ (8003464 <HAL_RCC_OscConfig+0x474>)
 8003298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800329c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800329e:	f7fe f92f 	bl	8001500 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a6:	f7fe f92b 	bl	8001500 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e10c      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b8:	4b6a      	ldr	r3, [pc, #424]	@ (8003464 <HAL_RCC_OscConfig+0x474>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0f0      	beq.n	80032a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d106      	bne.n	80032da <HAL_RCC_OscConfig+0x2ea>
 80032cc:	4b64      	ldr	r3, [pc, #400]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d0:	4a63      	ldr	r2, [pc, #396]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80032d8:	e01c      	b.n	8003314 <HAL_RCC_OscConfig+0x324>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2b05      	cmp	r3, #5
 80032e0:	d10c      	bne.n	80032fc <HAL_RCC_OscConfig+0x30c>
 80032e2:	4b5f      	ldr	r3, [pc, #380]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 80032e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e6:	4a5e      	ldr	r2, [pc, #376]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 80032e8:	f043 0304 	orr.w	r3, r3, #4
 80032ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80032ee:	4b5c      	ldr	r3, [pc, #368]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 80032f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f2:	4a5b      	ldr	r2, [pc, #364]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80032fa:	e00b      	b.n	8003314 <HAL_RCC_OscConfig+0x324>
 80032fc:	4b58      	ldr	r3, [pc, #352]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 80032fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003300:	4a57      	ldr	r2, [pc, #348]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 8003302:	f023 0301 	bic.w	r3, r3, #1
 8003306:	6713      	str	r3, [r2, #112]	@ 0x70
 8003308:	4b55      	ldr	r3, [pc, #340]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 800330a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330c:	4a54      	ldr	r2, [pc, #336]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 800330e:	f023 0304 	bic.w	r3, r3, #4
 8003312:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d015      	beq.n	8003348 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800331c:	f7fe f8f0 	bl	8001500 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003322:	e00a      	b.n	800333a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003324:	f7fe f8ec 	bl	8001500 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003332:	4293      	cmp	r3, r2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e0cb      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333a:	4b49      	ldr	r3, [pc, #292]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 800333c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0ee      	beq.n	8003324 <HAL_RCC_OscConfig+0x334>
 8003346:	e014      	b.n	8003372 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003348:	f7fe f8da 	bl	8001500 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800334e:	e00a      	b.n	8003366 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003350:	f7fe f8d6 	bl	8001500 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800335e:	4293      	cmp	r3, r2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e0b5      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003366:	4b3e      	ldr	r3, [pc, #248]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 8003368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1ee      	bne.n	8003350 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003372:	7dfb      	ldrb	r3, [r7, #23]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d105      	bne.n	8003384 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003378:	4b39      	ldr	r3, [pc, #228]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 800337a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337c:	4a38      	ldr	r2, [pc, #224]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 800337e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003382:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80a1 	beq.w	80034d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800338e:	4b34      	ldr	r3, [pc, #208]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
 8003396:	2b08      	cmp	r3, #8
 8003398:	d05c      	beq.n	8003454 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d141      	bne.n	8003426 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a2:	4b31      	ldr	r3, [pc, #196]	@ (8003468 <HAL_RCC_OscConfig+0x478>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a8:	f7fe f8aa 	bl	8001500 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b0:	f7fe f8a6 	bl	8001500 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e087      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c2:	4b27      	ldr	r3, [pc, #156]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f0      	bne.n	80033b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69da      	ldr	r2, [r3, #28]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033dc:	019b      	lsls	r3, r3, #6
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e4:	085b      	lsrs	r3, r3, #1
 80033e6:	3b01      	subs	r3, #1
 80033e8:	041b      	lsls	r3, r3, #16
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f0:	061b      	lsls	r3, r3, #24
 80033f2:	491b      	ldr	r1, [pc, #108]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003468 <HAL_RCC_OscConfig+0x478>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fe:	f7fe f87f 	bl	8001500 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003406:	f7fe f87b 	bl	8001500 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e05c      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003418:	4b11      	ldr	r3, [pc, #68]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0f0      	beq.n	8003406 <HAL_RCC_OscConfig+0x416>
 8003424:	e054      	b.n	80034d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003426:	4b10      	ldr	r3, [pc, #64]	@ (8003468 <HAL_RCC_OscConfig+0x478>)
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7fe f868 	bl	8001500 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003434:	f7fe f864 	bl	8001500 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e045      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003446:	4b06      	ldr	r3, [pc, #24]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0x444>
 8003452:	e03d      	b.n	80034d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d107      	bne.n	800346c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e038      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
 8003460:	40023800 	.word	0x40023800
 8003464:	40007000 	.word	0x40007000
 8003468:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800346c:	4b1b      	ldr	r3, [pc, #108]	@ (80034dc <HAL_RCC_OscConfig+0x4ec>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d028      	beq.n	80034cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d121      	bne.n	80034cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003492:	429a      	cmp	r2, r3
 8003494:	d11a      	bne.n	80034cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800349c:	4013      	ands	r3, r2
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d111      	bne.n	80034cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b2:	085b      	lsrs	r3, r3, #1
 80034b4:	3b01      	subs	r3, #1
 80034b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d107      	bne.n	80034cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d001      	beq.n	80034d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40023800 	.word	0x40023800

080034e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0cc      	b.n	800368e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034f4:	4b68      	ldr	r3, [pc, #416]	@ (8003698 <HAL_RCC_ClockConfig+0x1b8>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d90c      	bls.n	800351c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003502:	4b65      	ldr	r3, [pc, #404]	@ (8003698 <HAL_RCC_ClockConfig+0x1b8>)
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800350a:	4b63      	ldr	r3, [pc, #396]	@ (8003698 <HAL_RCC_ClockConfig+0x1b8>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	429a      	cmp	r2, r3
 8003516:	d001      	beq.n	800351c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0b8      	b.n	800368e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d020      	beq.n	800356a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b00      	cmp	r3, #0
 8003532:	d005      	beq.n	8003540 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003534:	4b59      	ldr	r3, [pc, #356]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	4a58      	ldr	r2, [pc, #352]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800353e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0308 	and.w	r3, r3, #8
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800354c:	4b53      	ldr	r3, [pc, #332]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	4a52      	ldr	r2, [pc, #328]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003556:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003558:	4b50      	ldr	r3, [pc, #320]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	494d      	ldr	r1, [pc, #308]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	4313      	orrs	r3, r2
 8003568:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d044      	beq.n	8003600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d107      	bne.n	800358e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357e:	4b47      	ldr	r3, [pc, #284]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d119      	bne.n	80035be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e07f      	b.n	800368e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b02      	cmp	r3, #2
 8003594:	d003      	beq.n	800359e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800359a:	2b03      	cmp	r3, #3
 800359c:	d107      	bne.n	80035ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800359e:	4b3f      	ldr	r3, [pc, #252]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d109      	bne.n	80035be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e06f      	b.n	800368e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ae:	4b3b      	ldr	r3, [pc, #236]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e067      	b.n	800368e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035be:	4b37      	ldr	r3, [pc, #220]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f023 0203 	bic.w	r2, r3, #3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	4934      	ldr	r1, [pc, #208]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035d0:	f7fd ff96 	bl	8001500 <HAL_GetTick>
 80035d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d6:	e00a      	b.n	80035ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d8:	f7fd ff92 	bl	8001500 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e04f      	b.n	800368e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ee:	4b2b      	ldr	r3, [pc, #172]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 020c 	and.w	r2, r3, #12
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d1eb      	bne.n	80035d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003600:	4b25      	ldr	r3, [pc, #148]	@ (8003698 <HAL_RCC_ClockConfig+0x1b8>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 030f 	and.w	r3, r3, #15
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d20c      	bcs.n	8003628 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360e:	4b22      	ldr	r3, [pc, #136]	@ (8003698 <HAL_RCC_ClockConfig+0x1b8>)
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003616:	4b20      	ldr	r3, [pc, #128]	@ (8003698 <HAL_RCC_ClockConfig+0x1b8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	429a      	cmp	r2, r3
 8003622:	d001      	beq.n	8003628 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e032      	b.n	800368e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003634:	4b19      	ldr	r3, [pc, #100]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	4916      	ldr	r1, [pc, #88]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	4313      	orrs	r3, r2
 8003644:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b00      	cmp	r3, #0
 8003650:	d009      	beq.n	8003666 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003652:	4b12      	ldr	r3, [pc, #72]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	490e      	ldr	r1, [pc, #56]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	4313      	orrs	r3, r2
 8003664:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003666:	f000 f821 	bl	80036ac <HAL_RCC_GetSysClockFreq>
 800366a:	4602      	mov	r2, r0
 800366c:	4b0b      	ldr	r3, [pc, #44]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	091b      	lsrs	r3, r3, #4
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	490a      	ldr	r1, [pc, #40]	@ (80036a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003678:	5ccb      	ldrb	r3, [r1, r3]
 800367a:	fa22 f303 	lsr.w	r3, r2, r3
 800367e:	4a09      	ldr	r2, [pc, #36]	@ (80036a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003682:	4b09      	ldr	r3, [pc, #36]	@ (80036a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7fd fc54 	bl	8000f34 <HAL_InitTick>

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40023c00 	.word	0x40023c00
 800369c:	40023800 	.word	0x40023800
 80036a0:	08017aac 	.word	0x08017aac
 80036a4:	20000000 	.word	0x20000000
 80036a8:	20000004 	.word	0x20000004

080036ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036b0:	b090      	sub	sp, #64	@ 0x40
 80036b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80036bc:	2300      	movs	r3, #0
 80036be:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036c4:	4b59      	ldr	r3, [pc, #356]	@ (800382c <HAL_RCC_GetSysClockFreq+0x180>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 030c 	and.w	r3, r3, #12
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d00d      	beq.n	80036ec <HAL_RCC_GetSysClockFreq+0x40>
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	f200 80a1 	bhi.w	8003818 <HAL_RCC_GetSysClockFreq+0x16c>
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <HAL_RCC_GetSysClockFreq+0x34>
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d003      	beq.n	80036e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80036de:	e09b      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036e0:	4b53      	ldr	r3, [pc, #332]	@ (8003830 <HAL_RCC_GetSysClockFreq+0x184>)
 80036e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036e4:	e09b      	b.n	800381e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036e6:	4b53      	ldr	r3, [pc, #332]	@ (8003834 <HAL_RCC_GetSysClockFreq+0x188>)
 80036e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036ea:	e098      	b.n	800381e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036ec:	4b4f      	ldr	r3, [pc, #316]	@ (800382c <HAL_RCC_GetSysClockFreq+0x180>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036f6:	4b4d      	ldr	r3, [pc, #308]	@ (800382c <HAL_RCC_GetSysClockFreq+0x180>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d028      	beq.n	8003754 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003702:	4b4a      	ldr	r3, [pc, #296]	@ (800382c <HAL_RCC_GetSysClockFreq+0x180>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	099b      	lsrs	r3, r3, #6
 8003708:	2200      	movs	r2, #0
 800370a:	623b      	str	r3, [r7, #32]
 800370c:	627a      	str	r2, [r7, #36]	@ 0x24
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003714:	2100      	movs	r1, #0
 8003716:	4b47      	ldr	r3, [pc, #284]	@ (8003834 <HAL_RCC_GetSysClockFreq+0x188>)
 8003718:	fb03 f201 	mul.w	r2, r3, r1
 800371c:	2300      	movs	r3, #0
 800371e:	fb00 f303 	mul.w	r3, r0, r3
 8003722:	4413      	add	r3, r2
 8003724:	4a43      	ldr	r2, [pc, #268]	@ (8003834 <HAL_RCC_GetSysClockFreq+0x188>)
 8003726:	fba0 1202 	umull	r1, r2, r0, r2
 800372a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800372c:	460a      	mov	r2, r1
 800372e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003730:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003732:	4413      	add	r3, r2
 8003734:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003738:	2200      	movs	r2, #0
 800373a:	61bb      	str	r3, [r7, #24]
 800373c:	61fa      	str	r2, [r7, #28]
 800373e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003742:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003746:	f7fd f8e1 	bl	800090c <__aeabi_uldivmod>
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	4613      	mov	r3, r2
 8003750:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003752:	e053      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003754:	4b35      	ldr	r3, [pc, #212]	@ (800382c <HAL_RCC_GetSysClockFreq+0x180>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	099b      	lsrs	r3, r3, #6
 800375a:	2200      	movs	r2, #0
 800375c:	613b      	str	r3, [r7, #16]
 800375e:	617a      	str	r2, [r7, #20]
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003766:	f04f 0b00 	mov.w	fp, #0
 800376a:	4652      	mov	r2, sl
 800376c:	465b      	mov	r3, fp
 800376e:	f04f 0000 	mov.w	r0, #0
 8003772:	f04f 0100 	mov.w	r1, #0
 8003776:	0159      	lsls	r1, r3, #5
 8003778:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800377c:	0150      	lsls	r0, r2, #5
 800377e:	4602      	mov	r2, r0
 8003780:	460b      	mov	r3, r1
 8003782:	ebb2 080a 	subs.w	r8, r2, sl
 8003786:	eb63 090b 	sbc.w	r9, r3, fp
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003796:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800379a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800379e:	ebb2 0408 	subs.w	r4, r2, r8
 80037a2:	eb63 0509 	sbc.w	r5, r3, r9
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	00eb      	lsls	r3, r5, #3
 80037b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037b4:	00e2      	lsls	r2, r4, #3
 80037b6:	4614      	mov	r4, r2
 80037b8:	461d      	mov	r5, r3
 80037ba:	eb14 030a 	adds.w	r3, r4, sl
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	eb45 030b 	adc.w	r3, r5, fp
 80037c4:	607b      	str	r3, [r7, #4]
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	f04f 0300 	mov.w	r3, #0
 80037ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037d2:	4629      	mov	r1, r5
 80037d4:	028b      	lsls	r3, r1, #10
 80037d6:	4621      	mov	r1, r4
 80037d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037dc:	4621      	mov	r1, r4
 80037de:	028a      	lsls	r2, r1, #10
 80037e0:	4610      	mov	r0, r2
 80037e2:	4619      	mov	r1, r3
 80037e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037e6:	2200      	movs	r2, #0
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	60fa      	str	r2, [r7, #12]
 80037ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037f0:	f7fd f88c 	bl	800090c <__aeabi_uldivmod>
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	4613      	mov	r3, r2
 80037fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80037fc:	4b0b      	ldr	r3, [pc, #44]	@ (800382c <HAL_RCC_GetSysClockFreq+0x180>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	0c1b      	lsrs	r3, r3, #16
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	3301      	adds	r3, #1
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800380c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800380e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003810:	fbb2 f3f3 	udiv	r3, r2, r3
 8003814:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003816:	e002      	b.n	800381e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003818:	4b05      	ldr	r3, [pc, #20]	@ (8003830 <HAL_RCC_GetSysClockFreq+0x184>)
 800381a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800381c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800381e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003820:	4618      	mov	r0, r3
 8003822:	3740      	adds	r7, #64	@ 0x40
 8003824:	46bd      	mov	sp, r7
 8003826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800382a:	bf00      	nop
 800382c:	40023800 	.word	0x40023800
 8003830:	00f42400 	.word	0x00f42400
 8003834:	017d7840 	.word	0x017d7840

08003838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800383c:	4b03      	ldr	r3, [pc, #12]	@ (800384c <HAL_RCC_GetHCLKFreq+0x14>)
 800383e:	681b      	ldr	r3, [r3, #0]
}
 8003840:	4618      	mov	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	20000000 	.word	0x20000000

08003850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003854:	f7ff fff0 	bl	8003838 <HAL_RCC_GetHCLKFreq>
 8003858:	4602      	mov	r2, r0
 800385a:	4b05      	ldr	r3, [pc, #20]	@ (8003870 <HAL_RCC_GetPCLK2Freq+0x20>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	0b5b      	lsrs	r3, r3, #13
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	4903      	ldr	r1, [pc, #12]	@ (8003874 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003866:	5ccb      	ldrb	r3, [r1, r3]
 8003868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800386c:	4618      	mov	r0, r3
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40023800 	.word	0x40023800
 8003874:	08017abc 	.word	0x08017abc

08003878 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	220f      	movs	r2, #15
 8003886:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003888:	4b12      	ldr	r3, [pc, #72]	@ (80038d4 <HAL_RCC_GetClockConfig+0x5c>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 0203 	and.w	r2, r3, #3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003894:	4b0f      	ldr	r3, [pc, #60]	@ (80038d4 <HAL_RCC_GetClockConfig+0x5c>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80038a0:	4b0c      	ldr	r3, [pc, #48]	@ (80038d4 <HAL_RCC_GetClockConfig+0x5c>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80038ac:	4b09      	ldr	r3, [pc, #36]	@ (80038d4 <HAL_RCC_GetClockConfig+0x5c>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	08db      	lsrs	r3, r3, #3
 80038b2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80038ba:	4b07      	ldr	r3, [pc, #28]	@ (80038d8 <HAL_RCC_GetClockConfig+0x60>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 020f 	and.w	r2, r3, #15
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	601a      	str	r2, [r3, #0]
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40023800 	.word	0x40023800
 80038d8:	40023c00 	.word	0x40023c00

080038dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e041      	b.n	8003972 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d106      	bne.n	8003908 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7fd faf0 	bl	8000ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3304      	adds	r3, #4
 8003918:	4619      	mov	r1, r3
 800391a:	4610      	mov	r0, r2
 800391c:	f000 fa7e 	bl	8003e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b01      	cmp	r3, #1
 800398e:	d001      	beq.n	8003994 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e04e      	b.n	8003a32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a23      	ldr	r2, [pc, #140]	@ (8003a40 <HAL_TIM_Base_Start_IT+0xc4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d022      	beq.n	80039fc <HAL_TIM_Base_Start_IT+0x80>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039be:	d01d      	beq.n	80039fc <HAL_TIM_Base_Start_IT+0x80>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003a44 <HAL_TIM_Base_Start_IT+0xc8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d018      	beq.n	80039fc <HAL_TIM_Base_Start_IT+0x80>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003a48 <HAL_TIM_Base_Start_IT+0xcc>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d013      	beq.n	80039fc <HAL_TIM_Base_Start_IT+0x80>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a1c      	ldr	r2, [pc, #112]	@ (8003a4c <HAL_TIM_Base_Start_IT+0xd0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d00e      	beq.n	80039fc <HAL_TIM_Base_Start_IT+0x80>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a1b      	ldr	r2, [pc, #108]	@ (8003a50 <HAL_TIM_Base_Start_IT+0xd4>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d009      	beq.n	80039fc <HAL_TIM_Base_Start_IT+0x80>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a19      	ldr	r2, [pc, #100]	@ (8003a54 <HAL_TIM_Base_Start_IT+0xd8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d004      	beq.n	80039fc <HAL_TIM_Base_Start_IT+0x80>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a18      	ldr	r2, [pc, #96]	@ (8003a58 <HAL_TIM_Base_Start_IT+0xdc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d111      	bne.n	8003a20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b06      	cmp	r3, #6
 8003a0c:	d010      	beq.n	8003a30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f042 0201 	orr.w	r2, r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a1e:	e007      	b.n	8003a30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0201 	orr.w	r2, r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40010000 	.word	0x40010000
 8003a44:	40000400 	.word	0x40000400
 8003a48:	40000800 	.word	0x40000800
 8003a4c:	40000c00 	.word	0x40000c00
 8003a50:	40010400 	.word	0x40010400
 8003a54:	40014000 	.word	0x40014000
 8003a58:	40001800 	.word	0x40001800

08003a5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d020      	beq.n	8003ac0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d01b      	beq.n	8003ac0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f06f 0202 	mvn.w	r2, #2
 8003a90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f999 	bl	8003dde <HAL_TIM_IC_CaptureCallback>
 8003aac:	e005      	b.n	8003aba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f98b 	bl	8003dca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f99c 	bl	8003df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d020      	beq.n	8003b0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d01b      	beq.n	8003b0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0204 	mvn.w	r2, #4
 8003adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f973 	bl	8003dde <HAL_TIM_IC_CaptureCallback>
 8003af8:	e005      	b.n	8003b06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f965 	bl	8003dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f976 	bl	8003df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d020      	beq.n	8003b58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f003 0308 	and.w	r3, r3, #8
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d01b      	beq.n	8003b58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f06f 0208 	mvn.w	r2, #8
 8003b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2204      	movs	r2, #4
 8003b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f94d 	bl	8003dde <HAL_TIM_IC_CaptureCallback>
 8003b44:	e005      	b.n	8003b52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f93f 	bl	8003dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f950 	bl	8003df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	f003 0310 	and.w	r3, r3, #16
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d020      	beq.n	8003ba4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f003 0310 	and.w	r3, r3, #16
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d01b      	beq.n	8003ba4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f06f 0210 	mvn.w	r2, #16
 8003b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2208      	movs	r2, #8
 8003b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f927 	bl	8003dde <HAL_TIM_IC_CaptureCallback>
 8003b90:	e005      	b.n	8003b9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f919 	bl	8003dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f92a 	bl	8003df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00c      	beq.n	8003bc8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d007      	beq.n	8003bc8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f06f 0201 	mvn.w	r2, #1
 8003bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fd f94c 	bl	8000e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00c      	beq.n	8003bec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d007      	beq.n	8003bec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 fae4 	bl	80041b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00c      	beq.n	8003c10 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d007      	beq.n	8003c10 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f8fb 	bl	8003e06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00c      	beq.n	8003c34 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d007      	beq.n	8003c34 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0220 	mvn.w	r2, #32
 8003c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 fab6 	bl	80041a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c34:	bf00      	nop
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d101      	bne.n	8003c58 <HAL_TIM_ConfigClockSource+0x1c>
 8003c54:	2302      	movs	r3, #2
 8003c56:	e0b4      	b.n	8003dc2 <HAL_TIM_ConfigClockSource+0x186>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c90:	d03e      	beq.n	8003d10 <HAL_TIM_ConfigClockSource+0xd4>
 8003c92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c96:	f200 8087 	bhi.w	8003da8 <HAL_TIM_ConfigClockSource+0x16c>
 8003c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c9e:	f000 8086 	beq.w	8003dae <HAL_TIM_ConfigClockSource+0x172>
 8003ca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ca6:	d87f      	bhi.n	8003da8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca8:	2b70      	cmp	r3, #112	@ 0x70
 8003caa:	d01a      	beq.n	8003ce2 <HAL_TIM_ConfigClockSource+0xa6>
 8003cac:	2b70      	cmp	r3, #112	@ 0x70
 8003cae:	d87b      	bhi.n	8003da8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb0:	2b60      	cmp	r3, #96	@ 0x60
 8003cb2:	d050      	beq.n	8003d56 <HAL_TIM_ConfigClockSource+0x11a>
 8003cb4:	2b60      	cmp	r3, #96	@ 0x60
 8003cb6:	d877      	bhi.n	8003da8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb8:	2b50      	cmp	r3, #80	@ 0x50
 8003cba:	d03c      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0xfa>
 8003cbc:	2b50      	cmp	r3, #80	@ 0x50
 8003cbe:	d873      	bhi.n	8003da8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc0:	2b40      	cmp	r3, #64	@ 0x40
 8003cc2:	d058      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x13a>
 8003cc4:	2b40      	cmp	r3, #64	@ 0x40
 8003cc6:	d86f      	bhi.n	8003da8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc8:	2b30      	cmp	r3, #48	@ 0x30
 8003cca:	d064      	beq.n	8003d96 <HAL_TIM_ConfigClockSource+0x15a>
 8003ccc:	2b30      	cmp	r3, #48	@ 0x30
 8003cce:	d86b      	bhi.n	8003da8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd0:	2b20      	cmp	r3, #32
 8003cd2:	d060      	beq.n	8003d96 <HAL_TIM_ConfigClockSource+0x15a>
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	d867      	bhi.n	8003da8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d05c      	beq.n	8003d96 <HAL_TIM_ConfigClockSource+0x15a>
 8003cdc:	2b10      	cmp	r3, #16
 8003cde:	d05a      	beq.n	8003d96 <HAL_TIM_ConfigClockSource+0x15a>
 8003ce0:	e062      	b.n	8003da8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cf2:	f000 f9b9 	bl	8004068 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	609a      	str	r2, [r3, #8]
      break;
 8003d0e:	e04f      	b.n	8003db0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d20:	f000 f9a2 	bl	8004068 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689a      	ldr	r2, [r3, #8]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d32:	609a      	str	r2, [r3, #8]
      break;
 8003d34:	e03c      	b.n	8003db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d42:	461a      	mov	r2, r3
 8003d44:	f000 f916 	bl	8003f74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2150      	movs	r1, #80	@ 0x50
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 f96f 	bl	8004032 <TIM_ITRx_SetConfig>
      break;
 8003d54:	e02c      	b.n	8003db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d62:	461a      	mov	r2, r3
 8003d64:	f000 f935 	bl	8003fd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2160      	movs	r1, #96	@ 0x60
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 f95f 	bl	8004032 <TIM_ITRx_SetConfig>
      break;
 8003d74:	e01c      	b.n	8003db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d82:	461a      	mov	r2, r3
 8003d84:	f000 f8f6 	bl	8003f74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2140      	movs	r1, #64	@ 0x40
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 f94f 	bl	8004032 <TIM_ITRx_SetConfig>
      break;
 8003d94:	e00c      	b.n	8003db0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4610      	mov	r0, r2
 8003da2:	f000 f946 	bl	8004032 <TIM_ITRx_SetConfig>
      break;
 8003da6:	e003      	b.n	8003db0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	73fb      	strb	r3, [r7, #15]
      break;
 8003dac:	e000      	b.n	8003db0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
	...

08003e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a46      	ldr	r2, [pc, #280]	@ (8003f48 <TIM_Base_SetConfig+0x12c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d013      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e3a:	d00f      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a43      	ldr	r2, [pc, #268]	@ (8003f4c <TIM_Base_SetConfig+0x130>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00b      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a42      	ldr	r2, [pc, #264]	@ (8003f50 <TIM_Base_SetConfig+0x134>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d007      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a41      	ldr	r2, [pc, #260]	@ (8003f54 <TIM_Base_SetConfig+0x138>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d003      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a40      	ldr	r2, [pc, #256]	@ (8003f58 <TIM_Base_SetConfig+0x13c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d108      	bne.n	8003e6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a35      	ldr	r2, [pc, #212]	@ (8003f48 <TIM_Base_SetConfig+0x12c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d02b      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e7c:	d027      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a32      	ldr	r2, [pc, #200]	@ (8003f4c <TIM_Base_SetConfig+0x130>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d023      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a31      	ldr	r2, [pc, #196]	@ (8003f50 <TIM_Base_SetConfig+0x134>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d01f      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a30      	ldr	r2, [pc, #192]	@ (8003f54 <TIM_Base_SetConfig+0x138>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d01b      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a2f      	ldr	r2, [pc, #188]	@ (8003f58 <TIM_Base_SetConfig+0x13c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d017      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a2e      	ldr	r2, [pc, #184]	@ (8003f5c <TIM_Base_SetConfig+0x140>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d013      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a2d      	ldr	r2, [pc, #180]	@ (8003f60 <TIM_Base_SetConfig+0x144>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d00f      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a2c      	ldr	r2, [pc, #176]	@ (8003f64 <TIM_Base_SetConfig+0x148>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d00b      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a2b      	ldr	r2, [pc, #172]	@ (8003f68 <TIM_Base_SetConfig+0x14c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d007      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a2a      	ldr	r2, [pc, #168]	@ (8003f6c <TIM_Base_SetConfig+0x150>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d003      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a29      	ldr	r2, [pc, #164]	@ (8003f70 <TIM_Base_SetConfig+0x154>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d108      	bne.n	8003ee0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a10      	ldr	r2, [pc, #64]	@ (8003f48 <TIM_Base_SetConfig+0x12c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d003      	beq.n	8003f14 <TIM_Base_SetConfig+0xf8>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a12      	ldr	r2, [pc, #72]	@ (8003f58 <TIM_Base_SetConfig+0x13c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d103      	bne.n	8003f1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d105      	bne.n	8003f3a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	f023 0201 	bic.w	r2, r3, #1
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	611a      	str	r2, [r3, #16]
  }
}
 8003f3a:	bf00      	nop
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40010000 	.word	0x40010000
 8003f4c:	40000400 	.word	0x40000400
 8003f50:	40000800 	.word	0x40000800
 8003f54:	40000c00 	.word	0x40000c00
 8003f58:	40010400 	.word	0x40010400
 8003f5c:	40014000 	.word	0x40014000
 8003f60:	40014400 	.word	0x40014400
 8003f64:	40014800 	.word	0x40014800
 8003f68:	40001800 	.word	0x40001800
 8003f6c:	40001c00 	.word	0x40001c00
 8003f70:	40002000 	.word	0x40002000

08003f74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	f023 0201 	bic.w	r2, r3, #1
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f023 030a 	bic.w	r3, r3, #10
 8003fb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	621a      	str	r2, [r3, #32]
}
 8003fc6:	bf00      	nop
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b087      	sub	sp, #28
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	60f8      	str	r0, [r7, #12]
 8003fda:	60b9      	str	r1, [r7, #8]
 8003fdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	f023 0210 	bic.w	r2, r3, #16
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ffc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	031b      	lsls	r3, r3, #12
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800400e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	4313      	orrs	r3, r2
 8004018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	621a      	str	r2, [r3, #32]
}
 8004026:	bf00      	nop
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004032:	b480      	push	{r7}
 8004034:	b085      	sub	sp, #20
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
 800403a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004048:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4313      	orrs	r3, r2
 8004050:	f043 0307 	orr.w	r3, r3, #7
 8004054:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	609a      	str	r2, [r3, #8]
}
 800405c:	bf00      	nop
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004082:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	021a      	lsls	r2, r3, #8
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	431a      	orrs	r2, r3
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	4313      	orrs	r3, r2
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	4313      	orrs	r3, r2
 8004094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	609a      	str	r2, [r3, #8]
}
 800409c:	bf00      	nop
 800409e:	371c      	adds	r7, #28
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d101      	bne.n	80040c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040bc:	2302      	movs	r3, #2
 80040be:	e05a      	b.n	8004176 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a21      	ldr	r2, [pc, #132]	@ (8004184 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d022      	beq.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800410c:	d01d      	beq.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a1d      	ldr	r2, [pc, #116]	@ (8004188 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d018      	beq.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a1b      	ldr	r2, [pc, #108]	@ (800418c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d013      	beq.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a1a      	ldr	r2, [pc, #104]	@ (8004190 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d00e      	beq.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a18      	ldr	r2, [pc, #96]	@ (8004194 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d009      	beq.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a17      	ldr	r2, [pc, #92]	@ (8004198 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d004      	beq.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a15      	ldr	r2, [pc, #84]	@ (800419c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d10c      	bne.n	8004164 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004150:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	4313      	orrs	r3, r2
 800415a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40010000 	.word	0x40010000
 8004188:	40000400 	.word	0x40000400
 800418c:	40000800 	.word	0x40000800
 8004190:	40000c00 	.word	0x40000c00
 8004194:	40010400 	.word	0x40010400
 8004198:	40014000 	.word	0x40014000
 800419c:	40001800 	.word	0x40001800

080041a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80041ce:	4b92      	ldr	r3, [pc, #584]	@ (8004418 <MX_LWIP_Init+0x250>)
 80041d0:	22c0      	movs	r2, #192	@ 0xc0
 80041d2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80041d4:	4b90      	ldr	r3, [pc, #576]	@ (8004418 <MX_LWIP_Init+0x250>)
 80041d6:	22a8      	movs	r2, #168	@ 0xa8
 80041d8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80041da:	4b8f      	ldr	r3, [pc, #572]	@ (8004418 <MX_LWIP_Init+0x250>)
 80041dc:	2200      	movs	r2, #0
 80041de:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 178;
 80041e0:	4b8d      	ldr	r3, [pc, #564]	@ (8004418 <MX_LWIP_Init+0x250>)
 80041e2:	22b2      	movs	r2, #178	@ 0xb2
 80041e4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80041e6:	4b8d      	ldr	r3, [pc, #564]	@ (800441c <MX_LWIP_Init+0x254>)
 80041e8:	22ff      	movs	r2, #255	@ 0xff
 80041ea:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80041ec:	4b8b      	ldr	r3, [pc, #556]	@ (800441c <MX_LWIP_Init+0x254>)
 80041ee:	22ff      	movs	r2, #255	@ 0xff
 80041f0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80041f2:	4b8a      	ldr	r3, [pc, #552]	@ (800441c <MX_LWIP_Init+0x254>)
 80041f4:	22ff      	movs	r2, #255	@ 0xff
 80041f6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80041f8:	4b88      	ldr	r3, [pc, #544]	@ (800441c <MX_LWIP_Init+0x254>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80041fe:	4b88      	ldr	r3, [pc, #544]	@ (8004420 <MX_LWIP_Init+0x258>)
 8004200:	22c0      	movs	r2, #192	@ 0xc0
 8004202:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004204:	4b86      	ldr	r3, [pc, #536]	@ (8004420 <MX_LWIP_Init+0x258>)
 8004206:	22a8      	movs	r2, #168	@ 0xa8
 8004208:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800420a:	4b85      	ldr	r3, [pc, #532]	@ (8004420 <MX_LWIP_Init+0x258>)
 800420c:	2200      	movs	r2, #0
 800420e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004210:	4b83      	ldr	r3, [pc, #524]	@ (8004420 <MX_LWIP_Init+0x258>)
 8004212:	2201      	movs	r2, #1
 8004214:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004216:	2100      	movs	r1, #0
 8004218:	2000      	movs	r0, #0
 800421a:	f004 fd6d 	bl	8008cf8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800421e:	4b7e      	ldr	r3, [pc, #504]	@ (8004418 <MX_LWIP_Init+0x250>)
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	061a      	lsls	r2, r3, #24
 8004224:	4b7c      	ldr	r3, [pc, #496]	@ (8004418 <MX_LWIP_Init+0x250>)
 8004226:	785b      	ldrb	r3, [r3, #1]
 8004228:	041b      	lsls	r3, r3, #16
 800422a:	431a      	orrs	r2, r3
 800422c:	4b7a      	ldr	r3, [pc, #488]	@ (8004418 <MX_LWIP_Init+0x250>)
 800422e:	789b      	ldrb	r3, [r3, #2]
 8004230:	021b      	lsls	r3, r3, #8
 8004232:	4313      	orrs	r3, r2
 8004234:	4a78      	ldr	r2, [pc, #480]	@ (8004418 <MX_LWIP_Init+0x250>)
 8004236:	78d2      	ldrb	r2, [r2, #3]
 8004238:	4313      	orrs	r3, r2
 800423a:	061a      	lsls	r2, r3, #24
 800423c:	4b76      	ldr	r3, [pc, #472]	@ (8004418 <MX_LWIP_Init+0x250>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	0619      	lsls	r1, r3, #24
 8004242:	4b75      	ldr	r3, [pc, #468]	@ (8004418 <MX_LWIP_Init+0x250>)
 8004244:	785b      	ldrb	r3, [r3, #1]
 8004246:	041b      	lsls	r3, r3, #16
 8004248:	4319      	orrs	r1, r3
 800424a:	4b73      	ldr	r3, [pc, #460]	@ (8004418 <MX_LWIP_Init+0x250>)
 800424c:	789b      	ldrb	r3, [r3, #2]
 800424e:	021b      	lsls	r3, r3, #8
 8004250:	430b      	orrs	r3, r1
 8004252:	4971      	ldr	r1, [pc, #452]	@ (8004418 <MX_LWIP_Init+0x250>)
 8004254:	78c9      	ldrb	r1, [r1, #3]
 8004256:	430b      	orrs	r3, r1
 8004258:	021b      	lsls	r3, r3, #8
 800425a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800425e:	431a      	orrs	r2, r3
 8004260:	4b6d      	ldr	r3, [pc, #436]	@ (8004418 <MX_LWIP_Init+0x250>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	0619      	lsls	r1, r3, #24
 8004266:	4b6c      	ldr	r3, [pc, #432]	@ (8004418 <MX_LWIP_Init+0x250>)
 8004268:	785b      	ldrb	r3, [r3, #1]
 800426a:	041b      	lsls	r3, r3, #16
 800426c:	4319      	orrs	r1, r3
 800426e:	4b6a      	ldr	r3, [pc, #424]	@ (8004418 <MX_LWIP_Init+0x250>)
 8004270:	789b      	ldrb	r3, [r3, #2]
 8004272:	021b      	lsls	r3, r3, #8
 8004274:	430b      	orrs	r3, r1
 8004276:	4968      	ldr	r1, [pc, #416]	@ (8004418 <MX_LWIP_Init+0x250>)
 8004278:	78c9      	ldrb	r1, [r1, #3]
 800427a:	430b      	orrs	r3, r1
 800427c:	0a1b      	lsrs	r3, r3, #8
 800427e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004282:	431a      	orrs	r2, r3
 8004284:	4b64      	ldr	r3, [pc, #400]	@ (8004418 <MX_LWIP_Init+0x250>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	0619      	lsls	r1, r3, #24
 800428a:	4b63      	ldr	r3, [pc, #396]	@ (8004418 <MX_LWIP_Init+0x250>)
 800428c:	785b      	ldrb	r3, [r3, #1]
 800428e:	041b      	lsls	r3, r3, #16
 8004290:	4319      	orrs	r1, r3
 8004292:	4b61      	ldr	r3, [pc, #388]	@ (8004418 <MX_LWIP_Init+0x250>)
 8004294:	789b      	ldrb	r3, [r3, #2]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	430b      	orrs	r3, r1
 800429a:	495f      	ldr	r1, [pc, #380]	@ (8004418 <MX_LWIP_Init+0x250>)
 800429c:	78c9      	ldrb	r1, [r1, #3]
 800429e:	430b      	orrs	r3, r1
 80042a0:	0e1b      	lsrs	r3, r3, #24
 80042a2:	4313      	orrs	r3, r2
 80042a4:	4a5f      	ldr	r2, [pc, #380]	@ (8004424 <MX_LWIP_Init+0x25c>)
 80042a6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80042a8:	4b5c      	ldr	r3, [pc, #368]	@ (800441c <MX_LWIP_Init+0x254>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	061a      	lsls	r2, r3, #24
 80042ae:	4b5b      	ldr	r3, [pc, #364]	@ (800441c <MX_LWIP_Init+0x254>)
 80042b0:	785b      	ldrb	r3, [r3, #1]
 80042b2:	041b      	lsls	r3, r3, #16
 80042b4:	431a      	orrs	r2, r3
 80042b6:	4b59      	ldr	r3, [pc, #356]	@ (800441c <MX_LWIP_Init+0x254>)
 80042b8:	789b      	ldrb	r3, [r3, #2]
 80042ba:	021b      	lsls	r3, r3, #8
 80042bc:	4313      	orrs	r3, r2
 80042be:	4a57      	ldr	r2, [pc, #348]	@ (800441c <MX_LWIP_Init+0x254>)
 80042c0:	78d2      	ldrb	r2, [r2, #3]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	061a      	lsls	r2, r3, #24
 80042c6:	4b55      	ldr	r3, [pc, #340]	@ (800441c <MX_LWIP_Init+0x254>)
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	0619      	lsls	r1, r3, #24
 80042cc:	4b53      	ldr	r3, [pc, #332]	@ (800441c <MX_LWIP_Init+0x254>)
 80042ce:	785b      	ldrb	r3, [r3, #1]
 80042d0:	041b      	lsls	r3, r3, #16
 80042d2:	4319      	orrs	r1, r3
 80042d4:	4b51      	ldr	r3, [pc, #324]	@ (800441c <MX_LWIP_Init+0x254>)
 80042d6:	789b      	ldrb	r3, [r3, #2]
 80042d8:	021b      	lsls	r3, r3, #8
 80042da:	430b      	orrs	r3, r1
 80042dc:	494f      	ldr	r1, [pc, #316]	@ (800441c <MX_LWIP_Init+0x254>)
 80042de:	78c9      	ldrb	r1, [r1, #3]
 80042e0:	430b      	orrs	r3, r1
 80042e2:	021b      	lsls	r3, r3, #8
 80042e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80042e8:	431a      	orrs	r2, r3
 80042ea:	4b4c      	ldr	r3, [pc, #304]	@ (800441c <MX_LWIP_Init+0x254>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	0619      	lsls	r1, r3, #24
 80042f0:	4b4a      	ldr	r3, [pc, #296]	@ (800441c <MX_LWIP_Init+0x254>)
 80042f2:	785b      	ldrb	r3, [r3, #1]
 80042f4:	041b      	lsls	r3, r3, #16
 80042f6:	4319      	orrs	r1, r3
 80042f8:	4b48      	ldr	r3, [pc, #288]	@ (800441c <MX_LWIP_Init+0x254>)
 80042fa:	789b      	ldrb	r3, [r3, #2]
 80042fc:	021b      	lsls	r3, r3, #8
 80042fe:	430b      	orrs	r3, r1
 8004300:	4946      	ldr	r1, [pc, #280]	@ (800441c <MX_LWIP_Init+0x254>)
 8004302:	78c9      	ldrb	r1, [r1, #3]
 8004304:	430b      	orrs	r3, r1
 8004306:	0a1b      	lsrs	r3, r3, #8
 8004308:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800430c:	431a      	orrs	r2, r3
 800430e:	4b43      	ldr	r3, [pc, #268]	@ (800441c <MX_LWIP_Init+0x254>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	0619      	lsls	r1, r3, #24
 8004314:	4b41      	ldr	r3, [pc, #260]	@ (800441c <MX_LWIP_Init+0x254>)
 8004316:	785b      	ldrb	r3, [r3, #1]
 8004318:	041b      	lsls	r3, r3, #16
 800431a:	4319      	orrs	r1, r3
 800431c:	4b3f      	ldr	r3, [pc, #252]	@ (800441c <MX_LWIP_Init+0x254>)
 800431e:	789b      	ldrb	r3, [r3, #2]
 8004320:	021b      	lsls	r3, r3, #8
 8004322:	430b      	orrs	r3, r1
 8004324:	493d      	ldr	r1, [pc, #244]	@ (800441c <MX_LWIP_Init+0x254>)
 8004326:	78c9      	ldrb	r1, [r1, #3]
 8004328:	430b      	orrs	r3, r1
 800432a:	0e1b      	lsrs	r3, r3, #24
 800432c:	4313      	orrs	r3, r2
 800432e:	4a3e      	ldr	r2, [pc, #248]	@ (8004428 <MX_LWIP_Init+0x260>)
 8004330:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004332:	4b3b      	ldr	r3, [pc, #236]	@ (8004420 <MX_LWIP_Init+0x258>)
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	061a      	lsls	r2, r3, #24
 8004338:	4b39      	ldr	r3, [pc, #228]	@ (8004420 <MX_LWIP_Init+0x258>)
 800433a:	785b      	ldrb	r3, [r3, #1]
 800433c:	041b      	lsls	r3, r3, #16
 800433e:	431a      	orrs	r2, r3
 8004340:	4b37      	ldr	r3, [pc, #220]	@ (8004420 <MX_LWIP_Init+0x258>)
 8004342:	789b      	ldrb	r3, [r3, #2]
 8004344:	021b      	lsls	r3, r3, #8
 8004346:	4313      	orrs	r3, r2
 8004348:	4a35      	ldr	r2, [pc, #212]	@ (8004420 <MX_LWIP_Init+0x258>)
 800434a:	78d2      	ldrb	r2, [r2, #3]
 800434c:	4313      	orrs	r3, r2
 800434e:	061a      	lsls	r2, r3, #24
 8004350:	4b33      	ldr	r3, [pc, #204]	@ (8004420 <MX_LWIP_Init+0x258>)
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	0619      	lsls	r1, r3, #24
 8004356:	4b32      	ldr	r3, [pc, #200]	@ (8004420 <MX_LWIP_Init+0x258>)
 8004358:	785b      	ldrb	r3, [r3, #1]
 800435a:	041b      	lsls	r3, r3, #16
 800435c:	4319      	orrs	r1, r3
 800435e:	4b30      	ldr	r3, [pc, #192]	@ (8004420 <MX_LWIP_Init+0x258>)
 8004360:	789b      	ldrb	r3, [r3, #2]
 8004362:	021b      	lsls	r3, r3, #8
 8004364:	430b      	orrs	r3, r1
 8004366:	492e      	ldr	r1, [pc, #184]	@ (8004420 <MX_LWIP_Init+0x258>)
 8004368:	78c9      	ldrb	r1, [r1, #3]
 800436a:	430b      	orrs	r3, r1
 800436c:	021b      	lsls	r3, r3, #8
 800436e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004372:	431a      	orrs	r2, r3
 8004374:	4b2a      	ldr	r3, [pc, #168]	@ (8004420 <MX_LWIP_Init+0x258>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	0619      	lsls	r1, r3, #24
 800437a:	4b29      	ldr	r3, [pc, #164]	@ (8004420 <MX_LWIP_Init+0x258>)
 800437c:	785b      	ldrb	r3, [r3, #1]
 800437e:	041b      	lsls	r3, r3, #16
 8004380:	4319      	orrs	r1, r3
 8004382:	4b27      	ldr	r3, [pc, #156]	@ (8004420 <MX_LWIP_Init+0x258>)
 8004384:	789b      	ldrb	r3, [r3, #2]
 8004386:	021b      	lsls	r3, r3, #8
 8004388:	430b      	orrs	r3, r1
 800438a:	4925      	ldr	r1, [pc, #148]	@ (8004420 <MX_LWIP_Init+0x258>)
 800438c:	78c9      	ldrb	r1, [r1, #3]
 800438e:	430b      	orrs	r3, r1
 8004390:	0a1b      	lsrs	r3, r3, #8
 8004392:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004396:	431a      	orrs	r2, r3
 8004398:	4b21      	ldr	r3, [pc, #132]	@ (8004420 <MX_LWIP_Init+0x258>)
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	0619      	lsls	r1, r3, #24
 800439e:	4b20      	ldr	r3, [pc, #128]	@ (8004420 <MX_LWIP_Init+0x258>)
 80043a0:	785b      	ldrb	r3, [r3, #1]
 80043a2:	041b      	lsls	r3, r3, #16
 80043a4:	4319      	orrs	r1, r3
 80043a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004420 <MX_LWIP_Init+0x258>)
 80043a8:	789b      	ldrb	r3, [r3, #2]
 80043aa:	021b      	lsls	r3, r3, #8
 80043ac:	430b      	orrs	r3, r1
 80043ae:	491c      	ldr	r1, [pc, #112]	@ (8004420 <MX_LWIP_Init+0x258>)
 80043b0:	78c9      	ldrb	r1, [r1, #3]
 80043b2:	430b      	orrs	r3, r1
 80043b4:	0e1b      	lsrs	r3, r3, #24
 80043b6:	4313      	orrs	r3, r2
 80043b8:	4a1c      	ldr	r2, [pc, #112]	@ (800442c <MX_LWIP_Init+0x264>)
 80043ba:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80043bc:	4b1c      	ldr	r3, [pc, #112]	@ (8004430 <MX_LWIP_Init+0x268>)
 80043be:	9302      	str	r3, [sp, #8]
 80043c0:	4b1c      	ldr	r3, [pc, #112]	@ (8004434 <MX_LWIP_Init+0x26c>)
 80043c2:	9301      	str	r3, [sp, #4]
 80043c4:	2300      	movs	r3, #0
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	4b18      	ldr	r3, [pc, #96]	@ (800442c <MX_LWIP_Init+0x264>)
 80043ca:	4a17      	ldr	r2, [pc, #92]	@ (8004428 <MX_LWIP_Init+0x260>)
 80043cc:	4915      	ldr	r1, [pc, #84]	@ (8004424 <MX_LWIP_Init+0x25c>)
 80043ce:	481a      	ldr	r0, [pc, #104]	@ (8004438 <MX_LWIP_Init+0x270>)
 80043d0:	f005 fa5a 	bl	8009888 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80043d4:	4818      	ldr	r0, [pc, #96]	@ (8004438 <MX_LWIP_Init+0x270>)
 80043d6:	f005 fc05 	bl	8009be4 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80043da:	4817      	ldr	r0, [pc, #92]	@ (8004438 <MX_LWIP_Init+0x270>)
 80043dc:	f005 fc12 	bl	8009c04 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80043e0:	4916      	ldr	r1, [pc, #88]	@ (800443c <MX_LWIP_Init+0x274>)
 80043e2:	4815      	ldr	r0, [pc, #84]	@ (8004438 <MX_LWIP_Init+0x270>)
 80043e4:	f005 fd10 	bl	8009e08 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80043e8:	2224      	movs	r2, #36	@ 0x24
 80043ea:	2100      	movs	r1, #0
 80043ec:	4814      	ldr	r0, [pc, #80]	@ (8004440 <MX_LWIP_Init+0x278>)
 80043ee:	f010 f946 	bl	801467e <memset>
  attributes.name = "EthLink";
 80043f2:	4b13      	ldr	r3, [pc, #76]	@ (8004440 <MX_LWIP_Init+0x278>)
 80043f4:	4a13      	ldr	r2, [pc, #76]	@ (8004444 <MX_LWIP_Init+0x27c>)
 80043f6:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80043f8:	4b11      	ldr	r3, [pc, #68]	@ (8004440 <MX_LWIP_Init+0x278>)
 80043fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80043fe:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8004400:	4b0f      	ldr	r3, [pc, #60]	@ (8004440 <MX_LWIP_Init+0x278>)
 8004402:	2210      	movs	r2, #16
 8004404:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8004406:	4a0e      	ldr	r2, [pc, #56]	@ (8004440 <MX_LWIP_Init+0x278>)
 8004408:	490b      	ldr	r1, [pc, #44]	@ (8004438 <MX_LWIP_Init+0x270>)
 800440a:	480f      	ldr	r0, [pc, #60]	@ (8004448 <MX_LWIP_Init+0x280>)
 800440c:	f000 fd7d 	bl	8004f0a <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004410:	bf00      	nop
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	200005e8 	.word	0x200005e8
 800441c:	200005ec 	.word	0x200005ec
 8004420:	200005f0 	.word	0x200005f0
 8004424:	200005dc 	.word	0x200005dc
 8004428:	200005e0 	.word	0x200005e0
 800442c:	200005e4 	.word	0x200005e4
 8004430:	08008c35 	.word	0x08008c35
 8004434:	0800490d 	.word	0x0800490d
 8004438:	200005a8 	.word	0x200005a8
 800443c:	0800444d 	.word	0x0800444d
 8004440:	200005f4 	.word	0x200005f4
 8004444:	08015298 	.word	0x08015298
 8004448:	08004bb1 	.word	0x08004bb1

0800444c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004468:	4b04      	ldr	r3, [pc, #16]	@ (800447c <HAL_ETH_RxCpltCallback+0x1c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f000 ffe3 	bl	8005438 <osSemaphoreRelease>
}
 8004472:	bf00      	nop
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	200050e4 	.word	0x200050e4

08004480 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004488:	4b04      	ldr	r3, [pc, #16]	@ (800449c <HAL_ETH_TxCpltCallback+0x1c>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4618      	mov	r0, r3
 800448e:	f000 ffd3 	bl	8005438 <osSemaphoreRelease>
}
 8004492:	bf00      	nop
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	200050e8 	.word	0x200050e8

080044a0 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7fd ff77 	bl	800239c <HAL_ETH_GetDMAError>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b4:	2b80      	cmp	r3, #128	@ 0x80
 80044b6:	d104      	bne.n	80044c2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80044b8:	4b04      	ldr	r3, [pc, #16]	@ (80044cc <HAL_ETH_ErrorCallback+0x2c>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 ffbb 	bl	8005438 <osSemaphoreRelease>
  }
}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	200050e4 	.word	0x200050e4

080044d0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b0aa      	sub	sp, #168	@ 0xa8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80044d8:	2300      	movs	r3, #0
 80044da:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 80044de:	2300      	movs	r3, #0
 80044e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 80044e4:	2300      	movs	r3, #0
 80044e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 80044ea:	f107 0310 	add.w	r3, r7, #16
 80044ee:	2264      	movs	r2, #100	@ 0x64
 80044f0:	2100      	movs	r1, #0
 80044f2:	4618      	mov	r0, r3
 80044f4:	f010 f8c3 	bl	801467e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80044f8:	4b89      	ldr	r3, [pc, #548]	@ (8004720 <low_level_init+0x250>)
 80044fa:	4a8a      	ldr	r2, [pc, #552]	@ (8004724 <low_level_init+0x254>)
 80044fc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80044fe:	2300      	movs	r3, #0
 8004500:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004502:	2380      	movs	r3, #128	@ 0x80
 8004504:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004506:	23e1      	movs	r3, #225	@ 0xe1
 8004508:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800450a:	2300      	movs	r3, #0
 800450c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800450e:	2300      	movs	r3, #0
 8004510:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004512:	2300      	movs	r3, #0
 8004514:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004516:	4a82      	ldr	r2, [pc, #520]	@ (8004720 <low_level_init+0x250>)
 8004518:	f107 0308 	add.w	r3, r7, #8
 800451c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800451e:	4b80      	ldr	r3, [pc, #512]	@ (8004720 <low_level_init+0x250>)
 8004520:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004524:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004526:	4b7e      	ldr	r3, [pc, #504]	@ (8004720 <low_level_init+0x250>)
 8004528:	4a7f      	ldr	r2, [pc, #508]	@ (8004728 <low_level_init+0x258>)
 800452a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800452c:	4b7c      	ldr	r3, [pc, #496]	@ (8004720 <low_level_init+0x250>)
 800452e:	4a7f      	ldr	r2, [pc, #508]	@ (800472c <low_level_init+0x25c>)
 8004530:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004532:	4b7b      	ldr	r3, [pc, #492]	@ (8004720 <low_level_init+0x250>)
 8004534:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004538:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800453a:	4879      	ldr	r0, [pc, #484]	@ (8004720 <low_level_init+0x250>)
 800453c:	f7fd f8f2 	bl	8001724 <HAL_ETH_Init>
 8004540:	4603      	mov	r3, r0
 8004542:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004546:	2238      	movs	r2, #56	@ 0x38
 8004548:	2100      	movs	r1, #0
 800454a:	4879      	ldr	r0, [pc, #484]	@ (8004730 <low_level_init+0x260>)
 800454c:	f010 f897 	bl	801467e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004550:	4b77      	ldr	r3, [pc, #476]	@ (8004730 <low_level_init+0x260>)
 8004552:	2221      	movs	r2, #33	@ 0x21
 8004554:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004556:	4b76      	ldr	r3, [pc, #472]	@ (8004730 <low_level_init+0x260>)
 8004558:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800455c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800455e:	4b74      	ldr	r3, [pc, #464]	@ (8004730 <low_level_init+0x260>)
 8004560:	2200      	movs	r2, #0
 8004562:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004564:	4873      	ldr	r0, [pc, #460]	@ (8004734 <low_level_init+0x264>)
 8004566:	f005 f849 	bl	80095fc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2206      	movs	r2, #6
 800456e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004572:	4b6b      	ldr	r3, [pc, #428]	@ (8004720 <low_level_init+0x250>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	781a      	ldrb	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800457e:	4b68      	ldr	r3, [pc, #416]	@ (8004720 <low_level_init+0x250>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	785a      	ldrb	r2, [r3, #1]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800458a:	4b65      	ldr	r3, [pc, #404]	@ (8004720 <low_level_init+0x250>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	789a      	ldrb	r2, [r3, #2]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004596:	4b62      	ldr	r3, [pc, #392]	@ (8004720 <low_level_init+0x250>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	78da      	ldrb	r2, [r3, #3]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80045a2:	4b5f      	ldr	r3, [pc, #380]	@ (8004720 <low_level_init+0x250>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	791a      	ldrb	r2, [r3, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80045ae:	4b5c      	ldr	r3, [pc, #368]	@ (8004720 <low_level_init+0x250>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	795a      	ldrb	r2, [r3, #5]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80045c0:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80045c8:	f043 030a 	orr.w	r3, r3, #10
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 80045d4:	2200      	movs	r2, #0
 80045d6:	2100      	movs	r1, #0
 80045d8:	2001      	movs	r0, #1
 80045da:	f000 fe51 	bl	8005280 <osSemaphoreNew>
 80045de:	4603      	mov	r3, r0
 80045e0:	4a55      	ldr	r2, [pc, #340]	@ (8004738 <low_level_init+0x268>)
 80045e2:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 80045e4:	2200      	movs	r2, #0
 80045e6:	2100      	movs	r1, #0
 80045e8:	2001      	movs	r0, #1
 80045ea:	f000 fe49 	bl	8005280 <osSemaphoreNew>
 80045ee:	4603      	mov	r3, r0
 80045f0:	4a52      	ldr	r2, [pc, #328]	@ (800473c <low_level_init+0x26c>)
 80045f2:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80045f4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80045f8:	2224      	movs	r2, #36	@ 0x24
 80045fa:	2100      	movs	r1, #0
 80045fc:	4618      	mov	r0, r3
 80045fe:	f010 f83e 	bl	801467e <memset>
  attributes.name = "EthIf";
 8004602:	4b4f      	ldr	r3, [pc, #316]	@ (8004740 <low_level_init+0x270>)
 8004604:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004606:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 800460a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800460e:	2330      	movs	r3, #48	@ 0x30
 8004610:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8004614:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8004618:	461a      	mov	r2, r3
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	4849      	ldr	r0, [pc, #292]	@ (8004744 <low_level_init+0x274>)
 800461e:	f000 fc74 	bl	8004f0a <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8004622:	4949      	ldr	r1, [pc, #292]	@ (8004748 <low_level_init+0x278>)
 8004624:	4849      	ldr	r0, [pc, #292]	@ (800474c <low_level_init+0x27c>)
 8004626:	f7fc fe2e 	bl	8001286 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  if(DP83848_Init(&DP83848) != DP83848_STATUS_OK)
 800462a:	4848      	ldr	r0, [pc, #288]	@ (800474c <low_level_init+0x27c>)
 800462c:	f7fc fe5d 	bl	80012ea <DP83848_Init>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d006      	beq.n	8004644 <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f005 fbb6 	bl	8009da8 <netif_set_link_down>
    netif_set_down(netif);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f005 fb4d 	bl	8009cdc <netif_set_down>
 8004642:	e06a      	b.n	800471a <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8004644:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8004648:	2b00      	cmp	r3, #0
 800464a:	d164      	bne.n	8004716 <low_level_init+0x246>
  {
    PHYLinkState = DP83848_GetLinkState(&DP83848);
 800464c:	483f      	ldr	r0, [pc, #252]	@ (800474c <low_level_init+0x27c>)
 800464e:	f7fc fe99 	bl	8001384 <DP83848_GetLinkState>
 8004652:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= DP83848_STATUS_LINK_DOWN)
 8004656:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800465a:	2b01      	cmp	r3, #1
 800465c:	dc06      	bgt.n	800466c <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f005 fba2 	bl	8009da8 <netif_set_link_down>
      netif_set_down(netif);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f005 fb39 	bl	8009cdc <netif_set_down>
 800466a:	e056      	b.n	800471a <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800466c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004670:	3b02      	subs	r3, #2
 8004672:	2b03      	cmp	r3, #3
 8004674:	d82a      	bhi.n	80046cc <low_level_init+0x1fc>
 8004676:	a201      	add	r2, pc, #4	@ (adr r2, 800467c <low_level_init+0x1ac>)
 8004678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467c:	0800468d 	.word	0x0800468d
 8004680:	0800469f 	.word	0x0800469f
 8004684:	080046af 	.word	0x080046af
 8004688:	080046bf 	.word	0x080046bf
      {
      case DP83848_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800468c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004690:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8004694:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004698:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800469c:	e01f      	b.n	80046de <low_level_init+0x20e>
      case DP83848_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800469e:	2300      	movs	r3, #0
 80046a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 80046a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80046a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80046ac:	e017      	b.n	80046de <low_level_init+0x20e>
      case DP83848_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 80046ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80046b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 80046b6:	2300      	movs	r3, #0
 80046b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80046bc:	e00f      	b.n	80046de <low_level_init+0x20e>
      case DP83848_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 80046be:	2300      	movs	r3, #0
 80046c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 80046c4:	2300      	movs	r3, #0
 80046c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80046ca:	e008      	b.n	80046de <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 80046cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80046d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 80046d4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80046d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80046dc:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80046de:	f107 0310 	add.w	r3, r7, #16
 80046e2:	4619      	mov	r1, r3
 80046e4:	480e      	ldr	r0, [pc, #56]	@ (8004720 <low_level_init+0x250>)
 80046e6:	f7fd fd05 	bl	80020f4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80046ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80046ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 80046f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80046f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80046f6:	f107 0310 	add.w	r3, r7, #16
 80046fa:	4619      	mov	r1, r3
 80046fc:	4808      	ldr	r0, [pc, #32]	@ (8004720 <low_level_init+0x250>)
 80046fe:	f7fd fdf0 	bl	80022e2 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8004702:	4807      	ldr	r0, [pc, #28]	@ (8004720 <low_level_init+0x250>)
 8004704:	f7fd f8aa 	bl	800185c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f005 fa7b 	bl	8009c04 <netif_set_up>
    netif_set_link_up(netif);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f005 fb16 	bl	8009d40 <netif_set_link_up>
 8004714:	e001      	b.n	800471a <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 8004716:	f7fc fbb5 	bl	8000e84 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800471a:	37a8      	adds	r7, #168	@ 0xa8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	200050ec 	.word	0x200050ec
 8004724:	40028000 	.word	0x40028000
 8004728:	20005044 	.word	0x20005044
 800472c:	20004fa4 	.word	0x20004fa4
 8004730:	2000519c 	.word	0x2000519c
 8004734:	08017ac4 	.word	0x08017ac4
 8004738:	200050e4 	.word	0x200050e4
 800473c:	200050e8 	.word	0x200050e8
 8004740:	080152a0 	.word	0x080152a0
 8004744:	080048b9 	.word	0x080048b9
 8004748:	2000000c 	.word	0x2000000c
 800474c:	200051d4 	.word	0x200051d4

08004750 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b092      	sub	sp, #72	@ 0x48
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800475e:	2300      	movs	r3, #0
 8004760:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004768:	f107 030c 	add.w	r3, r7, #12
 800476c:	2230      	movs	r2, #48	@ 0x30
 800476e:	2100      	movs	r1, #0
 8004770:	4618      	mov	r0, r3
 8004772:	f00f ff84 	bl	801467e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004776:	f107 030c 	add.w	r3, r7, #12
 800477a:	2230      	movs	r2, #48	@ 0x30
 800477c:	2100      	movs	r1, #0
 800477e:	4618      	mov	r0, r3
 8004780:	f00f ff7d 	bl	801467e <memset>

  for(q = p; q != NULL; q = q->next)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	643b      	str	r3, [r7, #64]	@ 0x40
 8004788:	e045      	b.n	8004816 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800478a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800478c:	2b03      	cmp	r3, #3
 800478e:	d902      	bls.n	8004796 <low_level_output+0x46>
      return ERR_IF;
 8004790:	f06f 030b 	mvn.w	r3, #11
 8004794:	e06c      	b.n	8004870 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 8004796:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004798:	6859      	ldr	r1, [r3, #4]
 800479a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800479c:	4613      	mov	r3, r2
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	4413      	add	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	3348      	adds	r3, #72	@ 0x48
 80047a6:	443b      	add	r3, r7
 80047a8:	3b3c      	subs	r3, #60	@ 0x3c
 80047aa:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80047ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047ae:	895b      	ldrh	r3, [r3, #10]
 80047b0:	4619      	mov	r1, r3
 80047b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047b4:	4613      	mov	r3, r2
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	4413      	add	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	3348      	adds	r3, #72	@ 0x48
 80047be:	443b      	add	r3, r7
 80047c0:	3b38      	subs	r3, #56	@ 0x38
 80047c2:	6019      	str	r1, [r3, #0]

    if(i>0)
 80047c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d011      	beq.n	80047ee <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80047ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047cc:	1e5a      	subs	r2, r3, #1
 80047ce:	f107 000c 	add.w	r0, r7, #12
 80047d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80047d4:	460b      	mov	r3, r1
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	440b      	add	r3, r1
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	18c1      	adds	r1, r0, r3
 80047de:	4613      	mov	r3, r2
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	4413      	add	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	3348      	adds	r3, #72	@ 0x48
 80047e8:	443b      	add	r3, r7
 80047ea:	3b34      	subs	r3, #52	@ 0x34
 80047ec:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80047ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d109      	bne.n	800480a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80047f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047f8:	4613      	mov	r3, r2
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	4413      	add	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	3348      	adds	r3, #72	@ 0x48
 8004802:	443b      	add	r3, r7
 8004804:	3b34      	subs	r3, #52	@ 0x34
 8004806:	2200      	movs	r2, #0
 8004808:	601a      	str	r2, [r3, #0]
    }

    i++;
 800480a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800480c:	3301      	adds	r3, #1
 800480e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8004810:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	643b      	str	r3, [r7, #64]	@ 0x40
 8004816:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1b6      	bne.n	800478a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	891b      	ldrh	r3, [r3, #8]
 8004820:	461a      	mov	r2, r3
 8004822:	4b15      	ldr	r3, [pc, #84]	@ (8004878 <low_level_output+0x128>)
 8004824:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004826:	4a14      	ldr	r2, [pc, #80]	@ (8004878 <low_level_output+0x128>)
 8004828:	f107 030c 	add.w	r3, r7, #12
 800482c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800482e:	4a12      	ldr	r2, [pc, #72]	@ (8004878 <low_level_output+0x128>)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8004834:	6838      	ldr	r0, [r7, #0]
 8004836:	f005 ff73 	bl	800a720 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 800483a:	490f      	ldr	r1, [pc, #60]	@ (8004878 <low_level_output+0x128>)
 800483c:	480f      	ldr	r0, [pc, #60]	@ (800487c <low_level_output+0x12c>)
 800483e:	f7fd f8fc 	bl	8001a3a <HAL_ETH_Transmit_IT>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10e      	bne.n	8004866 <low_level_output+0x116>
    while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8004848:	bf00      	nop
 800484a:	4b0d      	ldr	r3, [pc, #52]	@ (8004880 <low_level_output+0x130>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f04f 31ff 	mov.w	r1, #4294967295
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fd9e 	bl	8005394 <osSemaphoreAcquire>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1f5      	bne.n	800484a <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 800485e:	4807      	ldr	r0, [pc, #28]	@ (800487c <low_level_output+0x12c>)
 8004860:	f7fd fa8a 	bl	8001d78 <HAL_ETH_ReleaseTxPacket>
 8004864:	e002      	b.n	800486c <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8004866:	6838      	ldr	r0, [r7, #0]
 8004868:	f005 feb4 	bl	800a5d4 <pbuf_free>
  }

  return errval;
 800486c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8004870:	4618      	mov	r0, r3
 8004872:	3748      	adds	r7, #72	@ 0x48
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	2000519c 	.word	0x2000519c
 800487c:	200050ec 	.word	0x200050ec
 8004880:	200050e8 	.word	0x200050e8

08004884 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004890:	4b07      	ldr	r3, [pc, #28]	@ (80048b0 <low_level_input+0x2c>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d105      	bne.n	80048a4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004898:	f107 030c 	add.w	r3, r7, #12
 800489c:	4619      	mov	r1, r3
 800489e:	4805      	ldr	r0, [pc, #20]	@ (80048b4 <low_level_input+0x30>)
 80048a0:	f7fd f927 	bl	8001af2 <HAL_ETH_ReadData>
  }

  return p;
 80048a4:	68fb      	ldr	r3, [r7, #12]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20004fa0 	.word	0x20004fa0
 80048b4:	200050ec 	.word	0x200050ec

080048b8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80048c0:	2300      	movs	r3, #0
 80048c2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80048c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004908 <ethernetif_input+0x50>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f04f 31ff 	mov.w	r1, #4294967295
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 fd5f 	bl	8005394 <osSemaphoreAcquire>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1f5      	bne.n	80048c8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80048dc:	68b8      	ldr	r0, [r7, #8]
 80048de:	f7ff ffd1 	bl	8004884 <low_level_input>
 80048e2:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	68b9      	ldr	r1, [r7, #8]
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	4798      	blx	r3
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d002      	beq.n	8004900 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f005 fe6a 	bl	800a5d4 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1ea      	bne.n	80048dc <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004906:	e7df      	b.n	80048c8 <ethernetif_input+0x10>
 8004908:	200050e4 	.word	0x200050e4

0800490c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <ethernetif_init+0x1c>
 800491a:	4b0e      	ldr	r3, [pc, #56]	@ (8004954 <ethernetif_init+0x48>)
 800491c:	f44f 72f6 	mov.w	r2, #492	@ 0x1ec
 8004920:	490d      	ldr	r1, [pc, #52]	@ (8004958 <ethernetif_init+0x4c>)
 8004922:	480e      	ldr	r0, [pc, #56]	@ (800495c <ethernetif_init+0x50>)
 8004924:	f00f fe46 	bl	80145b4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2273      	movs	r2, #115	@ 0x73
 800492c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2274      	movs	r2, #116	@ 0x74
 8004934:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a09      	ldr	r2, [pc, #36]	@ (8004960 <ethernetif_init+0x54>)
 800493c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a08      	ldr	r2, [pc, #32]	@ (8004964 <ethernetif_init+0x58>)
 8004942:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7ff fdc3 	bl	80044d0 <low_level_init>

  return ERR_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	080152a8 	.word	0x080152a8
 8004958:	080152c4 	.word	0x080152c4
 800495c:	080152d4 	.word	0x080152d4
 8004960:	08010945 	.word	0x08010945
 8004964:	08004751 	.word	0x08004751

08004968 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004974:	68f9      	ldr	r1, [r7, #12]
 8004976:	4809      	ldr	r0, [pc, #36]	@ (800499c <pbuf_free_custom+0x34>)
 8004978:	f004 ff30 	bl	80097dc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800497c:	4b08      	ldr	r3, [pc, #32]	@ (80049a0 <pbuf_free_custom+0x38>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d107      	bne.n	8004994 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004984:	4b06      	ldr	r3, [pc, #24]	@ (80049a0 <pbuf_free_custom+0x38>)
 8004986:	2200      	movs	r2, #0
 8004988:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800498a:	4b06      	ldr	r3, [pc, #24]	@ (80049a4 <pbuf_free_custom+0x3c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4618      	mov	r0, r3
 8004990:	f000 fd52 	bl	8005438 <osSemaphoreRelease>
  }
}
 8004994:	bf00      	nop
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	08017ac4 	.word	0x08017ac4
 80049a0:	20004fa0 	.word	0x20004fa0
 80049a4:	200050e4 	.word	0x200050e4

080049a8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80049ac:	f7fc fda8 	bl	8001500 <HAL_GetTick>
 80049b0:	4603      	mov	r3, r0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	bd80      	pop	{r7, pc}
	...

080049b8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08e      	sub	sp, #56	@ 0x38
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	605a      	str	r2, [r3, #4]
 80049ca:	609a      	str	r2, [r3, #8]
 80049cc:	60da      	str	r2, [r3, #12]
 80049ce:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a4a      	ldr	r2, [pc, #296]	@ (8004b00 <HAL_ETH_MspInit+0x148>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	f040 808d 	bne.w	8004af6 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80049dc:	2300      	movs	r3, #0
 80049de:	623b      	str	r3, [r7, #32]
 80049e0:	4b48      	ldr	r3, [pc, #288]	@ (8004b04 <HAL_ETH_MspInit+0x14c>)
 80049e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e4:	4a47      	ldr	r2, [pc, #284]	@ (8004b04 <HAL_ETH_MspInit+0x14c>)
 80049e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80049ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80049ec:	4b45      	ldr	r3, [pc, #276]	@ (8004b04 <HAL_ETH_MspInit+0x14c>)
 80049ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049f4:	623b      	str	r3, [r7, #32]
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	2300      	movs	r3, #0
 80049fa:	61fb      	str	r3, [r7, #28]
 80049fc:	4b41      	ldr	r3, [pc, #260]	@ (8004b04 <HAL_ETH_MspInit+0x14c>)
 80049fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a00:	4a40      	ldr	r2, [pc, #256]	@ (8004b04 <HAL_ETH_MspInit+0x14c>)
 8004a02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a06:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a08:	4b3e      	ldr	r3, [pc, #248]	@ (8004b04 <HAL_ETH_MspInit+0x14c>)
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a10:	61fb      	str	r3, [r7, #28]
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	2300      	movs	r3, #0
 8004a16:	61bb      	str	r3, [r7, #24]
 8004a18:	4b3a      	ldr	r3, [pc, #232]	@ (8004b04 <HAL_ETH_MspInit+0x14c>)
 8004a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1c:	4a39      	ldr	r2, [pc, #228]	@ (8004b04 <HAL_ETH_MspInit+0x14c>)
 8004a1e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a22:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a24:	4b37      	ldr	r3, [pc, #220]	@ (8004b04 <HAL_ETH_MspInit+0x14c>)
 8004a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a2c:	61bb      	str	r3, [r7, #24]
 8004a2e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a30:	2300      	movs	r3, #0
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	4b33      	ldr	r3, [pc, #204]	@ (8004b04 <HAL_ETH_MspInit+0x14c>)
 8004a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a38:	4a32      	ldr	r2, [pc, #200]	@ (8004b04 <HAL_ETH_MspInit+0x14c>)
 8004a3a:	f043 0304 	orr.w	r3, r3, #4
 8004a3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a40:	4b30      	ldr	r3, [pc, #192]	@ (8004b04 <HAL_ETH_MspInit+0x14c>)
 8004a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	617b      	str	r3, [r7, #20]
 8004a4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	613b      	str	r3, [r7, #16]
 8004a50:	4b2c      	ldr	r3, [pc, #176]	@ (8004b04 <HAL_ETH_MspInit+0x14c>)
 8004a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a54:	4a2b      	ldr	r2, [pc, #172]	@ (8004b04 <HAL_ETH_MspInit+0x14c>)
 8004a56:	f043 0301 	orr.w	r3, r3, #1
 8004a5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a5c:	4b29      	ldr	r3, [pc, #164]	@ (8004b04 <HAL_ETH_MspInit+0x14c>)
 8004a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	613b      	str	r3, [r7, #16]
 8004a66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	4b25      	ldr	r3, [pc, #148]	@ (8004b04 <HAL_ETH_MspInit+0x14c>)
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a70:	4a24      	ldr	r2, [pc, #144]	@ (8004b04 <HAL_ETH_MspInit+0x14c>)
 8004a72:	f043 0302 	orr.w	r3, r3, #2
 8004a76:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a78:	4b22      	ldr	r3, [pc, #136]	@ (8004b04 <HAL_ETH_MspInit+0x14c>)
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004a84:	2332      	movs	r3, #50	@ 0x32
 8004a86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a88:	2302      	movs	r3, #2
 8004a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a90:	2303      	movs	r3, #3
 8004a92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004a94:	230b      	movs	r3, #11
 8004a96:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	481a      	ldr	r0, [pc, #104]	@ (8004b08 <HAL_ETH_MspInit+0x150>)
 8004aa0:	f7fe f8aa 	bl	8002bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004aa4:	2386      	movs	r3, #134	@ 0x86
 8004aa6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aac:	2300      	movs	r3, #0
 8004aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004ab4:	230b      	movs	r3, #11
 8004ab6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ab8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004abc:	4619      	mov	r1, r3
 8004abe:	4813      	ldr	r0, [pc, #76]	@ (8004b0c <HAL_ETH_MspInit+0x154>)
 8004ac0:	f7fe f89a 	bl	8002bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004ac4:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8004ac8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aca:	2302      	movs	r3, #2
 8004acc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004ad6:	230b      	movs	r3, #11
 8004ad8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ada:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ade:	4619      	mov	r1, r3
 8004ae0:	480b      	ldr	r0, [pc, #44]	@ (8004b10 <HAL_ETH_MspInit+0x158>)
 8004ae2:	f7fe f889 	bl	8002bf8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	2105      	movs	r1, #5
 8004aea:	203d      	movs	r0, #61	@ 0x3d
 8004aec:	f7fc fdf0 	bl	80016d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004af0:	203d      	movs	r0, #61	@ 0x3d
 8004af2:	f7fc fe09 	bl	8001708 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004af6:	bf00      	nop
 8004af8:	3738      	adds	r7, #56	@ 0x38
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	40028000 	.word	0x40028000
 8004b04:	40023800 	.word	0x40023800
 8004b08:	40020800 	.word	0x40020800
 8004b0c:	40020000 	.word	0x40020000
 8004b10:	40020400 	.word	0x40020400

08004b14 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004b18:	4802      	ldr	r0, [pc, #8]	@ (8004b24 <ETH_PHY_IO_Init+0x10>)
 8004b1a:	f7fd fbfd 	bl	8002318 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	200050ec 	.word	0x200050ec

08004b28 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
  return 0;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	68f9      	ldr	r1, [r7, #12]
 8004b4a:	4807      	ldr	r0, [pc, #28]	@ (8004b68 <ETH_PHY_IO_ReadReg+0x30>)
 8004b4c:	f7fd fa3e 	bl	8001fcc <HAL_ETH_ReadPHYRegister>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004b56:	f04f 33ff 	mov.w	r3, #4294967295
 8004b5a:	e000      	b.n	8004b5e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	200050ec 	.word	0x200050ec

08004b6c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	68f9      	ldr	r1, [r7, #12]
 8004b7e:	4807      	ldr	r0, [pc, #28]	@ (8004b9c <ETH_PHY_IO_WriteReg+0x30>)
 8004b80:	f7fd fa6f 	bl	8002062 <HAL_ETH_WritePHYRegister>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b8e:	e000      	b.n	8004b92 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	200050ec 	.word	0x200050ec

08004ba0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004ba4:	f7fc fcac 	bl	8001500 <HAL_GetTick>
 8004ba8:	4603      	mov	r3, r0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b0a0      	sub	sp, #128	@ 0x80
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004bb8:	f107 0308 	add.w	r3, r7, #8
 8004bbc:	2264      	movs	r2, #100	@ 0x64
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f00f fd5c 	bl	801467e <memset>
  int32_t PHYLinkState = 0;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004bce:	2300      	movs	r3, #0
 8004bd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8004bda:	483a      	ldr	r0, [pc, #232]	@ (8004cc4 <ethernet_link_thread+0x114>)
 8004bdc:	f7fc fbd2 	bl	8001384 <DP83848_GetLinkState>
 8004be0:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8004be2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004be4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004be8:	089b      	lsrs	r3, r3, #2
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00c      	beq.n	8004c0e <ethernet_link_thread+0x5e>
 8004bf4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	dc09      	bgt.n	8004c0e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8004bfa:	4833      	ldr	r0, [pc, #204]	@ (8004cc8 <ethernet_link_thread+0x118>)
 8004bfc:	f7fc fe9e 	bl	800193c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004c00:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004c02:	f005 f86b 	bl	8009cdc <netif_set_down>
    netif_set_link_down(netif);
 8004c06:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004c08:	f005 f8ce 	bl	8009da8 <netif_set_link_down>
 8004c0c:	e055      	b.n	8004cba <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 8004c0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c10:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d14e      	bne.n	8004cba <ethernet_link_thread+0x10a>
 8004c1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	dd4b      	ble.n	8004cba <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8004c22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c24:	3b02      	subs	r3, #2
 8004c26:	2b03      	cmp	r3, #3
 8004c28:	d82a      	bhi.n	8004c80 <ethernet_link_thread+0xd0>
 8004c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c30 <ethernet_link_thread+0x80>)
 8004c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c30:	08004c41 	.word	0x08004c41
 8004c34:	08004c53 	.word	0x08004c53
 8004c38:	08004c63 	.word	0x08004c63
 8004c3c:	08004c73 	.word	0x08004c73
    {
    case DP83848_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004c40:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004c44:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8004c46:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004c4a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004c50:	e017      	b.n	8004c82 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004c52:	2300      	movs	r3, #0
 8004c54:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8004c56:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004c5a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004c60:	e00f      	b.n	8004c82 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004c62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004c66:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004c70:	e007      	b.n	8004c82 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004c72:	2300      	movs	r3, #0
 8004c74:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8004c76:	2300      	movs	r3, #0
 8004c78:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004c7e:	e000      	b.n	8004c82 <ethernet_link_thread+0xd2>
    default:
      break;
 8004c80:	bf00      	nop
    }

    if(linkchanged)
 8004c82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d018      	beq.n	8004cba <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004c88:	f107 0308 	add.w	r3, r7, #8
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	480e      	ldr	r0, [pc, #56]	@ (8004cc8 <ethernet_link_thread+0x118>)
 8004c90:	f7fd fa30 	bl	80020f4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004c94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c96:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8004c98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c9a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004c9c:	f107 0308 	add.w	r3, r7, #8
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4809      	ldr	r0, [pc, #36]	@ (8004cc8 <ethernet_link_thread+0x118>)
 8004ca4:	f7fd fb1d 	bl	80022e2 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8004ca8:	4807      	ldr	r0, [pc, #28]	@ (8004cc8 <ethernet_link_thread+0x118>)
 8004caa:	f7fc fdd7 	bl	800185c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8004cae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004cb0:	f004 ffa8 	bl	8009c04 <netif_set_up>
      netif_set_link_up(netif);
 8004cb4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004cb6:	f005 f843 	bl	8009d40 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8004cba:	2064      	movs	r0, #100	@ 0x64
 8004cbc:	f000 f9b7 	bl	800502e <osDelay>
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8004cc0:	e78b      	b.n	8004bda <ethernet_link_thread+0x2a>
 8004cc2:	bf00      	nop
 8004cc4:	200051d4 	.word	0x200051d4
 8004cc8:	200050ec 	.word	0x200050ec

08004ccc <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af02      	add	r7, sp, #8
 8004cd2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004cd4:	4812      	ldr	r0, [pc, #72]	@ (8004d20 <HAL_ETH_RxAllocateCallback+0x54>)
 8004cd6:	f004 fd0d 	bl	80096f4 <memp_malloc_pool>
 8004cda:	60f8      	str	r0, [r7, #12]
  if (p)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d014      	beq.n	8004d0c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f103 0220 	add.w	r2, r3, #32
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4a0d      	ldr	r2, [pc, #52]	@ (8004d24 <HAL_ETH_RxAllocateCallback+0x58>)
 8004cf0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004cfa:	9201      	str	r2, [sp, #4]
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2241      	movs	r2, #65	@ 0x41
 8004d02:	2100      	movs	r1, #0
 8004d04:	2000      	movs	r0, #0
 8004d06:	f005 faab 	bl	800a260 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004d0a:	e005      	b.n	8004d18 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004d0c:	4b06      	ldr	r3, [pc, #24]	@ (8004d28 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004d0e:	2201      	movs	r2, #1
 8004d10:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]
}
 8004d18:	bf00      	nop
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	08017ac4 	.word	0x08017ac4
 8004d24:	08004969 	.word	0x08004969
 8004d28:	20004fa0 	.word	0x20004fa0

08004d2c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b089      	sub	sp, #36	@ 0x24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
 8004d38:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004d42:	2300      	movs	r3, #0
 8004d44:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	3b20      	subs	r3, #32
 8004d4a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	2200      	movs	r2, #0
 8004d56:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	887a      	ldrh	r2, [r7, #2]
 8004d5c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d103      	bne.n	8004d6e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	69fa      	ldr	r2, [r7, #28]
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	e003      	b.n	8004d76 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69fa      	ldr	r2, [r7, #28]
 8004d74:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	69fa      	ldr	r2, [r7, #28]
 8004d7a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	61fb      	str	r3, [r7, #28]
 8004d82:	e009      	b.n	8004d98 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	891a      	ldrh	r2, [r3, #8]
 8004d88:	887b      	ldrh	r3, [r7, #2]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	61fb      	str	r3, [r7, #28]
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1f2      	bne.n	8004d84 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004d9e:	bf00      	nop
 8004da0:	bf00      	nop
 8004da2:	3724      	adds	r7, #36	@ 0x24
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f005 fc0d 	bl	800a5d4 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8004dba:	bf00      	nop
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <__NVIC_SetPriority>:
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	4603      	mov	r3, r0
 8004dcc:	6039      	str	r1, [r7, #0]
 8004dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	db0a      	blt.n	8004dee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	490c      	ldr	r1, [pc, #48]	@ (8004e10 <__NVIC_SetPriority+0x4c>)
 8004dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de2:	0112      	lsls	r2, r2, #4
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	440b      	add	r3, r1
 8004de8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004dec:	e00a      	b.n	8004e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	4908      	ldr	r1, [pc, #32]	@ (8004e14 <__NVIC_SetPriority+0x50>)
 8004df4:	79fb      	ldrb	r3, [r7, #7]
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	3b04      	subs	r3, #4
 8004dfc:	0112      	lsls	r2, r2, #4
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	440b      	add	r3, r1
 8004e02:	761a      	strb	r2, [r3, #24]
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	e000e100 	.word	0xe000e100
 8004e14:	e000ed00 	.word	0xe000ed00

08004e18 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004e1c:	4b05      	ldr	r3, [pc, #20]	@ (8004e34 <SysTick_Handler+0x1c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004e20:	f002 fc98 	bl	8007754 <xTaskGetSchedulerState>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d001      	beq.n	8004e2e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004e2a:	f003 fb8d 	bl	8008548 <xPortSysTickHandler>
  }
}
 8004e2e:	bf00      	nop
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	e000e010 	.word	0xe000e010

08004e38 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	f06f 0004 	mvn.w	r0, #4
 8004e42:	f7ff ffbf 	bl	8004dc4 <__NVIC_SetPriority>
#endif
}
 8004e46:	bf00      	nop
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e52:	f3ef 8305 	mrs	r3, IPSR
 8004e56:	603b      	str	r3, [r7, #0]
  return(result);
 8004e58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004e5e:	f06f 0305 	mvn.w	r3, #5
 8004e62:	607b      	str	r3, [r7, #4]
 8004e64:	e00c      	b.n	8004e80 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004e66:	4b0a      	ldr	r3, [pc, #40]	@ (8004e90 <osKernelInitialize+0x44>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d105      	bne.n	8004e7a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004e6e:	4b08      	ldr	r3, [pc, #32]	@ (8004e90 <osKernelInitialize+0x44>)
 8004e70:	2201      	movs	r2, #1
 8004e72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004e74:	2300      	movs	r3, #0
 8004e76:	607b      	str	r3, [r7, #4]
 8004e78:	e002      	b.n	8004e80 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004e80:	687b      	ldr	r3, [r7, #4]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	200051f4 	.word	0x200051f4

08004e94 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e9a:	f3ef 8305 	mrs	r3, IPSR
 8004e9e:	603b      	str	r3, [r7, #0]
  return(result);
 8004ea0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <osKernelStart+0x1a>
    stat = osErrorISR;
 8004ea6:	f06f 0305 	mvn.w	r3, #5
 8004eaa:	607b      	str	r3, [r7, #4]
 8004eac:	e010      	b.n	8004ed0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004eae:	4b0b      	ldr	r3, [pc, #44]	@ (8004edc <osKernelStart+0x48>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d109      	bne.n	8004eca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004eb6:	f7ff ffbf 	bl	8004e38 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004eba:	4b08      	ldr	r3, [pc, #32]	@ (8004edc <osKernelStart+0x48>)
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004ec0:	f001 ffd8 	bl	8006e74 <vTaskStartScheduler>
      stat = osOK;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	607b      	str	r3, [r7, #4]
 8004ec8:	e002      	b.n	8004ed0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004eca:	f04f 33ff 	mov.w	r3, #4294967295
 8004ece:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ed0:	687b      	ldr	r3, [r7, #4]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	200051f4 	.word	0x200051f4

08004ee0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ee6:	f3ef 8305 	mrs	r3, IPSR
 8004eea:	603b      	str	r3, [r7, #0]
  return(result);
 8004eec:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8004ef2:	f002 f8e3 	bl	80070bc <xTaskGetTickCountFromISR>
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	e002      	b.n	8004f00 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8004efa:	f002 f8cf 	bl	800709c <xTaskGetTickCount>
 8004efe:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8004f00:	687b      	ldr	r3, [r7, #4]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b08e      	sub	sp, #56	@ 0x38
 8004f0e:	af04      	add	r7, sp, #16
 8004f10:	60f8      	str	r0, [r7, #12]
 8004f12:	60b9      	str	r1, [r7, #8]
 8004f14:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004f16:	2300      	movs	r3, #0
 8004f18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f1a:	f3ef 8305 	mrs	r3, IPSR
 8004f1e:	617b      	str	r3, [r7, #20]
  return(result);
 8004f20:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d17e      	bne.n	8005024 <osThreadNew+0x11a>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d07b      	beq.n	8005024 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004f2c:	2380      	movs	r3, #128	@ 0x80
 8004f2e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004f30:	2318      	movs	r3, #24
 8004f32:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004f34:	2300      	movs	r3, #0
 8004f36:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004f38:	f04f 33ff 	mov.w	r3, #4294967295
 8004f3c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d045      	beq.n	8004fd0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <osThreadNew+0x48>
        name = attr->name;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d008      	beq.n	8004f78 <osThreadNew+0x6e>
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	2b38      	cmp	r3, #56	@ 0x38
 8004f6a:	d805      	bhi.n	8004f78 <osThreadNew+0x6e>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d001      	beq.n	8004f7c <osThreadNew+0x72>
        return (NULL);
 8004f78:	2300      	movs	r3, #0
 8004f7a:	e054      	b.n	8005026 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	089b      	lsrs	r3, r3, #2
 8004f8a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00e      	beq.n	8004fb2 <osThreadNew+0xa8>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	2b5b      	cmp	r3, #91	@ 0x5b
 8004f9a:	d90a      	bls.n	8004fb2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d006      	beq.n	8004fb2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <osThreadNew+0xa8>
        mem = 1;
 8004fac:	2301      	movs	r3, #1
 8004fae:	61bb      	str	r3, [r7, #24]
 8004fb0:	e010      	b.n	8004fd4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10c      	bne.n	8004fd4 <osThreadNew+0xca>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d108      	bne.n	8004fd4 <osThreadNew+0xca>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d104      	bne.n	8004fd4 <osThreadNew+0xca>
          mem = 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	61bb      	str	r3, [r7, #24]
 8004fce:	e001      	b.n	8004fd4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d110      	bne.n	8004ffc <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004fe2:	9202      	str	r2, [sp, #8]
 8004fe4:	9301      	str	r3, [sp, #4]
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	6a3a      	ldr	r2, [r7, #32]
 8004fee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f001 fd63 	bl	8006abc <xTaskCreateStatic>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	613b      	str	r3, [r7, #16]
 8004ffa:	e013      	b.n	8005024 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d110      	bne.n	8005024 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	b29a      	uxth	r2, r3
 8005006:	f107 0310 	add.w	r3, r7, #16
 800500a:	9301      	str	r3, [sp, #4]
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f001 fdb1 	bl	8006b7c <xTaskCreate>
 800501a:	4603      	mov	r3, r0
 800501c:	2b01      	cmp	r3, #1
 800501e:	d001      	beq.n	8005024 <osThreadNew+0x11a>
            hTask = NULL;
 8005020:	2300      	movs	r3, #0
 8005022:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005024:	693b      	ldr	r3, [r7, #16]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3728      	adds	r7, #40	@ 0x28
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800502e:	b580      	push	{r7, lr}
 8005030:	b084      	sub	sp, #16
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005036:	f3ef 8305 	mrs	r3, IPSR
 800503a:	60bb      	str	r3, [r7, #8]
  return(result);
 800503c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <osDelay+0x1c>
    stat = osErrorISR;
 8005042:	f06f 0305 	mvn.w	r3, #5
 8005046:	60fb      	str	r3, [r7, #12]
 8005048:	e007      	b.n	800505a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800504a:	2300      	movs	r3, #0
 800504c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <osDelay+0x2c>
      vTaskDelay(ticks);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f001 fed7 	bl	8006e08 <vTaskDelay>
    }
  }

  return (stat);
 800505a:	68fb      	ldr	r3, [r7, #12]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005064:	b580      	push	{r7, lr}
 8005066:	b088      	sub	sp, #32
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800506c:	2300      	movs	r3, #0
 800506e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005070:	f3ef 8305 	mrs	r3, IPSR
 8005074:	60bb      	str	r3, [r7, #8]
  return(result);
 8005076:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005078:	2b00      	cmp	r3, #0
 800507a:	d174      	bne.n	8005166 <osMutexNew+0x102>
    if (attr != NULL) {
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <osMutexNew+0x26>
      type = attr->attr_bits;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	61bb      	str	r3, [r7, #24]
 8005088:	e001      	b.n	800508e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <osMutexNew+0x3a>
      rmtx = 1U;
 8005098:	2301      	movs	r3, #1
 800509a:	617b      	str	r3, [r7, #20]
 800509c:	e001      	b.n	80050a2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800509e:	2300      	movs	r3, #0
 80050a0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	f003 0308 	and.w	r3, r3, #8
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d15c      	bne.n	8005166 <osMutexNew+0x102>
      mem = -1;
 80050ac:	f04f 33ff 	mov.w	r3, #4294967295
 80050b0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d015      	beq.n	80050e4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d006      	beq.n	80050ce <osMutexNew+0x6a>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	2b4f      	cmp	r3, #79	@ 0x4f
 80050c6:	d902      	bls.n	80050ce <osMutexNew+0x6a>
          mem = 1;
 80050c8:	2301      	movs	r3, #1
 80050ca:	613b      	str	r3, [r7, #16]
 80050cc:	e00c      	b.n	80050e8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d108      	bne.n	80050e8 <osMutexNew+0x84>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d104      	bne.n	80050e8 <osMutexNew+0x84>
            mem = 0;
 80050de:	2300      	movs	r3, #0
 80050e0:	613b      	str	r3, [r7, #16]
 80050e2:	e001      	b.n	80050e8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80050e4:	2300      	movs	r3, #0
 80050e6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d112      	bne.n	8005114 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d007      	beq.n	8005104 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	4619      	mov	r1, r3
 80050fa:	2004      	movs	r0, #4
 80050fc:	f000 fd71 	bl	8005be2 <xQueueCreateMutexStatic>
 8005100:	61f8      	str	r0, [r7, #28]
 8005102:	e016      	b.n	8005132 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	4619      	mov	r1, r3
 800510a:	2001      	movs	r0, #1
 800510c:	f000 fd69 	bl	8005be2 <xQueueCreateMutexStatic>
 8005110:	61f8      	str	r0, [r7, #28]
 8005112:	e00e      	b.n	8005132 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10b      	bne.n	8005132 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d004      	beq.n	800512a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005120:	2004      	movs	r0, #4
 8005122:	f000 fd46 	bl	8005bb2 <xQueueCreateMutex>
 8005126:	61f8      	str	r0, [r7, #28]
 8005128:	e003      	b.n	8005132 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800512a:	2001      	movs	r0, #1
 800512c:	f000 fd41 	bl	8005bb2 <xQueueCreateMutex>
 8005130:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00c      	beq.n	8005152 <osMutexNew+0xee>
        if (attr != NULL) {
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <osMutexNew+0xe2>
          name = attr->name;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	60fb      	str	r3, [r7, #12]
 8005144:	e001      	b.n	800514a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800514a:	68f9      	ldr	r1, [r7, #12]
 800514c:	69f8      	ldr	r0, [r7, #28]
 800514e:	f001 fc2d 	bl	80069ac <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d006      	beq.n	8005166 <osMutexNew+0x102>
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	f043 0301 	orr.w	r3, r3, #1
 8005164:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005166:	69fb      	ldr	r3, [r7, #28]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3720      	adds	r7, #32
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f023 0301 	bic.w	r3, r3, #1
 8005180:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800518a:	2300      	movs	r3, #0
 800518c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800518e:	f3ef 8305 	mrs	r3, IPSR
 8005192:	60bb      	str	r3, [r7, #8]
  return(result);
 8005194:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800519a:	f06f 0305 	mvn.w	r3, #5
 800519e:	617b      	str	r3, [r7, #20]
 80051a0:	e02c      	b.n	80051fc <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d103      	bne.n	80051b0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80051a8:	f06f 0303 	mvn.w	r3, #3
 80051ac:	617b      	str	r3, [r7, #20]
 80051ae:	e025      	b.n	80051fc <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d011      	beq.n	80051da <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80051b6:	6839      	ldr	r1, [r7, #0]
 80051b8:	6938      	ldr	r0, [r7, #16]
 80051ba:	f000 fd62 	bl	8005c82 <xQueueTakeMutexRecursive>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d01b      	beq.n	80051fc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80051ca:	f06f 0301 	mvn.w	r3, #1
 80051ce:	617b      	str	r3, [r7, #20]
 80051d0:	e014      	b.n	80051fc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80051d2:	f06f 0302 	mvn.w	r3, #2
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	e010      	b.n	80051fc <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80051da:	6839      	ldr	r1, [r7, #0]
 80051dc:	6938      	ldr	r0, [r7, #16]
 80051de:	f001 f907 	bl	80063f0 <xQueueSemaphoreTake>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d009      	beq.n	80051fc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80051ee:	f06f 0301 	mvn.w	r3, #1
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	e002      	b.n	80051fc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80051f6:	f06f 0302 	mvn.w	r3, #2
 80051fa:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80051fc:	697b      	ldr	r3, [r7, #20]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3718      	adds	r7, #24
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005206:	b580      	push	{r7, lr}
 8005208:	b086      	sub	sp, #24
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f023 0301 	bic.w	r3, r3, #1
 8005214:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800521e:	2300      	movs	r3, #0
 8005220:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005222:	f3ef 8305 	mrs	r3, IPSR
 8005226:	60bb      	str	r3, [r7, #8]
  return(result);
 8005228:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <osMutexRelease+0x30>
    stat = osErrorISR;
 800522e:	f06f 0305 	mvn.w	r3, #5
 8005232:	617b      	str	r3, [r7, #20]
 8005234:	e01f      	b.n	8005276 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d103      	bne.n	8005244 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800523c:	f06f 0303 	mvn.w	r3, #3
 8005240:	617b      	str	r3, [r7, #20]
 8005242:	e018      	b.n	8005276 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d009      	beq.n	800525e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800524a:	6938      	ldr	r0, [r7, #16]
 800524c:	f000 fce4 	bl	8005c18 <xQueueGiveMutexRecursive>
 8005250:	4603      	mov	r3, r0
 8005252:	2b01      	cmp	r3, #1
 8005254:	d00f      	beq.n	8005276 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005256:	f06f 0302 	mvn.w	r3, #2
 800525a:	617b      	str	r3, [r7, #20]
 800525c:	e00b      	b.n	8005276 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800525e:	2300      	movs	r3, #0
 8005260:	2200      	movs	r2, #0
 8005262:	2100      	movs	r1, #0
 8005264:	6938      	ldr	r0, [r7, #16]
 8005266:	f000 fdb1 	bl	8005dcc <xQueueGenericSend>
 800526a:	4603      	mov	r3, r0
 800526c:	2b01      	cmp	r3, #1
 800526e:	d002      	beq.n	8005276 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005270:	f06f 0302 	mvn.w	r3, #2
 8005274:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005276:	697b      	ldr	r3, [r7, #20]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3718      	adds	r7, #24
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005280:	b580      	push	{r7, lr}
 8005282:	b08a      	sub	sp, #40	@ 0x28
 8005284:	af02      	add	r7, sp, #8
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800528c:	2300      	movs	r3, #0
 800528e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005290:	f3ef 8305 	mrs	r3, IPSR
 8005294:	613b      	str	r3, [r7, #16]
  return(result);
 8005296:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005298:	2b00      	cmp	r3, #0
 800529a:	d175      	bne.n	8005388 <osSemaphoreNew+0x108>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d072      	beq.n	8005388 <osSemaphoreNew+0x108>
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d86e      	bhi.n	8005388 <osSemaphoreNew+0x108>
    mem = -1;
 80052aa:	f04f 33ff 	mov.w	r3, #4294967295
 80052ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d015      	beq.n	80052e2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d006      	beq.n	80052cc <osSemaphoreNew+0x4c>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	2b4f      	cmp	r3, #79	@ 0x4f
 80052c4:	d902      	bls.n	80052cc <osSemaphoreNew+0x4c>
        mem = 1;
 80052c6:	2301      	movs	r3, #1
 80052c8:	61bb      	str	r3, [r7, #24]
 80052ca:	e00c      	b.n	80052e6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d108      	bne.n	80052e6 <osSemaphoreNew+0x66>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d104      	bne.n	80052e6 <osSemaphoreNew+0x66>
          mem = 0;
 80052dc:	2300      	movs	r3, #0
 80052de:	61bb      	str	r3, [r7, #24]
 80052e0:	e001      	b.n	80052e6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80052e2:	2300      	movs	r3, #0
 80052e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ec:	d04c      	beq.n	8005388 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d128      	bne.n	8005346 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d10a      	bne.n	8005310 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	2203      	movs	r2, #3
 8005300:	9200      	str	r2, [sp, #0]
 8005302:	2200      	movs	r2, #0
 8005304:	2100      	movs	r1, #0
 8005306:	2001      	movs	r0, #1
 8005308:	f000 fb5e 	bl	80059c8 <xQueueGenericCreateStatic>
 800530c:	61f8      	str	r0, [r7, #28]
 800530e:	e005      	b.n	800531c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005310:	2203      	movs	r2, #3
 8005312:	2100      	movs	r1, #0
 8005314:	2001      	movs	r0, #1
 8005316:	f000 fbd4 	bl	8005ac2 <xQueueGenericCreate>
 800531a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d022      	beq.n	8005368 <osSemaphoreNew+0xe8>
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d01f      	beq.n	8005368 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005328:	2300      	movs	r3, #0
 800532a:	2200      	movs	r2, #0
 800532c:	2100      	movs	r1, #0
 800532e:	69f8      	ldr	r0, [r7, #28]
 8005330:	f000 fd4c 	bl	8005dcc <xQueueGenericSend>
 8005334:	4603      	mov	r3, r0
 8005336:	2b01      	cmp	r3, #1
 8005338:	d016      	beq.n	8005368 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800533a:	69f8      	ldr	r0, [r7, #28]
 800533c:	f001 f9ea 	bl	8006714 <vQueueDelete>
            hSemaphore = NULL;
 8005340:	2300      	movs	r3, #0
 8005342:	61fb      	str	r3, [r7, #28]
 8005344:	e010      	b.n	8005368 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d108      	bne.n	800535e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	461a      	mov	r2, r3
 8005352:	68b9      	ldr	r1, [r7, #8]
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 fccb 	bl	8005cf0 <xQueueCreateCountingSemaphoreStatic>
 800535a:	61f8      	str	r0, [r7, #28]
 800535c:	e004      	b.n	8005368 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800535e:	68b9      	ldr	r1, [r7, #8]
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 fcfe 	bl	8005d62 <xQueueCreateCountingSemaphore>
 8005366:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00c      	beq.n	8005388 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d003      	beq.n	800537c <osSemaphoreNew+0xfc>
          name = attr->name;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	617b      	str	r3, [r7, #20]
 800537a:	e001      	b.n	8005380 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800537c:	2300      	movs	r3, #0
 800537e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005380:	6979      	ldr	r1, [r7, #20]
 8005382:	69f8      	ldr	r0, [r7, #28]
 8005384:	f001 fb12 	bl	80069ac <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005388:	69fb      	ldr	r3, [r7, #28]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3720      	adds	r7, #32
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
	...

08005394 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d103      	bne.n	80053b4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80053ac:	f06f 0303 	mvn.w	r3, #3
 80053b0:	617b      	str	r3, [r7, #20]
 80053b2:	e039      	b.n	8005428 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053b4:	f3ef 8305 	mrs	r3, IPSR
 80053b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80053ba:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d022      	beq.n	8005406 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d003      	beq.n	80053ce <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80053c6:	f06f 0303 	mvn.w	r3, #3
 80053ca:	617b      	str	r3, [r7, #20]
 80053cc:	e02c      	b.n	8005428 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80053ce:	2300      	movs	r3, #0
 80053d0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80053d2:	f107 0308 	add.w	r3, r7, #8
 80053d6:	461a      	mov	r2, r3
 80053d8:	2100      	movs	r1, #0
 80053da:	6938      	ldr	r0, [r7, #16]
 80053dc:	f001 f918 	bl	8006610 <xQueueReceiveFromISR>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d003      	beq.n	80053ee <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80053e6:	f06f 0302 	mvn.w	r3, #2
 80053ea:	617b      	str	r3, [r7, #20]
 80053ec:	e01c      	b.n	8005428 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d019      	beq.n	8005428 <osSemaphoreAcquire+0x94>
 80053f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005434 <osSemaphoreAcquire+0xa0>)
 80053f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	f3bf 8f6f 	isb	sy
 8005404:	e010      	b.n	8005428 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005406:	6839      	ldr	r1, [r7, #0]
 8005408:	6938      	ldr	r0, [r7, #16]
 800540a:	f000 fff1 	bl	80063f0 <xQueueSemaphoreTake>
 800540e:	4603      	mov	r3, r0
 8005410:	2b01      	cmp	r3, #1
 8005412:	d009      	beq.n	8005428 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800541a:	f06f 0301 	mvn.w	r3, #1
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	e002      	b.n	8005428 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005422:	f06f 0302 	mvn.w	r3, #2
 8005426:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005428:	697b      	ldr	r3, [r7, #20]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3718      	adds	r7, #24
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	e000ed04 	.word	0xe000ed04

08005438 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005444:	2300      	movs	r3, #0
 8005446:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d103      	bne.n	8005456 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800544e:	f06f 0303 	mvn.w	r3, #3
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	e02c      	b.n	80054b0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005456:	f3ef 8305 	mrs	r3, IPSR
 800545a:	60fb      	str	r3, [r7, #12]
  return(result);
 800545c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800545e:	2b00      	cmp	r3, #0
 8005460:	d01a      	beq.n	8005498 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005462:	2300      	movs	r3, #0
 8005464:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005466:	f107 0308 	add.w	r3, r7, #8
 800546a:	4619      	mov	r1, r3
 800546c:	6938      	ldr	r0, [r7, #16]
 800546e:	f000 fe4d 	bl	800610c <xQueueGiveFromISR>
 8005472:	4603      	mov	r3, r0
 8005474:	2b01      	cmp	r3, #1
 8005476:	d003      	beq.n	8005480 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005478:	f06f 0302 	mvn.w	r3, #2
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	e017      	b.n	80054b0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d014      	beq.n	80054b0 <osSemaphoreRelease+0x78>
 8005486:	4b0d      	ldr	r3, [pc, #52]	@ (80054bc <osSemaphoreRelease+0x84>)
 8005488:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	e00b      	b.n	80054b0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005498:	2300      	movs	r3, #0
 800549a:	2200      	movs	r2, #0
 800549c:	2100      	movs	r1, #0
 800549e:	6938      	ldr	r0, [r7, #16]
 80054a0:	f000 fc94 	bl	8005dcc <xQueueGenericSend>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d002      	beq.n	80054b0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80054aa:	f06f 0302 	mvn.w	r3, #2
 80054ae:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80054b0:	697b      	ldr	r3, [r7, #20]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3718      	adds	r7, #24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	e000ed04 	.word	0xe000ed04

080054c0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b08a      	sub	sp, #40	@ 0x28
 80054c4:	af02      	add	r7, sp, #8
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80054cc:	2300      	movs	r3, #0
 80054ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054d0:	f3ef 8305 	mrs	r3, IPSR
 80054d4:	613b      	str	r3, [r7, #16]
  return(result);
 80054d6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d15f      	bne.n	800559c <osMessageQueueNew+0xdc>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d05c      	beq.n	800559c <osMessageQueueNew+0xdc>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d059      	beq.n	800559c <osMessageQueueNew+0xdc>
    mem = -1;
 80054e8:	f04f 33ff 	mov.w	r3, #4294967295
 80054ec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d029      	beq.n	8005548 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d012      	beq.n	8005522 <osMessageQueueNew+0x62>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	2b4f      	cmp	r3, #79	@ 0x4f
 8005502:	d90e      	bls.n	8005522 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00a      	beq.n	8005522 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	695a      	ldr	r2, [r3, #20]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	68b9      	ldr	r1, [r7, #8]
 8005514:	fb01 f303 	mul.w	r3, r1, r3
 8005518:	429a      	cmp	r2, r3
 800551a:	d302      	bcc.n	8005522 <osMessageQueueNew+0x62>
        mem = 1;
 800551c:	2301      	movs	r3, #1
 800551e:	61bb      	str	r3, [r7, #24]
 8005520:	e014      	b.n	800554c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d110      	bne.n	800554c <osMessageQueueNew+0x8c>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10c      	bne.n	800554c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005536:	2b00      	cmp	r3, #0
 8005538:	d108      	bne.n	800554c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d104      	bne.n	800554c <osMessageQueueNew+0x8c>
          mem = 0;
 8005542:	2300      	movs	r3, #0
 8005544:	61bb      	str	r3, [r7, #24]
 8005546:	e001      	b.n	800554c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005548:	2300      	movs	r3, #0
 800554a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d10b      	bne.n	800556a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	691a      	ldr	r2, [r3, #16]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	2100      	movs	r1, #0
 800555c:	9100      	str	r1, [sp, #0]
 800555e:	68b9      	ldr	r1, [r7, #8]
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 fa31 	bl	80059c8 <xQueueGenericCreateStatic>
 8005566:	61f8      	str	r0, [r7, #28]
 8005568:	e008      	b.n	800557c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d105      	bne.n	800557c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005570:	2200      	movs	r2, #0
 8005572:	68b9      	ldr	r1, [r7, #8]
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 faa4 	bl	8005ac2 <xQueueGenericCreate>
 800557a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00c      	beq.n	800559c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d003      	beq.n	8005590 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	617b      	str	r3, [r7, #20]
 800558e:	e001      	b.n	8005594 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005590:	2300      	movs	r3, #0
 8005592:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005594:	6979      	ldr	r1, [r7, #20]
 8005596:	69f8      	ldr	r0, [r7, #28]
 8005598:	f001 fa08 	bl	80069ac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800559c:	69fb      	ldr	r3, [r7, #28]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3720      	adds	r7, #32
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
	...

080055a8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b088      	sub	sp, #32
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	603b      	str	r3, [r7, #0]
 80055b4:	4613      	mov	r3, r2
 80055b6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80055bc:	2300      	movs	r3, #0
 80055be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055c0:	f3ef 8305 	mrs	r3, IPSR
 80055c4:	617b      	str	r3, [r7, #20]
  return(result);
 80055c6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d028      	beq.n	800561e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <osMessageQueuePut+0x36>
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <osMessageQueuePut+0x36>
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80055de:	f06f 0303 	mvn.w	r3, #3
 80055e2:	61fb      	str	r3, [r7, #28]
 80055e4:	e038      	b.n	8005658 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80055e6:	2300      	movs	r3, #0
 80055e8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80055ea:	f107 0210 	add.w	r2, r7, #16
 80055ee:	2300      	movs	r3, #0
 80055f0:	68b9      	ldr	r1, [r7, #8]
 80055f2:	69b8      	ldr	r0, [r7, #24]
 80055f4:	f000 fcec 	bl	8005fd0 <xQueueGenericSendFromISR>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d003      	beq.n	8005606 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80055fe:	f06f 0302 	mvn.w	r3, #2
 8005602:	61fb      	str	r3, [r7, #28]
 8005604:	e028      	b.n	8005658 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d025      	beq.n	8005658 <osMessageQueuePut+0xb0>
 800560c:	4b15      	ldr	r3, [pc, #84]	@ (8005664 <osMessageQueuePut+0xbc>)
 800560e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	e01c      	b.n	8005658 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <osMessageQueuePut+0x82>
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d103      	bne.n	8005632 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800562a:	f06f 0303 	mvn.w	r3, #3
 800562e:	61fb      	str	r3, [r7, #28]
 8005630:	e012      	b.n	8005658 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005632:	2300      	movs	r3, #0
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	68b9      	ldr	r1, [r7, #8]
 8005638:	69b8      	ldr	r0, [r7, #24]
 800563a:	f000 fbc7 	bl	8005dcc <xQueueGenericSend>
 800563e:	4603      	mov	r3, r0
 8005640:	2b01      	cmp	r3, #1
 8005642:	d009      	beq.n	8005658 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800564a:	f06f 0301 	mvn.w	r3, #1
 800564e:	61fb      	str	r3, [r7, #28]
 8005650:	e002      	b.n	8005658 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005652:	f06f 0302 	mvn.w	r3, #2
 8005656:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005658:	69fb      	ldr	r3, [r7, #28]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3720      	adds	r7, #32
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	e000ed04 	.word	0xe000ed04

08005668 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
 8005674:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800567a:	2300      	movs	r3, #0
 800567c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800567e:	f3ef 8305 	mrs	r3, IPSR
 8005682:	617b      	str	r3, [r7, #20]
  return(result);
 8005684:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005686:	2b00      	cmp	r3, #0
 8005688:	d028      	beq.n	80056dc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d005      	beq.n	800569c <osMessageQueueGet+0x34>
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <osMessageQueueGet+0x34>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800569c:	f06f 0303 	mvn.w	r3, #3
 80056a0:	61fb      	str	r3, [r7, #28]
 80056a2:	e037      	b.n	8005714 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80056a4:	2300      	movs	r3, #0
 80056a6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80056a8:	f107 0310 	add.w	r3, r7, #16
 80056ac:	461a      	mov	r2, r3
 80056ae:	68b9      	ldr	r1, [r7, #8]
 80056b0:	69b8      	ldr	r0, [r7, #24]
 80056b2:	f000 ffad 	bl	8006610 <xQueueReceiveFromISR>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d003      	beq.n	80056c4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80056bc:	f06f 0302 	mvn.w	r3, #2
 80056c0:	61fb      	str	r3, [r7, #28]
 80056c2:	e027      	b.n	8005714 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d024      	beq.n	8005714 <osMessageQueueGet+0xac>
 80056ca:	4b15      	ldr	r3, [pc, #84]	@ (8005720 <osMessageQueueGet+0xb8>)
 80056cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	e01b      	b.n	8005714 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d002      	beq.n	80056e8 <osMessageQueueGet+0x80>
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d103      	bne.n	80056f0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80056e8:	f06f 0303 	mvn.w	r3, #3
 80056ec:	61fb      	str	r3, [r7, #28]
 80056ee:	e011      	b.n	8005714 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	68b9      	ldr	r1, [r7, #8]
 80056f4:	69b8      	ldr	r0, [r7, #24]
 80056f6:	f000 fd99 	bl	800622c <xQueueReceive>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d009      	beq.n	8005714 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005706:	f06f 0301 	mvn.w	r3, #1
 800570a:	61fb      	str	r3, [r7, #28]
 800570c:	e002      	b.n	8005714 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800570e:	f06f 0302 	mvn.w	r3, #2
 8005712:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005714:	69fb      	ldr	r3, [r7, #28]
}
 8005716:	4618      	mov	r0, r3
 8005718:	3720      	adds	r7, #32
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	e000ed04 	.word	0xe000ed04

08005724 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4a07      	ldr	r2, [pc, #28]	@ (8005750 <vApplicationGetIdleTaskMemory+0x2c>)
 8005734:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	4a06      	ldr	r2, [pc, #24]	@ (8005754 <vApplicationGetIdleTaskMemory+0x30>)
 800573a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2280      	movs	r2, #128	@ 0x80
 8005740:	601a      	str	r2, [r3, #0]
}
 8005742:	bf00      	nop
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	200051f8 	.word	0x200051f8
 8005754:	20005254 	.word	0x20005254

08005758 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4a07      	ldr	r2, [pc, #28]	@ (8005784 <vApplicationGetTimerTaskMemory+0x2c>)
 8005768:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	4a06      	ldr	r2, [pc, #24]	@ (8005788 <vApplicationGetTimerTaskMemory+0x30>)
 800576e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005776:	601a      	str	r2, [r3, #0]
}
 8005778:	bf00      	nop
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr
 8005784:	20005454 	.word	0x20005454
 8005788:	200054b0 	.word	0x200054b0

0800578c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f103 0208 	add.w	r2, r3, #8
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f04f 32ff 	mov.w	r2, #4294967295
 80057a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f103 0208 	add.w	r2, r3, #8
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f103 0208 	add.w	r2, r3, #8
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057e6:	b480      	push	{r7}
 80057e8:	b085      	sub	sp, #20
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	601a      	str	r2, [r3, #0]
}
 8005822:	bf00      	nop
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800582e:	b480      	push	{r7}
 8005830:	b085      	sub	sp, #20
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005844:	d103      	bne.n	800584e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	e00c      	b.n	8005868 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	3308      	adds	r3, #8
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	e002      	b.n	800585c <vListInsert+0x2e>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	60fb      	str	r3, [r7, #12]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	429a      	cmp	r2, r3
 8005866:	d2f6      	bcs.n	8005856 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	601a      	str	r2, [r3, #0]
}
 8005894:	bf00      	nop
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	6892      	ldr	r2, [r2, #8]
 80058b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	6852      	ldr	r2, [r2, #4]
 80058c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d103      	bne.n	80058d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	689a      	ldr	r2, [r3, #8]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	1e5a      	subs	r2, r3, #1
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10b      	bne.n	8005920 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590c:	f383 8811 	msr	BASEPRI, r3
 8005910:	f3bf 8f6f 	isb	sy
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800591a:	bf00      	nop
 800591c:	bf00      	nop
 800591e:	e7fd      	b.n	800591c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005920:	f002 fd82 	bl	8008428 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800592c:	68f9      	ldr	r1, [r7, #12]
 800592e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005930:	fb01 f303 	mul.w	r3, r1, r3
 8005934:	441a      	add	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005950:	3b01      	subs	r3, #1
 8005952:	68f9      	ldr	r1, [r7, #12]
 8005954:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005956:	fb01 f303 	mul.w	r3, r1, r3
 800595a:	441a      	add	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	22ff      	movs	r2, #255	@ 0xff
 8005964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	22ff      	movs	r2, #255	@ 0xff
 800596c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d114      	bne.n	80059a0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d01a      	beq.n	80059b4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	3310      	adds	r3, #16
 8005982:	4618      	mov	r0, r3
 8005984:	f001 fd16 	bl	80073b4 <xTaskRemoveFromEventList>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d012      	beq.n	80059b4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800598e:	4b0d      	ldr	r3, [pc, #52]	@ (80059c4 <xQueueGenericReset+0xd0>)
 8005990:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005994:	601a      	str	r2, [r3, #0]
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	e009      	b.n	80059b4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	3310      	adds	r3, #16
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7ff fef1 	bl	800578c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	3324      	adds	r3, #36	@ 0x24
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7ff feec 	bl	800578c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80059b4:	f002 fd6a 	bl	800848c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80059b8:	2301      	movs	r3, #1
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	e000ed04 	.word	0xe000ed04

080059c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b08e      	sub	sp, #56	@ 0x38
 80059cc:	af02      	add	r7, sp, #8
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10b      	bne.n	80059f4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80059dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e0:	f383 8811 	msr	BASEPRI, r3
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80059ee:	bf00      	nop
 80059f0:	bf00      	nop
 80059f2:	e7fd      	b.n	80059f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10b      	bne.n	8005a12 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80059fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005a0c:	bf00      	nop
 8005a0e:	bf00      	nop
 8005a10:	e7fd      	b.n	8005a0e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <xQueueGenericCreateStatic+0x56>
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <xQueueGenericCreateStatic+0x5a>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e000      	b.n	8005a24 <xQueueGenericCreateStatic+0x5c>
 8005a22:	2300      	movs	r3, #0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10b      	bne.n	8005a40 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a2c:	f383 8811 	msr	BASEPRI, r3
 8005a30:	f3bf 8f6f 	isb	sy
 8005a34:	f3bf 8f4f 	dsb	sy
 8005a38:	623b      	str	r3, [r7, #32]
}
 8005a3a:	bf00      	nop
 8005a3c:	bf00      	nop
 8005a3e:	e7fd      	b.n	8005a3c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d102      	bne.n	8005a4c <xQueueGenericCreateStatic+0x84>
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <xQueueGenericCreateStatic+0x88>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e000      	b.n	8005a52 <xQueueGenericCreateStatic+0x8a>
 8005a50:	2300      	movs	r3, #0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10b      	bne.n	8005a6e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a5a:	f383 8811 	msr	BASEPRI, r3
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f3bf 8f4f 	dsb	sy
 8005a66:	61fb      	str	r3, [r7, #28]
}
 8005a68:	bf00      	nop
 8005a6a:	bf00      	nop
 8005a6c:	e7fd      	b.n	8005a6a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a6e:	2350      	movs	r3, #80	@ 0x50
 8005a70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	2b50      	cmp	r3, #80	@ 0x50
 8005a76:	d00b      	beq.n	8005a90 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7c:	f383 8811 	msr	BASEPRI, r3
 8005a80:	f3bf 8f6f 	isb	sy
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	61bb      	str	r3, [r7, #24]
}
 8005a8a:	bf00      	nop
 8005a8c:	bf00      	nop
 8005a8e:	e7fd      	b.n	8005a8c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a90:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00d      	beq.n	8005ab8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005aa4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	4613      	mov	r3, r2
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	68b9      	ldr	r1, [r7, #8]
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 f840 	bl	8005b38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3730      	adds	r7, #48	@ 0x30
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b08a      	sub	sp, #40	@ 0x28
 8005ac6:	af02      	add	r7, sp, #8
 8005ac8:	60f8      	str	r0, [r7, #12]
 8005aca:	60b9      	str	r1, [r7, #8]
 8005acc:	4613      	mov	r3, r2
 8005ace:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10b      	bne.n	8005aee <xQueueGenericCreate+0x2c>
	__asm volatile
 8005ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	613b      	str	r3, [r7, #16]
}
 8005ae8:	bf00      	nop
 8005aea:	bf00      	nop
 8005aec:	e7fd      	b.n	8005aea <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	fb02 f303 	mul.w	r3, r2, r3
 8005af6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	3350      	adds	r3, #80	@ 0x50
 8005afc:	4618      	mov	r0, r3
 8005afe:	f002 fdb5 	bl	800866c <pvPortMalloc>
 8005b02:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d011      	beq.n	8005b2e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	3350      	adds	r3, #80	@ 0x50
 8005b12:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b1c:	79fa      	ldrb	r2, [r7, #7]
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	4613      	mov	r3, r2
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	68b9      	ldr	r1, [r7, #8]
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 f805 	bl	8005b38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b2e:	69bb      	ldr	r3, [r7, #24]
	}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3720      	adds	r7, #32
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d103      	bne.n	8005b54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	69ba      	ldr	r2, [r7, #24]
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	e002      	b.n	8005b5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b66:	2101      	movs	r1, #1
 8005b68:	69b8      	ldr	r0, [r7, #24]
 8005b6a:	f7ff fec3 	bl	80058f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	78fa      	ldrb	r2, [r7, #3]
 8005b72:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b76:	bf00      	nop
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b082      	sub	sp, #8
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00e      	beq.n	8005baa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 f911 	bl	8005dcc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005baa:	bf00      	nop
 8005bac:	3708      	adds	r7, #8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b086      	sub	sp, #24
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	4603      	mov	r3, r0
 8005bba:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005bc4:	79fb      	ldrb	r3, [r7, #7]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	6939      	ldr	r1, [r7, #16]
 8005bca:	6978      	ldr	r0, [r7, #20]
 8005bcc:	f7ff ff79 	bl	8005ac2 <xQueueGenericCreate>
 8005bd0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f7ff ffd3 	bl	8005b7e <prvInitialiseMutex>

		return xNewQueue;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
	}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3718      	adds	r7, #24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b088      	sub	sp, #32
 8005be6:	af02      	add	r7, sp, #8
 8005be8:	4603      	mov	r3, r0
 8005bea:	6039      	str	r1, [r7, #0]
 8005bec:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	617b      	str	r3, [r7, #20]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005bf6:	79fb      	ldrb	r3, [r7, #7]
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	6939      	ldr	r1, [r7, #16]
 8005c00:	6978      	ldr	r0, [r7, #20]
 8005c02:	f7ff fee1 	bl	80059c8 <xQueueGenericCreateStatic>
 8005c06:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f7ff ffb8 	bl	8005b7e <prvInitialiseMutex>

		return xNewQueue;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
	}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005c18:	b590      	push	{r4, r7, lr}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10b      	bne.n	8005c42 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8005c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	60fb      	str	r3, [r7, #12]
}
 8005c3c:	bf00      	nop
 8005c3e:	bf00      	nop
 8005c40:	e7fd      	b.n	8005c3e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	689c      	ldr	r4, [r3, #8]
 8005c46:	f001 fd75 	bl	8007734 <xTaskGetCurrentTaskHandle>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	429c      	cmp	r4, r3
 8005c4e:	d111      	bne.n	8005c74 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	1e5a      	subs	r2, r3, #1
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d105      	bne.n	8005c6e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005c62:	2300      	movs	r3, #0
 8005c64:	2200      	movs	r2, #0
 8005c66:	2100      	movs	r1, #0
 8005c68:	6938      	ldr	r0, [r7, #16]
 8005c6a:	f000 f8af 	bl	8005dcc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	e001      	b.n	8005c78 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005c74:	2300      	movs	r3, #0
 8005c76:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005c78:	697b      	ldr	r3, [r7, #20]
	}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	371c      	adds	r7, #28
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd90      	pop	{r4, r7, pc}

08005c82 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005c82:	b590      	push	{r4, r7, lr}
 8005c84:	b087      	sub	sp, #28
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
 8005c8a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10b      	bne.n	8005cae <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8005c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	60fb      	str	r3, [r7, #12]
}
 8005ca8:	bf00      	nop
 8005caa:	bf00      	nop
 8005cac:	e7fd      	b.n	8005caa <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	689c      	ldr	r4, [r3, #8]
 8005cb2:	f001 fd3f 	bl	8007734 <xTaskGetCurrentTaskHandle>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	429c      	cmp	r4, r3
 8005cba:	d107      	bne.n	8005ccc <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	617b      	str	r3, [r7, #20]
 8005cca:	e00c      	b.n	8005ce6 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005ccc:	6839      	ldr	r1, [r7, #0]
 8005cce:	6938      	ldr	r0, [r7, #16]
 8005cd0:	f000 fb8e 	bl	80063f0 <xQueueSemaphoreTake>
 8005cd4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d004      	beq.n	8005ce6 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	1c5a      	adds	r2, r3, #1
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005ce6:	697b      	ldr	r3, [r7, #20]
	}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	371c      	adds	r7, #28
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd90      	pop	{r4, r7, pc}

08005cf0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b08a      	sub	sp, #40	@ 0x28
 8005cf4:	af02      	add	r7, sp, #8
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10b      	bne.n	8005d1a <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8005d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d06:	f383 8811 	msr	BASEPRI, r3
 8005d0a:	f3bf 8f6f 	isb	sy
 8005d0e:	f3bf 8f4f 	dsb	sy
 8005d12:	61bb      	str	r3, [r7, #24]
}
 8005d14:	bf00      	nop
 8005d16:	bf00      	nop
 8005d18:	e7fd      	b.n	8005d16 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d90b      	bls.n	8005d3a <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8005d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d26:	f383 8811 	msr	BASEPRI, r3
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	617b      	str	r3, [r7, #20]
}
 8005d34:	bf00      	nop
 8005d36:	bf00      	nop
 8005d38:	e7fd      	b.n	8005d36 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	2100      	movs	r1, #0
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f7ff fe3f 	bl	80059c8 <xQueueGenericCreateStatic>
 8005d4a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d002      	beq.n	8005d58 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005d58:	69fb      	ldr	r3, [r7, #28]
	}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3720      	adds	r7, #32
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b086      	sub	sp, #24
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10b      	bne.n	8005d8a <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8005d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d76:	f383 8811 	msr	BASEPRI, r3
 8005d7a:	f3bf 8f6f 	isb	sy
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	613b      	str	r3, [r7, #16]
}
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop
 8005d88:	e7fd      	b.n	8005d86 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005d8a:	683a      	ldr	r2, [r7, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d90b      	bls.n	8005daa <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8005d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	60fb      	str	r3, [r7, #12]
}
 8005da4:	bf00      	nop
 8005da6:	bf00      	nop
 8005da8:	e7fd      	b.n	8005da6 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005daa:	2202      	movs	r2, #2
 8005dac:	2100      	movs	r1, #0
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7ff fe87 	bl	8005ac2 <xQueueGenericCreate>
 8005db4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d002      	beq.n	8005dc2 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005dc2:	697b      	ldr	r3, [r7, #20]
	}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3718      	adds	r7, #24
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b08e      	sub	sp, #56	@ 0x38
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
 8005dd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10b      	bne.n	8005e00 <xQueueGenericSend+0x34>
	__asm volatile
 8005de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005dfa:	bf00      	nop
 8005dfc:	bf00      	nop
 8005dfe:	e7fd      	b.n	8005dfc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d103      	bne.n	8005e0e <xQueueGenericSend+0x42>
 8005e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <xQueueGenericSend+0x46>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e000      	b.n	8005e14 <xQueueGenericSend+0x48>
 8005e12:	2300      	movs	r3, #0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10b      	bne.n	8005e30 <xQueueGenericSend+0x64>
	__asm volatile
 8005e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005e2a:	bf00      	nop
 8005e2c:	bf00      	nop
 8005e2e:	e7fd      	b.n	8005e2c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d103      	bne.n	8005e3e <xQueueGenericSend+0x72>
 8005e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d101      	bne.n	8005e42 <xQueueGenericSend+0x76>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e000      	b.n	8005e44 <xQueueGenericSend+0x78>
 8005e42:	2300      	movs	r3, #0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10b      	bne.n	8005e60 <xQueueGenericSend+0x94>
	__asm volatile
 8005e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e4c:	f383 8811 	msr	BASEPRI, r3
 8005e50:	f3bf 8f6f 	isb	sy
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	623b      	str	r3, [r7, #32]
}
 8005e5a:	bf00      	nop
 8005e5c:	bf00      	nop
 8005e5e:	e7fd      	b.n	8005e5c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e60:	f001 fc78 	bl	8007754 <xTaskGetSchedulerState>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d102      	bne.n	8005e70 <xQueueGenericSend+0xa4>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <xQueueGenericSend+0xa8>
 8005e70:	2301      	movs	r3, #1
 8005e72:	e000      	b.n	8005e76 <xQueueGenericSend+0xaa>
 8005e74:	2300      	movs	r3, #0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10b      	bne.n	8005e92 <xQueueGenericSend+0xc6>
	__asm volatile
 8005e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7e:	f383 8811 	msr	BASEPRI, r3
 8005e82:	f3bf 8f6f 	isb	sy
 8005e86:	f3bf 8f4f 	dsb	sy
 8005e8a:	61fb      	str	r3, [r7, #28]
}
 8005e8c:	bf00      	nop
 8005e8e:	bf00      	nop
 8005e90:	e7fd      	b.n	8005e8e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e92:	f002 fac9 	bl	8008428 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d302      	bcc.n	8005ea8 <xQueueGenericSend+0xdc>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d129      	bne.n	8005efc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ea8:	683a      	ldr	r2, [r7, #0]
 8005eaa:	68b9      	ldr	r1, [r7, #8]
 8005eac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005eae:	f000 fc6d 	bl	800678c <prvCopyDataToQueue>
 8005eb2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d010      	beq.n	8005ede <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ebe:	3324      	adds	r3, #36	@ 0x24
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f001 fa77 	bl	80073b4 <xTaskRemoveFromEventList>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d013      	beq.n	8005ef4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ecc:	4b3f      	ldr	r3, [pc, #252]	@ (8005fcc <xQueueGenericSend+0x200>)
 8005ece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	f3bf 8f4f 	dsb	sy
 8005ed8:	f3bf 8f6f 	isb	sy
 8005edc:	e00a      	b.n	8005ef4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d007      	beq.n	8005ef4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ee4:	4b39      	ldr	r3, [pc, #228]	@ (8005fcc <xQueueGenericSend+0x200>)
 8005ee6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ef4:	f002 faca 	bl	800848c <vPortExitCritical>
				return pdPASS;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e063      	b.n	8005fc4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d103      	bne.n	8005f0a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f02:	f002 fac3 	bl	800848c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005f06:	2300      	movs	r3, #0
 8005f08:	e05c      	b.n	8005fc4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d106      	bne.n	8005f1e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f10:	f107 0314 	add.w	r3, r7, #20
 8005f14:	4618      	mov	r0, r3
 8005f16:	f001 fab1 	bl	800747c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f1e:	f002 fab5 	bl	800848c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f22:	f001 f80f 	bl	8006f44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f26:	f002 fa7f 	bl	8008428 <vPortEnterCritical>
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f30:	b25b      	sxtb	r3, r3
 8005f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f36:	d103      	bne.n	8005f40 <xQueueGenericSend+0x174>
 8005f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f46:	b25b      	sxtb	r3, r3
 8005f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f4c:	d103      	bne.n	8005f56 <xQueueGenericSend+0x18a>
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f56:	f002 fa99 	bl	800848c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f5a:	1d3a      	adds	r2, r7, #4
 8005f5c:	f107 0314 	add.w	r3, r7, #20
 8005f60:	4611      	mov	r1, r2
 8005f62:	4618      	mov	r0, r3
 8005f64:	f001 faa0 	bl	80074a8 <xTaskCheckForTimeOut>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d124      	bne.n	8005fb8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f6e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f70:	f000 fd04 	bl	800697c <prvIsQueueFull>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d018      	beq.n	8005fac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7c:	3310      	adds	r3, #16
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	4611      	mov	r1, r2
 8005f82:	4618      	mov	r0, r3
 8005f84:	f001 f9c4 	bl	8007310 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f8a:	f000 fc8f 	bl	80068ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f8e:	f000 ffe7 	bl	8006f60 <xTaskResumeAll>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f47f af7c 	bne.w	8005e92 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8005fcc <xQueueGenericSend+0x200>)
 8005f9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fa0:	601a      	str	r2, [r3, #0]
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	e772      	b.n	8005e92 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005fac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005fae:	f000 fc7d 	bl	80068ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fb2:	f000 ffd5 	bl	8006f60 <xTaskResumeAll>
 8005fb6:	e76c      	b.n	8005e92 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005fb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005fba:	f000 fc77 	bl	80068ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fbe:	f000 ffcf 	bl	8006f60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005fc2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3738      	adds	r7, #56	@ 0x38
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	e000ed04 	.word	0xe000ed04

08005fd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b090      	sub	sp, #64	@ 0x40
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
 8005fdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10b      	bne.n	8006000 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005ffa:	bf00      	nop
 8005ffc:	bf00      	nop
 8005ffe:	e7fd      	b.n	8005ffc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d103      	bne.n	800600e <xQueueGenericSendFromISR+0x3e>
 8006006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800600a:	2b00      	cmp	r3, #0
 800600c:	d101      	bne.n	8006012 <xQueueGenericSendFromISR+0x42>
 800600e:	2301      	movs	r3, #1
 8006010:	e000      	b.n	8006014 <xQueueGenericSendFromISR+0x44>
 8006012:	2300      	movs	r3, #0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10b      	bne.n	8006030 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800602a:	bf00      	nop
 800602c:	bf00      	nop
 800602e:	e7fd      	b.n	800602c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	2b02      	cmp	r3, #2
 8006034:	d103      	bne.n	800603e <xQueueGenericSendFromISR+0x6e>
 8006036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800603a:	2b01      	cmp	r3, #1
 800603c:	d101      	bne.n	8006042 <xQueueGenericSendFromISR+0x72>
 800603e:	2301      	movs	r3, #1
 8006040:	e000      	b.n	8006044 <xQueueGenericSendFromISR+0x74>
 8006042:	2300      	movs	r3, #0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10b      	bne.n	8006060 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800604c:	f383 8811 	msr	BASEPRI, r3
 8006050:	f3bf 8f6f 	isb	sy
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	623b      	str	r3, [r7, #32]
}
 800605a:	bf00      	nop
 800605c:	bf00      	nop
 800605e:	e7fd      	b.n	800605c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006060:	f002 fac2 	bl	80085e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006064:	f3ef 8211 	mrs	r2, BASEPRI
 8006068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800606c:	f383 8811 	msr	BASEPRI, r3
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	61fa      	str	r2, [r7, #28]
 800607a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800607c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800607e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006082:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006088:	429a      	cmp	r2, r3
 800608a:	d302      	bcc.n	8006092 <xQueueGenericSendFromISR+0xc2>
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	2b02      	cmp	r3, #2
 8006090:	d12f      	bne.n	80060f2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006094:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006098:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800609c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800609e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	68b9      	ldr	r1, [r7, #8]
 80060a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80060a8:	f000 fb70 	bl	800678c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80060ac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80060b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b4:	d112      	bne.n	80060dc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d016      	beq.n	80060ec <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c0:	3324      	adds	r3, #36	@ 0x24
 80060c2:	4618      	mov	r0, r3
 80060c4:	f001 f976 	bl	80073b4 <xTaskRemoveFromEventList>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00e      	beq.n	80060ec <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00b      	beq.n	80060ec <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	601a      	str	r2, [r3, #0]
 80060da:	e007      	b.n	80060ec <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80060dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80060e0:	3301      	adds	r3, #1
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	b25a      	sxtb	r2, r3
 80060e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80060ec:	2301      	movs	r3, #1
 80060ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80060f0:	e001      	b.n	80060f6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80060f2:	2300      	movs	r3, #0
 80060f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060f8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006100:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006104:	4618      	mov	r0, r3
 8006106:	3740      	adds	r7, #64	@ 0x40
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b08e      	sub	sp, #56	@ 0x38
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800611a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10b      	bne.n	8006138 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006124:	f383 8811 	msr	BASEPRI, r3
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	623b      	str	r3, [r7, #32]
}
 8006132:	bf00      	nop
 8006134:	bf00      	nop
 8006136:	e7fd      	b.n	8006134 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00b      	beq.n	8006158 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	61fb      	str	r3, [r7, #28]
}
 8006152:	bf00      	nop
 8006154:	bf00      	nop
 8006156:	e7fd      	b.n	8006154 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d103      	bne.n	8006168 <xQueueGiveFromISR+0x5c>
 8006160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d101      	bne.n	800616c <xQueueGiveFromISR+0x60>
 8006168:	2301      	movs	r3, #1
 800616a:	e000      	b.n	800616e <xQueueGiveFromISR+0x62>
 800616c:	2300      	movs	r3, #0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10b      	bne.n	800618a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006176:	f383 8811 	msr	BASEPRI, r3
 800617a:	f3bf 8f6f 	isb	sy
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	61bb      	str	r3, [r7, #24]
}
 8006184:	bf00      	nop
 8006186:	bf00      	nop
 8006188:	e7fd      	b.n	8006186 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800618a:	f002 fa2d 	bl	80085e8 <vPortValidateInterruptPriority>
	__asm volatile
 800618e:	f3ef 8211 	mrs	r2, BASEPRI
 8006192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	617a      	str	r2, [r7, #20]
 80061a4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80061a6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ae:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80061b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d22b      	bcs.n	8006212 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80061ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80061c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c6:	1c5a      	adds	r2, r3, #1
 80061c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80061cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80061d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d4:	d112      	bne.n	80061fc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d016      	beq.n	800620c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e0:	3324      	adds	r3, #36	@ 0x24
 80061e2:	4618      	mov	r0, r3
 80061e4:	f001 f8e6 	bl	80073b4 <xTaskRemoveFromEventList>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00e      	beq.n	800620c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00b      	beq.n	800620c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	2201      	movs	r2, #1
 80061f8:	601a      	str	r2, [r3, #0]
 80061fa:	e007      	b.n	800620c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80061fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006200:	3301      	adds	r3, #1
 8006202:	b2db      	uxtb	r3, r3
 8006204:	b25a      	sxtb	r2, r3
 8006206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006208:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800620c:	2301      	movs	r3, #1
 800620e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006210:	e001      	b.n	8006216 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006212:	2300      	movs	r3, #0
 8006214:	637b      	str	r3, [r7, #52]	@ 0x34
 8006216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006218:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f383 8811 	msr	BASEPRI, r3
}
 8006220:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006224:	4618      	mov	r0, r3
 8006226:	3738      	adds	r7, #56	@ 0x38
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b08c      	sub	sp, #48	@ 0x30
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006238:	2300      	movs	r3, #0
 800623a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10b      	bne.n	800625e <xQueueReceive+0x32>
	__asm volatile
 8006246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624a:	f383 8811 	msr	BASEPRI, r3
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	623b      	str	r3, [r7, #32]
}
 8006258:	bf00      	nop
 800625a:	bf00      	nop
 800625c:	e7fd      	b.n	800625a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d103      	bne.n	800626c <xQueueReceive+0x40>
 8006264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <xQueueReceive+0x44>
 800626c:	2301      	movs	r3, #1
 800626e:	e000      	b.n	8006272 <xQueueReceive+0x46>
 8006270:	2300      	movs	r3, #0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10b      	bne.n	800628e <xQueueReceive+0x62>
	__asm volatile
 8006276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	61fb      	str	r3, [r7, #28]
}
 8006288:	bf00      	nop
 800628a:	bf00      	nop
 800628c:	e7fd      	b.n	800628a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800628e:	f001 fa61 	bl	8007754 <xTaskGetSchedulerState>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d102      	bne.n	800629e <xQueueReceive+0x72>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <xQueueReceive+0x76>
 800629e:	2301      	movs	r3, #1
 80062a0:	e000      	b.n	80062a4 <xQueueReceive+0x78>
 80062a2:	2300      	movs	r3, #0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10b      	bne.n	80062c0 <xQueueReceive+0x94>
	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	61bb      	str	r3, [r7, #24]
}
 80062ba:	bf00      	nop
 80062bc:	bf00      	nop
 80062be:	e7fd      	b.n	80062bc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062c0:	f002 f8b2 	bl	8008428 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062c8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d01f      	beq.n	8006310 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062d0:	68b9      	ldr	r1, [r7, #8]
 80062d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062d4:	f000 fac4 	bl	8006860 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062da:	1e5a      	subs	r2, r3, #1
 80062dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062de:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00f      	beq.n	8006308 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ea:	3310      	adds	r3, #16
 80062ec:	4618      	mov	r0, r3
 80062ee:	f001 f861 	bl	80073b4 <xTaskRemoveFromEventList>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d007      	beq.n	8006308 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062f8:	4b3c      	ldr	r3, [pc, #240]	@ (80063ec <xQueueReceive+0x1c0>)
 80062fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006308:	f002 f8c0 	bl	800848c <vPortExitCritical>
				return pdPASS;
 800630c:	2301      	movs	r3, #1
 800630e:	e069      	b.n	80063e4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d103      	bne.n	800631e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006316:	f002 f8b9 	bl	800848c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800631a:	2300      	movs	r3, #0
 800631c:	e062      	b.n	80063e4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800631e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006320:	2b00      	cmp	r3, #0
 8006322:	d106      	bne.n	8006332 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006324:	f107 0310 	add.w	r3, r7, #16
 8006328:	4618      	mov	r0, r3
 800632a:	f001 f8a7 	bl	800747c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800632e:	2301      	movs	r3, #1
 8006330:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006332:	f002 f8ab 	bl	800848c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006336:	f000 fe05 	bl	8006f44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800633a:	f002 f875 	bl	8008428 <vPortEnterCritical>
 800633e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006340:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006344:	b25b      	sxtb	r3, r3
 8006346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634a:	d103      	bne.n	8006354 <xQueueReceive+0x128>
 800634c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006356:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800635a:	b25b      	sxtb	r3, r3
 800635c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006360:	d103      	bne.n	800636a <xQueueReceive+0x13e>
 8006362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006364:	2200      	movs	r2, #0
 8006366:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800636a:	f002 f88f 	bl	800848c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800636e:	1d3a      	adds	r2, r7, #4
 8006370:	f107 0310 	add.w	r3, r7, #16
 8006374:	4611      	mov	r1, r2
 8006376:	4618      	mov	r0, r3
 8006378:	f001 f896 	bl	80074a8 <xTaskCheckForTimeOut>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d123      	bne.n	80063ca <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006382:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006384:	f000 fae4 	bl	8006950 <prvIsQueueEmpty>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d017      	beq.n	80063be <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800638e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006390:	3324      	adds	r3, #36	@ 0x24
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	4611      	mov	r1, r2
 8006396:	4618      	mov	r0, r3
 8006398:	f000 ffba 	bl	8007310 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800639c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800639e:	f000 fa85 	bl	80068ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80063a2:	f000 fddd 	bl	8006f60 <xTaskResumeAll>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d189      	bne.n	80062c0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80063ac:	4b0f      	ldr	r3, [pc, #60]	@ (80063ec <xQueueReceive+0x1c0>)
 80063ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063b2:	601a      	str	r2, [r3, #0]
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	e780      	b.n	80062c0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80063be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063c0:	f000 fa74 	bl	80068ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063c4:	f000 fdcc 	bl	8006f60 <xTaskResumeAll>
 80063c8:	e77a      	b.n	80062c0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80063ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063cc:	f000 fa6e 	bl	80068ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063d0:	f000 fdc6 	bl	8006f60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063d6:	f000 fabb 	bl	8006950 <prvIsQueueEmpty>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f43f af6f 	beq.w	80062c0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80063e2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3730      	adds	r7, #48	@ 0x30
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	e000ed04 	.word	0xe000ed04

080063f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b08e      	sub	sp, #56	@ 0x38
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80063fa:	2300      	movs	r3, #0
 80063fc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006402:	2300      	movs	r3, #0
 8006404:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10b      	bne.n	8006424 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	623b      	str	r3, [r7, #32]
}
 800641e:	bf00      	nop
 8006420:	bf00      	nop
 8006422:	e7fd      	b.n	8006420 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00b      	beq.n	8006444 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006430:	f383 8811 	msr	BASEPRI, r3
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	61fb      	str	r3, [r7, #28]
}
 800643e:	bf00      	nop
 8006440:	bf00      	nop
 8006442:	e7fd      	b.n	8006440 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006444:	f001 f986 	bl	8007754 <xTaskGetSchedulerState>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d102      	bne.n	8006454 <xQueueSemaphoreTake+0x64>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d101      	bne.n	8006458 <xQueueSemaphoreTake+0x68>
 8006454:	2301      	movs	r3, #1
 8006456:	e000      	b.n	800645a <xQueueSemaphoreTake+0x6a>
 8006458:	2300      	movs	r3, #0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10b      	bne.n	8006476 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800645e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	61bb      	str	r3, [r7, #24]
}
 8006470:	bf00      	nop
 8006472:	bf00      	nop
 8006474:	e7fd      	b.n	8006472 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006476:	f001 ffd7 	bl	8008428 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800647a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800647c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800647e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006482:	2b00      	cmp	r3, #0
 8006484:	d024      	beq.n	80064d0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006488:	1e5a      	subs	r2, r3, #1
 800648a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800648c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800648e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d104      	bne.n	80064a0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006496:	f001 fad7 	bl	8007a48 <pvTaskIncrementMutexHeldCount>
 800649a:	4602      	mov	r2, r0
 800649c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800649e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00f      	beq.n	80064c8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064aa:	3310      	adds	r3, #16
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 ff81 	bl	80073b4 <xTaskRemoveFromEventList>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d007      	beq.n	80064c8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80064b8:	4b54      	ldr	r3, [pc, #336]	@ (800660c <xQueueSemaphoreTake+0x21c>)
 80064ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064be:	601a      	str	r2, [r3, #0]
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80064c8:	f001 ffe0 	bl	800848c <vPortExitCritical>
				return pdPASS;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e098      	b.n	8006602 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d112      	bne.n	80064fc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80064d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00b      	beq.n	80064f4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80064dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	617b      	str	r3, [r7, #20]
}
 80064ee:	bf00      	nop
 80064f0:	bf00      	nop
 80064f2:	e7fd      	b.n	80064f0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80064f4:	f001 ffca 	bl	800848c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80064f8:	2300      	movs	r3, #0
 80064fa:	e082      	b.n	8006602 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d106      	bne.n	8006510 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006502:	f107 030c 	add.w	r3, r7, #12
 8006506:	4618      	mov	r0, r3
 8006508:	f000 ffb8 	bl	800747c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800650c:	2301      	movs	r3, #1
 800650e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006510:	f001 ffbc 	bl	800848c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006514:	f000 fd16 	bl	8006f44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006518:	f001 ff86 	bl	8008428 <vPortEnterCritical>
 800651c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006522:	b25b      	sxtb	r3, r3
 8006524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006528:	d103      	bne.n	8006532 <xQueueSemaphoreTake+0x142>
 800652a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006534:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006538:	b25b      	sxtb	r3, r3
 800653a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800653e:	d103      	bne.n	8006548 <xQueueSemaphoreTake+0x158>
 8006540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006542:	2200      	movs	r2, #0
 8006544:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006548:	f001 ffa0 	bl	800848c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800654c:	463a      	mov	r2, r7
 800654e:	f107 030c 	add.w	r3, r7, #12
 8006552:	4611      	mov	r1, r2
 8006554:	4618      	mov	r0, r3
 8006556:	f000 ffa7 	bl	80074a8 <xTaskCheckForTimeOut>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d132      	bne.n	80065c6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006560:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006562:	f000 f9f5 	bl	8006950 <prvIsQueueEmpty>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d026      	beq.n	80065ba <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800656c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d109      	bne.n	8006588 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006574:	f001 ff58 	bl	8008428 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	4618      	mov	r0, r3
 800657e:	f001 f907 	bl	8007790 <xTaskPriorityInherit>
 8006582:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006584:	f001 ff82 	bl	800848c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800658a:	3324      	adds	r3, #36	@ 0x24
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	4611      	mov	r1, r2
 8006590:	4618      	mov	r0, r3
 8006592:	f000 febd 	bl	8007310 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006596:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006598:	f000 f988 	bl	80068ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800659c:	f000 fce0 	bl	8006f60 <xTaskResumeAll>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f47f af67 	bne.w	8006476 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80065a8:	4b18      	ldr	r3, [pc, #96]	@ (800660c <xQueueSemaphoreTake+0x21c>)
 80065aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065ae:	601a      	str	r2, [r3, #0]
 80065b0:	f3bf 8f4f 	dsb	sy
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	e75d      	b.n	8006476 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80065ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80065bc:	f000 f976 	bl	80068ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065c0:	f000 fcce 	bl	8006f60 <xTaskResumeAll>
 80065c4:	e757      	b.n	8006476 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80065c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80065c8:	f000 f970 	bl	80068ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065cc:	f000 fcc8 	bl	8006f60 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80065d2:	f000 f9bd 	bl	8006950 <prvIsQueueEmpty>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f43f af4c 	beq.w	8006476 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80065de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00d      	beq.n	8006600 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80065e4:	f001 ff20 	bl	8008428 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80065e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80065ea:	f000 f8b7 	bl	800675c <prvGetDisinheritPriorityAfterTimeout>
 80065ee:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80065f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80065f6:	4618      	mov	r0, r3
 80065f8:	f001 f9a2 	bl	8007940 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80065fc:	f001 ff46 	bl	800848c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006600:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006602:	4618      	mov	r0, r3
 8006604:	3738      	adds	r7, #56	@ 0x38
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	e000ed04 	.word	0xe000ed04

08006610 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b08e      	sub	sp, #56	@ 0x38
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10b      	bne.n	800663e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	623b      	str	r3, [r7, #32]
}
 8006638:	bf00      	nop
 800663a:	bf00      	nop
 800663c:	e7fd      	b.n	800663a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d103      	bne.n	800664c <xQueueReceiveFromISR+0x3c>
 8006644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <xQueueReceiveFromISR+0x40>
 800664c:	2301      	movs	r3, #1
 800664e:	e000      	b.n	8006652 <xQueueReceiveFromISR+0x42>
 8006650:	2300      	movs	r3, #0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10b      	bne.n	800666e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	61fb      	str	r3, [r7, #28]
}
 8006668:	bf00      	nop
 800666a:	bf00      	nop
 800666c:	e7fd      	b.n	800666a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800666e:	f001 ffbb 	bl	80085e8 <vPortValidateInterruptPriority>
	__asm volatile
 8006672:	f3ef 8211 	mrs	r2, BASEPRI
 8006676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800667a:	f383 8811 	msr	BASEPRI, r3
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	61ba      	str	r2, [r7, #24]
 8006688:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800668a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800668c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800668e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006692:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006696:	2b00      	cmp	r3, #0
 8006698:	d02f      	beq.n	80066fa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800669a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800669c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80066a4:	68b9      	ldr	r1, [r7, #8]
 80066a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066a8:	f000 f8da 	bl	8006860 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80066ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ae:	1e5a      	subs	r2, r3, #1
 80066b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80066b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80066b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066bc:	d112      	bne.n	80066e4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d016      	beq.n	80066f4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c8:	3310      	adds	r3, #16
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 fe72 	bl	80073b4 <xTaskRemoveFromEventList>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00e      	beq.n	80066f4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00b      	beq.n	80066f4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	601a      	str	r2, [r3, #0]
 80066e2:	e007      	b.n	80066f4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80066e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066e8:	3301      	adds	r3, #1
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	b25a      	sxtb	r2, r3
 80066ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80066f4:	2301      	movs	r3, #1
 80066f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80066f8:	e001      	b.n	80066fe <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80066fa:	2300      	movs	r3, #0
 80066fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80066fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006700:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f383 8811 	msr	BASEPRI, r3
}
 8006708:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800670a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800670c:	4618      	mov	r0, r3
 800670e:	3738      	adds	r7, #56	@ 0x38
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10b      	bne.n	800673e <vQueueDelete+0x2a>
	__asm volatile
 8006726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	60bb      	str	r3, [r7, #8]
}
 8006738:	bf00      	nop
 800673a:	bf00      	nop
 800673c:	e7fd      	b.n	800673a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f000 f95e 	bl	8006a00 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800674a:	2b00      	cmp	r3, #0
 800674c:	d102      	bne.n	8006754 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f002 f85a 	bl	8008808 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006754:	bf00      	nop
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006768:	2b00      	cmp	r3, #0
 800676a:	d006      	beq.n	800677a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006776:	60fb      	str	r3, [r7, #12]
 8006778:	e001      	b.n	800677e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800677a:	2300      	movs	r3, #0
 800677c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800677e:	68fb      	ldr	r3, [r7, #12]
	}
 8006780:	4618      	mov	r0, r3
 8006782:	3714      	adds	r7, #20
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006798:	2300      	movs	r3, #0
 800679a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10d      	bne.n	80067c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d14d      	bne.n	800684e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f001 f852 	bl	8007860 <xTaskPriorityDisinherit>
 80067bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	609a      	str	r2, [r3, #8]
 80067c4:	e043      	b.n	800684e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d119      	bne.n	8006800 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6858      	ldr	r0, [r3, #4]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d4:	461a      	mov	r2, r3
 80067d6:	68b9      	ldr	r1, [r7, #8]
 80067d8:	f00d ffdd 	bl	8014796 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e4:	441a      	add	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d32b      	bcc.n	800684e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	605a      	str	r2, [r3, #4]
 80067fe:	e026      	b.n	800684e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	68d8      	ldr	r0, [r3, #12]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006808:	461a      	mov	r2, r3
 800680a:	68b9      	ldr	r1, [r7, #8]
 800680c:	f00d ffc3 	bl	8014796 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	68da      	ldr	r2, [r3, #12]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006818:	425b      	negs	r3, r3
 800681a:	441a      	add	r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	68da      	ldr	r2, [r3, #12]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	429a      	cmp	r2, r3
 800682a:	d207      	bcs.n	800683c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	689a      	ldr	r2, [r3, #8]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006834:	425b      	negs	r3, r3
 8006836:	441a      	add	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b02      	cmp	r3, #2
 8006840:	d105      	bne.n	800684e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d002      	beq.n	800684e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	3b01      	subs	r3, #1
 800684c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006856:	697b      	ldr	r3, [r7, #20]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3718      	adds	r7, #24
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686e:	2b00      	cmp	r3, #0
 8006870:	d018      	beq.n	80068a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68da      	ldr	r2, [r3, #12]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800687a:	441a      	add	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68da      	ldr	r2, [r3, #12]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	429a      	cmp	r2, r3
 800688a:	d303      	bcc.n	8006894 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68d9      	ldr	r1, [r3, #12]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800689c:	461a      	mov	r2, r3
 800689e:	6838      	ldr	r0, [r7, #0]
 80068a0:	f00d ff79 	bl	8014796 <memcpy>
	}
}
 80068a4:	bf00      	nop
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80068b4:	f001 fdb8 	bl	8008428 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068c0:	e011      	b.n	80068e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d012      	beq.n	80068f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	3324      	adds	r3, #36	@ 0x24
 80068ce:	4618      	mov	r0, r3
 80068d0:	f000 fd70 	bl	80073b4 <xTaskRemoveFromEventList>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80068da:	f000 fe49 	bl	8007570 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80068de:	7bfb      	ldrb	r3, [r7, #15]
 80068e0:	3b01      	subs	r3, #1
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	dce9      	bgt.n	80068c2 <prvUnlockQueue+0x16>
 80068ee:	e000      	b.n	80068f2 <prvUnlockQueue+0x46>
					break;
 80068f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	22ff      	movs	r2, #255	@ 0xff
 80068f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80068fa:	f001 fdc7 	bl	800848c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80068fe:	f001 fd93 	bl	8008428 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006908:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800690a:	e011      	b.n	8006930 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d012      	beq.n	800693a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	3310      	adds	r3, #16
 8006918:	4618      	mov	r0, r3
 800691a:	f000 fd4b 	bl	80073b4 <xTaskRemoveFromEventList>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d001      	beq.n	8006928 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006924:	f000 fe24 	bl	8007570 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006928:	7bbb      	ldrb	r3, [r7, #14]
 800692a:	3b01      	subs	r3, #1
 800692c:	b2db      	uxtb	r3, r3
 800692e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006930:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006934:	2b00      	cmp	r3, #0
 8006936:	dce9      	bgt.n	800690c <prvUnlockQueue+0x60>
 8006938:	e000      	b.n	800693c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800693a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	22ff      	movs	r2, #255	@ 0xff
 8006940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006944:	f001 fda2 	bl	800848c <vPortExitCritical>
}
 8006948:	bf00      	nop
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006958:	f001 fd66 	bl	8008428 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006960:	2b00      	cmp	r3, #0
 8006962:	d102      	bne.n	800696a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006964:	2301      	movs	r3, #1
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	e001      	b.n	800696e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800696a:	2300      	movs	r3, #0
 800696c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800696e:	f001 fd8d 	bl	800848c <vPortExitCritical>

	return xReturn;
 8006972:	68fb      	ldr	r3, [r7, #12]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006984:	f001 fd50 	bl	8008428 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006990:	429a      	cmp	r2, r3
 8006992:	d102      	bne.n	800699a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006994:	2301      	movs	r3, #1
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	e001      	b.n	800699e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800699a:	2300      	movs	r3, #0
 800699c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800699e:	f001 fd75 	bl	800848c <vPortExitCritical>

	return xReturn;
 80069a2:	68fb      	ldr	r3, [r7, #12]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069b6:	2300      	movs	r3, #0
 80069b8:	60fb      	str	r3, [r7, #12]
 80069ba:	e014      	b.n	80069e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80069bc:	4a0f      	ldr	r2, [pc, #60]	@ (80069fc <vQueueAddToRegistry+0x50>)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10b      	bne.n	80069e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80069c8:	490c      	ldr	r1, [pc, #48]	@ (80069fc <vQueueAddToRegistry+0x50>)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80069d2:	4a0a      	ldr	r2, [pc, #40]	@ (80069fc <vQueueAddToRegistry+0x50>)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	00db      	lsls	r3, r3, #3
 80069d8:	4413      	add	r3, r2
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80069de:	e006      	b.n	80069ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	3301      	adds	r3, #1
 80069e4:	60fb      	str	r3, [r7, #12]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2b07      	cmp	r3, #7
 80069ea:	d9e7      	bls.n	80069bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80069ec:	bf00      	nop
 80069ee:	bf00      	nop
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	200058b0 	.word	0x200058b0

08006a00 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a08:	2300      	movs	r3, #0
 8006a0a:	60fb      	str	r3, [r7, #12]
 8006a0c:	e016      	b.n	8006a3c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006a0e:	4a10      	ldr	r2, [pc, #64]	@ (8006a50 <vQueueUnregisterQueue+0x50>)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	00db      	lsls	r3, r3, #3
 8006a14:	4413      	add	r3, r2
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d10b      	bne.n	8006a36 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006a1e:	4a0c      	ldr	r2, [pc, #48]	@ (8006a50 <vQueueUnregisterQueue+0x50>)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2100      	movs	r1, #0
 8006a24:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006a28:	4a09      	ldr	r2, [pc, #36]	@ (8006a50 <vQueueUnregisterQueue+0x50>)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	00db      	lsls	r3, r3, #3
 8006a2e:	4413      	add	r3, r2
 8006a30:	2200      	movs	r2, #0
 8006a32:	605a      	str	r2, [r3, #4]
				break;
 8006a34:	e006      	b.n	8006a44 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2b07      	cmp	r3, #7
 8006a40:	d9e5      	bls.n	8006a0e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006a42:	bf00      	nop
 8006a44:	bf00      	nop
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	200058b0 	.word	0x200058b0

08006a54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006a64:	f001 fce0 	bl	8008428 <vPortEnterCritical>
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a6e:	b25b      	sxtb	r3, r3
 8006a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a74:	d103      	bne.n	8006a7e <vQueueWaitForMessageRestricted+0x2a>
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a84:	b25b      	sxtb	r3, r3
 8006a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8a:	d103      	bne.n	8006a94 <vQueueWaitForMessageRestricted+0x40>
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a94:	f001 fcfa 	bl	800848c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d106      	bne.n	8006aae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	3324      	adds	r3, #36	@ 0x24
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	68b9      	ldr	r1, [r7, #8]
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f000 fc57 	bl	800735c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006aae:	6978      	ldr	r0, [r7, #20]
 8006ab0:	f7ff fefc 	bl	80068ac <prvUnlockQueue>
	}
 8006ab4:	bf00      	nop
 8006ab6:	3718      	adds	r7, #24
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b08e      	sub	sp, #56	@ 0x38
 8006ac0:	af04      	add	r7, sp, #16
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
 8006ac8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10b      	bne.n	8006ae8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	623b      	str	r3, [r7, #32]
}
 8006ae2:	bf00      	nop
 8006ae4:	bf00      	nop
 8006ae6:	e7fd      	b.n	8006ae4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10b      	bne.n	8006b06 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	61fb      	str	r3, [r7, #28]
}
 8006b00:	bf00      	nop
 8006b02:	bf00      	nop
 8006b04:	e7fd      	b.n	8006b02 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b06:	235c      	movs	r3, #92	@ 0x5c
 8006b08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	2b5c      	cmp	r3, #92	@ 0x5c
 8006b0e:	d00b      	beq.n	8006b28 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b14:	f383 8811 	msr	BASEPRI, r3
 8006b18:	f3bf 8f6f 	isb	sy
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	61bb      	str	r3, [r7, #24]
}
 8006b22:	bf00      	nop
 8006b24:	bf00      	nop
 8006b26:	e7fd      	b.n	8006b24 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b28:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d01e      	beq.n	8006b6e <xTaskCreateStatic+0xb2>
 8006b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d01b      	beq.n	8006b6e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b38:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b3e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b42:	2202      	movs	r2, #2
 8006b44:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b48:	2300      	movs	r3, #0
 8006b4a:	9303      	str	r3, [sp, #12]
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4e:	9302      	str	r3, [sp, #8]
 8006b50:	f107 0314 	add.w	r3, r7, #20
 8006b54:	9301      	str	r3, [sp, #4]
 8006b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	68b9      	ldr	r1, [r7, #8]
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f000 f850 	bl	8006c06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006b68:	f000 f8de 	bl	8006d28 <prvAddNewTaskToReadyList>
 8006b6c:	e001      	b.n	8006b72 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b72:	697b      	ldr	r3, [r7, #20]
	}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3728      	adds	r7, #40	@ 0x28
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b08c      	sub	sp, #48	@ 0x30
 8006b80:	af04      	add	r7, sp, #16
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	603b      	str	r3, [r7, #0]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b8c:	88fb      	ldrh	r3, [r7, #6]
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4618      	mov	r0, r3
 8006b92:	f001 fd6b 	bl	800866c <pvPortMalloc>
 8006b96:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00e      	beq.n	8006bbc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b9e:	205c      	movs	r0, #92	@ 0x5c
 8006ba0:	f001 fd64 	bl	800866c <pvPortMalloc>
 8006ba4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	631a      	str	r2, [r3, #48]	@ 0x30
 8006bb2:	e005      	b.n	8006bc0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006bb4:	6978      	ldr	r0, [r7, #20]
 8006bb6:	f001 fe27 	bl	8008808 <vPortFree>
 8006bba:	e001      	b.n	8006bc0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d017      	beq.n	8006bf6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006bce:	88fa      	ldrh	r2, [r7, #6]
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	9303      	str	r3, [sp, #12]
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	9302      	str	r3, [sp, #8]
 8006bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bda:	9301      	str	r3, [sp, #4]
 8006bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	68b9      	ldr	r1, [r7, #8]
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f000 f80e 	bl	8006c06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bea:	69f8      	ldr	r0, [r7, #28]
 8006bec:	f000 f89c 	bl	8006d28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	61bb      	str	r3, [r7, #24]
 8006bf4:	e002      	b.n	8006bfc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8006bfa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006bfc:	69bb      	ldr	r3, [r7, #24]
	}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3720      	adds	r7, #32
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b088      	sub	sp, #32
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	60f8      	str	r0, [r7, #12]
 8006c0e:	60b9      	str	r1, [r7, #8]
 8006c10:	607a      	str	r2, [r7, #4]
 8006c12:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c16:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	21a5      	movs	r1, #165	@ 0xa5
 8006c20:	f00d fd2d 	bl	801467e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	f023 0307 	bic.w	r3, r3, #7
 8006c3c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	f003 0307 	and.w	r3, r3, #7
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00b      	beq.n	8006c60 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c4c:	f383 8811 	msr	BASEPRI, r3
 8006c50:	f3bf 8f6f 	isb	sy
 8006c54:	f3bf 8f4f 	dsb	sy
 8006c58:	617b      	str	r3, [r7, #20]
}
 8006c5a:	bf00      	nop
 8006c5c:	bf00      	nop
 8006c5e:	e7fd      	b.n	8006c5c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d01f      	beq.n	8006ca6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c66:	2300      	movs	r3, #0
 8006c68:	61fb      	str	r3, [r7, #28]
 8006c6a:	e012      	b.n	8006c92 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	4413      	add	r3, r2
 8006c72:	7819      	ldrb	r1, [r3, #0]
 8006c74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	4413      	add	r3, r2
 8006c7a:	3334      	adds	r3, #52	@ 0x34
 8006c7c:	460a      	mov	r2, r1
 8006c7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	4413      	add	r3, r2
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d006      	beq.n	8006c9a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	61fb      	str	r3, [r7, #28]
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	2b0f      	cmp	r3, #15
 8006c96:	d9e9      	bls.n	8006c6c <prvInitialiseNewTask+0x66>
 8006c98:	e000      	b.n	8006c9c <prvInitialiseNewTask+0x96>
			{
				break;
 8006c9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ca4:	e003      	b.n	8006cae <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb0:	2b37      	cmp	r3, #55	@ 0x37
 8006cb2:	d901      	bls.n	8006cb8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006cb4:	2337      	movs	r3, #55	@ 0x37
 8006cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cbc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cc2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ccc:	3304      	adds	r3, #4
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7fe fd7c 	bl	80057cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd6:	3318      	adds	r3, #24
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7fe fd77 	bl	80057cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ce2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cf2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	68f9      	ldr	r1, [r7, #12]
 8006d06:	69b8      	ldr	r0, [r7, #24]
 8006d08:	f001 fa60 	bl	80081cc <pxPortInitialiseStack>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d002      	beq.n	8006d1e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d1e:	bf00      	nop
 8006d20:	3720      	adds	r7, #32
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
	...

08006d28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d30:	f001 fb7a 	bl	8008428 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d34:	4b2d      	ldr	r3, [pc, #180]	@ (8006dec <prvAddNewTaskToReadyList+0xc4>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	4a2c      	ldr	r2, [pc, #176]	@ (8006dec <prvAddNewTaskToReadyList+0xc4>)
 8006d3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8006df0 <prvAddNewTaskToReadyList+0xc8>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d109      	bne.n	8006d5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d46:	4a2a      	ldr	r2, [pc, #168]	@ (8006df0 <prvAddNewTaskToReadyList+0xc8>)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d4c:	4b27      	ldr	r3, [pc, #156]	@ (8006dec <prvAddNewTaskToReadyList+0xc4>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d110      	bne.n	8006d76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d54:	f000 fc30 	bl	80075b8 <prvInitialiseTaskLists>
 8006d58:	e00d      	b.n	8006d76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d5a:	4b26      	ldr	r3, [pc, #152]	@ (8006df4 <prvAddNewTaskToReadyList+0xcc>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d109      	bne.n	8006d76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d62:	4b23      	ldr	r3, [pc, #140]	@ (8006df0 <prvAddNewTaskToReadyList+0xc8>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d802      	bhi.n	8006d76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d70:	4a1f      	ldr	r2, [pc, #124]	@ (8006df0 <prvAddNewTaskToReadyList+0xc8>)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d76:	4b20      	ldr	r3, [pc, #128]	@ (8006df8 <prvAddNewTaskToReadyList+0xd0>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	4a1e      	ldr	r2, [pc, #120]	@ (8006df8 <prvAddNewTaskToReadyList+0xd0>)
 8006d7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006d80:	4b1d      	ldr	r3, [pc, #116]	@ (8006df8 <prvAddNewTaskToReadyList+0xd0>)
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8006dfc <prvAddNewTaskToReadyList+0xd4>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d903      	bls.n	8006d9c <prvAddNewTaskToReadyList+0x74>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d98:	4a18      	ldr	r2, [pc, #96]	@ (8006dfc <prvAddNewTaskToReadyList+0xd4>)
 8006d9a:	6013      	str	r3, [r2, #0]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006da0:	4613      	mov	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4a15      	ldr	r2, [pc, #84]	@ (8006e00 <prvAddNewTaskToReadyList+0xd8>)
 8006daa:	441a      	add	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	3304      	adds	r3, #4
 8006db0:	4619      	mov	r1, r3
 8006db2:	4610      	mov	r0, r2
 8006db4:	f7fe fd17 	bl	80057e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006db8:	f001 fb68 	bl	800848c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8006df4 <prvAddNewTaskToReadyList+0xcc>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00e      	beq.n	8006de2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8006df0 <prvAddNewTaskToReadyList+0xc8>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d207      	bcs.n	8006de2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8006e04 <prvAddNewTaskToReadyList+0xdc>)
 8006dd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006de2:	bf00      	nop
 8006de4:	3708      	adds	r7, #8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	20005dc4 	.word	0x20005dc4
 8006df0:	200058f0 	.word	0x200058f0
 8006df4:	20005dd0 	.word	0x20005dd0
 8006df8:	20005de0 	.word	0x20005de0
 8006dfc:	20005dcc 	.word	0x20005dcc
 8006e00:	200058f4 	.word	0x200058f4
 8006e04:	e000ed04 	.word	0xe000ed04

08006e08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e10:	2300      	movs	r3, #0
 8006e12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d018      	beq.n	8006e4c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e1a:	4b14      	ldr	r3, [pc, #80]	@ (8006e6c <vTaskDelay+0x64>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00b      	beq.n	8006e3a <vTaskDelay+0x32>
	__asm volatile
 8006e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	60bb      	str	r3, [r7, #8]
}
 8006e34:	bf00      	nop
 8006e36:	bf00      	nop
 8006e38:	e7fd      	b.n	8006e36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006e3a:	f000 f883 	bl	8006f44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e3e:	2100      	movs	r1, #0
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fe15 	bl	8007a70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e46:	f000 f88b 	bl	8006f60 <xTaskResumeAll>
 8006e4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d107      	bne.n	8006e62 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006e52:	4b07      	ldr	r3, [pc, #28]	@ (8006e70 <vTaskDelay+0x68>)
 8006e54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e62:	bf00      	nop
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	20005dec 	.word	0x20005dec
 8006e70:	e000ed04 	.word	0xe000ed04

08006e74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b08a      	sub	sp, #40	@ 0x28
 8006e78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e82:	463a      	mov	r2, r7
 8006e84:	1d39      	adds	r1, r7, #4
 8006e86:	f107 0308 	add.w	r3, r7, #8
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fe fc4a 	bl	8005724 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e90:	6839      	ldr	r1, [r7, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	9202      	str	r2, [sp, #8]
 8006e98:	9301      	str	r3, [sp, #4]
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	9300      	str	r3, [sp, #0]
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	460a      	mov	r2, r1
 8006ea2:	4922      	ldr	r1, [pc, #136]	@ (8006f2c <vTaskStartScheduler+0xb8>)
 8006ea4:	4822      	ldr	r0, [pc, #136]	@ (8006f30 <vTaskStartScheduler+0xbc>)
 8006ea6:	f7ff fe09 	bl	8006abc <xTaskCreateStatic>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	4a21      	ldr	r2, [pc, #132]	@ (8006f34 <vTaskStartScheduler+0xc0>)
 8006eae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006eb0:	4b20      	ldr	r3, [pc, #128]	@ (8006f34 <vTaskStartScheduler+0xc0>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	617b      	str	r3, [r7, #20]
 8006ebc:	e001      	b.n	8006ec2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d102      	bne.n	8006ece <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006ec8:	f000 fe26 	bl	8007b18 <xTimerCreateTimerTask>
 8006ecc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d116      	bne.n	8006f02 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed8:	f383 8811 	msr	BASEPRI, r3
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	613b      	str	r3, [r7, #16]
}
 8006ee6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006ee8:	4b13      	ldr	r3, [pc, #76]	@ (8006f38 <vTaskStartScheduler+0xc4>)
 8006eea:	f04f 32ff 	mov.w	r2, #4294967295
 8006eee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ef0:	4b12      	ldr	r3, [pc, #72]	@ (8006f3c <vTaskStartScheduler+0xc8>)
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ef6:	4b12      	ldr	r3, [pc, #72]	@ (8006f40 <vTaskStartScheduler+0xcc>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006efc:	f001 f9f0 	bl	80082e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f00:	e00f      	b.n	8006f22 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f08:	d10b      	bne.n	8006f22 <vTaskStartScheduler+0xae>
	__asm volatile
 8006f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f0e:	f383 8811 	msr	BASEPRI, r3
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	60fb      	str	r3, [r7, #12]
}
 8006f1c:	bf00      	nop
 8006f1e:	bf00      	nop
 8006f20:	e7fd      	b.n	8006f1e <vTaskStartScheduler+0xaa>
}
 8006f22:	bf00      	nop
 8006f24:	3718      	adds	r7, #24
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	080152fc 	.word	0x080152fc
 8006f30:	08007589 	.word	0x08007589
 8006f34:	20005de8 	.word	0x20005de8
 8006f38:	20005de4 	.word	0x20005de4
 8006f3c:	20005dd0 	.word	0x20005dd0
 8006f40:	20005dc8 	.word	0x20005dc8

08006f44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f44:	b480      	push	{r7}
 8006f46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006f48:	4b04      	ldr	r3, [pc, #16]	@ (8006f5c <vTaskSuspendAll+0x18>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	4a03      	ldr	r2, [pc, #12]	@ (8006f5c <vTaskSuspendAll+0x18>)
 8006f50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006f52:	bf00      	nop
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	20005dec 	.word	0x20005dec

08006f60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f66:	2300      	movs	r3, #0
 8006f68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f6e:	4b42      	ldr	r3, [pc, #264]	@ (8007078 <xTaskResumeAll+0x118>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10b      	bne.n	8006f8e <xTaskResumeAll+0x2e>
	__asm volatile
 8006f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	603b      	str	r3, [r7, #0]
}
 8006f88:	bf00      	nop
 8006f8a:	bf00      	nop
 8006f8c:	e7fd      	b.n	8006f8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f8e:	f001 fa4b 	bl	8008428 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f92:	4b39      	ldr	r3, [pc, #228]	@ (8007078 <xTaskResumeAll+0x118>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	3b01      	subs	r3, #1
 8006f98:	4a37      	ldr	r2, [pc, #220]	@ (8007078 <xTaskResumeAll+0x118>)
 8006f9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f9c:	4b36      	ldr	r3, [pc, #216]	@ (8007078 <xTaskResumeAll+0x118>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d162      	bne.n	800706a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006fa4:	4b35      	ldr	r3, [pc, #212]	@ (800707c <xTaskResumeAll+0x11c>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d05e      	beq.n	800706a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fac:	e02f      	b.n	800700e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fae:	4b34      	ldr	r3, [pc, #208]	@ (8007080 <xTaskResumeAll+0x120>)
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	3318      	adds	r3, #24
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fe fc70 	bl	80058a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	3304      	adds	r3, #4
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7fe fc6b 	bl	80058a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fce:	4b2d      	ldr	r3, [pc, #180]	@ (8007084 <xTaskResumeAll+0x124>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d903      	bls.n	8006fde <xTaskResumeAll+0x7e>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fda:	4a2a      	ldr	r2, [pc, #168]	@ (8007084 <xTaskResumeAll+0x124>)
 8006fdc:	6013      	str	r3, [r2, #0]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	4413      	add	r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4a27      	ldr	r2, [pc, #156]	@ (8007088 <xTaskResumeAll+0x128>)
 8006fec:	441a      	add	r2, r3
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	3304      	adds	r3, #4
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	4610      	mov	r0, r2
 8006ff6:	f7fe fbf6 	bl	80057e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ffe:	4b23      	ldr	r3, [pc, #140]	@ (800708c <xTaskResumeAll+0x12c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007004:	429a      	cmp	r2, r3
 8007006:	d302      	bcc.n	800700e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007008:	4b21      	ldr	r3, [pc, #132]	@ (8007090 <xTaskResumeAll+0x130>)
 800700a:	2201      	movs	r2, #1
 800700c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800700e:	4b1c      	ldr	r3, [pc, #112]	@ (8007080 <xTaskResumeAll+0x120>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1cb      	bne.n	8006fae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d001      	beq.n	8007020 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800701c:	f000 fb6a 	bl	80076f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007020:	4b1c      	ldr	r3, [pc, #112]	@ (8007094 <xTaskResumeAll+0x134>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d010      	beq.n	800704e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800702c:	f000 f858 	bl	80070e0 <xTaskIncrementTick>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d002      	beq.n	800703c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007036:	4b16      	ldr	r3, [pc, #88]	@ (8007090 <xTaskResumeAll+0x130>)
 8007038:	2201      	movs	r2, #1
 800703a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3b01      	subs	r3, #1
 8007040:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1f1      	bne.n	800702c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007048:	4b12      	ldr	r3, [pc, #72]	@ (8007094 <xTaskResumeAll+0x134>)
 800704a:	2200      	movs	r2, #0
 800704c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800704e:	4b10      	ldr	r3, [pc, #64]	@ (8007090 <xTaskResumeAll+0x130>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d009      	beq.n	800706a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007056:	2301      	movs	r3, #1
 8007058:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800705a:	4b0f      	ldr	r3, [pc, #60]	@ (8007098 <xTaskResumeAll+0x138>)
 800705c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007060:	601a      	str	r2, [r3, #0]
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800706a:	f001 fa0f 	bl	800848c <vPortExitCritical>

	return xAlreadyYielded;
 800706e:	68bb      	ldr	r3, [r7, #8]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	20005dec 	.word	0x20005dec
 800707c:	20005dc4 	.word	0x20005dc4
 8007080:	20005d84 	.word	0x20005d84
 8007084:	20005dcc 	.word	0x20005dcc
 8007088:	200058f4 	.word	0x200058f4
 800708c:	200058f0 	.word	0x200058f0
 8007090:	20005dd8 	.word	0x20005dd8
 8007094:	20005dd4 	.word	0x20005dd4
 8007098:	e000ed04 	.word	0xe000ed04

0800709c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80070a2:	4b05      	ldr	r3, [pc, #20]	@ (80070b8 <xTaskGetTickCount+0x1c>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80070a8:	687b      	ldr	r3, [r7, #4]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	20005dc8 	.word	0x20005dc8

080070bc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070c2:	f001 fa91 	bl	80085e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80070c6:	2300      	movs	r3, #0
 80070c8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80070ca:	4b04      	ldr	r3, [pc, #16]	@ (80070dc <xTaskGetTickCountFromISR+0x20>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070d0:	683b      	ldr	r3, [r7, #0]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	20005dc8 	.word	0x20005dc8

080070e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80070e6:	2300      	movs	r3, #0
 80070e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070ea:	4b4f      	ldr	r3, [pc, #316]	@ (8007228 <xTaskIncrementTick+0x148>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f040 8090 	bne.w	8007214 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80070f4:	4b4d      	ldr	r3, [pc, #308]	@ (800722c <xTaskIncrementTick+0x14c>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	3301      	adds	r3, #1
 80070fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80070fc:	4a4b      	ldr	r2, [pc, #300]	@ (800722c <xTaskIncrementTick+0x14c>)
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d121      	bne.n	800714c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007108:	4b49      	ldr	r3, [pc, #292]	@ (8007230 <xTaskIncrementTick+0x150>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00b      	beq.n	800712a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007116:	f383 8811 	msr	BASEPRI, r3
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	603b      	str	r3, [r7, #0]
}
 8007124:	bf00      	nop
 8007126:	bf00      	nop
 8007128:	e7fd      	b.n	8007126 <xTaskIncrementTick+0x46>
 800712a:	4b41      	ldr	r3, [pc, #260]	@ (8007230 <xTaskIncrementTick+0x150>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	60fb      	str	r3, [r7, #12]
 8007130:	4b40      	ldr	r3, [pc, #256]	@ (8007234 <xTaskIncrementTick+0x154>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a3e      	ldr	r2, [pc, #248]	@ (8007230 <xTaskIncrementTick+0x150>)
 8007136:	6013      	str	r3, [r2, #0]
 8007138:	4a3e      	ldr	r2, [pc, #248]	@ (8007234 <xTaskIncrementTick+0x154>)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6013      	str	r3, [r2, #0]
 800713e:	4b3e      	ldr	r3, [pc, #248]	@ (8007238 <xTaskIncrementTick+0x158>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	3301      	adds	r3, #1
 8007144:	4a3c      	ldr	r2, [pc, #240]	@ (8007238 <xTaskIncrementTick+0x158>)
 8007146:	6013      	str	r3, [r2, #0]
 8007148:	f000 fad4 	bl	80076f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800714c:	4b3b      	ldr	r3, [pc, #236]	@ (800723c <xTaskIncrementTick+0x15c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	429a      	cmp	r2, r3
 8007154:	d349      	bcc.n	80071ea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007156:	4b36      	ldr	r3, [pc, #216]	@ (8007230 <xTaskIncrementTick+0x150>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d104      	bne.n	800716a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007160:	4b36      	ldr	r3, [pc, #216]	@ (800723c <xTaskIncrementTick+0x15c>)
 8007162:	f04f 32ff 	mov.w	r2, #4294967295
 8007166:	601a      	str	r2, [r3, #0]
					break;
 8007168:	e03f      	b.n	80071ea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800716a:	4b31      	ldr	r3, [pc, #196]	@ (8007230 <xTaskIncrementTick+0x150>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	429a      	cmp	r2, r3
 8007180:	d203      	bcs.n	800718a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007182:	4a2e      	ldr	r2, [pc, #184]	@ (800723c <xTaskIncrementTick+0x15c>)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007188:	e02f      	b.n	80071ea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	3304      	adds	r3, #4
 800718e:	4618      	mov	r0, r3
 8007190:	f7fe fb86 	bl	80058a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007198:	2b00      	cmp	r3, #0
 800719a:	d004      	beq.n	80071a6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	3318      	adds	r3, #24
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fe fb7d 	bl	80058a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071aa:	4b25      	ldr	r3, [pc, #148]	@ (8007240 <xTaskIncrementTick+0x160>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d903      	bls.n	80071ba <xTaskIncrementTick+0xda>
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b6:	4a22      	ldr	r2, [pc, #136]	@ (8007240 <xTaskIncrementTick+0x160>)
 80071b8:	6013      	str	r3, [r2, #0]
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071be:	4613      	mov	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4413      	add	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	4a1f      	ldr	r2, [pc, #124]	@ (8007244 <xTaskIncrementTick+0x164>)
 80071c8:	441a      	add	r2, r3
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	3304      	adds	r3, #4
 80071ce:	4619      	mov	r1, r3
 80071d0:	4610      	mov	r0, r2
 80071d2:	f7fe fb08 	bl	80057e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071da:	4b1b      	ldr	r3, [pc, #108]	@ (8007248 <xTaskIncrementTick+0x168>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d3b8      	bcc.n	8007156 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80071e4:	2301      	movs	r3, #1
 80071e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071e8:	e7b5      	b.n	8007156 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071ea:	4b17      	ldr	r3, [pc, #92]	@ (8007248 <xTaskIncrementTick+0x168>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071f0:	4914      	ldr	r1, [pc, #80]	@ (8007244 <xTaskIncrementTick+0x164>)
 80071f2:	4613      	mov	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4413      	add	r3, r2
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	440b      	add	r3, r1
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d901      	bls.n	8007206 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007202:	2301      	movs	r3, #1
 8007204:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007206:	4b11      	ldr	r3, [pc, #68]	@ (800724c <xTaskIncrementTick+0x16c>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d007      	beq.n	800721e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800720e:	2301      	movs	r3, #1
 8007210:	617b      	str	r3, [r7, #20]
 8007212:	e004      	b.n	800721e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007214:	4b0e      	ldr	r3, [pc, #56]	@ (8007250 <xTaskIncrementTick+0x170>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3301      	adds	r3, #1
 800721a:	4a0d      	ldr	r2, [pc, #52]	@ (8007250 <xTaskIncrementTick+0x170>)
 800721c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800721e:	697b      	ldr	r3, [r7, #20]
}
 8007220:	4618      	mov	r0, r3
 8007222:	3718      	adds	r7, #24
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	20005dec 	.word	0x20005dec
 800722c:	20005dc8 	.word	0x20005dc8
 8007230:	20005d7c 	.word	0x20005d7c
 8007234:	20005d80 	.word	0x20005d80
 8007238:	20005ddc 	.word	0x20005ddc
 800723c:	20005de4 	.word	0x20005de4
 8007240:	20005dcc 	.word	0x20005dcc
 8007244:	200058f4 	.word	0x200058f4
 8007248:	200058f0 	.word	0x200058f0
 800724c:	20005dd8 	.word	0x20005dd8
 8007250:	20005dd4 	.word	0x20005dd4

08007254 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800725a:	4b28      	ldr	r3, [pc, #160]	@ (80072fc <vTaskSwitchContext+0xa8>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d003      	beq.n	800726a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007262:	4b27      	ldr	r3, [pc, #156]	@ (8007300 <vTaskSwitchContext+0xac>)
 8007264:	2201      	movs	r2, #1
 8007266:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007268:	e042      	b.n	80072f0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800726a:	4b25      	ldr	r3, [pc, #148]	@ (8007300 <vTaskSwitchContext+0xac>)
 800726c:	2200      	movs	r2, #0
 800726e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007270:	4b24      	ldr	r3, [pc, #144]	@ (8007304 <vTaskSwitchContext+0xb0>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	60fb      	str	r3, [r7, #12]
 8007276:	e011      	b.n	800729c <vTaskSwitchContext+0x48>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10b      	bne.n	8007296 <vTaskSwitchContext+0x42>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	607b      	str	r3, [r7, #4]
}
 8007290:	bf00      	nop
 8007292:	bf00      	nop
 8007294:	e7fd      	b.n	8007292 <vTaskSwitchContext+0x3e>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	3b01      	subs	r3, #1
 800729a:	60fb      	str	r3, [r7, #12]
 800729c:	491a      	ldr	r1, [pc, #104]	@ (8007308 <vTaskSwitchContext+0xb4>)
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	4613      	mov	r3, r2
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	4413      	add	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	440b      	add	r3, r1
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d0e3      	beq.n	8007278 <vTaskSwitchContext+0x24>
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	4613      	mov	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	4a13      	ldr	r2, [pc, #76]	@ (8007308 <vTaskSwitchContext+0xb4>)
 80072bc:	4413      	add	r3, r2
 80072be:	60bb      	str	r3, [r7, #8]
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	605a      	str	r2, [r3, #4]
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	3308      	adds	r3, #8
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d104      	bne.n	80072e0 <vTaskSwitchContext+0x8c>
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	605a      	str	r2, [r3, #4]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	4a09      	ldr	r2, [pc, #36]	@ (800730c <vTaskSwitchContext+0xb8>)
 80072e8:	6013      	str	r3, [r2, #0]
 80072ea:	4a06      	ldr	r2, [pc, #24]	@ (8007304 <vTaskSwitchContext+0xb0>)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6013      	str	r3, [r2, #0]
}
 80072f0:	bf00      	nop
 80072f2:	3714      	adds	r7, #20
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr
 80072fc:	20005dec 	.word	0x20005dec
 8007300:	20005dd8 	.word	0x20005dd8
 8007304:	20005dcc 	.word	0x20005dcc
 8007308:	200058f4 	.word	0x200058f4
 800730c:	200058f0 	.word	0x200058f0

08007310 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10b      	bne.n	8007338 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	60fb      	str	r3, [r7, #12]
}
 8007332:	bf00      	nop
 8007334:	bf00      	nop
 8007336:	e7fd      	b.n	8007334 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007338:	4b07      	ldr	r3, [pc, #28]	@ (8007358 <vTaskPlaceOnEventList+0x48>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	3318      	adds	r3, #24
 800733e:	4619      	mov	r1, r3
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f7fe fa74 	bl	800582e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007346:	2101      	movs	r1, #1
 8007348:	6838      	ldr	r0, [r7, #0]
 800734a:	f000 fb91 	bl	8007a70 <prvAddCurrentTaskToDelayedList>
}
 800734e:	bf00      	nop
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	200058f0 	.word	0x200058f0

0800735c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10b      	bne.n	8007386 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800736e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	617b      	str	r3, [r7, #20]
}
 8007380:	bf00      	nop
 8007382:	bf00      	nop
 8007384:	e7fd      	b.n	8007382 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007386:	4b0a      	ldr	r3, [pc, #40]	@ (80073b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	3318      	adds	r3, #24
 800738c:	4619      	mov	r1, r3
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f7fe fa29 	bl	80057e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d002      	beq.n	80073a0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800739a:	f04f 33ff 	mov.w	r3, #4294967295
 800739e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80073a0:	6879      	ldr	r1, [r7, #4]
 80073a2:	68b8      	ldr	r0, [r7, #8]
 80073a4:	f000 fb64 	bl	8007a70 <prvAddCurrentTaskToDelayedList>
	}
 80073a8:	bf00      	nop
 80073aa:	3718      	adds	r7, #24
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	200058f0 	.word	0x200058f0

080073b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10b      	bne.n	80073e2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80073ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	60fb      	str	r3, [r7, #12]
}
 80073dc:	bf00      	nop
 80073de:	bf00      	nop
 80073e0:	e7fd      	b.n	80073de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	3318      	adds	r3, #24
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7fe fa5a 	bl	80058a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007464 <xTaskRemoveFromEventList+0xb0>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d11d      	bne.n	8007430 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	3304      	adds	r3, #4
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7fe fa51 	bl	80058a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007402:	4b19      	ldr	r3, [pc, #100]	@ (8007468 <xTaskRemoveFromEventList+0xb4>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	429a      	cmp	r2, r3
 8007408:	d903      	bls.n	8007412 <xTaskRemoveFromEventList+0x5e>
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740e:	4a16      	ldr	r2, [pc, #88]	@ (8007468 <xTaskRemoveFromEventList+0xb4>)
 8007410:	6013      	str	r3, [r2, #0]
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007416:	4613      	mov	r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4a13      	ldr	r2, [pc, #76]	@ (800746c <xTaskRemoveFromEventList+0xb8>)
 8007420:	441a      	add	r2, r3
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	3304      	adds	r3, #4
 8007426:	4619      	mov	r1, r3
 8007428:	4610      	mov	r0, r2
 800742a:	f7fe f9dc 	bl	80057e6 <vListInsertEnd>
 800742e:	e005      	b.n	800743c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	3318      	adds	r3, #24
 8007434:	4619      	mov	r1, r3
 8007436:	480e      	ldr	r0, [pc, #56]	@ (8007470 <xTaskRemoveFromEventList+0xbc>)
 8007438:	f7fe f9d5 	bl	80057e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007440:	4b0c      	ldr	r3, [pc, #48]	@ (8007474 <xTaskRemoveFromEventList+0xc0>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007446:	429a      	cmp	r2, r3
 8007448:	d905      	bls.n	8007456 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800744a:	2301      	movs	r3, #1
 800744c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800744e:	4b0a      	ldr	r3, [pc, #40]	@ (8007478 <xTaskRemoveFromEventList+0xc4>)
 8007450:	2201      	movs	r2, #1
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	e001      	b.n	800745a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007456:	2300      	movs	r3, #0
 8007458:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800745a:	697b      	ldr	r3, [r7, #20]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3718      	adds	r7, #24
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	20005dec 	.word	0x20005dec
 8007468:	20005dcc 	.word	0x20005dcc
 800746c:	200058f4 	.word	0x200058f4
 8007470:	20005d84 	.word	0x20005d84
 8007474:	200058f0 	.word	0x200058f0
 8007478:	20005dd8 	.word	0x20005dd8

0800747c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007484:	4b06      	ldr	r3, [pc, #24]	@ (80074a0 <vTaskInternalSetTimeOutState+0x24>)
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800748c:	4b05      	ldr	r3, [pc, #20]	@ (80074a4 <vTaskInternalSetTimeOutState+0x28>)
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	605a      	str	r2, [r3, #4]
}
 8007494:	bf00      	nop
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	20005ddc 	.word	0x20005ddc
 80074a4:	20005dc8 	.word	0x20005dc8

080074a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b088      	sub	sp, #32
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10b      	bne.n	80074d0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80074b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	613b      	str	r3, [r7, #16]
}
 80074ca:	bf00      	nop
 80074cc:	bf00      	nop
 80074ce:	e7fd      	b.n	80074cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10b      	bne.n	80074ee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80074d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	60fb      	str	r3, [r7, #12]
}
 80074e8:	bf00      	nop
 80074ea:	bf00      	nop
 80074ec:	e7fd      	b.n	80074ea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80074ee:	f000 ff9b 	bl	8008428 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80074f2:	4b1d      	ldr	r3, [pc, #116]	@ (8007568 <xTaskCheckForTimeOut+0xc0>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	69ba      	ldr	r2, [r7, #24]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800750a:	d102      	bne.n	8007512 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800750c:	2300      	movs	r3, #0
 800750e:	61fb      	str	r3, [r7, #28]
 8007510:	e023      	b.n	800755a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	4b15      	ldr	r3, [pc, #84]	@ (800756c <xTaskCheckForTimeOut+0xc4>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	429a      	cmp	r2, r3
 800751c:	d007      	beq.n	800752e <xTaskCheckForTimeOut+0x86>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	69ba      	ldr	r2, [r7, #24]
 8007524:	429a      	cmp	r2, r3
 8007526:	d302      	bcc.n	800752e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007528:	2301      	movs	r3, #1
 800752a:	61fb      	str	r3, [r7, #28]
 800752c:	e015      	b.n	800755a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	429a      	cmp	r2, r3
 8007536:	d20b      	bcs.n	8007550 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	1ad2      	subs	r2, r2, r3
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f7ff ff99 	bl	800747c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800754a:	2300      	movs	r3, #0
 800754c:	61fb      	str	r3, [r7, #28]
 800754e:	e004      	b.n	800755a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	2200      	movs	r2, #0
 8007554:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007556:	2301      	movs	r3, #1
 8007558:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800755a:	f000 ff97 	bl	800848c <vPortExitCritical>

	return xReturn;
 800755e:	69fb      	ldr	r3, [r7, #28]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3720      	adds	r7, #32
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	20005dc8 	.word	0x20005dc8
 800756c:	20005ddc 	.word	0x20005ddc

08007570 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007570:	b480      	push	{r7}
 8007572:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007574:	4b03      	ldr	r3, [pc, #12]	@ (8007584 <vTaskMissedYield+0x14>)
 8007576:	2201      	movs	r2, #1
 8007578:	601a      	str	r2, [r3, #0]
}
 800757a:	bf00      	nop
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	20005dd8 	.word	0x20005dd8

08007588 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007590:	f000 f852 	bl	8007638 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007594:	4b06      	ldr	r3, [pc, #24]	@ (80075b0 <prvIdleTask+0x28>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d9f9      	bls.n	8007590 <prvIdleTask+0x8>
			{
				taskYIELD();
 800759c:	4b05      	ldr	r3, [pc, #20]	@ (80075b4 <prvIdleTask+0x2c>)
 800759e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075a2:	601a      	str	r2, [r3, #0]
 80075a4:	f3bf 8f4f 	dsb	sy
 80075a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80075ac:	e7f0      	b.n	8007590 <prvIdleTask+0x8>
 80075ae:	bf00      	nop
 80075b0:	200058f4 	.word	0x200058f4
 80075b4:	e000ed04 	.word	0xe000ed04

080075b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075be:	2300      	movs	r3, #0
 80075c0:	607b      	str	r3, [r7, #4]
 80075c2:	e00c      	b.n	80075de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	4613      	mov	r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4413      	add	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4a12      	ldr	r2, [pc, #72]	@ (8007618 <prvInitialiseTaskLists+0x60>)
 80075d0:	4413      	add	r3, r2
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7fe f8da 	bl	800578c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	3301      	adds	r3, #1
 80075dc:	607b      	str	r3, [r7, #4]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b37      	cmp	r3, #55	@ 0x37
 80075e2:	d9ef      	bls.n	80075c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80075e4:	480d      	ldr	r0, [pc, #52]	@ (800761c <prvInitialiseTaskLists+0x64>)
 80075e6:	f7fe f8d1 	bl	800578c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80075ea:	480d      	ldr	r0, [pc, #52]	@ (8007620 <prvInitialiseTaskLists+0x68>)
 80075ec:	f7fe f8ce 	bl	800578c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80075f0:	480c      	ldr	r0, [pc, #48]	@ (8007624 <prvInitialiseTaskLists+0x6c>)
 80075f2:	f7fe f8cb 	bl	800578c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80075f6:	480c      	ldr	r0, [pc, #48]	@ (8007628 <prvInitialiseTaskLists+0x70>)
 80075f8:	f7fe f8c8 	bl	800578c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80075fc:	480b      	ldr	r0, [pc, #44]	@ (800762c <prvInitialiseTaskLists+0x74>)
 80075fe:	f7fe f8c5 	bl	800578c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007602:	4b0b      	ldr	r3, [pc, #44]	@ (8007630 <prvInitialiseTaskLists+0x78>)
 8007604:	4a05      	ldr	r2, [pc, #20]	@ (800761c <prvInitialiseTaskLists+0x64>)
 8007606:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007608:	4b0a      	ldr	r3, [pc, #40]	@ (8007634 <prvInitialiseTaskLists+0x7c>)
 800760a:	4a05      	ldr	r2, [pc, #20]	@ (8007620 <prvInitialiseTaskLists+0x68>)
 800760c:	601a      	str	r2, [r3, #0]
}
 800760e:	bf00      	nop
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	200058f4 	.word	0x200058f4
 800761c:	20005d54 	.word	0x20005d54
 8007620:	20005d68 	.word	0x20005d68
 8007624:	20005d84 	.word	0x20005d84
 8007628:	20005d98 	.word	0x20005d98
 800762c:	20005db0 	.word	0x20005db0
 8007630:	20005d7c 	.word	0x20005d7c
 8007634:	20005d80 	.word	0x20005d80

08007638 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800763e:	e019      	b.n	8007674 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007640:	f000 fef2 	bl	8008428 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007644:	4b10      	ldr	r3, [pc, #64]	@ (8007688 <prvCheckTasksWaitingTermination+0x50>)
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	3304      	adds	r3, #4
 8007650:	4618      	mov	r0, r3
 8007652:	f7fe f925 	bl	80058a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007656:	4b0d      	ldr	r3, [pc, #52]	@ (800768c <prvCheckTasksWaitingTermination+0x54>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	3b01      	subs	r3, #1
 800765c:	4a0b      	ldr	r2, [pc, #44]	@ (800768c <prvCheckTasksWaitingTermination+0x54>)
 800765e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007660:	4b0b      	ldr	r3, [pc, #44]	@ (8007690 <prvCheckTasksWaitingTermination+0x58>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	3b01      	subs	r3, #1
 8007666:	4a0a      	ldr	r2, [pc, #40]	@ (8007690 <prvCheckTasksWaitingTermination+0x58>)
 8007668:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800766a:	f000 ff0f 	bl	800848c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f810 	bl	8007694 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007674:	4b06      	ldr	r3, [pc, #24]	@ (8007690 <prvCheckTasksWaitingTermination+0x58>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1e1      	bne.n	8007640 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800767c:	bf00      	nop
 800767e:	bf00      	nop
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	20005d98 	.word	0x20005d98
 800768c:	20005dc4 	.word	0x20005dc4
 8007690:	20005dac 	.word	0x20005dac

08007694 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d108      	bne.n	80076b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076aa:	4618      	mov	r0, r3
 80076ac:	f001 f8ac 	bl	8008808 <vPortFree>
				vPortFree( pxTCB );
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f001 f8a9 	bl	8008808 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80076b6:	e019      	b.n	80076ec <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d103      	bne.n	80076ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f001 f8a0 	bl	8008808 <vPortFree>
	}
 80076c8:	e010      	b.n	80076ec <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d00b      	beq.n	80076ec <prvDeleteTCB+0x58>
	__asm volatile
 80076d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d8:	f383 8811 	msr	BASEPRI, r3
 80076dc:	f3bf 8f6f 	isb	sy
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	60fb      	str	r3, [r7, #12]
}
 80076e6:	bf00      	nop
 80076e8:	bf00      	nop
 80076ea:	e7fd      	b.n	80076e8 <prvDeleteTCB+0x54>
	}
 80076ec:	bf00      	nop
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076fa:	4b0c      	ldr	r3, [pc, #48]	@ (800772c <prvResetNextTaskUnblockTime+0x38>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d104      	bne.n	800770e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007704:	4b0a      	ldr	r3, [pc, #40]	@ (8007730 <prvResetNextTaskUnblockTime+0x3c>)
 8007706:	f04f 32ff 	mov.w	r2, #4294967295
 800770a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800770c:	e008      	b.n	8007720 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800770e:	4b07      	ldr	r3, [pc, #28]	@ (800772c <prvResetNextTaskUnblockTime+0x38>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	4a04      	ldr	r2, [pc, #16]	@ (8007730 <prvResetNextTaskUnblockTime+0x3c>)
 800771e:	6013      	str	r3, [r2, #0]
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	20005d7c 	.word	0x20005d7c
 8007730:	20005de4 	.word	0x20005de4

08007734 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800773a:	4b05      	ldr	r3, [pc, #20]	@ (8007750 <xTaskGetCurrentTaskHandle+0x1c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007740:	687b      	ldr	r3, [r7, #4]
	}
 8007742:	4618      	mov	r0, r3
 8007744:	370c      	adds	r7, #12
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	200058f0 	.word	0x200058f0

08007754 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800775a:	4b0b      	ldr	r3, [pc, #44]	@ (8007788 <xTaskGetSchedulerState+0x34>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d102      	bne.n	8007768 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007762:	2301      	movs	r3, #1
 8007764:	607b      	str	r3, [r7, #4]
 8007766:	e008      	b.n	800777a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007768:	4b08      	ldr	r3, [pc, #32]	@ (800778c <xTaskGetSchedulerState+0x38>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d102      	bne.n	8007776 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007770:	2302      	movs	r3, #2
 8007772:	607b      	str	r3, [r7, #4]
 8007774:	e001      	b.n	800777a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007776:	2300      	movs	r3, #0
 8007778:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800777a:	687b      	ldr	r3, [r7, #4]
	}
 800777c:	4618      	mov	r0, r3
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr
 8007788:	20005dd0 	.word	0x20005dd0
 800778c:	20005dec 	.word	0x20005dec

08007790 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800779c:	2300      	movs	r3, #0
 800779e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d051      	beq.n	800784a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077aa:	4b2a      	ldr	r3, [pc, #168]	@ (8007854 <xTaskPriorityInherit+0xc4>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d241      	bcs.n	8007838 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	db06      	blt.n	80077ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077bc:	4b25      	ldr	r3, [pc, #148]	@ (8007854 <xTaskPriorityInherit+0xc4>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	6959      	ldr	r1, [r3, #20]
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077d2:	4613      	mov	r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4413      	add	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	4a1f      	ldr	r2, [pc, #124]	@ (8007858 <xTaskPriorityInherit+0xc8>)
 80077dc:	4413      	add	r3, r2
 80077de:	4299      	cmp	r1, r3
 80077e0:	d122      	bne.n	8007828 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	3304      	adds	r3, #4
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7fe f85a 	bl	80058a0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80077ec:	4b19      	ldr	r3, [pc, #100]	@ (8007854 <xTaskPriorityInherit+0xc4>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077fa:	4b18      	ldr	r3, [pc, #96]	@ (800785c <xTaskPriorityInherit+0xcc>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d903      	bls.n	800780a <xTaskPriorityInherit+0x7a>
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007806:	4a15      	ldr	r2, [pc, #84]	@ (800785c <xTaskPriorityInherit+0xcc>)
 8007808:	6013      	str	r3, [r2, #0]
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800780e:	4613      	mov	r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4413      	add	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4a10      	ldr	r2, [pc, #64]	@ (8007858 <xTaskPriorityInherit+0xc8>)
 8007818:	441a      	add	r2, r3
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	3304      	adds	r3, #4
 800781e:	4619      	mov	r1, r3
 8007820:	4610      	mov	r0, r2
 8007822:	f7fd ffe0 	bl	80057e6 <vListInsertEnd>
 8007826:	e004      	b.n	8007832 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007828:	4b0a      	ldr	r3, [pc, #40]	@ (8007854 <xTaskPriorityInherit+0xc4>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007832:	2301      	movs	r3, #1
 8007834:	60fb      	str	r3, [r7, #12]
 8007836:	e008      	b.n	800784a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800783c:	4b05      	ldr	r3, [pc, #20]	@ (8007854 <xTaskPriorityInherit+0xc4>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007842:	429a      	cmp	r2, r3
 8007844:	d201      	bcs.n	800784a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007846:	2301      	movs	r3, #1
 8007848:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800784a:	68fb      	ldr	r3, [r7, #12]
	}
 800784c:	4618      	mov	r0, r3
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	200058f0 	.word	0x200058f0
 8007858:	200058f4 	.word	0x200058f4
 800785c:	20005dcc 	.word	0x20005dcc

08007860 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800786c:	2300      	movs	r3, #0
 800786e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d058      	beq.n	8007928 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007876:	4b2f      	ldr	r3, [pc, #188]	@ (8007934 <xTaskPriorityDisinherit+0xd4>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	429a      	cmp	r2, r3
 800787e:	d00b      	beq.n	8007898 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	60fb      	str	r3, [r7, #12]
}
 8007892:	bf00      	nop
 8007894:	bf00      	nop
 8007896:	e7fd      	b.n	8007894 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800789c:	2b00      	cmp	r3, #0
 800789e:	d10b      	bne.n	80078b8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80078a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	60bb      	str	r3, [r7, #8]
}
 80078b2:	bf00      	nop
 80078b4:	bf00      	nop
 80078b6:	e7fd      	b.n	80078b4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078bc:	1e5a      	subs	r2, r3, #1
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d02c      	beq.n	8007928 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d128      	bne.n	8007928 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	3304      	adds	r3, #4
 80078da:	4618      	mov	r0, r3
 80078dc:	f7fd ffe0 	bl	80058a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078f8:	4b0f      	ldr	r3, [pc, #60]	@ (8007938 <xTaskPriorityDisinherit+0xd8>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d903      	bls.n	8007908 <xTaskPriorityDisinherit+0xa8>
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007904:	4a0c      	ldr	r2, [pc, #48]	@ (8007938 <xTaskPriorityDisinherit+0xd8>)
 8007906:	6013      	str	r3, [r2, #0]
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800790c:	4613      	mov	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	4413      	add	r3, r2
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	4a09      	ldr	r2, [pc, #36]	@ (800793c <xTaskPriorityDisinherit+0xdc>)
 8007916:	441a      	add	r2, r3
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	3304      	adds	r3, #4
 800791c:	4619      	mov	r1, r3
 800791e:	4610      	mov	r0, r2
 8007920:	f7fd ff61 	bl	80057e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007924:	2301      	movs	r3, #1
 8007926:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007928:	697b      	ldr	r3, [r7, #20]
	}
 800792a:	4618      	mov	r0, r3
 800792c:	3718      	adds	r7, #24
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	200058f0 	.word	0x200058f0
 8007938:	20005dcc 	.word	0x20005dcc
 800793c:	200058f4 	.word	0x200058f4

08007940 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007940:	b580      	push	{r7, lr}
 8007942:	b088      	sub	sp, #32
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800794e:	2301      	movs	r3, #1
 8007950:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d06c      	beq.n	8007a32 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10b      	bne.n	8007978 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	60fb      	str	r3, [r7, #12]
}
 8007972:	bf00      	nop
 8007974:	bf00      	nop
 8007976:	e7fd      	b.n	8007974 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800797c:	683a      	ldr	r2, [r7, #0]
 800797e:	429a      	cmp	r2, r3
 8007980:	d902      	bls.n	8007988 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	61fb      	str	r3, [r7, #28]
 8007986:	e002      	b.n	800798e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800798c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007992:	69fa      	ldr	r2, [r7, #28]
 8007994:	429a      	cmp	r2, r3
 8007996:	d04c      	beq.n	8007a32 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800799c:	697a      	ldr	r2, [r7, #20]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d147      	bne.n	8007a32 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80079a2:	4b26      	ldr	r3, [pc, #152]	@ (8007a3c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	69ba      	ldr	r2, [r7, #24]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d10b      	bne.n	80079c4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80079ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b0:	f383 8811 	msr	BASEPRI, r3
 80079b4:	f3bf 8f6f 	isb	sy
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	60bb      	str	r3, [r7, #8]
}
 80079be:	bf00      	nop
 80079c0:	bf00      	nop
 80079c2:	e7fd      	b.n	80079c0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	69fa      	ldr	r2, [r7, #28]
 80079ce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	db04      	blt.n	80079e2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	6959      	ldr	r1, [r3, #20]
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	4613      	mov	r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4413      	add	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4a13      	ldr	r2, [pc, #76]	@ (8007a40 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80079f2:	4413      	add	r3, r2
 80079f4:	4299      	cmp	r1, r3
 80079f6:	d11c      	bne.n	8007a32 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	3304      	adds	r3, #4
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7fd ff4f 	bl	80058a0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a06:	4b0f      	ldr	r3, [pc, #60]	@ (8007a44 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d903      	bls.n	8007a16 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a12:	4a0c      	ldr	r2, [pc, #48]	@ (8007a44 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007a14:	6013      	str	r3, [r2, #0]
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	4a07      	ldr	r2, [pc, #28]	@ (8007a40 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007a24:	441a      	add	r2, r3
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	3304      	adds	r3, #4
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	f7fd feda 	bl	80057e6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a32:	bf00      	nop
 8007a34:	3720      	adds	r7, #32
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	200058f0 	.word	0x200058f0
 8007a40:	200058f4 	.word	0x200058f4
 8007a44:	20005dcc 	.word	0x20005dcc

08007a48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007a48:	b480      	push	{r7}
 8007a4a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007a4c:	4b07      	ldr	r3, [pc, #28]	@ (8007a6c <pvTaskIncrementMutexHeldCount+0x24>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d004      	beq.n	8007a5e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007a54:	4b05      	ldr	r3, [pc, #20]	@ (8007a6c <pvTaskIncrementMutexHeldCount+0x24>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a5a:	3201      	adds	r2, #1
 8007a5c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007a5e:	4b03      	ldr	r3, [pc, #12]	@ (8007a6c <pvTaskIncrementMutexHeldCount+0x24>)
 8007a60:	681b      	ldr	r3, [r3, #0]
	}
 8007a62:	4618      	mov	r0, r3
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr
 8007a6c:	200058f0 	.word	0x200058f0

08007a70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a7a:	4b21      	ldr	r3, [pc, #132]	@ (8007b00 <prvAddCurrentTaskToDelayedList+0x90>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a80:	4b20      	ldr	r3, [pc, #128]	@ (8007b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3304      	adds	r3, #4
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7fd ff0a 	bl	80058a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a92:	d10a      	bne.n	8007aaa <prvAddCurrentTaskToDelayedList+0x3a>
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d007      	beq.n	8007aaa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8007b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	3304      	adds	r3, #4
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	4819      	ldr	r0, [pc, #100]	@ (8007b08 <prvAddCurrentTaskToDelayedList+0x98>)
 8007aa4:	f7fd fe9f 	bl	80057e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007aa8:	e026      	b.n	8007af8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4413      	add	r3, r2
 8007ab0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ab2:	4b14      	ldr	r3, [pc, #80]	@ (8007b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68ba      	ldr	r2, [r7, #8]
 8007ab8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007aba:	68ba      	ldr	r2, [r7, #8]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d209      	bcs.n	8007ad6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ac2:	4b12      	ldr	r3, [pc, #72]	@ (8007b0c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8007b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	3304      	adds	r3, #4
 8007acc:	4619      	mov	r1, r3
 8007ace:	4610      	mov	r0, r2
 8007ad0:	f7fd fead 	bl	800582e <vListInsert>
}
 8007ad4:	e010      	b.n	8007af8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8007b10 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	4b0a      	ldr	r3, [pc, #40]	@ (8007b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	3304      	adds	r3, #4
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	4610      	mov	r0, r2
 8007ae4:	f7fd fea3 	bl	800582e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8007b14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d202      	bcs.n	8007af8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007af2:	4a08      	ldr	r2, [pc, #32]	@ (8007b14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	6013      	str	r3, [r2, #0]
}
 8007af8:	bf00      	nop
 8007afa:	3710      	adds	r7, #16
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	20005dc8 	.word	0x20005dc8
 8007b04:	200058f0 	.word	0x200058f0
 8007b08:	20005db0 	.word	0x20005db0
 8007b0c:	20005d80 	.word	0x20005d80
 8007b10:	20005d7c 	.word	0x20005d7c
 8007b14:	20005de4 	.word	0x20005de4

08007b18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b08a      	sub	sp, #40	@ 0x28
 8007b1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007b22:	f000 fb13 	bl	800814c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007b26:	4b1d      	ldr	r3, [pc, #116]	@ (8007b9c <xTimerCreateTimerTask+0x84>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d021      	beq.n	8007b72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007b32:	2300      	movs	r3, #0
 8007b34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007b36:	1d3a      	adds	r2, r7, #4
 8007b38:	f107 0108 	add.w	r1, r7, #8
 8007b3c:	f107 030c 	add.w	r3, r7, #12
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fd fe09 	bl	8005758 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007b46:	6879      	ldr	r1, [r7, #4]
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	9202      	str	r2, [sp, #8]
 8007b4e:	9301      	str	r3, [sp, #4]
 8007b50:	2302      	movs	r3, #2
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	2300      	movs	r3, #0
 8007b56:	460a      	mov	r2, r1
 8007b58:	4911      	ldr	r1, [pc, #68]	@ (8007ba0 <xTimerCreateTimerTask+0x88>)
 8007b5a:	4812      	ldr	r0, [pc, #72]	@ (8007ba4 <xTimerCreateTimerTask+0x8c>)
 8007b5c:	f7fe ffae 	bl	8006abc <xTaskCreateStatic>
 8007b60:	4603      	mov	r3, r0
 8007b62:	4a11      	ldr	r2, [pc, #68]	@ (8007ba8 <xTimerCreateTimerTask+0x90>)
 8007b64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007b66:	4b10      	ldr	r3, [pc, #64]	@ (8007ba8 <xTimerCreateTimerTask+0x90>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d001      	beq.n	8007b72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10b      	bne.n	8007b90 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b7c:	f383 8811 	msr	BASEPRI, r3
 8007b80:	f3bf 8f6f 	isb	sy
 8007b84:	f3bf 8f4f 	dsb	sy
 8007b88:	613b      	str	r3, [r7, #16]
}
 8007b8a:	bf00      	nop
 8007b8c:	bf00      	nop
 8007b8e:	e7fd      	b.n	8007b8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007b90:	697b      	ldr	r3, [r7, #20]
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3718      	adds	r7, #24
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	20005e20 	.word	0x20005e20
 8007ba0:	08015304 	.word	0x08015304
 8007ba4:	08007ce5 	.word	0x08007ce5
 8007ba8:	20005e24 	.word	0x20005e24

08007bac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b08a      	sub	sp, #40	@ 0x28
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
 8007bb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10b      	bne.n	8007bdc <xTimerGenericCommand+0x30>
	__asm volatile
 8007bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc8:	f383 8811 	msr	BASEPRI, r3
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	623b      	str	r3, [r7, #32]
}
 8007bd6:	bf00      	nop
 8007bd8:	bf00      	nop
 8007bda:	e7fd      	b.n	8007bd8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007bdc:	4b19      	ldr	r3, [pc, #100]	@ (8007c44 <xTimerGenericCommand+0x98>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d02a      	beq.n	8007c3a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	2b05      	cmp	r3, #5
 8007bf4:	dc18      	bgt.n	8007c28 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007bf6:	f7ff fdad 	bl	8007754 <xTaskGetSchedulerState>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d109      	bne.n	8007c14 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007c00:	4b10      	ldr	r3, [pc, #64]	@ (8007c44 <xTimerGenericCommand+0x98>)
 8007c02:	6818      	ldr	r0, [r3, #0]
 8007c04:	f107 0110 	add.w	r1, r7, #16
 8007c08:	2300      	movs	r3, #0
 8007c0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c0c:	f7fe f8de 	bl	8005dcc <xQueueGenericSend>
 8007c10:	6278      	str	r0, [r7, #36]	@ 0x24
 8007c12:	e012      	b.n	8007c3a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007c14:	4b0b      	ldr	r3, [pc, #44]	@ (8007c44 <xTimerGenericCommand+0x98>)
 8007c16:	6818      	ldr	r0, [r3, #0]
 8007c18:	f107 0110 	add.w	r1, r7, #16
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f7fe f8d4 	bl	8005dcc <xQueueGenericSend>
 8007c24:	6278      	str	r0, [r7, #36]	@ 0x24
 8007c26:	e008      	b.n	8007c3a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c28:	4b06      	ldr	r3, [pc, #24]	@ (8007c44 <xTimerGenericCommand+0x98>)
 8007c2a:	6818      	ldr	r0, [r3, #0]
 8007c2c:	f107 0110 	add.w	r1, r7, #16
 8007c30:	2300      	movs	r3, #0
 8007c32:	683a      	ldr	r2, [r7, #0]
 8007c34:	f7fe f9cc 	bl	8005fd0 <xQueueGenericSendFromISR>
 8007c38:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3728      	adds	r7, #40	@ 0x28
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	20005e20 	.word	0x20005e20

08007c48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b088      	sub	sp, #32
 8007c4c:	af02      	add	r7, sp, #8
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c52:	4b23      	ldr	r3, [pc, #140]	@ (8007ce0 <prvProcessExpiredTimer+0x98>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	3304      	adds	r3, #4
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fd fe1d 	bl	80058a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c6c:	f003 0304 	and.w	r3, r3, #4
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d023      	beq.n	8007cbc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	699a      	ldr	r2, [r3, #24]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	18d1      	adds	r1, r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	683a      	ldr	r2, [r7, #0]
 8007c80:	6978      	ldr	r0, [r7, #20]
 8007c82:	f000 f8d5 	bl	8007e30 <prvInsertTimerInActiveList>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d020      	beq.n	8007cce <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	2300      	movs	r3, #0
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	2100      	movs	r1, #0
 8007c96:	6978      	ldr	r0, [r7, #20]
 8007c98:	f7ff ff88 	bl	8007bac <xTimerGenericCommand>
 8007c9c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d114      	bne.n	8007cce <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca8:	f383 8811 	msr	BASEPRI, r3
 8007cac:	f3bf 8f6f 	isb	sy
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	60fb      	str	r3, [r7, #12]
}
 8007cb6:	bf00      	nop
 8007cb8:	bf00      	nop
 8007cba:	e7fd      	b.n	8007cb8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cc2:	f023 0301 	bic.w	r3, r3, #1
 8007cc6:	b2da      	uxtb	r2, r3
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	6a1b      	ldr	r3, [r3, #32]
 8007cd2:	6978      	ldr	r0, [r7, #20]
 8007cd4:	4798      	blx	r3
}
 8007cd6:	bf00      	nop
 8007cd8:	3718      	adds	r7, #24
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	20005e18 	.word	0x20005e18

08007ce4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007cec:	f107 0308 	add.w	r3, r7, #8
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f000 f859 	bl	8007da8 <prvGetNextExpireTime>
 8007cf6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 f805 	bl	8007d0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007d02:	f000 f8d7 	bl	8007eb4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d06:	bf00      	nop
 8007d08:	e7f0      	b.n	8007cec <prvTimerTask+0x8>
	...

08007d0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007d16:	f7ff f915 	bl	8006f44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d1a:	f107 0308 	add.w	r3, r7, #8
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f000 f866 	bl	8007df0 <prvSampleTimeNow>
 8007d24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d130      	bne.n	8007d8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10a      	bne.n	8007d48 <prvProcessTimerOrBlockTask+0x3c>
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d806      	bhi.n	8007d48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007d3a:	f7ff f911 	bl	8006f60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007d3e:	68f9      	ldr	r1, [r7, #12]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f7ff ff81 	bl	8007c48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007d46:	e024      	b.n	8007d92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d008      	beq.n	8007d60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007d4e:	4b13      	ldr	r3, [pc, #76]	@ (8007d9c <prvProcessTimerOrBlockTask+0x90>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d101      	bne.n	8007d5c <prvProcessTimerOrBlockTask+0x50>
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e000      	b.n	8007d5e <prvProcessTimerOrBlockTask+0x52>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007d60:	4b0f      	ldr	r3, [pc, #60]	@ (8007da0 <prvProcessTimerOrBlockTask+0x94>)
 8007d62:	6818      	ldr	r0, [r3, #0]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	f7fe fe71 	bl	8006a54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007d72:	f7ff f8f5 	bl	8006f60 <xTaskResumeAll>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10a      	bne.n	8007d92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007d7c:	4b09      	ldr	r3, [pc, #36]	@ (8007da4 <prvProcessTimerOrBlockTask+0x98>)
 8007d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	f3bf 8f6f 	isb	sy
}
 8007d8c:	e001      	b.n	8007d92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007d8e:	f7ff f8e7 	bl	8006f60 <xTaskResumeAll>
}
 8007d92:	bf00      	nop
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	20005e1c 	.word	0x20005e1c
 8007da0:	20005e20 	.word	0x20005e20
 8007da4:	e000ed04 	.word	0xe000ed04

08007da8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007db0:	4b0e      	ldr	r3, [pc, #56]	@ (8007dec <prvGetNextExpireTime+0x44>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d101      	bne.n	8007dbe <prvGetNextExpireTime+0x16>
 8007dba:	2201      	movs	r2, #1
 8007dbc:	e000      	b.n	8007dc0 <prvGetNextExpireTime+0x18>
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d105      	bne.n	8007dd8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007dcc:	4b07      	ldr	r3, [pc, #28]	@ (8007dec <prvGetNextExpireTime+0x44>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	60fb      	str	r3, [r7, #12]
 8007dd6:	e001      	b.n	8007ddc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3714      	adds	r7, #20
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	20005e18 	.word	0x20005e18

08007df0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007df8:	f7ff f950 	bl	800709c <xTaskGetTickCount>
 8007dfc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8007e2c <prvSampleTimeNow+0x3c>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d205      	bcs.n	8007e14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007e08:	f000 f93a 	bl	8008080 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	601a      	str	r2, [r3, #0]
 8007e12:	e002      	b.n	8007e1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007e1a:	4a04      	ldr	r2, [pc, #16]	@ (8007e2c <prvSampleTimeNow+0x3c>)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007e20:	68fb      	ldr	r3, [r7, #12]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	20005e28 	.word	0x20005e28

08007e30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
 8007e3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007e4e:	68ba      	ldr	r2, [r7, #8]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d812      	bhi.n	8007e7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	1ad2      	subs	r2, r2, r3
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	699b      	ldr	r3, [r3, #24]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d302      	bcc.n	8007e6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007e64:	2301      	movs	r3, #1
 8007e66:	617b      	str	r3, [r7, #20]
 8007e68:	e01b      	b.n	8007ea2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007e6a:	4b10      	ldr	r3, [pc, #64]	@ (8007eac <prvInsertTimerInActiveList+0x7c>)
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	3304      	adds	r3, #4
 8007e72:	4619      	mov	r1, r3
 8007e74:	4610      	mov	r0, r2
 8007e76:	f7fd fcda 	bl	800582e <vListInsert>
 8007e7a:	e012      	b.n	8007ea2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d206      	bcs.n	8007e92 <prvInsertTimerInActiveList+0x62>
 8007e84:	68ba      	ldr	r2, [r7, #8]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d302      	bcc.n	8007e92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	617b      	str	r3, [r7, #20]
 8007e90:	e007      	b.n	8007ea2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e92:	4b07      	ldr	r3, [pc, #28]	@ (8007eb0 <prvInsertTimerInActiveList+0x80>)
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	3304      	adds	r3, #4
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	f7fd fcc6 	bl	800582e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007ea2:	697b      	ldr	r3, [r7, #20]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3718      	adds	r7, #24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	20005e1c 	.word	0x20005e1c
 8007eb0:	20005e18 	.word	0x20005e18

08007eb4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b08e      	sub	sp, #56	@ 0x38
 8007eb8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007eba:	e0ce      	b.n	800805a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	da19      	bge.n	8007ef6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007ec2:	1d3b      	adds	r3, r7, #4
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10b      	bne.n	8007ee6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	61fb      	str	r3, [r7, #28]
}
 8007ee0:	bf00      	nop
 8007ee2:	bf00      	nop
 8007ee4:	e7fd      	b.n	8007ee2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007eec:	6850      	ldr	r0, [r2, #4]
 8007eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ef0:	6892      	ldr	r2, [r2, #8]
 8007ef2:	4611      	mov	r1, r2
 8007ef4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f2c0 80ae 	blt.w	800805a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f04:	695b      	ldr	r3, [r3, #20]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d004      	beq.n	8007f14 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f0c:	3304      	adds	r3, #4
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7fd fcc6 	bl	80058a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f14:	463b      	mov	r3, r7
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7ff ff6a 	bl	8007df0 <prvSampleTimeNow>
 8007f1c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2b09      	cmp	r3, #9
 8007f22:	f200 8097 	bhi.w	8008054 <prvProcessReceivedCommands+0x1a0>
 8007f26:	a201      	add	r2, pc, #4	@ (adr r2, 8007f2c <prvProcessReceivedCommands+0x78>)
 8007f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2c:	08007f55 	.word	0x08007f55
 8007f30:	08007f55 	.word	0x08007f55
 8007f34:	08007f55 	.word	0x08007f55
 8007f38:	08007fcb 	.word	0x08007fcb
 8007f3c:	08007fdf 	.word	0x08007fdf
 8007f40:	0800802b 	.word	0x0800802b
 8007f44:	08007f55 	.word	0x08007f55
 8007f48:	08007f55 	.word	0x08007f55
 8007f4c:	08007fcb 	.word	0x08007fcb
 8007f50:	08007fdf 	.word	0x08007fdf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f5a:	f043 0301 	orr.w	r3, r3, #1
 8007f5e:	b2da      	uxtb	r2, r3
 8007f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f66:	68ba      	ldr	r2, [r7, #8]
 8007f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f6a:	699b      	ldr	r3, [r3, #24]
 8007f6c:	18d1      	adds	r1, r2, r3
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f74:	f7ff ff5c 	bl	8007e30 <prvInsertTimerInActiveList>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d06c      	beq.n	8008058 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f80:	6a1b      	ldr	r3, [r3, #32]
 8007f82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f8c:	f003 0304 	and.w	r3, r3, #4
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d061      	beq.n	8008058 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007f94:	68ba      	ldr	r2, [r7, #8]
 8007f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	441a      	add	r2, r3
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	9300      	str	r3, [sp, #0]
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fa6:	f7ff fe01 	bl	8007bac <xTimerGenericCommand>
 8007faa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007fac:	6a3b      	ldr	r3, [r7, #32]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d152      	bne.n	8008058 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb6:	f383 8811 	msr	BASEPRI, r3
 8007fba:	f3bf 8f6f 	isb	sy
 8007fbe:	f3bf 8f4f 	dsb	sy
 8007fc2:	61bb      	str	r3, [r7, #24]
}
 8007fc4:	bf00      	nop
 8007fc6:	bf00      	nop
 8007fc8:	e7fd      	b.n	8007fc6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fd0:	f023 0301 	bic.w	r3, r3, #1
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007fdc:	e03d      	b.n	800805a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fe4:	f043 0301 	orr.w	r3, r3, #1
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007ff0:	68ba      	ldr	r2, [r7, #8]
 8007ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10b      	bne.n	8008016 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008002:	f383 8811 	msr	BASEPRI, r3
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	617b      	str	r3, [r7, #20]
}
 8008010:	bf00      	nop
 8008012:	bf00      	nop
 8008014:	e7fd      	b.n	8008012 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008018:	699a      	ldr	r2, [r3, #24]
 800801a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801c:	18d1      	adds	r1, r2, r3
 800801e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008022:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008024:	f7ff ff04 	bl	8007e30 <prvInsertTimerInActiveList>
					break;
 8008028:	e017      	b.n	800805a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800802a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800802c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008030:	f003 0302 	and.w	r3, r3, #2
 8008034:	2b00      	cmp	r3, #0
 8008036:	d103      	bne.n	8008040 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008038:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800803a:	f000 fbe5 	bl	8008808 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800803e:	e00c      	b.n	800805a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008042:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008046:	f023 0301 	bic.w	r3, r3, #1
 800804a:	b2da      	uxtb	r2, r3
 800804c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800804e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008052:	e002      	b.n	800805a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008054:	bf00      	nop
 8008056:	e000      	b.n	800805a <prvProcessReceivedCommands+0x1a6>
					break;
 8008058:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800805a:	4b08      	ldr	r3, [pc, #32]	@ (800807c <prvProcessReceivedCommands+0x1c8>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	1d39      	adds	r1, r7, #4
 8008060:	2200      	movs	r2, #0
 8008062:	4618      	mov	r0, r3
 8008064:	f7fe f8e2 	bl	800622c <xQueueReceive>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	f47f af26 	bne.w	8007ebc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008070:	bf00      	nop
 8008072:	bf00      	nop
 8008074:	3730      	adds	r7, #48	@ 0x30
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	20005e20 	.word	0x20005e20

08008080 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b088      	sub	sp, #32
 8008084:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008086:	e049      	b.n	800811c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008088:	4b2e      	ldr	r3, [pc, #184]	@ (8008144 <prvSwitchTimerLists+0xc4>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008092:	4b2c      	ldr	r3, [pc, #176]	@ (8008144 <prvSwitchTimerLists+0xc4>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	3304      	adds	r3, #4
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7fd fbfd 	bl	80058a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6a1b      	ldr	r3, [r3, #32]
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80080b4:	f003 0304 	and.w	r3, r3, #4
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d02f      	beq.n	800811c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	4413      	add	r3, r2
 80080c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80080c6:	68ba      	ldr	r2, [r7, #8]
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d90e      	bls.n	80080ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080da:	4b1a      	ldr	r3, [pc, #104]	@ (8008144 <prvSwitchTimerLists+0xc4>)
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	3304      	adds	r3, #4
 80080e2:	4619      	mov	r1, r3
 80080e4:	4610      	mov	r0, r2
 80080e6:	f7fd fba2 	bl	800582e <vListInsert>
 80080ea:	e017      	b.n	800811c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080ec:	2300      	movs	r3, #0
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	2300      	movs	r3, #0
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	2100      	movs	r1, #0
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f7ff fd58 	bl	8007bac <xTimerGenericCommand>
 80080fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10b      	bne.n	800811c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	603b      	str	r3, [r7, #0]
}
 8008116:	bf00      	nop
 8008118:	bf00      	nop
 800811a:	e7fd      	b.n	8008118 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800811c:	4b09      	ldr	r3, [pc, #36]	@ (8008144 <prvSwitchTimerLists+0xc4>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1b0      	bne.n	8008088 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008126:	4b07      	ldr	r3, [pc, #28]	@ (8008144 <prvSwitchTimerLists+0xc4>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800812c:	4b06      	ldr	r3, [pc, #24]	@ (8008148 <prvSwitchTimerLists+0xc8>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a04      	ldr	r2, [pc, #16]	@ (8008144 <prvSwitchTimerLists+0xc4>)
 8008132:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008134:	4a04      	ldr	r2, [pc, #16]	@ (8008148 <prvSwitchTimerLists+0xc8>)
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	6013      	str	r3, [r2, #0]
}
 800813a:	bf00      	nop
 800813c:	3718      	adds	r7, #24
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	20005e18 	.word	0x20005e18
 8008148:	20005e1c 	.word	0x20005e1c

0800814c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008152:	f000 f969 	bl	8008428 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008156:	4b15      	ldr	r3, [pc, #84]	@ (80081ac <prvCheckForValidListAndQueue+0x60>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d120      	bne.n	80081a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800815e:	4814      	ldr	r0, [pc, #80]	@ (80081b0 <prvCheckForValidListAndQueue+0x64>)
 8008160:	f7fd fb14 	bl	800578c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008164:	4813      	ldr	r0, [pc, #76]	@ (80081b4 <prvCheckForValidListAndQueue+0x68>)
 8008166:	f7fd fb11 	bl	800578c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800816a:	4b13      	ldr	r3, [pc, #76]	@ (80081b8 <prvCheckForValidListAndQueue+0x6c>)
 800816c:	4a10      	ldr	r2, [pc, #64]	@ (80081b0 <prvCheckForValidListAndQueue+0x64>)
 800816e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008170:	4b12      	ldr	r3, [pc, #72]	@ (80081bc <prvCheckForValidListAndQueue+0x70>)
 8008172:	4a10      	ldr	r2, [pc, #64]	@ (80081b4 <prvCheckForValidListAndQueue+0x68>)
 8008174:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008176:	2300      	movs	r3, #0
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	4b11      	ldr	r3, [pc, #68]	@ (80081c0 <prvCheckForValidListAndQueue+0x74>)
 800817c:	4a11      	ldr	r2, [pc, #68]	@ (80081c4 <prvCheckForValidListAndQueue+0x78>)
 800817e:	2110      	movs	r1, #16
 8008180:	200a      	movs	r0, #10
 8008182:	f7fd fc21 	bl	80059c8 <xQueueGenericCreateStatic>
 8008186:	4603      	mov	r3, r0
 8008188:	4a08      	ldr	r2, [pc, #32]	@ (80081ac <prvCheckForValidListAndQueue+0x60>)
 800818a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800818c:	4b07      	ldr	r3, [pc, #28]	@ (80081ac <prvCheckForValidListAndQueue+0x60>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d005      	beq.n	80081a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008194:	4b05      	ldr	r3, [pc, #20]	@ (80081ac <prvCheckForValidListAndQueue+0x60>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	490b      	ldr	r1, [pc, #44]	@ (80081c8 <prvCheckForValidListAndQueue+0x7c>)
 800819a:	4618      	mov	r0, r3
 800819c:	f7fe fc06 	bl	80069ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081a0:	f000 f974 	bl	800848c <vPortExitCritical>
}
 80081a4:	bf00      	nop
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	20005e20 	.word	0x20005e20
 80081b0:	20005df0 	.word	0x20005df0
 80081b4:	20005e04 	.word	0x20005e04
 80081b8:	20005e18 	.word	0x20005e18
 80081bc:	20005e1c 	.word	0x20005e1c
 80081c0:	20005ecc 	.word	0x20005ecc
 80081c4:	20005e2c 	.word	0x20005e2c
 80081c8:	0801530c 	.word	0x0801530c

080081cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80081cc:	b480      	push	{r7}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	3b04      	subs	r3, #4
 80081dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80081e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	3b04      	subs	r3, #4
 80081ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	f023 0201 	bic.w	r2, r3, #1
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	3b04      	subs	r3, #4
 80081fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80081fc:	4a0c      	ldr	r2, [pc, #48]	@ (8008230 <pxPortInitialiseStack+0x64>)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3b14      	subs	r3, #20
 8008206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	3b04      	subs	r3, #4
 8008212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f06f 0202 	mvn.w	r2, #2
 800821a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	3b20      	subs	r3, #32
 8008220:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008222:	68fb      	ldr	r3, [r7, #12]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3714      	adds	r7, #20
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr
 8008230:	08008235 	.word	0x08008235

08008234 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800823a:	2300      	movs	r3, #0
 800823c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800823e:	4b13      	ldr	r3, [pc, #76]	@ (800828c <prvTaskExitError+0x58>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008246:	d00b      	beq.n	8008260 <prvTaskExitError+0x2c>
	__asm volatile
 8008248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800824c:	f383 8811 	msr	BASEPRI, r3
 8008250:	f3bf 8f6f 	isb	sy
 8008254:	f3bf 8f4f 	dsb	sy
 8008258:	60fb      	str	r3, [r7, #12]
}
 800825a:	bf00      	nop
 800825c:	bf00      	nop
 800825e:	e7fd      	b.n	800825c <prvTaskExitError+0x28>
	__asm volatile
 8008260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008264:	f383 8811 	msr	BASEPRI, r3
 8008268:	f3bf 8f6f 	isb	sy
 800826c:	f3bf 8f4f 	dsb	sy
 8008270:	60bb      	str	r3, [r7, #8]
}
 8008272:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008274:	bf00      	nop
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d0fc      	beq.n	8008276 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800827c:	bf00      	nop
 800827e:	bf00      	nop
 8008280:	3714      	adds	r7, #20
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	20000020 	.word	0x20000020

08008290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008290:	4b07      	ldr	r3, [pc, #28]	@ (80082b0 <pxCurrentTCBConst2>)
 8008292:	6819      	ldr	r1, [r3, #0]
 8008294:	6808      	ldr	r0, [r1, #0]
 8008296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800829a:	f380 8809 	msr	PSP, r0
 800829e:	f3bf 8f6f 	isb	sy
 80082a2:	f04f 0000 	mov.w	r0, #0
 80082a6:	f380 8811 	msr	BASEPRI, r0
 80082aa:	4770      	bx	lr
 80082ac:	f3af 8000 	nop.w

080082b0 <pxCurrentTCBConst2>:
 80082b0:	200058f0 	.word	0x200058f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80082b4:	bf00      	nop
 80082b6:	bf00      	nop

080082b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80082b8:	4808      	ldr	r0, [pc, #32]	@ (80082dc <prvPortStartFirstTask+0x24>)
 80082ba:	6800      	ldr	r0, [r0, #0]
 80082bc:	6800      	ldr	r0, [r0, #0]
 80082be:	f380 8808 	msr	MSP, r0
 80082c2:	f04f 0000 	mov.w	r0, #0
 80082c6:	f380 8814 	msr	CONTROL, r0
 80082ca:	b662      	cpsie	i
 80082cc:	b661      	cpsie	f
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	df00      	svc	0
 80082d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80082da:	bf00      	nop
 80082dc:	e000ed08 	.word	0xe000ed08

080082e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b086      	sub	sp, #24
 80082e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80082e6:	4b47      	ldr	r3, [pc, #284]	@ (8008404 <xPortStartScheduler+0x124>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a47      	ldr	r2, [pc, #284]	@ (8008408 <xPortStartScheduler+0x128>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d10b      	bne.n	8008308 <xPortStartScheduler+0x28>
	__asm volatile
 80082f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	613b      	str	r3, [r7, #16]
}
 8008302:	bf00      	nop
 8008304:	bf00      	nop
 8008306:	e7fd      	b.n	8008304 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008308:	4b3e      	ldr	r3, [pc, #248]	@ (8008404 <xPortStartScheduler+0x124>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a3f      	ldr	r2, [pc, #252]	@ (800840c <xPortStartScheduler+0x12c>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d10b      	bne.n	800832a <xPortStartScheduler+0x4a>
	__asm volatile
 8008312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	60fb      	str	r3, [r7, #12]
}
 8008324:	bf00      	nop
 8008326:	bf00      	nop
 8008328:	e7fd      	b.n	8008326 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800832a:	4b39      	ldr	r3, [pc, #228]	@ (8008410 <xPortStartScheduler+0x130>)
 800832c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	b2db      	uxtb	r3, r3
 8008334:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	22ff      	movs	r2, #255	@ 0xff
 800833a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	b2db      	uxtb	r3, r3
 8008342:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008344:	78fb      	ldrb	r3, [r7, #3]
 8008346:	b2db      	uxtb	r3, r3
 8008348:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800834c:	b2da      	uxtb	r2, r3
 800834e:	4b31      	ldr	r3, [pc, #196]	@ (8008414 <xPortStartScheduler+0x134>)
 8008350:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008352:	4b31      	ldr	r3, [pc, #196]	@ (8008418 <xPortStartScheduler+0x138>)
 8008354:	2207      	movs	r2, #7
 8008356:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008358:	e009      	b.n	800836e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800835a:	4b2f      	ldr	r3, [pc, #188]	@ (8008418 <xPortStartScheduler+0x138>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	3b01      	subs	r3, #1
 8008360:	4a2d      	ldr	r2, [pc, #180]	@ (8008418 <xPortStartScheduler+0x138>)
 8008362:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008364:	78fb      	ldrb	r3, [r7, #3]
 8008366:	b2db      	uxtb	r3, r3
 8008368:	005b      	lsls	r3, r3, #1
 800836a:	b2db      	uxtb	r3, r3
 800836c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800836e:	78fb      	ldrb	r3, [r7, #3]
 8008370:	b2db      	uxtb	r3, r3
 8008372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008376:	2b80      	cmp	r3, #128	@ 0x80
 8008378:	d0ef      	beq.n	800835a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800837a:	4b27      	ldr	r3, [pc, #156]	@ (8008418 <xPortStartScheduler+0x138>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f1c3 0307 	rsb	r3, r3, #7
 8008382:	2b04      	cmp	r3, #4
 8008384:	d00b      	beq.n	800839e <xPortStartScheduler+0xbe>
	__asm volatile
 8008386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	60bb      	str	r3, [r7, #8]
}
 8008398:	bf00      	nop
 800839a:	bf00      	nop
 800839c:	e7fd      	b.n	800839a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800839e:	4b1e      	ldr	r3, [pc, #120]	@ (8008418 <xPortStartScheduler+0x138>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	021b      	lsls	r3, r3, #8
 80083a4:	4a1c      	ldr	r2, [pc, #112]	@ (8008418 <xPortStartScheduler+0x138>)
 80083a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80083a8:	4b1b      	ldr	r3, [pc, #108]	@ (8008418 <xPortStartScheduler+0x138>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80083b0:	4a19      	ldr	r2, [pc, #100]	@ (8008418 <xPortStartScheduler+0x138>)
 80083b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80083bc:	4b17      	ldr	r3, [pc, #92]	@ (800841c <xPortStartScheduler+0x13c>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a16      	ldr	r2, [pc, #88]	@ (800841c <xPortStartScheduler+0x13c>)
 80083c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80083c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80083c8:	4b14      	ldr	r3, [pc, #80]	@ (800841c <xPortStartScheduler+0x13c>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a13      	ldr	r2, [pc, #76]	@ (800841c <xPortStartScheduler+0x13c>)
 80083ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80083d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80083d4:	f000 f8da 	bl	800858c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80083d8:	4b11      	ldr	r3, [pc, #68]	@ (8008420 <xPortStartScheduler+0x140>)
 80083da:	2200      	movs	r2, #0
 80083dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80083de:	f000 f8f9 	bl	80085d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80083e2:	4b10      	ldr	r3, [pc, #64]	@ (8008424 <xPortStartScheduler+0x144>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a0f      	ldr	r2, [pc, #60]	@ (8008424 <xPortStartScheduler+0x144>)
 80083e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80083ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80083ee:	f7ff ff63 	bl	80082b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80083f2:	f7fe ff2f 	bl	8007254 <vTaskSwitchContext>
	prvTaskExitError();
 80083f6:	f7ff ff1d 	bl	8008234 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3718      	adds	r7, #24
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	e000ed00 	.word	0xe000ed00
 8008408:	410fc271 	.word	0x410fc271
 800840c:	410fc270 	.word	0x410fc270
 8008410:	e000e400 	.word	0xe000e400
 8008414:	20005f1c 	.word	0x20005f1c
 8008418:	20005f20 	.word	0x20005f20
 800841c:	e000ed20 	.word	0xe000ed20
 8008420:	20000020 	.word	0x20000020
 8008424:	e000ef34 	.word	0xe000ef34

08008428 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
	__asm volatile
 800842e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	607b      	str	r3, [r7, #4]
}
 8008440:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008442:	4b10      	ldr	r3, [pc, #64]	@ (8008484 <vPortEnterCritical+0x5c>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	3301      	adds	r3, #1
 8008448:	4a0e      	ldr	r2, [pc, #56]	@ (8008484 <vPortEnterCritical+0x5c>)
 800844a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800844c:	4b0d      	ldr	r3, [pc, #52]	@ (8008484 <vPortEnterCritical+0x5c>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b01      	cmp	r3, #1
 8008452:	d110      	bne.n	8008476 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008454:	4b0c      	ldr	r3, [pc, #48]	@ (8008488 <vPortEnterCritical+0x60>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00b      	beq.n	8008476 <vPortEnterCritical+0x4e>
	__asm volatile
 800845e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008462:	f383 8811 	msr	BASEPRI, r3
 8008466:	f3bf 8f6f 	isb	sy
 800846a:	f3bf 8f4f 	dsb	sy
 800846e:	603b      	str	r3, [r7, #0]
}
 8008470:	bf00      	nop
 8008472:	bf00      	nop
 8008474:	e7fd      	b.n	8008472 <vPortEnterCritical+0x4a>
	}
}
 8008476:	bf00      	nop
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	20000020 	.word	0x20000020
 8008488:	e000ed04 	.word	0xe000ed04

0800848c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008492:	4b12      	ldr	r3, [pc, #72]	@ (80084dc <vPortExitCritical+0x50>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10b      	bne.n	80084b2 <vPortExitCritical+0x26>
	__asm volatile
 800849a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800849e:	f383 8811 	msr	BASEPRI, r3
 80084a2:	f3bf 8f6f 	isb	sy
 80084a6:	f3bf 8f4f 	dsb	sy
 80084aa:	607b      	str	r3, [r7, #4]
}
 80084ac:	bf00      	nop
 80084ae:	bf00      	nop
 80084b0:	e7fd      	b.n	80084ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80084b2:	4b0a      	ldr	r3, [pc, #40]	@ (80084dc <vPortExitCritical+0x50>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	3b01      	subs	r3, #1
 80084b8:	4a08      	ldr	r2, [pc, #32]	@ (80084dc <vPortExitCritical+0x50>)
 80084ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80084bc:	4b07      	ldr	r3, [pc, #28]	@ (80084dc <vPortExitCritical+0x50>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d105      	bne.n	80084d0 <vPortExitCritical+0x44>
 80084c4:	2300      	movs	r3, #0
 80084c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	f383 8811 	msr	BASEPRI, r3
}
 80084ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80084d0:	bf00      	nop
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr
 80084dc:	20000020 	.word	0x20000020

080084e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80084e0:	f3ef 8009 	mrs	r0, PSP
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	4b15      	ldr	r3, [pc, #84]	@ (8008540 <pxCurrentTCBConst>)
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	f01e 0f10 	tst.w	lr, #16
 80084f0:	bf08      	it	eq
 80084f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80084f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084fa:	6010      	str	r0, [r2, #0]
 80084fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008500:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008504:	f380 8811 	msr	BASEPRI, r0
 8008508:	f3bf 8f4f 	dsb	sy
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f7fe fea0 	bl	8007254 <vTaskSwitchContext>
 8008514:	f04f 0000 	mov.w	r0, #0
 8008518:	f380 8811 	msr	BASEPRI, r0
 800851c:	bc09      	pop	{r0, r3}
 800851e:	6819      	ldr	r1, [r3, #0]
 8008520:	6808      	ldr	r0, [r1, #0]
 8008522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008526:	f01e 0f10 	tst.w	lr, #16
 800852a:	bf08      	it	eq
 800852c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008530:	f380 8809 	msr	PSP, r0
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	f3af 8000 	nop.w

08008540 <pxCurrentTCBConst>:
 8008540:	200058f0 	.word	0x200058f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008544:	bf00      	nop
 8008546:	bf00      	nop

08008548 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
	__asm volatile
 800854e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008552:	f383 8811 	msr	BASEPRI, r3
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	607b      	str	r3, [r7, #4]
}
 8008560:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008562:	f7fe fdbd 	bl	80070e0 <xTaskIncrementTick>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d003      	beq.n	8008574 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800856c:	4b06      	ldr	r3, [pc, #24]	@ (8008588 <xPortSysTickHandler+0x40>)
 800856e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008572:	601a      	str	r2, [r3, #0]
 8008574:	2300      	movs	r3, #0
 8008576:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	f383 8811 	msr	BASEPRI, r3
}
 800857e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008580:	bf00      	nop
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}
 8008588:	e000ed04 	.word	0xe000ed04

0800858c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800858c:	b480      	push	{r7}
 800858e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008590:	4b0b      	ldr	r3, [pc, #44]	@ (80085c0 <vPortSetupTimerInterrupt+0x34>)
 8008592:	2200      	movs	r2, #0
 8008594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008596:	4b0b      	ldr	r3, [pc, #44]	@ (80085c4 <vPortSetupTimerInterrupt+0x38>)
 8008598:	2200      	movs	r2, #0
 800859a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800859c:	4b0a      	ldr	r3, [pc, #40]	@ (80085c8 <vPortSetupTimerInterrupt+0x3c>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a0a      	ldr	r2, [pc, #40]	@ (80085cc <vPortSetupTimerInterrupt+0x40>)
 80085a2:	fba2 2303 	umull	r2, r3, r2, r3
 80085a6:	099b      	lsrs	r3, r3, #6
 80085a8:	4a09      	ldr	r2, [pc, #36]	@ (80085d0 <vPortSetupTimerInterrupt+0x44>)
 80085aa:	3b01      	subs	r3, #1
 80085ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80085ae:	4b04      	ldr	r3, [pc, #16]	@ (80085c0 <vPortSetupTimerInterrupt+0x34>)
 80085b0:	2207      	movs	r2, #7
 80085b2:	601a      	str	r2, [r3, #0]
}
 80085b4:	bf00      	nop
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr
 80085be:	bf00      	nop
 80085c0:	e000e010 	.word	0xe000e010
 80085c4:	e000e018 	.word	0xe000e018
 80085c8:	20000000 	.word	0x20000000
 80085cc:	10624dd3 	.word	0x10624dd3
 80085d0:	e000e014 	.word	0xe000e014

080085d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80085d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80085e4 <vPortEnableVFP+0x10>
 80085d8:	6801      	ldr	r1, [r0, #0]
 80085da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80085de:	6001      	str	r1, [r0, #0]
 80085e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80085e2:	bf00      	nop
 80085e4:	e000ed88 	.word	0xe000ed88

080085e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80085ee:	f3ef 8305 	mrs	r3, IPSR
 80085f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2b0f      	cmp	r3, #15
 80085f8:	d915      	bls.n	8008626 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80085fa:	4a18      	ldr	r2, [pc, #96]	@ (800865c <vPortValidateInterruptPriority+0x74>)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	4413      	add	r3, r2
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008604:	4b16      	ldr	r3, [pc, #88]	@ (8008660 <vPortValidateInterruptPriority+0x78>)
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	7afa      	ldrb	r2, [r7, #11]
 800860a:	429a      	cmp	r2, r3
 800860c:	d20b      	bcs.n	8008626 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800860e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	607b      	str	r3, [r7, #4]
}
 8008620:	bf00      	nop
 8008622:	bf00      	nop
 8008624:	e7fd      	b.n	8008622 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008626:	4b0f      	ldr	r3, [pc, #60]	@ (8008664 <vPortValidateInterruptPriority+0x7c>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800862e:	4b0e      	ldr	r3, [pc, #56]	@ (8008668 <vPortValidateInterruptPriority+0x80>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	429a      	cmp	r2, r3
 8008634:	d90b      	bls.n	800864e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800863a:	f383 8811 	msr	BASEPRI, r3
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	f3bf 8f4f 	dsb	sy
 8008646:	603b      	str	r3, [r7, #0]
}
 8008648:	bf00      	nop
 800864a:	bf00      	nop
 800864c:	e7fd      	b.n	800864a <vPortValidateInterruptPriority+0x62>
	}
 800864e:	bf00      	nop
 8008650:	3714      	adds	r7, #20
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	e000e3f0 	.word	0xe000e3f0
 8008660:	20005f1c 	.word	0x20005f1c
 8008664:	e000ed0c 	.word	0xe000ed0c
 8008668:	20005f20 	.word	0x20005f20

0800866c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b08a      	sub	sp, #40	@ 0x28
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008674:	2300      	movs	r3, #0
 8008676:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008678:	f7fe fc64 	bl	8006f44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800867c:	4b5c      	ldr	r3, [pc, #368]	@ (80087f0 <pvPortMalloc+0x184>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d101      	bne.n	8008688 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008684:	f000 f924 	bl	80088d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008688:	4b5a      	ldr	r3, [pc, #360]	@ (80087f4 <pvPortMalloc+0x188>)
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4013      	ands	r3, r2
 8008690:	2b00      	cmp	r3, #0
 8008692:	f040 8095 	bne.w	80087c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d01e      	beq.n	80086da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800869c:	2208      	movs	r2, #8
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4413      	add	r3, r2
 80086a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f003 0307 	and.w	r3, r3, #7
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d015      	beq.n	80086da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f023 0307 	bic.w	r3, r3, #7
 80086b4:	3308      	adds	r3, #8
 80086b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f003 0307 	and.w	r3, r3, #7
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00b      	beq.n	80086da <pvPortMalloc+0x6e>
	__asm volatile
 80086c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c6:	f383 8811 	msr	BASEPRI, r3
 80086ca:	f3bf 8f6f 	isb	sy
 80086ce:	f3bf 8f4f 	dsb	sy
 80086d2:	617b      	str	r3, [r7, #20]
}
 80086d4:	bf00      	nop
 80086d6:	bf00      	nop
 80086d8:	e7fd      	b.n	80086d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d06f      	beq.n	80087c0 <pvPortMalloc+0x154>
 80086e0:	4b45      	ldr	r3, [pc, #276]	@ (80087f8 <pvPortMalloc+0x18c>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d86a      	bhi.n	80087c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80086ea:	4b44      	ldr	r3, [pc, #272]	@ (80087fc <pvPortMalloc+0x190>)
 80086ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80086ee:	4b43      	ldr	r3, [pc, #268]	@ (80087fc <pvPortMalloc+0x190>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086f4:	e004      	b.n	8008700 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80086f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80086fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	429a      	cmp	r2, r3
 8008708:	d903      	bls.n	8008712 <pvPortMalloc+0xa6>
 800870a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1f1      	bne.n	80086f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008712:	4b37      	ldr	r3, [pc, #220]	@ (80087f0 <pvPortMalloc+0x184>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008718:	429a      	cmp	r2, r3
 800871a:	d051      	beq.n	80087c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800871c:	6a3b      	ldr	r3, [r7, #32]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2208      	movs	r2, #8
 8008722:	4413      	add	r3, r2
 8008724:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	6a3b      	ldr	r3, [r7, #32]
 800872c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800872e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008730:	685a      	ldr	r2, [r3, #4]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	1ad2      	subs	r2, r2, r3
 8008736:	2308      	movs	r3, #8
 8008738:	005b      	lsls	r3, r3, #1
 800873a:	429a      	cmp	r2, r3
 800873c:	d920      	bls.n	8008780 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800873e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4413      	add	r3, r2
 8008744:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	f003 0307 	and.w	r3, r3, #7
 800874c:	2b00      	cmp	r3, #0
 800874e:	d00b      	beq.n	8008768 <pvPortMalloc+0xfc>
	__asm volatile
 8008750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008754:	f383 8811 	msr	BASEPRI, r3
 8008758:	f3bf 8f6f 	isb	sy
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	613b      	str	r3, [r7, #16]
}
 8008762:	bf00      	nop
 8008764:	bf00      	nop
 8008766:	e7fd      	b.n	8008764 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800876a:	685a      	ldr	r2, [r3, #4]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	1ad2      	subs	r2, r2, r3
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800877a:	69b8      	ldr	r0, [r7, #24]
 800877c:	f000 f90a 	bl	8008994 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008780:	4b1d      	ldr	r3, [pc, #116]	@ (80087f8 <pvPortMalloc+0x18c>)
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	1ad3      	subs	r3, r2, r3
 800878a:	4a1b      	ldr	r2, [pc, #108]	@ (80087f8 <pvPortMalloc+0x18c>)
 800878c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800878e:	4b1a      	ldr	r3, [pc, #104]	@ (80087f8 <pvPortMalloc+0x18c>)
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	4b1b      	ldr	r3, [pc, #108]	@ (8008800 <pvPortMalloc+0x194>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	429a      	cmp	r2, r3
 8008798:	d203      	bcs.n	80087a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800879a:	4b17      	ldr	r3, [pc, #92]	@ (80087f8 <pvPortMalloc+0x18c>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a18      	ldr	r2, [pc, #96]	@ (8008800 <pvPortMalloc+0x194>)
 80087a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80087a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a4:	685a      	ldr	r2, [r3, #4]
 80087a6:	4b13      	ldr	r3, [pc, #76]	@ (80087f4 <pvPortMalloc+0x188>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	431a      	orrs	r2, r3
 80087ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80087b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b2:	2200      	movs	r2, #0
 80087b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80087b6:	4b13      	ldr	r3, [pc, #76]	@ (8008804 <pvPortMalloc+0x198>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	3301      	adds	r3, #1
 80087bc:	4a11      	ldr	r2, [pc, #68]	@ (8008804 <pvPortMalloc+0x198>)
 80087be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80087c0:	f7fe fbce 	bl	8006f60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	f003 0307 	and.w	r3, r3, #7
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00b      	beq.n	80087e6 <pvPortMalloc+0x17a>
	__asm volatile
 80087ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d2:	f383 8811 	msr	BASEPRI, r3
 80087d6:	f3bf 8f6f 	isb	sy
 80087da:	f3bf 8f4f 	dsb	sy
 80087de:	60fb      	str	r3, [r7, #12]
}
 80087e0:	bf00      	nop
 80087e2:	bf00      	nop
 80087e4:	e7fd      	b.n	80087e2 <pvPortMalloc+0x176>
	return pvReturn;
 80087e6:	69fb      	ldr	r3, [r7, #28]
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3728      	adds	r7, #40	@ 0x28
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	20009b2c 	.word	0x20009b2c
 80087f4:	20009b40 	.word	0x20009b40
 80087f8:	20009b30 	.word	0x20009b30
 80087fc:	20009b24 	.word	0x20009b24
 8008800:	20009b34 	.word	0x20009b34
 8008804:	20009b38 	.word	0x20009b38

08008808 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d04f      	beq.n	80088ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800881a:	2308      	movs	r3, #8
 800881c:	425b      	negs	r3, r3
 800881e:	697a      	ldr	r2, [r7, #20]
 8008820:	4413      	add	r3, r2
 8008822:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	685a      	ldr	r2, [r3, #4]
 800882c:	4b25      	ldr	r3, [pc, #148]	@ (80088c4 <vPortFree+0xbc>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4013      	ands	r3, r2
 8008832:	2b00      	cmp	r3, #0
 8008834:	d10b      	bne.n	800884e <vPortFree+0x46>
	__asm volatile
 8008836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800883a:	f383 8811 	msr	BASEPRI, r3
 800883e:	f3bf 8f6f 	isb	sy
 8008842:	f3bf 8f4f 	dsb	sy
 8008846:	60fb      	str	r3, [r7, #12]
}
 8008848:	bf00      	nop
 800884a:	bf00      	nop
 800884c:	e7fd      	b.n	800884a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00b      	beq.n	800886e <vPortFree+0x66>
	__asm volatile
 8008856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800885a:	f383 8811 	msr	BASEPRI, r3
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f3bf 8f4f 	dsb	sy
 8008866:	60bb      	str	r3, [r7, #8]
}
 8008868:	bf00      	nop
 800886a:	bf00      	nop
 800886c:	e7fd      	b.n	800886a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	685a      	ldr	r2, [r3, #4]
 8008872:	4b14      	ldr	r3, [pc, #80]	@ (80088c4 <vPortFree+0xbc>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4013      	ands	r3, r2
 8008878:	2b00      	cmp	r3, #0
 800887a:	d01e      	beq.n	80088ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d11a      	bne.n	80088ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	685a      	ldr	r2, [r3, #4]
 8008888:	4b0e      	ldr	r3, [pc, #56]	@ (80088c4 <vPortFree+0xbc>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	43db      	mvns	r3, r3
 800888e:	401a      	ands	r2, r3
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008894:	f7fe fb56 	bl	8006f44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	685a      	ldr	r2, [r3, #4]
 800889c:	4b0a      	ldr	r3, [pc, #40]	@ (80088c8 <vPortFree+0xc0>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4413      	add	r3, r2
 80088a2:	4a09      	ldr	r2, [pc, #36]	@ (80088c8 <vPortFree+0xc0>)
 80088a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80088a6:	6938      	ldr	r0, [r7, #16]
 80088a8:	f000 f874 	bl	8008994 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80088ac:	4b07      	ldr	r3, [pc, #28]	@ (80088cc <vPortFree+0xc4>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	3301      	adds	r3, #1
 80088b2:	4a06      	ldr	r2, [pc, #24]	@ (80088cc <vPortFree+0xc4>)
 80088b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80088b6:	f7fe fb53 	bl	8006f60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80088ba:	bf00      	nop
 80088bc:	3718      	adds	r7, #24
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	20009b40 	.word	0x20009b40
 80088c8:	20009b30 	.word	0x20009b30
 80088cc:	20009b3c 	.word	0x20009b3c

080088d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80088d0:	b480      	push	{r7}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80088d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80088da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80088dc:	4b27      	ldr	r3, [pc, #156]	@ (800897c <prvHeapInit+0xac>)
 80088de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f003 0307 	and.w	r3, r3, #7
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00c      	beq.n	8008904 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	3307      	adds	r3, #7
 80088ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f023 0307 	bic.w	r3, r3, #7
 80088f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80088f8:	68ba      	ldr	r2, [r7, #8]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	4a1f      	ldr	r2, [pc, #124]	@ (800897c <prvHeapInit+0xac>)
 8008900:	4413      	add	r3, r2
 8008902:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008908:	4a1d      	ldr	r2, [pc, #116]	@ (8008980 <prvHeapInit+0xb0>)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800890e:	4b1c      	ldr	r3, [pc, #112]	@ (8008980 <prvHeapInit+0xb0>)
 8008910:	2200      	movs	r2, #0
 8008912:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	68ba      	ldr	r2, [r7, #8]
 8008918:	4413      	add	r3, r2
 800891a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800891c:	2208      	movs	r2, #8
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	1a9b      	subs	r3, r3, r2
 8008922:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f023 0307 	bic.w	r3, r3, #7
 800892a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	4a15      	ldr	r2, [pc, #84]	@ (8008984 <prvHeapInit+0xb4>)
 8008930:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008932:	4b14      	ldr	r3, [pc, #80]	@ (8008984 <prvHeapInit+0xb4>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2200      	movs	r2, #0
 8008938:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800893a:	4b12      	ldr	r3, [pc, #72]	@ (8008984 <prvHeapInit+0xb4>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2200      	movs	r2, #0
 8008940:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	1ad2      	subs	r2, r2, r3
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008950:	4b0c      	ldr	r3, [pc, #48]	@ (8008984 <prvHeapInit+0xb4>)
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	4a0a      	ldr	r2, [pc, #40]	@ (8008988 <prvHeapInit+0xb8>)
 800895e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	4a09      	ldr	r2, [pc, #36]	@ (800898c <prvHeapInit+0xbc>)
 8008966:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008968:	4b09      	ldr	r3, [pc, #36]	@ (8008990 <prvHeapInit+0xc0>)
 800896a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800896e:	601a      	str	r2, [r3, #0]
}
 8008970:	bf00      	nop
 8008972:	3714      	adds	r7, #20
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr
 800897c:	20005f24 	.word	0x20005f24
 8008980:	20009b24 	.word	0x20009b24
 8008984:	20009b2c 	.word	0x20009b2c
 8008988:	20009b34 	.word	0x20009b34
 800898c:	20009b30 	.word	0x20009b30
 8008990:	20009b40 	.word	0x20009b40

08008994 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008994:	b480      	push	{r7}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800899c:	4b28      	ldr	r3, [pc, #160]	@ (8008a40 <prvInsertBlockIntoFreeList+0xac>)
 800899e:	60fb      	str	r3, [r7, #12]
 80089a0:	e002      	b.n	80089a8 <prvInsertBlockIntoFreeList+0x14>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	60fb      	str	r3, [r7, #12]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d8f7      	bhi.n	80089a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	4413      	add	r3, r2
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d108      	bne.n	80089d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	685a      	ldr	r2, [r3, #4]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	441a      	add	r2, r3
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	441a      	add	r2, r3
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d118      	bne.n	8008a1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	4b15      	ldr	r3, [pc, #84]	@ (8008a44 <prvInsertBlockIntoFreeList+0xb0>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d00d      	beq.n	8008a12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	685a      	ldr	r2, [r3, #4]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	441a      	add	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	601a      	str	r2, [r3, #0]
 8008a10:	e008      	b.n	8008a24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a12:	4b0c      	ldr	r3, [pc, #48]	@ (8008a44 <prvInsertBlockIntoFreeList+0xb0>)
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	601a      	str	r2, [r3, #0]
 8008a1a:	e003      	b.n	8008a24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d002      	beq.n	8008a32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a32:	bf00      	nop
 8008a34:	3714      	adds	r7, #20
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	20009b24 	.word	0x20009b24
 8008a44:	20009b2c 	.word	0x20009b2c

08008a48 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8008a52:	f007 faf3 	bl	801003c <sys_timeouts_sleeptime>
 8008a56:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a5e:	d10b      	bne.n	8008a78 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8008a60:	4813      	ldr	r0, [pc, #76]	@ (8008ab0 <tcpip_timeouts_mbox_fetch+0x68>)
 8008a62:	f009 fe86 	bl	8012772 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8008a66:	2200      	movs	r2, #0
 8008a68:	6839      	ldr	r1, [r7, #0]
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f009 fe0e 	bl	801268c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8008a70:	480f      	ldr	r0, [pc, #60]	@ (8008ab0 <tcpip_timeouts_mbox_fetch+0x68>)
 8008a72:	f009 fe6f 	bl	8012754 <sys_mutex_lock>
    return;
 8008a76:	e018      	b.n	8008aaa <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d102      	bne.n	8008a84 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8008a7e:	f007 faa3 	bl	800ffc8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8008a82:	e7e6      	b.n	8008a52 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8008a84:	480a      	ldr	r0, [pc, #40]	@ (8008ab0 <tcpip_timeouts_mbox_fetch+0x68>)
 8008a86:	f009 fe74 	bl	8012772 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	6839      	ldr	r1, [r7, #0]
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f009 fdfc 	bl	801268c <sys_arch_mbox_fetch>
 8008a94:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8008a96:	4806      	ldr	r0, [pc, #24]	@ (8008ab0 <tcpip_timeouts_mbox_fetch+0x68>)
 8008a98:	f009 fe5c 	bl	8012754 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa2:	d102      	bne.n	8008aaa <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8008aa4:	f007 fa90 	bl	800ffc8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8008aa8:	e7d3      	b.n	8008a52 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	20009b50 	.word	0x20009b50

08008ab4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8008abc:	4810      	ldr	r0, [pc, #64]	@ (8008b00 <tcpip_thread+0x4c>)
 8008abe:	f009 fe49 	bl	8012754 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8008ac2:	4b10      	ldr	r3, [pc, #64]	@ (8008b04 <tcpip_thread+0x50>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d005      	beq.n	8008ad6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8008aca:	4b0e      	ldr	r3, [pc, #56]	@ (8008b04 <tcpip_thread+0x50>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a0e      	ldr	r2, [pc, #56]	@ (8008b08 <tcpip_thread+0x54>)
 8008ad0:	6812      	ldr	r2, [r2, #0]
 8008ad2:	4610      	mov	r0, r2
 8008ad4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8008ad6:	f107 030c 	add.w	r3, r7, #12
 8008ada:	4619      	mov	r1, r3
 8008adc:	480b      	ldr	r0, [pc, #44]	@ (8008b0c <tcpip_thread+0x58>)
 8008ade:	f7ff ffb3 	bl	8008a48 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d106      	bne.n	8008af6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008ae8:	4b09      	ldr	r3, [pc, #36]	@ (8008b10 <tcpip_thread+0x5c>)
 8008aea:	2291      	movs	r2, #145	@ 0x91
 8008aec:	4909      	ldr	r1, [pc, #36]	@ (8008b14 <tcpip_thread+0x60>)
 8008aee:	480a      	ldr	r0, [pc, #40]	@ (8008b18 <tcpip_thread+0x64>)
 8008af0:	f00b fd60 	bl	80145b4 <iprintf>
      continue;
 8008af4:	e003      	b.n	8008afe <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f000 f80f 	bl	8008b1c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8008afe:	e7ea      	b.n	8008ad6 <tcpip_thread+0x22>
 8008b00:	20009b50 	.word	0x20009b50
 8008b04:	20009b44 	.word	0x20009b44
 8008b08:	20009b48 	.word	0x20009b48
 8008b0c:	20009b4c 	.word	0x20009b4c
 8008b10:	08015314 	.word	0x08015314
 8008b14:	08015344 	.word	0x08015344
 8008b18:	08015364 	.word	0x08015364

08008b1c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	d026      	beq.n	8008b7a <tcpip_thread_handle_msg+0x5e>
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	dc2b      	bgt.n	8008b88 <tcpip_thread_handle_msg+0x6c>
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d002      	beq.n	8008b3a <tcpip_thread_handle_msg+0x1e>
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d015      	beq.n	8008b64 <tcpip_thread_handle_msg+0x48>
 8008b38:	e026      	b.n	8008b88 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	6850      	ldr	r0, [r2, #4]
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	6892      	ldr	r2, [r2, #8]
 8008b46:	4611      	mov	r1, r2
 8008b48:	4798      	blx	r3
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d004      	beq.n	8008b5a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	4618      	mov	r0, r3
 8008b56:	f001 fd3d 	bl	800a5d4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008b5a:	6879      	ldr	r1, [r7, #4]
 8008b5c:	2008      	movs	r0, #8
 8008b5e:	f000 fe61 	bl	8009824 <memp_free>
      break;
 8008b62:	e018      	b.n	8008b96 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	6892      	ldr	r2, [r2, #8]
 8008b6c:	4610      	mov	r0, r2
 8008b6e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008b70:	6879      	ldr	r1, [r7, #4]
 8008b72:	2007      	movs	r0, #7
 8008b74:	f000 fe56 	bl	8009824 <memp_free>
      break;
 8008b78:	e00d      	b.n	8008b96 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	6892      	ldr	r2, [r2, #8]
 8008b82:	4610      	mov	r0, r2
 8008b84:	4798      	blx	r3
      break;
 8008b86:	e006      	b.n	8008b96 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008b88:	4b05      	ldr	r3, [pc, #20]	@ (8008ba0 <tcpip_thread_handle_msg+0x84>)
 8008b8a:	22cf      	movs	r2, #207	@ 0xcf
 8008b8c:	4905      	ldr	r1, [pc, #20]	@ (8008ba4 <tcpip_thread_handle_msg+0x88>)
 8008b8e:	4806      	ldr	r0, [pc, #24]	@ (8008ba8 <tcpip_thread_handle_msg+0x8c>)
 8008b90:	f00b fd10 	bl	80145b4 <iprintf>
      break;
 8008b94:	bf00      	nop
  }
}
 8008b96:	bf00      	nop
 8008b98:	3708      	adds	r7, #8
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	08015314 	.word	0x08015314
 8008ba4:	08015344 	.word	0x08015344
 8008ba8:	08015364 	.word	0x08015364

08008bac <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b086      	sub	sp, #24
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008bb8:	481a      	ldr	r0, [pc, #104]	@ (8008c24 <tcpip_inpkt+0x78>)
 8008bba:	f009 fd98 	bl	80126ee <sys_mbox_valid>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d105      	bne.n	8008bd0 <tcpip_inpkt+0x24>
 8008bc4:	4b18      	ldr	r3, [pc, #96]	@ (8008c28 <tcpip_inpkt+0x7c>)
 8008bc6:	22fc      	movs	r2, #252	@ 0xfc
 8008bc8:	4918      	ldr	r1, [pc, #96]	@ (8008c2c <tcpip_inpkt+0x80>)
 8008bca:	4819      	ldr	r0, [pc, #100]	@ (8008c30 <tcpip_inpkt+0x84>)
 8008bcc:	f00b fcf2 	bl	80145b4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8008bd0:	2008      	movs	r0, #8
 8008bd2:	f000 fdb1 	bl	8009738 <memp_malloc>
 8008bd6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d102      	bne.n	8008be4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8008bde:	f04f 33ff 	mov.w	r3, #4294967295
 8008be2:	e01a      	b.n	8008c1a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	2200      	movs	r2, #0
 8008be8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	68fa      	ldr	r2, [r7, #12]
 8008bee:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	68ba      	ldr	r2, [r7, #8]
 8008bf4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008bfc:	6979      	ldr	r1, [r7, #20]
 8008bfe:	4809      	ldr	r0, [pc, #36]	@ (8008c24 <tcpip_inpkt+0x78>)
 8008c00:	f009 fd2a 	bl	8012658 <sys_mbox_trypost>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d006      	beq.n	8008c18 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008c0a:	6979      	ldr	r1, [r7, #20]
 8008c0c:	2008      	movs	r0, #8
 8008c0e:	f000 fe09 	bl	8009824 <memp_free>
    return ERR_MEM;
 8008c12:	f04f 33ff 	mov.w	r3, #4294967295
 8008c16:	e000      	b.n	8008c1a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8008c18:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3718      	adds	r7, #24
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	20009b4c 	.word	0x20009b4c
 8008c28:	08015314 	.word	0x08015314
 8008c2c:	0801538c 	.word	0x0801538c
 8008c30:	08015364 	.word	0x08015364

08008c34 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008c44:	f003 0318 	and.w	r3, r3, #24
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d006      	beq.n	8008c5a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8008c4c:	4a08      	ldr	r2, [pc, #32]	@ (8008c70 <tcpip_input+0x3c>)
 8008c4e:	6839      	ldr	r1, [r7, #0]
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f7ff ffab 	bl	8008bac <tcpip_inpkt>
 8008c56:	4603      	mov	r3, r0
 8008c58:	e005      	b.n	8008c66 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8008c5a:	4a06      	ldr	r2, [pc, #24]	@ (8008c74 <tcpip_input+0x40>)
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f7ff ffa4 	bl	8008bac <tcpip_inpkt>
 8008c64:	4603      	mov	r3, r0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3708      	adds	r7, #8
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	bf00      	nop
 8008c70:	08012479 	.word	0x08012479
 8008c74:	08011395 	.word	0x08011395

08008c78 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008c82:	4819      	ldr	r0, [pc, #100]	@ (8008ce8 <tcpip_try_callback+0x70>)
 8008c84:	f009 fd33 	bl	80126ee <sys_mbox_valid>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d106      	bne.n	8008c9c <tcpip_try_callback+0x24>
 8008c8e:	4b17      	ldr	r3, [pc, #92]	@ (8008cec <tcpip_try_callback+0x74>)
 8008c90:	f240 125d 	movw	r2, #349	@ 0x15d
 8008c94:	4916      	ldr	r1, [pc, #88]	@ (8008cf0 <tcpip_try_callback+0x78>)
 8008c96:	4817      	ldr	r0, [pc, #92]	@ (8008cf4 <tcpip_try_callback+0x7c>)
 8008c98:	f00b fc8c 	bl	80145b4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8008c9c:	2007      	movs	r0, #7
 8008c9e:	f000 fd4b 	bl	8009738 <memp_malloc>
 8008ca2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d102      	bne.n	8008cb0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8008caa:	f04f 33ff 	mov.w	r3, #4294967295
 8008cae:	e017      	b.n	8008ce0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	683a      	ldr	r2, [r7, #0]
 8008cc0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008cc2:	68f9      	ldr	r1, [r7, #12]
 8008cc4:	4808      	ldr	r0, [pc, #32]	@ (8008ce8 <tcpip_try_callback+0x70>)
 8008cc6:	f009 fcc7 	bl	8012658 <sys_mbox_trypost>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d006      	beq.n	8008cde <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8008cd0:	68f9      	ldr	r1, [r7, #12]
 8008cd2:	2007      	movs	r0, #7
 8008cd4:	f000 fda6 	bl	8009824 <memp_free>
    return ERR_MEM;
 8008cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8008cdc:	e000      	b.n	8008ce0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	20009b4c 	.word	0x20009b4c
 8008cec:	08015314 	.word	0x08015314
 8008cf0:	0801538c 	.word	0x0801538c
 8008cf4:	08015364 	.word	0x08015364

08008cf8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af02      	add	r7, sp, #8
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  lwip_init();
 8008d02:	f000 f871 	bl	8008de8 <lwip_init>

  tcpip_init_done = initfunc;
 8008d06:	4a17      	ldr	r2, [pc, #92]	@ (8008d64 <tcpip_init+0x6c>)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8008d0c:	4a16      	ldr	r2, [pc, #88]	@ (8008d68 <tcpip_init+0x70>)
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8008d12:	2106      	movs	r1, #6
 8008d14:	4815      	ldr	r0, [pc, #84]	@ (8008d6c <tcpip_init+0x74>)
 8008d16:	f009 fc85 	bl	8012624 <sys_mbox_new>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d006      	beq.n	8008d2e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8008d20:	4b13      	ldr	r3, [pc, #76]	@ (8008d70 <tcpip_init+0x78>)
 8008d22:	f240 2261 	movw	r2, #609	@ 0x261
 8008d26:	4913      	ldr	r1, [pc, #76]	@ (8008d74 <tcpip_init+0x7c>)
 8008d28:	4813      	ldr	r0, [pc, #76]	@ (8008d78 <tcpip_init+0x80>)
 8008d2a:	f00b fc43 	bl	80145b4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8008d2e:	4813      	ldr	r0, [pc, #76]	@ (8008d7c <tcpip_init+0x84>)
 8008d30:	f009 fcfa 	bl	8012728 <sys_mutex_new>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d006      	beq.n	8008d48 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8008d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8008d70 <tcpip_init+0x78>)
 8008d3c:	f240 2265 	movw	r2, #613	@ 0x265
 8008d40:	490f      	ldr	r1, [pc, #60]	@ (8008d80 <tcpip_init+0x88>)
 8008d42:	480d      	ldr	r0, [pc, #52]	@ (8008d78 <tcpip_init+0x80>)
 8008d44:	f00b fc36 	bl	80145b4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8008d48:	2318      	movs	r3, #24
 8008d4a:	9300      	str	r3, [sp, #0]
 8008d4c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008d50:	2200      	movs	r2, #0
 8008d52:	490c      	ldr	r1, [pc, #48]	@ (8008d84 <tcpip_init+0x8c>)
 8008d54:	480c      	ldr	r0, [pc, #48]	@ (8008d88 <tcpip_init+0x90>)
 8008d56:	f009 fd19 	bl	801278c <sys_thread_new>
}
 8008d5a:	bf00      	nop
 8008d5c:	3708      	adds	r7, #8
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	20009b44 	.word	0x20009b44
 8008d68:	20009b48 	.word	0x20009b48
 8008d6c:	20009b4c 	.word	0x20009b4c
 8008d70:	08015314 	.word	0x08015314
 8008d74:	0801539c 	.word	0x0801539c
 8008d78:	08015364 	.word	0x08015364
 8008d7c:	20009b50 	.word	0x20009b50
 8008d80:	080153c0 	.word	0x080153c0
 8008d84:	08008ab5 	.word	0x08008ab5
 8008d88:	080153e4 	.word	0x080153e4

08008d8c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	4603      	mov	r3, r0
 8008d94:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8008d96:	88fb      	ldrh	r3, [r7, #6]
 8008d98:	021b      	lsls	r3, r3, #8
 8008d9a:	b21a      	sxth	r2, r3
 8008d9c:	88fb      	ldrh	r3, [r7, #6]
 8008d9e:	0a1b      	lsrs	r3, r3, #8
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	b21b      	sxth	r3, r3
 8008da4:	4313      	orrs	r3, r2
 8008da6:	b21b      	sxth	r3, r3
 8008da8:	b29b      	uxth	r3, r3
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	370c      	adds	r7, #12
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008db6:	b480      	push	{r7}
 8008db8:	b083      	sub	sp, #12
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	061a      	lsls	r2, r3, #24
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	021b      	lsls	r3, r3, #8
 8008dc6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008dca:	431a      	orrs	r2, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	0a1b      	lsrs	r3, r3, #8
 8008dd0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008dd4:	431a      	orrs	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	0e1b      	lsrs	r3, r3, #24
 8008dda:	4313      	orrs	r3, r2
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8008dee:	2300      	movs	r3, #0
 8008df0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8008df2:	f009 fc8d 	bl	8012710 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8008df6:	f000 f8d3 	bl	8008fa0 <mem_init>
  memp_init();
 8008dfa:	f000 fc2f 	bl	800965c <memp_init>
  pbuf_init();
  netif_init();
 8008dfe:	f000 fd3b 	bl	8009878 <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008e02:	f001 fe81 	bl	800ab08 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8008e06:	f007 f897 	bl	800ff38 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8008e0a:	bf00      	nop
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
	...

08008e14 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8008e1e:	4b05      	ldr	r3, [pc, #20]	@ (8008e34 <ptr_to_mem+0x20>)
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	88fb      	ldrh	r3, [r7, #6]
 8008e24:	4413      	add	r3, r2
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	370c      	adds	r7, #12
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	2000af80 	.word	0x2000af80

08008e38 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8008e40:	4b05      	ldr	r3, [pc, #20]	@ (8008e58 <mem_to_ptr+0x20>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	1ad3      	subs	r3, r2, r3
 8008e48:	b29b      	uxth	r3, r3
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	370c      	adds	r7, #12
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	2000af80 	.word	0x2000af80

08008e5c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8008e5c:	b590      	push	{r4, r7, lr}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008e64:	4b45      	ldr	r3, [pc, #276]	@ (8008f7c <plug_holes+0x120>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d206      	bcs.n	8008e7c <plug_holes+0x20>
 8008e6e:	4b44      	ldr	r3, [pc, #272]	@ (8008f80 <plug_holes+0x124>)
 8008e70:	f240 12df 	movw	r2, #479	@ 0x1df
 8008e74:	4943      	ldr	r1, [pc, #268]	@ (8008f84 <plug_holes+0x128>)
 8008e76:	4844      	ldr	r0, [pc, #272]	@ (8008f88 <plug_holes+0x12c>)
 8008e78:	f00b fb9c 	bl	80145b4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008e7c:	4b43      	ldr	r3, [pc, #268]	@ (8008f8c <plug_holes+0x130>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d306      	bcc.n	8008e94 <plug_holes+0x38>
 8008e86:	4b3e      	ldr	r3, [pc, #248]	@ (8008f80 <plug_holes+0x124>)
 8008e88:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8008e8c:	4940      	ldr	r1, [pc, #256]	@ (8008f90 <plug_holes+0x134>)
 8008e8e:	483e      	ldr	r0, [pc, #248]	@ (8008f88 <plug_holes+0x12c>)
 8008e90:	f00b fb90 	bl	80145b4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	791b      	ldrb	r3, [r3, #4]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d006      	beq.n	8008eaa <plug_holes+0x4e>
 8008e9c:	4b38      	ldr	r3, [pc, #224]	@ (8008f80 <plug_holes+0x124>)
 8008e9e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8008ea2:	493c      	ldr	r1, [pc, #240]	@ (8008f94 <plug_holes+0x138>)
 8008ea4:	4838      	ldr	r0, [pc, #224]	@ (8008f88 <plug_holes+0x12c>)
 8008ea6:	f00b fb85 	bl	80145b4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	881b      	ldrh	r3, [r3, #0]
 8008eae:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008eb2:	d906      	bls.n	8008ec2 <plug_holes+0x66>
 8008eb4:	4b32      	ldr	r3, [pc, #200]	@ (8008f80 <plug_holes+0x124>)
 8008eb6:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8008eba:	4937      	ldr	r1, [pc, #220]	@ (8008f98 <plug_holes+0x13c>)
 8008ebc:	4832      	ldr	r0, [pc, #200]	@ (8008f88 <plug_holes+0x12c>)
 8008ebe:	f00b fb79 	bl	80145b4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	881b      	ldrh	r3, [r3, #0]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7ff ffa4 	bl	8008e14 <ptr_to_mem>
 8008ecc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d024      	beq.n	8008f20 <plug_holes+0xc4>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	791b      	ldrb	r3, [r3, #4]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d120      	bne.n	8008f20 <plug_holes+0xc4>
 8008ede:	4b2b      	ldr	r3, [pc, #172]	@ (8008f8c <plug_holes+0x130>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	68fa      	ldr	r2, [r7, #12]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d01b      	beq.n	8008f20 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008ee8:	4b2c      	ldr	r3, [pc, #176]	@ (8008f9c <plug_holes+0x140>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d102      	bne.n	8008ef8 <plug_holes+0x9c>
      lfree = mem;
 8008ef2:	4a2a      	ldr	r2, [pc, #168]	@ (8008f9c <plug_holes+0x140>)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	881a      	ldrh	r2, [r3, #0]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	881b      	ldrh	r3, [r3, #0]
 8008f04:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008f08:	d00a      	beq.n	8008f20 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	881b      	ldrh	r3, [r3, #0]
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7ff ff80 	bl	8008e14 <ptr_to_mem>
 8008f14:	4604      	mov	r4, r0
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f7ff ff8e 	bl	8008e38 <mem_to_ptr>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	885b      	ldrh	r3, [r3, #2]
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7ff ff75 	bl	8008e14 <ptr_to_mem>
 8008f2a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8008f2c:	68ba      	ldr	r2, [r7, #8]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d01f      	beq.n	8008f74 <plug_holes+0x118>
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	791b      	ldrb	r3, [r3, #4]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d11b      	bne.n	8008f74 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8008f3c:	4b17      	ldr	r3, [pc, #92]	@ (8008f9c <plug_holes+0x140>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d102      	bne.n	8008f4c <plug_holes+0xf0>
      lfree = pmem;
 8008f46:	4a15      	ldr	r2, [pc, #84]	@ (8008f9c <plug_holes+0x140>)
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	881a      	ldrh	r2, [r3, #0]
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	881b      	ldrh	r3, [r3, #0]
 8008f58:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008f5c:	d00a      	beq.n	8008f74 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	881b      	ldrh	r3, [r3, #0]
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7ff ff56 	bl	8008e14 <ptr_to_mem>
 8008f68:	4604      	mov	r4, r0
 8008f6a:	68b8      	ldr	r0, [r7, #8]
 8008f6c:	f7ff ff64 	bl	8008e38 <mem_to_ptr>
 8008f70:	4603      	mov	r3, r0
 8008f72:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8008f74:	bf00      	nop
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd90      	pop	{r4, r7, pc}
 8008f7c:	2000af80 	.word	0x2000af80
 8008f80:	080153f4 	.word	0x080153f4
 8008f84:	08015424 	.word	0x08015424
 8008f88:	0801543c 	.word	0x0801543c
 8008f8c:	2000af84 	.word	0x2000af84
 8008f90:	08015464 	.word	0x08015464
 8008f94:	08015480 	.word	0x08015480
 8008f98:	0801549c 	.word	0x0801549c
 8008f9c:	2000af8c 	.word	0x2000af8c

08008fa0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008fa6:	4b1f      	ldr	r3, [pc, #124]	@ (8009024 <mem_init+0x84>)
 8008fa8:	3303      	adds	r3, #3
 8008faa:	f023 0303 	bic.w	r3, r3, #3
 8008fae:	461a      	mov	r2, r3
 8008fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8009028 <mem_init+0x88>)
 8008fb2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8009028 <mem_init+0x88>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8008fc0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8008fce:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8008fd2:	f7ff ff1f 	bl	8008e14 <ptr_to_mem>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	4a14      	ldr	r2, [pc, #80]	@ (800902c <mem_init+0x8c>)
 8008fda:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008fdc:	4b13      	ldr	r3, [pc, #76]	@ (800902c <mem_init+0x8c>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008fe4:	4b11      	ldr	r3, [pc, #68]	@ (800902c <mem_init+0x8c>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8008fec:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8008fee:	4b0f      	ldr	r3, [pc, #60]	@ (800902c <mem_init+0x8c>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8008ff6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8009028 <mem_init+0x88>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a0c      	ldr	r2, [pc, #48]	@ (8009030 <mem_init+0x90>)
 8008ffe:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8009000:	480c      	ldr	r0, [pc, #48]	@ (8009034 <mem_init+0x94>)
 8009002:	f009 fb91 	bl	8012728 <sys_mutex_new>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d006      	beq.n	800901a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800900c:	4b0a      	ldr	r3, [pc, #40]	@ (8009038 <mem_init+0x98>)
 800900e:	f240 221f 	movw	r2, #543	@ 0x21f
 8009012:	490a      	ldr	r1, [pc, #40]	@ (800903c <mem_init+0x9c>)
 8009014:	480a      	ldr	r0, [pc, #40]	@ (8009040 <mem_init+0xa0>)
 8009016:	f00b facd 	bl	80145b4 <iprintf>
  }
}
 800901a:	bf00      	nop
 800901c:	3708      	adds	r7, #8
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	20009b6c 	.word	0x20009b6c
 8009028:	2000af80 	.word	0x2000af80
 800902c:	2000af84 	.word	0x2000af84
 8009030:	2000af8c 	.word	0x2000af8c
 8009034:	2000af88 	.word	0x2000af88
 8009038:	080153f4 	.word	0x080153f4
 800903c:	080154c8 	.word	0x080154c8
 8009040:	0801543c 	.word	0x0801543c

08009044 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f7ff fef3 	bl	8008e38 <mem_to_ptr>
 8009052:	4603      	mov	r3, r0
 8009054:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	881b      	ldrh	r3, [r3, #0]
 800905a:	4618      	mov	r0, r3
 800905c:	f7ff feda 	bl	8008e14 <ptr_to_mem>
 8009060:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	885b      	ldrh	r3, [r3, #2]
 8009066:	4618      	mov	r0, r3
 8009068:	f7ff fed4 	bl	8008e14 <ptr_to_mem>
 800906c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	881b      	ldrh	r3, [r3, #0]
 8009072:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009076:	d818      	bhi.n	80090aa <mem_link_valid+0x66>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	885b      	ldrh	r3, [r3, #2]
 800907c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009080:	d813      	bhi.n	80090aa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009086:	8afa      	ldrh	r2, [r7, #22]
 8009088:	429a      	cmp	r2, r3
 800908a:	d004      	beq.n	8009096 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	881b      	ldrh	r3, [r3, #0]
 8009090:	8afa      	ldrh	r2, [r7, #22]
 8009092:	429a      	cmp	r2, r3
 8009094:	d109      	bne.n	80090aa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009096:	4b08      	ldr	r3, [pc, #32]	@ (80090b8 <mem_link_valid+0x74>)
 8009098:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800909a:	693a      	ldr	r2, [r7, #16]
 800909c:	429a      	cmp	r2, r3
 800909e:	d006      	beq.n	80090ae <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	885b      	ldrh	r3, [r3, #2]
 80090a4:	8afa      	ldrh	r2, [r7, #22]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d001      	beq.n	80090ae <mem_link_valid+0x6a>
    return 0;
 80090aa:	2300      	movs	r3, #0
 80090ac:	e000      	b.n	80090b0 <mem_link_valid+0x6c>
  }
  return 1;
 80090ae:	2301      	movs	r3, #1
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3718      	adds	r7, #24
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	2000af84 	.word	0x2000af84

080090bc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b088      	sub	sp, #32
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d070      	beq.n	80091ac <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f003 0303 	and.w	r3, r3, #3
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00d      	beq.n	80090f0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80090d4:	4b37      	ldr	r3, [pc, #220]	@ (80091b4 <mem_free+0xf8>)
 80090d6:	f240 2273 	movw	r2, #627	@ 0x273
 80090da:	4937      	ldr	r1, [pc, #220]	@ (80091b8 <mem_free+0xfc>)
 80090dc:	4837      	ldr	r0, [pc, #220]	@ (80091bc <mem_free+0x100>)
 80090de:	f00b fa69 	bl	80145b4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80090e2:	f009 fb73 	bl	80127cc <sys_arch_protect>
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	68f8      	ldr	r0, [r7, #12]
 80090ea:	f009 fb7d 	bl	80127e8 <sys_arch_unprotect>
    return;
 80090ee:	e05e      	b.n	80091ae <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	3b08      	subs	r3, #8
 80090f4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80090f6:	4b32      	ldr	r3, [pc, #200]	@ (80091c0 <mem_free+0x104>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	69fa      	ldr	r2, [r7, #28]
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d306      	bcc.n	800910e <mem_free+0x52>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f103 020c 	add.w	r2, r3, #12
 8009106:	4b2f      	ldr	r3, [pc, #188]	@ (80091c4 <mem_free+0x108>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	429a      	cmp	r2, r3
 800910c:	d90d      	bls.n	800912a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800910e:	4b29      	ldr	r3, [pc, #164]	@ (80091b4 <mem_free+0xf8>)
 8009110:	f240 227f 	movw	r2, #639	@ 0x27f
 8009114:	492c      	ldr	r1, [pc, #176]	@ (80091c8 <mem_free+0x10c>)
 8009116:	4829      	ldr	r0, [pc, #164]	@ (80091bc <mem_free+0x100>)
 8009118:	f00b fa4c 	bl	80145b4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800911c:	f009 fb56 	bl	80127cc <sys_arch_protect>
 8009120:	6138      	str	r0, [r7, #16]
 8009122:	6938      	ldr	r0, [r7, #16]
 8009124:	f009 fb60 	bl	80127e8 <sys_arch_unprotect>
    return;
 8009128:	e041      	b.n	80091ae <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800912a:	4828      	ldr	r0, [pc, #160]	@ (80091cc <mem_free+0x110>)
 800912c:	f009 fb12 	bl	8012754 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	791b      	ldrb	r3, [r3, #4]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d110      	bne.n	800915a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009138:	4b1e      	ldr	r3, [pc, #120]	@ (80091b4 <mem_free+0xf8>)
 800913a:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800913e:	4924      	ldr	r1, [pc, #144]	@ (80091d0 <mem_free+0x114>)
 8009140:	481e      	ldr	r0, [pc, #120]	@ (80091bc <mem_free+0x100>)
 8009142:	f00b fa37 	bl	80145b4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009146:	4821      	ldr	r0, [pc, #132]	@ (80091cc <mem_free+0x110>)
 8009148:	f009 fb13 	bl	8012772 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800914c:	f009 fb3e 	bl	80127cc <sys_arch_protect>
 8009150:	6178      	str	r0, [r7, #20]
 8009152:	6978      	ldr	r0, [r7, #20]
 8009154:	f009 fb48 	bl	80127e8 <sys_arch_unprotect>
    return;
 8009158:	e029      	b.n	80091ae <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800915a:	69f8      	ldr	r0, [r7, #28]
 800915c:	f7ff ff72 	bl	8009044 <mem_link_valid>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d110      	bne.n	8009188 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009166:	4b13      	ldr	r3, [pc, #76]	@ (80091b4 <mem_free+0xf8>)
 8009168:	f240 2295 	movw	r2, #661	@ 0x295
 800916c:	4919      	ldr	r1, [pc, #100]	@ (80091d4 <mem_free+0x118>)
 800916e:	4813      	ldr	r0, [pc, #76]	@ (80091bc <mem_free+0x100>)
 8009170:	f00b fa20 	bl	80145b4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009174:	4815      	ldr	r0, [pc, #84]	@ (80091cc <mem_free+0x110>)
 8009176:	f009 fafc 	bl	8012772 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800917a:	f009 fb27 	bl	80127cc <sys_arch_protect>
 800917e:	61b8      	str	r0, [r7, #24]
 8009180:	69b8      	ldr	r0, [r7, #24]
 8009182:	f009 fb31 	bl	80127e8 <sys_arch_unprotect>
    return;
 8009186:	e012      	b.n	80091ae <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	2200      	movs	r2, #0
 800918c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800918e:	4b12      	ldr	r3, [pc, #72]	@ (80091d8 <mem_free+0x11c>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	69fa      	ldr	r2, [r7, #28]
 8009194:	429a      	cmp	r2, r3
 8009196:	d202      	bcs.n	800919e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009198:	4a0f      	ldr	r2, [pc, #60]	@ (80091d8 <mem_free+0x11c>)
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800919e:	69f8      	ldr	r0, [r7, #28]
 80091a0:	f7ff fe5c 	bl	8008e5c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80091a4:	4809      	ldr	r0, [pc, #36]	@ (80091cc <mem_free+0x110>)
 80091a6:	f009 fae4 	bl	8012772 <sys_mutex_unlock>
 80091aa:	e000      	b.n	80091ae <mem_free+0xf2>
    return;
 80091ac:	bf00      	nop
}
 80091ae:	3720      	adds	r7, #32
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	080153f4 	.word	0x080153f4
 80091b8:	080154e4 	.word	0x080154e4
 80091bc:	0801543c 	.word	0x0801543c
 80091c0:	2000af80 	.word	0x2000af80
 80091c4:	2000af84 	.word	0x2000af84
 80091c8:	08015508 	.word	0x08015508
 80091cc:	2000af88 	.word	0x2000af88
 80091d0:	08015524 	.word	0x08015524
 80091d4:	0801554c 	.word	0x0801554c
 80091d8:	2000af8c 	.word	0x2000af8c

080091dc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b088      	sub	sp, #32
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	460b      	mov	r3, r1
 80091e6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80091e8:	887b      	ldrh	r3, [r7, #2]
 80091ea:	3303      	adds	r3, #3
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	f023 0303 	bic.w	r3, r3, #3
 80091f2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80091f4:	8bfb      	ldrh	r3, [r7, #30]
 80091f6:	2b0b      	cmp	r3, #11
 80091f8:	d801      	bhi.n	80091fe <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80091fa:	230c      	movs	r3, #12
 80091fc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80091fe:	8bfb      	ldrh	r3, [r7, #30]
 8009200:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009204:	d803      	bhi.n	800920e <mem_trim+0x32>
 8009206:	8bfa      	ldrh	r2, [r7, #30]
 8009208:	887b      	ldrh	r3, [r7, #2]
 800920a:	429a      	cmp	r2, r3
 800920c:	d201      	bcs.n	8009212 <mem_trim+0x36>
    return NULL;
 800920e:	2300      	movs	r3, #0
 8009210:	e0d8      	b.n	80093c4 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009212:	4b6e      	ldr	r3, [pc, #440]	@ (80093cc <mem_trim+0x1f0>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	429a      	cmp	r2, r3
 800921a:	d304      	bcc.n	8009226 <mem_trim+0x4a>
 800921c:	4b6c      	ldr	r3, [pc, #432]	@ (80093d0 <mem_trim+0x1f4>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	429a      	cmp	r2, r3
 8009224:	d306      	bcc.n	8009234 <mem_trim+0x58>
 8009226:	4b6b      	ldr	r3, [pc, #428]	@ (80093d4 <mem_trim+0x1f8>)
 8009228:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800922c:	496a      	ldr	r1, [pc, #424]	@ (80093d8 <mem_trim+0x1fc>)
 800922e:	486b      	ldr	r0, [pc, #428]	@ (80093dc <mem_trim+0x200>)
 8009230:	f00b f9c0 	bl	80145b4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009234:	4b65      	ldr	r3, [pc, #404]	@ (80093cc <mem_trim+0x1f0>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	429a      	cmp	r2, r3
 800923c:	d304      	bcc.n	8009248 <mem_trim+0x6c>
 800923e:	4b64      	ldr	r3, [pc, #400]	@ (80093d0 <mem_trim+0x1f4>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	429a      	cmp	r2, r3
 8009246:	d307      	bcc.n	8009258 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009248:	f009 fac0 	bl	80127cc <sys_arch_protect>
 800924c:	60b8      	str	r0, [r7, #8]
 800924e:	68b8      	ldr	r0, [r7, #8]
 8009250:	f009 faca 	bl	80127e8 <sys_arch_unprotect>
    return rmem;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	e0b5      	b.n	80093c4 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	3b08      	subs	r3, #8
 800925c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800925e:	69b8      	ldr	r0, [r7, #24]
 8009260:	f7ff fdea 	bl	8008e38 <mem_to_ptr>
 8009264:	4603      	mov	r3, r0
 8009266:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	881a      	ldrh	r2, [r3, #0]
 800926c:	8afb      	ldrh	r3, [r7, #22]
 800926e:	1ad3      	subs	r3, r2, r3
 8009270:	b29b      	uxth	r3, r3
 8009272:	3b08      	subs	r3, #8
 8009274:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009276:	8bfa      	ldrh	r2, [r7, #30]
 8009278:	8abb      	ldrh	r3, [r7, #20]
 800927a:	429a      	cmp	r2, r3
 800927c:	d906      	bls.n	800928c <mem_trim+0xb0>
 800927e:	4b55      	ldr	r3, [pc, #340]	@ (80093d4 <mem_trim+0x1f8>)
 8009280:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8009284:	4956      	ldr	r1, [pc, #344]	@ (80093e0 <mem_trim+0x204>)
 8009286:	4855      	ldr	r0, [pc, #340]	@ (80093dc <mem_trim+0x200>)
 8009288:	f00b f994 	bl	80145b4 <iprintf>
  if (newsize > size) {
 800928c:	8bfa      	ldrh	r2, [r7, #30]
 800928e:	8abb      	ldrh	r3, [r7, #20]
 8009290:	429a      	cmp	r2, r3
 8009292:	d901      	bls.n	8009298 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8009294:	2300      	movs	r3, #0
 8009296:	e095      	b.n	80093c4 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8009298:	8bfa      	ldrh	r2, [r7, #30]
 800929a:	8abb      	ldrh	r3, [r7, #20]
 800929c:	429a      	cmp	r2, r3
 800929e:	d101      	bne.n	80092a4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	e08f      	b.n	80093c4 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80092a4:	484f      	ldr	r0, [pc, #316]	@ (80093e4 <mem_trim+0x208>)
 80092a6:	f009 fa55 	bl	8012754 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	881b      	ldrh	r3, [r3, #0]
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7ff fdb0 	bl	8008e14 <ptr_to_mem>
 80092b4:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	791b      	ldrb	r3, [r3, #4]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d13f      	bne.n	800933e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	881b      	ldrh	r3, [r3, #0]
 80092c2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80092c6:	d106      	bne.n	80092d6 <mem_trim+0xfa>
 80092c8:	4b42      	ldr	r3, [pc, #264]	@ (80093d4 <mem_trim+0x1f8>)
 80092ca:	f240 22f5 	movw	r2, #757	@ 0x2f5
 80092ce:	4946      	ldr	r1, [pc, #280]	@ (80093e8 <mem_trim+0x20c>)
 80092d0:	4842      	ldr	r0, [pc, #264]	@ (80093dc <mem_trim+0x200>)
 80092d2:	f00b f96f 	bl	80145b4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	881b      	ldrh	r3, [r3, #0]
 80092da:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80092dc:	8afa      	ldrh	r2, [r7, #22]
 80092de:	8bfb      	ldrh	r3, [r7, #30]
 80092e0:	4413      	add	r3, r2
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	3308      	adds	r3, #8
 80092e6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80092e8:	4b40      	ldr	r3, [pc, #256]	@ (80093ec <mem_trim+0x210>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	693a      	ldr	r2, [r7, #16]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d106      	bne.n	8009300 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80092f2:	89fb      	ldrh	r3, [r7, #14]
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7ff fd8d 	bl	8008e14 <ptr_to_mem>
 80092fa:	4603      	mov	r3, r0
 80092fc:	4a3b      	ldr	r2, [pc, #236]	@ (80093ec <mem_trim+0x210>)
 80092fe:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8009300:	89fb      	ldrh	r3, [r7, #14]
 8009302:	4618      	mov	r0, r3
 8009304:	f7ff fd86 	bl	8008e14 <ptr_to_mem>
 8009308:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	2200      	movs	r2, #0
 800930e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	89ba      	ldrh	r2, [r7, #12]
 8009314:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	8afa      	ldrh	r2, [r7, #22]
 800931a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800931c:	69bb      	ldr	r3, [r7, #24]
 800931e:	89fa      	ldrh	r2, [r7, #14]
 8009320:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	881b      	ldrh	r3, [r3, #0]
 8009326:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800932a:	d047      	beq.n	80093bc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	881b      	ldrh	r3, [r3, #0]
 8009330:	4618      	mov	r0, r3
 8009332:	f7ff fd6f 	bl	8008e14 <ptr_to_mem>
 8009336:	4602      	mov	r2, r0
 8009338:	89fb      	ldrh	r3, [r7, #14]
 800933a:	8053      	strh	r3, [r2, #2]
 800933c:	e03e      	b.n	80093bc <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800933e:	8bfb      	ldrh	r3, [r7, #30]
 8009340:	f103 0214 	add.w	r2, r3, #20
 8009344:	8abb      	ldrh	r3, [r7, #20]
 8009346:	429a      	cmp	r2, r3
 8009348:	d838      	bhi.n	80093bc <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800934a:	8afa      	ldrh	r2, [r7, #22]
 800934c:	8bfb      	ldrh	r3, [r7, #30]
 800934e:	4413      	add	r3, r2
 8009350:	b29b      	uxth	r3, r3
 8009352:	3308      	adds	r3, #8
 8009354:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	881b      	ldrh	r3, [r3, #0]
 800935a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800935e:	d106      	bne.n	800936e <mem_trim+0x192>
 8009360:	4b1c      	ldr	r3, [pc, #112]	@ (80093d4 <mem_trim+0x1f8>)
 8009362:	f240 3216 	movw	r2, #790	@ 0x316
 8009366:	4920      	ldr	r1, [pc, #128]	@ (80093e8 <mem_trim+0x20c>)
 8009368:	481c      	ldr	r0, [pc, #112]	@ (80093dc <mem_trim+0x200>)
 800936a:	f00b f923 	bl	80145b4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800936e:	89fb      	ldrh	r3, [r7, #14]
 8009370:	4618      	mov	r0, r3
 8009372:	f7ff fd4f 	bl	8008e14 <ptr_to_mem>
 8009376:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009378:	4b1c      	ldr	r3, [pc, #112]	@ (80093ec <mem_trim+0x210>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	429a      	cmp	r2, r3
 8009380:	d202      	bcs.n	8009388 <mem_trim+0x1ac>
      lfree = mem2;
 8009382:	4a1a      	ldr	r2, [pc, #104]	@ (80093ec <mem_trim+0x210>)
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	2200      	movs	r2, #0
 800938c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	881a      	ldrh	r2, [r3, #0]
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	8afa      	ldrh	r2, [r7, #22]
 800939a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	89fa      	ldrh	r2, [r7, #14]
 80093a0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	881b      	ldrh	r3, [r3, #0]
 80093a6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80093aa:	d007      	beq.n	80093bc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	881b      	ldrh	r3, [r3, #0]
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7ff fd2f 	bl	8008e14 <ptr_to_mem>
 80093b6:	4602      	mov	r2, r0
 80093b8:	89fb      	ldrh	r3, [r7, #14]
 80093ba:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80093bc:	4809      	ldr	r0, [pc, #36]	@ (80093e4 <mem_trim+0x208>)
 80093be:	f009 f9d8 	bl	8012772 <sys_mutex_unlock>
  return rmem;
 80093c2:	687b      	ldr	r3, [r7, #4]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3720      	adds	r7, #32
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	2000af80 	.word	0x2000af80
 80093d0:	2000af84 	.word	0x2000af84
 80093d4:	080153f4 	.word	0x080153f4
 80093d8:	08015580 	.word	0x08015580
 80093dc:	0801543c 	.word	0x0801543c
 80093e0:	08015598 	.word	0x08015598
 80093e4:	2000af88 	.word	0x2000af88
 80093e8:	080155b8 	.word	0x080155b8
 80093ec:	2000af8c 	.word	0x2000af8c

080093f0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b088      	sub	sp, #32
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	4603      	mov	r3, r0
 80093f8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80093fa:	88fb      	ldrh	r3, [r7, #6]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d101      	bne.n	8009404 <mem_malloc+0x14>
    return NULL;
 8009400:	2300      	movs	r3, #0
 8009402:	e0e2      	b.n	80095ca <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009404:	88fb      	ldrh	r3, [r7, #6]
 8009406:	3303      	adds	r3, #3
 8009408:	b29b      	uxth	r3, r3
 800940a:	f023 0303 	bic.w	r3, r3, #3
 800940e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8009410:	8bbb      	ldrh	r3, [r7, #28]
 8009412:	2b0b      	cmp	r3, #11
 8009414:	d801      	bhi.n	800941a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8009416:	230c      	movs	r3, #12
 8009418:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800941a:	8bbb      	ldrh	r3, [r7, #28]
 800941c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009420:	d803      	bhi.n	800942a <mem_malloc+0x3a>
 8009422:	8bba      	ldrh	r2, [r7, #28]
 8009424:	88fb      	ldrh	r3, [r7, #6]
 8009426:	429a      	cmp	r2, r3
 8009428:	d201      	bcs.n	800942e <mem_malloc+0x3e>
    return NULL;
 800942a:	2300      	movs	r3, #0
 800942c:	e0cd      	b.n	80095ca <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800942e:	4869      	ldr	r0, [pc, #420]	@ (80095d4 <mem_malloc+0x1e4>)
 8009430:	f009 f990 	bl	8012754 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009434:	4b68      	ldr	r3, [pc, #416]	@ (80095d8 <mem_malloc+0x1e8>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4618      	mov	r0, r3
 800943a:	f7ff fcfd 	bl	8008e38 <mem_to_ptr>
 800943e:	4603      	mov	r3, r0
 8009440:	83fb      	strh	r3, [r7, #30]
 8009442:	e0b7      	b.n	80095b4 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8009444:	8bfb      	ldrh	r3, [r7, #30]
 8009446:	4618      	mov	r0, r3
 8009448:	f7ff fce4 	bl	8008e14 <ptr_to_mem>
 800944c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	791b      	ldrb	r3, [r3, #4]
 8009452:	2b00      	cmp	r3, #0
 8009454:	f040 80a7 	bne.w	80095a6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	881b      	ldrh	r3, [r3, #0]
 800945c:	461a      	mov	r2, r3
 800945e:	8bfb      	ldrh	r3, [r7, #30]
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	f1a3 0208 	sub.w	r2, r3, #8
 8009466:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8009468:	429a      	cmp	r2, r3
 800946a:	f0c0 809c 	bcc.w	80095a6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	881b      	ldrh	r3, [r3, #0]
 8009472:	461a      	mov	r2, r3
 8009474:	8bfb      	ldrh	r3, [r7, #30]
 8009476:	1ad3      	subs	r3, r2, r3
 8009478:	f1a3 0208 	sub.w	r2, r3, #8
 800947c:	8bbb      	ldrh	r3, [r7, #28]
 800947e:	3314      	adds	r3, #20
 8009480:	429a      	cmp	r2, r3
 8009482:	d333      	bcc.n	80094ec <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009484:	8bfa      	ldrh	r2, [r7, #30]
 8009486:	8bbb      	ldrh	r3, [r7, #28]
 8009488:	4413      	add	r3, r2
 800948a:	b29b      	uxth	r3, r3
 800948c:	3308      	adds	r3, #8
 800948e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009490:	8a7b      	ldrh	r3, [r7, #18]
 8009492:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009496:	d106      	bne.n	80094a6 <mem_malloc+0xb6>
 8009498:	4b50      	ldr	r3, [pc, #320]	@ (80095dc <mem_malloc+0x1ec>)
 800949a:	f240 3287 	movw	r2, #903	@ 0x387
 800949e:	4950      	ldr	r1, [pc, #320]	@ (80095e0 <mem_malloc+0x1f0>)
 80094a0:	4850      	ldr	r0, [pc, #320]	@ (80095e4 <mem_malloc+0x1f4>)
 80094a2:	f00b f887 	bl	80145b4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80094a6:	8a7b      	ldrh	r3, [r7, #18]
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7ff fcb3 	bl	8008e14 <ptr_to_mem>
 80094ae:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2200      	movs	r2, #0
 80094b4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	881a      	ldrh	r2, [r3, #0]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	8bfa      	ldrh	r2, [r7, #30]
 80094c2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	8a7a      	ldrh	r2, [r7, #18]
 80094c8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	2201      	movs	r2, #1
 80094ce:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	881b      	ldrh	r3, [r3, #0]
 80094d4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80094d8:	d00b      	beq.n	80094f2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	881b      	ldrh	r3, [r3, #0]
 80094de:	4618      	mov	r0, r3
 80094e0:	f7ff fc98 	bl	8008e14 <ptr_to_mem>
 80094e4:	4602      	mov	r2, r0
 80094e6:	8a7b      	ldrh	r3, [r7, #18]
 80094e8:	8053      	strh	r3, [r2, #2]
 80094ea:	e002      	b.n	80094f2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	2201      	movs	r2, #1
 80094f0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80094f2:	4b39      	ldr	r3, [pc, #228]	@ (80095d8 <mem_malloc+0x1e8>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	697a      	ldr	r2, [r7, #20]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d127      	bne.n	800954c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80094fc:	4b36      	ldr	r3, [pc, #216]	@ (80095d8 <mem_malloc+0x1e8>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009502:	e005      	b.n	8009510 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	881b      	ldrh	r3, [r3, #0]
 8009508:	4618      	mov	r0, r3
 800950a:	f7ff fc83 	bl	8008e14 <ptr_to_mem>
 800950e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8009510:	69bb      	ldr	r3, [r7, #24]
 8009512:	791b      	ldrb	r3, [r3, #4]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d004      	beq.n	8009522 <mem_malloc+0x132>
 8009518:	4b33      	ldr	r3, [pc, #204]	@ (80095e8 <mem_malloc+0x1f8>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	69ba      	ldr	r2, [r7, #24]
 800951e:	429a      	cmp	r2, r3
 8009520:	d1f0      	bne.n	8009504 <mem_malloc+0x114>
          }
          lfree = cur;
 8009522:	4a2d      	ldr	r2, [pc, #180]	@ (80095d8 <mem_malloc+0x1e8>)
 8009524:	69bb      	ldr	r3, [r7, #24]
 8009526:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009528:	4b2b      	ldr	r3, [pc, #172]	@ (80095d8 <mem_malloc+0x1e8>)
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	4b2e      	ldr	r3, [pc, #184]	@ (80095e8 <mem_malloc+0x1f8>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	429a      	cmp	r2, r3
 8009532:	d00b      	beq.n	800954c <mem_malloc+0x15c>
 8009534:	4b28      	ldr	r3, [pc, #160]	@ (80095d8 <mem_malloc+0x1e8>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	791b      	ldrb	r3, [r3, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d006      	beq.n	800954c <mem_malloc+0x15c>
 800953e:	4b27      	ldr	r3, [pc, #156]	@ (80095dc <mem_malloc+0x1ec>)
 8009540:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8009544:	4929      	ldr	r1, [pc, #164]	@ (80095ec <mem_malloc+0x1fc>)
 8009546:	4827      	ldr	r0, [pc, #156]	@ (80095e4 <mem_malloc+0x1f4>)
 8009548:	f00b f834 	bl	80145b4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800954c:	4821      	ldr	r0, [pc, #132]	@ (80095d4 <mem_malloc+0x1e4>)
 800954e:	f009 f910 	bl	8012772 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009552:	8bba      	ldrh	r2, [r7, #28]
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	4413      	add	r3, r2
 8009558:	3308      	adds	r3, #8
 800955a:	4a23      	ldr	r2, [pc, #140]	@ (80095e8 <mem_malloc+0x1f8>)
 800955c:	6812      	ldr	r2, [r2, #0]
 800955e:	4293      	cmp	r3, r2
 8009560:	d906      	bls.n	8009570 <mem_malloc+0x180>
 8009562:	4b1e      	ldr	r3, [pc, #120]	@ (80095dc <mem_malloc+0x1ec>)
 8009564:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8009568:	4921      	ldr	r1, [pc, #132]	@ (80095f0 <mem_malloc+0x200>)
 800956a:	481e      	ldr	r0, [pc, #120]	@ (80095e4 <mem_malloc+0x1f4>)
 800956c:	f00b f822 	bl	80145b4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	f003 0303 	and.w	r3, r3, #3
 8009576:	2b00      	cmp	r3, #0
 8009578:	d006      	beq.n	8009588 <mem_malloc+0x198>
 800957a:	4b18      	ldr	r3, [pc, #96]	@ (80095dc <mem_malloc+0x1ec>)
 800957c:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8009580:	491c      	ldr	r1, [pc, #112]	@ (80095f4 <mem_malloc+0x204>)
 8009582:	4818      	ldr	r0, [pc, #96]	@ (80095e4 <mem_malloc+0x1f4>)
 8009584:	f00b f816 	bl	80145b4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	f003 0303 	and.w	r3, r3, #3
 800958e:	2b00      	cmp	r3, #0
 8009590:	d006      	beq.n	80095a0 <mem_malloc+0x1b0>
 8009592:	4b12      	ldr	r3, [pc, #72]	@ (80095dc <mem_malloc+0x1ec>)
 8009594:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8009598:	4917      	ldr	r1, [pc, #92]	@ (80095f8 <mem_malloc+0x208>)
 800959a:	4812      	ldr	r0, [pc, #72]	@ (80095e4 <mem_malloc+0x1f4>)
 800959c:	f00b f80a 	bl	80145b4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	3308      	adds	r3, #8
 80095a4:	e011      	b.n	80095ca <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80095a6:	8bfb      	ldrh	r3, [r7, #30]
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7ff fc33 	bl	8008e14 <ptr_to_mem>
 80095ae:	4603      	mov	r3, r0
 80095b0:	881b      	ldrh	r3, [r3, #0]
 80095b2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80095b4:	8bfa      	ldrh	r2, [r7, #30]
 80095b6:	8bbb      	ldrh	r3, [r7, #28]
 80095b8:	f5c3 53a0 	rsb	r3, r3, #5120	@ 0x1400
 80095bc:	429a      	cmp	r2, r3
 80095be:	f4ff af41 	bcc.w	8009444 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80095c2:	4804      	ldr	r0, [pc, #16]	@ (80095d4 <mem_malloc+0x1e4>)
 80095c4:	f009 f8d5 	bl	8012772 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80095c8:	2300      	movs	r3, #0
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3720      	adds	r7, #32
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	2000af88 	.word	0x2000af88
 80095d8:	2000af8c 	.word	0x2000af8c
 80095dc:	080153f4 	.word	0x080153f4
 80095e0:	080155b8 	.word	0x080155b8
 80095e4:	0801543c 	.word	0x0801543c
 80095e8:	2000af84 	.word	0x2000af84
 80095ec:	080155cc 	.word	0x080155cc
 80095f0:	080155e8 	.word	0x080155e8
 80095f4:	08015618 	.word	0x08015618
 80095f8:	08015648 	.word	0x08015648

080095fc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	2200      	movs	r2, #0
 800960a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	3303      	adds	r3, #3
 8009612:	f023 0303 	bic.w	r3, r3, #3
 8009616:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009618:	2300      	movs	r3, #0
 800961a:	60fb      	str	r3, [r7, #12]
 800961c:	e011      	b.n	8009642 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	68ba      	ldr	r2, [r7, #8]
 800962e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	881b      	ldrh	r3, [r3, #0]
 8009634:	461a      	mov	r2, r3
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	4413      	add	r3, r2
 800963a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	3301      	adds	r3, #1
 8009640:	60fb      	str	r3, [r7, #12]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	885b      	ldrh	r3, [r3, #2]
 8009646:	461a      	mov	r2, r3
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	4293      	cmp	r3, r2
 800964c:	dbe7      	blt.n	800961e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800964e:	bf00      	nop
 8009650:	bf00      	nop
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009662:	2300      	movs	r3, #0
 8009664:	80fb      	strh	r3, [r7, #6]
 8009666:	e009      	b.n	800967c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009668:	88fb      	ldrh	r3, [r7, #6]
 800966a:	4a08      	ldr	r2, [pc, #32]	@ (800968c <memp_init+0x30>)
 800966c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009670:	4618      	mov	r0, r3
 8009672:	f7ff ffc3 	bl	80095fc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009676:	88fb      	ldrh	r3, [r7, #6]
 8009678:	3301      	adds	r3, #1
 800967a:	80fb      	strh	r3, [r7, #6]
 800967c:	88fb      	ldrh	r3, [r7, #6]
 800967e:	2b0b      	cmp	r3, #11
 8009680:	d9f2      	bls.n	8009668 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009682:	bf00      	nop
 8009684:	bf00      	nop
 8009686:	3708      	adds	r7, #8
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	08017b60 	.word	0x08017b60

08009690 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8009698:	f009 f898 	bl	80127cc <sys_arch_protect>
 800969c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d015      	beq.n	80096d8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	68ba      	ldr	r2, [r7, #8]
 80096b2:	6812      	ldr	r2, [r2, #0]
 80096b4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	f003 0303 	and.w	r3, r3, #3
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d006      	beq.n	80096ce <do_memp_malloc_pool+0x3e>
 80096c0:	4b09      	ldr	r3, [pc, #36]	@ (80096e8 <do_memp_malloc_pool+0x58>)
 80096c2:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80096c6:	4909      	ldr	r1, [pc, #36]	@ (80096ec <do_memp_malloc_pool+0x5c>)
 80096c8:	4809      	ldr	r0, [pc, #36]	@ (80096f0 <do_memp_malloc_pool+0x60>)
 80096ca:	f00a ff73 	bl	80145b4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f009 f88a 	bl	80127e8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	e003      	b.n	80096e0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f009 f885 	bl	80127e8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80096de:	2300      	movs	r3, #0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	0801566c 	.word	0x0801566c
 80096ec:	0801569c 	.word	0x0801569c
 80096f0:	080156c0 	.word	0x080156c0

080096f4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d106      	bne.n	8009710 <memp_malloc_pool+0x1c>
 8009702:	4b0a      	ldr	r3, [pc, #40]	@ (800972c <memp_malloc_pool+0x38>)
 8009704:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8009708:	4909      	ldr	r1, [pc, #36]	@ (8009730 <memp_malloc_pool+0x3c>)
 800970a:	480a      	ldr	r0, [pc, #40]	@ (8009734 <memp_malloc_pool+0x40>)
 800970c:	f00a ff52 	bl	80145b4 <iprintf>
  if (desc == NULL) {
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d101      	bne.n	800971a <memp_malloc_pool+0x26>
    return NULL;
 8009716:	2300      	movs	r3, #0
 8009718:	e003      	b.n	8009722 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f7ff ffb8 	bl	8009690 <do_memp_malloc_pool>
 8009720:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8009722:	4618      	mov	r0, r3
 8009724:	3708      	adds	r7, #8
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	0801566c 	.word	0x0801566c
 8009730:	080156e8 	.word	0x080156e8
 8009734:	080156c0 	.word	0x080156c0

08009738 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	4603      	mov	r3, r0
 8009740:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009742:	79fb      	ldrb	r3, [r7, #7]
 8009744:	2b0b      	cmp	r3, #11
 8009746:	d908      	bls.n	800975a <memp_malloc+0x22>
 8009748:	4b0a      	ldr	r3, [pc, #40]	@ (8009774 <memp_malloc+0x3c>)
 800974a:	f240 1257 	movw	r2, #343	@ 0x157
 800974e:	490a      	ldr	r1, [pc, #40]	@ (8009778 <memp_malloc+0x40>)
 8009750:	480a      	ldr	r0, [pc, #40]	@ (800977c <memp_malloc+0x44>)
 8009752:	f00a ff2f 	bl	80145b4 <iprintf>
 8009756:	2300      	movs	r3, #0
 8009758:	e008      	b.n	800976c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800975a:	79fb      	ldrb	r3, [r7, #7]
 800975c:	4a08      	ldr	r2, [pc, #32]	@ (8009780 <memp_malloc+0x48>)
 800975e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009762:	4618      	mov	r0, r3
 8009764:	f7ff ff94 	bl	8009690 <do_memp_malloc_pool>
 8009768:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800976a:	68fb      	ldr	r3, [r7, #12]
}
 800976c:	4618      	mov	r0, r3
 800976e:	3710      	adds	r7, #16
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	0801566c 	.word	0x0801566c
 8009778:	080156fc 	.word	0x080156fc
 800977c:	080156c0 	.word	0x080156c0
 8009780:	08017b60 	.word	0x08017b60

08009784 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	f003 0303 	and.w	r3, r3, #3
 8009794:	2b00      	cmp	r3, #0
 8009796:	d006      	beq.n	80097a6 <do_memp_free_pool+0x22>
 8009798:	4b0d      	ldr	r3, [pc, #52]	@ (80097d0 <do_memp_free_pool+0x4c>)
 800979a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800979e:	490d      	ldr	r1, [pc, #52]	@ (80097d4 <do_memp_free_pool+0x50>)
 80097a0:	480d      	ldr	r0, [pc, #52]	@ (80097d8 <do_memp_free_pool+0x54>)
 80097a2:	f00a ff07 	bl	80145b4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80097aa:	f009 f80f 	bl	80127cc <sys_arch_protect>
 80097ae:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80097c2:	68b8      	ldr	r0, [r7, #8]
 80097c4:	f009 f810 	bl	80127e8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80097c8:	bf00      	nop
 80097ca:	3710      	adds	r7, #16
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	0801566c 	.word	0x0801566c
 80097d4:	0801571c 	.word	0x0801571c
 80097d8:	080156c0 	.word	0x080156c0

080097dc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d106      	bne.n	80097fa <memp_free_pool+0x1e>
 80097ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009818 <memp_free_pool+0x3c>)
 80097ee:	f240 1295 	movw	r2, #405	@ 0x195
 80097f2:	490a      	ldr	r1, [pc, #40]	@ (800981c <memp_free_pool+0x40>)
 80097f4:	480a      	ldr	r0, [pc, #40]	@ (8009820 <memp_free_pool+0x44>)
 80097f6:	f00a fedd 	bl	80145b4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d007      	beq.n	8009810 <memp_free_pool+0x34>
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d004      	beq.n	8009810 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8009806:	6839      	ldr	r1, [r7, #0]
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f7ff ffbb 	bl	8009784 <do_memp_free_pool>
 800980e:	e000      	b.n	8009812 <memp_free_pool+0x36>
    return;
 8009810:	bf00      	nop
}
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	0801566c 	.word	0x0801566c
 800981c:	080156e8 	.word	0x080156e8
 8009820:	080156c0 	.word	0x080156c0

08009824 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	4603      	mov	r3, r0
 800982c:	6039      	str	r1, [r7, #0]
 800982e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009830:	79fb      	ldrb	r3, [r7, #7]
 8009832:	2b0b      	cmp	r3, #11
 8009834:	d907      	bls.n	8009846 <memp_free+0x22>
 8009836:	4b0c      	ldr	r3, [pc, #48]	@ (8009868 <memp_free+0x44>)
 8009838:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800983c:	490b      	ldr	r1, [pc, #44]	@ (800986c <memp_free+0x48>)
 800983e:	480c      	ldr	r0, [pc, #48]	@ (8009870 <memp_free+0x4c>)
 8009840:	f00a feb8 	bl	80145b4 <iprintf>
 8009844:	e00c      	b.n	8009860 <memp_free+0x3c>

  if (mem == NULL) {
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d008      	beq.n	800985e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800984c:	79fb      	ldrb	r3, [r7, #7]
 800984e:	4a09      	ldr	r2, [pc, #36]	@ (8009874 <memp_free+0x50>)
 8009850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	4618      	mov	r0, r3
 8009858:	f7ff ff94 	bl	8009784 <do_memp_free_pool>
 800985c:	e000      	b.n	8009860 <memp_free+0x3c>
    return;
 800985e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	0801566c 	.word	0x0801566c
 800986c:	0801573c 	.word	0x0801573c
 8009870:	080156c0 	.word	0x080156c0
 8009874:	08017b60 	.word	0x08017b60

08009878 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009878:	b480      	push	{r7}
 800987a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800987c:	bf00      	nop
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr
	...

08009888 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b086      	sub	sp, #24
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	607a      	str	r2, [r7, #4]
 8009894:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d108      	bne.n	80098ae <netif_add+0x26>
 800989c:	4b57      	ldr	r3, [pc, #348]	@ (80099fc <netif_add+0x174>)
 800989e:	f240 1227 	movw	r2, #295	@ 0x127
 80098a2:	4957      	ldr	r1, [pc, #348]	@ (8009a00 <netif_add+0x178>)
 80098a4:	4857      	ldr	r0, [pc, #348]	@ (8009a04 <netif_add+0x17c>)
 80098a6:	f00a fe85 	bl	80145b4 <iprintf>
 80098aa:	2300      	movs	r3, #0
 80098ac:	e0a2      	b.n	80099f4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80098ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d108      	bne.n	80098c6 <netif_add+0x3e>
 80098b4:	4b51      	ldr	r3, [pc, #324]	@ (80099fc <netif_add+0x174>)
 80098b6:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80098ba:	4953      	ldr	r1, [pc, #332]	@ (8009a08 <netif_add+0x180>)
 80098bc:	4851      	ldr	r0, [pc, #324]	@ (8009a04 <netif_add+0x17c>)
 80098be:	f00a fe79 	bl	80145b4 <iprintf>
 80098c2:	2300      	movs	r3, #0
 80098c4:	e096      	b.n	80099f4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d101      	bne.n	80098d0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80098cc:	4b4f      	ldr	r3, [pc, #316]	@ (8009a0c <netif_add+0x184>)
 80098ce:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d101      	bne.n	80098da <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80098d6:	4b4d      	ldr	r3, [pc, #308]	@ (8009a0c <netif_add+0x184>)
 80098d8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d101      	bne.n	80098e4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80098e0:	4b4a      	ldr	r3, [pc, #296]	@ (8009a0c <netif_add+0x184>)
 80098e2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2200      	movs	r2, #0
 80098e8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2200      	movs	r2, #0
 80098ee:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2200      	movs	r2, #0
 80098f4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	4a45      	ldr	r2, [pc, #276]	@ (8009a10 <netif_add+0x188>)
 80098fa:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2200      	movs	r2, #0
 8009900:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2200      	movs	r2, #0
 800990e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6a3a      	ldr	r2, [r7, #32]
 8009914:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8009916:	4b3f      	ldr	r3, [pc, #252]	@ (8009a14 <netif_add+0x18c>)
 8009918:	781a      	ldrb	r2, [r3, #0]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009924:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	68b9      	ldr	r1, [r7, #8]
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	f000 f90f 	bl	8009b50 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	4798      	blx	r3
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d001      	beq.n	8009942 <netif_add+0xba>
    return NULL;
 800993e:	2300      	movs	r3, #0
 8009940:	e058      	b.n	80099f4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009948:	2bff      	cmp	r3, #255	@ 0xff
 800994a:	d103      	bne.n	8009954 <netif_add+0xcc>
        netif->num = 0;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2200      	movs	r2, #0
 8009950:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8009954:	2300      	movs	r3, #0
 8009956:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009958:	4b2f      	ldr	r3, [pc, #188]	@ (8009a18 <netif_add+0x190>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	617b      	str	r3, [r7, #20]
 800995e:	e02b      	b.n	80099b8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009960:	697a      	ldr	r2, [r7, #20]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	429a      	cmp	r2, r3
 8009966:	d106      	bne.n	8009976 <netif_add+0xee>
 8009968:	4b24      	ldr	r3, [pc, #144]	@ (80099fc <netif_add+0x174>)
 800996a:	f240 128b 	movw	r2, #395	@ 0x18b
 800996e:	492b      	ldr	r1, [pc, #172]	@ (8009a1c <netif_add+0x194>)
 8009970:	4824      	ldr	r0, [pc, #144]	@ (8009a04 <netif_add+0x17c>)
 8009972:	f00a fe1f 	bl	80145b4 <iprintf>
        num_netifs++;
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	3301      	adds	r3, #1
 800997a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	2bff      	cmp	r3, #255	@ 0xff
 8009980:	dd06      	ble.n	8009990 <netif_add+0x108>
 8009982:	4b1e      	ldr	r3, [pc, #120]	@ (80099fc <netif_add+0x174>)
 8009984:	f240 128d 	movw	r2, #397	@ 0x18d
 8009988:	4925      	ldr	r1, [pc, #148]	@ (8009a20 <netif_add+0x198>)
 800998a:	481e      	ldr	r0, [pc, #120]	@ (8009a04 <netif_add+0x17c>)
 800998c:	f00a fe12 	bl	80145b4 <iprintf>
        if (netif2->num == netif->num) {
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800999c:	429a      	cmp	r2, r3
 800999e:	d108      	bne.n	80099b2 <netif_add+0x12a>
          netif->num++;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80099a6:	3301      	adds	r3, #1
 80099a8:	b2da      	uxtb	r2, r3
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 80099b0:	e005      	b.n	80099be <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	617b      	str	r3, [r7, #20]
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d1d0      	bne.n	8009960 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d1be      	bne.n	8009942 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80099ca:	2bfe      	cmp	r3, #254	@ 0xfe
 80099cc:	d103      	bne.n	80099d6 <netif_add+0x14e>
    netif_num = 0;
 80099ce:	4b11      	ldr	r3, [pc, #68]	@ (8009a14 <netif_add+0x18c>)
 80099d0:	2200      	movs	r2, #0
 80099d2:	701a      	strb	r2, [r3, #0]
 80099d4:	e006      	b.n	80099e4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80099dc:	3301      	adds	r3, #1
 80099de:	b2da      	uxtb	r2, r3
 80099e0:	4b0c      	ldr	r3, [pc, #48]	@ (8009a14 <netif_add+0x18c>)
 80099e2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80099e4:	4b0c      	ldr	r3, [pc, #48]	@ (8009a18 <netif_add+0x190>)
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80099ec:	4a0a      	ldr	r2, [pc, #40]	@ (8009a18 <netif_add+0x190>)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80099f2:	68fb      	ldr	r3, [r7, #12]
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3718      	adds	r7, #24
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	08015758 	.word	0x08015758
 8009a00:	080157ec 	.word	0x080157ec
 8009a04:	080157a8 	.word	0x080157a8
 8009a08:	08015808 	.word	0x08015808
 8009a0c:	08017bd0 	.word	0x08017bd0
 8009a10:	08009e2b 	.word	0x08009e2b
 8009a14:	2000dfdc 	.word	0x2000dfdc
 8009a18:	2000dfd4 	.word	0x2000dfd4
 8009a1c:	0801582c 	.word	0x0801582c
 8009a20:	08015840 	.word	0x08015840

08009a24 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009a2e:	6839      	ldr	r1, [r7, #0]
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f002 fbb3 	bl	800c19c <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8009a36:	bf00      	nop
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
	...

08009a40 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b086      	sub	sp, #24
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d106      	bne.n	8009a60 <netif_do_set_ipaddr+0x20>
 8009a52:	4b1d      	ldr	r3, [pc, #116]	@ (8009ac8 <netif_do_set_ipaddr+0x88>)
 8009a54:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8009a58:	491c      	ldr	r1, [pc, #112]	@ (8009acc <netif_do_set_ipaddr+0x8c>)
 8009a5a:	481d      	ldr	r0, [pc, #116]	@ (8009ad0 <netif_do_set_ipaddr+0x90>)
 8009a5c:	f00a fdaa 	bl	80145b4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d106      	bne.n	8009a74 <netif_do_set_ipaddr+0x34>
 8009a66:	4b18      	ldr	r3, [pc, #96]	@ (8009ac8 <netif_do_set_ipaddr+0x88>)
 8009a68:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8009a6c:	4917      	ldr	r1, [pc, #92]	@ (8009acc <netif_do_set_ipaddr+0x8c>)
 8009a6e:	4818      	ldr	r0, [pc, #96]	@ (8009ad0 <netif_do_set_ipaddr+0x90>)
 8009a70:	f00a fda0 	bl	80145b4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	3304      	adds	r3, #4
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d01c      	beq.n	8009abc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	3304      	adds	r3, #4
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8009a92:	f107 0314 	add.w	r3, r7, #20
 8009a96:	4619      	mov	r1, r3
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f7ff ffc3 	bl	8009a24 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d002      	beq.n	8009aaa <netif_do_set_ipaddr+0x6a>
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	e000      	b.n	8009aac <netif_do_set_ipaddr+0x6c>
 8009aaa:	2300      	movs	r3, #0
 8009aac:	68fa      	ldr	r2, [r7, #12]
 8009aae:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009ab0:	2101      	movs	r1, #1
 8009ab2:	68f8      	ldr	r0, [r7, #12]
 8009ab4:	f000 f8d2 	bl	8009c5c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009ab8:	2301      	movs	r3, #1
 8009aba:	e000      	b.n	8009abe <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3718      	adds	r7, #24
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	08015758 	.word	0x08015758
 8009acc:	08015870 	.word	0x08015870
 8009ad0:	080157a8 	.word	0x080157a8

08009ad4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	60b9      	str	r1, [r7, #8]
 8009ade:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	3308      	adds	r3, #8
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d00a      	beq.n	8009b04 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d002      	beq.n	8009afa <netif_do_set_netmask+0x26>
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	e000      	b.n	8009afc <netif_do_set_netmask+0x28>
 8009afa:	2300      	movs	r3, #0
 8009afc:	68fa      	ldr	r2, [r7, #12]
 8009afe:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8009b00:	2301      	movs	r3, #1
 8009b02:	e000      	b.n	8009b06 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8009b04:	2300      	movs	r3, #0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3714      	adds	r7, #20
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr

08009b12 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8009b12:	b480      	push	{r7}
 8009b14:	b085      	sub	sp, #20
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	60f8      	str	r0, [r7, #12]
 8009b1a:	60b9      	str	r1, [r7, #8]
 8009b1c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	330c      	adds	r3, #12
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d00a      	beq.n	8009b42 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d002      	beq.n	8009b38 <netif_do_set_gw+0x26>
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	e000      	b.n	8009b3a <netif_do_set_gw+0x28>
 8009b38:	2300      	movs	r3, #0
 8009b3a:	68fa      	ldr	r2, [r7, #12]
 8009b3c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8009b3e:	2301      	movs	r3, #1
 8009b40:	e000      	b.n	8009b44 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8009b42:	2300      	movs	r3, #0
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3714      	adds	r7, #20
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b088      	sub	sp, #32
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	607a      	str	r2, [r7, #4]
 8009b5c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8009b62:	2300      	movs	r3, #0
 8009b64:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d101      	bne.n	8009b70 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8009b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8009be0 <netif_set_addr+0x90>)
 8009b6e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d101      	bne.n	8009b7a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009b76:	4b1a      	ldr	r3, [pc, #104]	@ (8009be0 <netif_set_addr+0x90>)
 8009b78:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d101      	bne.n	8009b84 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009b80:	4b17      	ldr	r3, [pc, #92]	@ (8009be0 <netif_set_addr+0x90>)
 8009b82:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d003      	beq.n	8009b92 <netif_set_addr+0x42>
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d101      	bne.n	8009b96 <netif_set_addr+0x46>
 8009b92:	2301      	movs	r3, #1
 8009b94:	e000      	b.n	8009b98 <netif_set_addr+0x48>
 8009b96:	2300      	movs	r3, #0
 8009b98:	617b      	str	r3, [r7, #20]
  if (remove) {
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d006      	beq.n	8009bae <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009ba0:	f107 0310 	add.w	r3, r7, #16
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	68b9      	ldr	r1, [r7, #8]
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	f7ff ff49 	bl	8009a40 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8009bae:	69fa      	ldr	r2, [r7, #28]
 8009bb0:	6879      	ldr	r1, [r7, #4]
 8009bb2:	68f8      	ldr	r0, [r7, #12]
 8009bb4:	f7ff ff8e 	bl	8009ad4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009bb8:	69ba      	ldr	r2, [r7, #24]
 8009bba:	6839      	ldr	r1, [r7, #0]
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f7ff ffa8 	bl	8009b12 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d106      	bne.n	8009bd6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009bc8:	f107 0310 	add.w	r3, r7, #16
 8009bcc:	461a      	mov	r2, r3
 8009bce:	68b9      	ldr	r1, [r7, #8]
 8009bd0:	68f8      	ldr	r0, [r7, #12]
 8009bd2:	f7ff ff35 	bl	8009a40 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009bd6:	bf00      	nop
 8009bd8:	3720      	adds	r7, #32
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	08017bd0 	.word	0x08017bd0

08009be4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009bec:	4a04      	ldr	r2, [pc, #16]	@ (8009c00 <netif_set_default+0x1c>)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009bf2:	bf00      	nop
 8009bf4:	370c      	adds	r7, #12
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop
 8009c00:	2000dfd8 	.word	0x2000dfd8

08009c04 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d107      	bne.n	8009c22 <netif_set_up+0x1e>
 8009c12:	4b0f      	ldr	r3, [pc, #60]	@ (8009c50 <netif_set_up+0x4c>)
 8009c14:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8009c18:	490e      	ldr	r1, [pc, #56]	@ (8009c54 <netif_set_up+0x50>)
 8009c1a:	480f      	ldr	r0, [pc, #60]	@ (8009c58 <netif_set_up+0x54>)
 8009c1c:	f00a fcca 	bl	80145b4 <iprintf>
 8009c20:	e013      	b.n	8009c4a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009c28:	f003 0301 	and.w	r3, r3, #1
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d10c      	bne.n	8009c4a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009c36:	f043 0301 	orr.w	r3, r3, #1
 8009c3a:	b2da      	uxtb	r2, r3
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009c42:	2103      	movs	r1, #3
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 f809 	bl	8009c5c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8009c4a:	3708      	adds	r7, #8
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	08015758 	.word	0x08015758
 8009c54:	080158e0 	.word	0x080158e0
 8009c58:	080157a8 	.word	0x080157a8

08009c5c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	460b      	mov	r3, r1
 8009c66:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d106      	bne.n	8009c7c <netif_issue_reports+0x20>
 8009c6e:	4b18      	ldr	r3, [pc, #96]	@ (8009cd0 <netif_issue_reports+0x74>)
 8009c70:	f240 326d 	movw	r2, #877	@ 0x36d
 8009c74:	4917      	ldr	r1, [pc, #92]	@ (8009cd4 <netif_issue_reports+0x78>)
 8009c76:	4818      	ldr	r0, [pc, #96]	@ (8009cd8 <netif_issue_reports+0x7c>)
 8009c78:	f00a fc9c 	bl	80145b4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009c82:	f003 0304 	and.w	r3, r3, #4
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d01e      	beq.n	8009cc8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009c90:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d017      	beq.n	8009cc8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009c98:	78fb      	ldrb	r3, [r7, #3]
 8009c9a:	f003 0301 	and.w	r3, r3, #1
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d013      	beq.n	8009cca <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	3304      	adds	r3, #4
 8009ca6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d00e      	beq.n	8009cca <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009cb2:	f003 0308 	and.w	r3, r3, #8
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d007      	beq.n	8009cca <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	3304      	adds	r3, #4
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f007 f92d 	bl	8010f20 <etharp_request>
 8009cc6:	e000      	b.n	8009cca <netif_issue_reports+0x6e>
    return;
 8009cc8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}
 8009cd0:	08015758 	.word	0x08015758
 8009cd4:	080158fc 	.word	0x080158fc
 8009cd8:	080157a8 	.word	0x080157a8

08009cdc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d107      	bne.n	8009cfa <netif_set_down+0x1e>
 8009cea:	4b12      	ldr	r3, [pc, #72]	@ (8009d34 <netif_set_down+0x58>)
 8009cec:	f240 329b 	movw	r2, #923	@ 0x39b
 8009cf0:	4911      	ldr	r1, [pc, #68]	@ (8009d38 <netif_set_down+0x5c>)
 8009cf2:	4812      	ldr	r0, [pc, #72]	@ (8009d3c <netif_set_down+0x60>)
 8009cf4:	f00a fc5e 	bl	80145b4 <iprintf>
 8009cf8:	e019      	b.n	8009d2e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009d00:	f003 0301 	and.w	r3, r3, #1
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d012      	beq.n	8009d2e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009d0e:	f023 0301 	bic.w	r3, r3, #1
 8009d12:	b2da      	uxtb	r2, r3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009d20:	f003 0308 	and.w	r3, r3, #8
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d002      	beq.n	8009d2e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f006 fcb7 	bl	801069c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}
 8009d34:	08015758 	.word	0x08015758
 8009d38:	08015920 	.word	0x08015920
 8009d3c:	080157a8 	.word	0x080157a8

08009d40 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d107      	bne.n	8009d5e <netif_set_link_up+0x1e>
 8009d4e:	4b13      	ldr	r3, [pc, #76]	@ (8009d9c <netif_set_link_up+0x5c>)
 8009d50:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8009d54:	4912      	ldr	r1, [pc, #72]	@ (8009da0 <netif_set_link_up+0x60>)
 8009d56:	4813      	ldr	r0, [pc, #76]	@ (8009da4 <netif_set_link_up+0x64>)
 8009d58:	f00a fc2c 	bl	80145b4 <iprintf>
 8009d5c:	e01b      	b.n	8009d96 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009d64:	f003 0304 	and.w	r3, r3, #4
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d114      	bne.n	8009d96 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009d72:	f043 0304 	orr.w	r3, r3, #4
 8009d76:	b2da      	uxtb	r2, r3
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009d7e:	2103      	movs	r1, #3
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f7ff ff6b 	bl	8009c5c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	69db      	ldr	r3, [r3, #28]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d003      	beq.n	8009d96 <netif_set_link_up+0x56>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	69db      	ldr	r3, [r3, #28]
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009d96:	3708      	adds	r7, #8
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	08015758 	.word	0x08015758
 8009da0:	08015940 	.word	0x08015940
 8009da4:	080157a8 	.word	0x080157a8

08009da8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d107      	bne.n	8009dc6 <netif_set_link_down+0x1e>
 8009db6:	4b11      	ldr	r3, [pc, #68]	@ (8009dfc <netif_set_link_down+0x54>)
 8009db8:	f240 4206 	movw	r2, #1030	@ 0x406
 8009dbc:	4910      	ldr	r1, [pc, #64]	@ (8009e00 <netif_set_link_down+0x58>)
 8009dbe:	4811      	ldr	r0, [pc, #68]	@ (8009e04 <netif_set_link_down+0x5c>)
 8009dc0:	f00a fbf8 	bl	80145b4 <iprintf>
 8009dc4:	e017      	b.n	8009df6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009dcc:	f003 0304 	and.w	r3, r3, #4
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d010      	beq.n	8009df6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009dda:	f023 0304 	bic.w	r3, r3, #4
 8009dde:	b2da      	uxtb	r2, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	69db      	ldr	r3, [r3, #28]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d003      	beq.n	8009df6 <netif_set_link_down+0x4e>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	69db      	ldr	r3, [r3, #28]
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009df6:	3708      	adds	r7, #8
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	08015758 	.word	0x08015758
 8009e00:	08015964 	.word	0x08015964
 8009e04:	080157a8 	.word	0x080157a8

08009e08 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d002      	beq.n	8009e1e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	683a      	ldr	r2, [r7, #0]
 8009e1c:	61da      	str	r2, [r3, #28]
  }
}
 8009e1e:	bf00      	nop
 8009e20:	370c      	adds	r7, #12
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr

08009e2a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8009e2a:	b480      	push	{r7}
 8009e2c:	b085      	sub	sp, #20
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	60f8      	str	r0, [r7, #12]
 8009e32:	60b9      	str	r1, [r7, #8]
 8009e34:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8009e36:	f06f 030b 	mvn.w	r3, #11
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3714      	adds	r7, #20
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr
	...

08009e48 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b085      	sub	sp, #20
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	4603      	mov	r3, r0
 8009e50:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009e52:	79fb      	ldrb	r3, [r7, #7]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d013      	beq.n	8009e80 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8009e58:	4b0d      	ldr	r3, [pc, #52]	@ (8009e90 <netif_get_by_index+0x48>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	60fb      	str	r3, [r7, #12]
 8009e5e:	e00c      	b.n	8009e7a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009e66:	3301      	adds	r3, #1
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	79fa      	ldrb	r2, [r7, #7]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d101      	bne.n	8009e74 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	e006      	b.n	8009e82 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	60fb      	str	r3, [r7, #12]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d1ef      	bne.n	8009e60 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009e80:	2300      	movs	r3, #0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3714      	adds	r7, #20
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop
 8009e90:	2000dfd4 	.word	0x2000dfd4

08009e94 <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(const char *name)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  struct netif *netif;
  u8_t num;

  LWIP_ASSERT_CORE_LOCKED();

  if (name == NULL) {
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d101      	bne.n	8009ea6 <netif_find+0x12>
    return NULL;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	e028      	b.n	8009ef8 <netif_find+0x64>
  }

  num = (u8_t)atoi(&name[2]);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	3302      	adds	r3, #2
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f00a f91f 	bl	80140ee <atoi>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	72fb      	strb	r3, [r7, #11]

  NETIF_FOREACH(netif) {
 8009eb4:	4b12      	ldr	r3, [pc, #72]	@ (8009f00 <netif_find+0x6c>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	60fb      	str	r3, [r7, #12]
 8009eba:	e019      	b.n	8009ef0 <netif_find+0x5c>
    if (num == netif->num &&
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009ec2:	7afa      	ldrb	r2, [r7, #11]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d110      	bne.n	8009eea <netif_find+0x56>
        name[0] == netif->name[0] &&
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	781a      	ldrb	r2, [r3, #0]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
    if (num == netif->num &&
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d109      	bne.n	8009eea <netif_find+0x56>
        name[1] == netif->name[1]) {
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	3301      	adds	r3, #1
 8009eda:	781a      	ldrb	r2, [r3, #0]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
        name[0] == netif->name[0] &&
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d101      	bne.n	8009eea <netif_find+0x56>
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	e006      	b.n	8009ef8 <netif_find+0x64>
  NETIF_FOREACH(netif) {
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	60fb      	str	r3, [r7, #12]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d1e2      	bne.n	8009ebc <netif_find+0x28>
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
 8009ef6:	2300      	movs	r3, #0
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3710      	adds	r7, #16
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	2000dfd4 	.word	0x2000dfd4

08009f04 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8009f0a:	f008 fc5f 	bl	80127cc <sys_arch_protect>
 8009f0e:	6038      	str	r0, [r7, #0]
 8009f10:	4b0d      	ldr	r3, [pc, #52]	@ (8009f48 <pbuf_free_ooseq+0x44>)
 8009f12:	2200      	movs	r2, #0
 8009f14:	701a      	strb	r2, [r3, #0]
 8009f16:	6838      	ldr	r0, [r7, #0]
 8009f18:	f008 fc66 	bl	80127e8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8009f4c <pbuf_free_ooseq+0x48>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	607b      	str	r3, [r7, #4]
 8009f22:	e00a      	b.n	8009f3a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d003      	beq.n	8009f34 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f002 f973 	bl	800c218 <tcp_free_ooseq>
      return;
 8009f32:	e005      	b.n	8009f40 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	607b      	str	r3, [r7, #4]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1f1      	bne.n	8009f24 <pbuf_free_ooseq+0x20>
    }
  }
}
 8009f40:	3708      	adds	r7, #8
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	2000dfdd 	.word	0x2000dfdd
 8009f4c:	2000dfec 	.word	0x2000dfec

08009f50 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8009f58:	f7ff ffd4 	bl	8009f04 <pbuf_free_ooseq>
}
 8009f5c:	bf00      	nop
 8009f5e:	3708      	adds	r7, #8
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8009f6a:	f008 fc2f 	bl	80127cc <sys_arch_protect>
 8009f6e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8009f70:	4b0f      	ldr	r3, [pc, #60]	@ (8009fb0 <pbuf_pool_is_empty+0x4c>)
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8009f76:	4b0e      	ldr	r3, [pc, #56]	@ (8009fb0 <pbuf_pool_is_empty+0x4c>)
 8009f78:	2201      	movs	r2, #1
 8009f7a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f008 fc33 	bl	80127e8 <sys_arch_unprotect>

  if (!queued) {
 8009f82:	78fb      	ldrb	r3, [r7, #3]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d10f      	bne.n	8009fa8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8009f88:	2100      	movs	r1, #0
 8009f8a:	480a      	ldr	r0, [pc, #40]	@ (8009fb4 <pbuf_pool_is_empty+0x50>)
 8009f8c:	f7fe fe74 	bl	8008c78 <tcpip_try_callback>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d008      	beq.n	8009fa8 <pbuf_pool_is_empty+0x44>
 8009f96:	f008 fc19 	bl	80127cc <sys_arch_protect>
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	4b04      	ldr	r3, [pc, #16]	@ (8009fb0 <pbuf_pool_is_empty+0x4c>)
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	701a      	strb	r2, [r3, #0]
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f008 fc20 	bl	80127e8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8009fa8:	bf00      	nop
 8009faa:	3708      	adds	r7, #8
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	2000dfdd 	.word	0x2000dfdd
 8009fb4:	08009f51 	.word	0x08009f51

08009fb8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b085      	sub	sp, #20
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	4611      	mov	r1, r2
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	80fb      	strh	r3, [r7, #6]
 8009fca:	4613      	mov	r3, r2
 8009fcc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	68ba      	ldr	r2, [r7, #8]
 8009fd8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	88fa      	ldrh	r2, [r7, #6]
 8009fde:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	88ba      	ldrh	r2, [r7, #4]
 8009fe4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8009fe6:	8b3b      	ldrh	r3, [r7, #24]
 8009fe8:	b2da      	uxtb	r2, r3
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	7f3a      	ldrb	r2, [r7, #28]
 8009ff2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	73da      	strb	r2, [r3, #15]
}
 800a000:	bf00      	nop
 800a002:	3714      	adds	r7, #20
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b08c      	sub	sp, #48	@ 0x30
 800a010:	af02      	add	r7, sp, #8
 800a012:	4603      	mov	r3, r0
 800a014:	71fb      	strb	r3, [r7, #7]
 800a016:	460b      	mov	r3, r1
 800a018:	80bb      	strh	r3, [r7, #4]
 800a01a:	4613      	mov	r3, r2
 800a01c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a01e:	79fb      	ldrb	r3, [r7, #7]
 800a020:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a022:	887b      	ldrh	r3, [r7, #2]
 800a024:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800a028:	d07f      	beq.n	800a12a <pbuf_alloc+0x11e>
 800a02a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800a02e:	f300 80c8 	bgt.w	800a1c2 <pbuf_alloc+0x1b6>
 800a032:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800a036:	d010      	beq.n	800a05a <pbuf_alloc+0x4e>
 800a038:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800a03c:	f300 80c1 	bgt.w	800a1c2 <pbuf_alloc+0x1b6>
 800a040:	2b01      	cmp	r3, #1
 800a042:	d002      	beq.n	800a04a <pbuf_alloc+0x3e>
 800a044:	2b41      	cmp	r3, #65	@ 0x41
 800a046:	f040 80bc 	bne.w	800a1c2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a04a:	887a      	ldrh	r2, [r7, #2]
 800a04c:	88bb      	ldrh	r3, [r7, #4]
 800a04e:	4619      	mov	r1, r3
 800a050:	2000      	movs	r0, #0
 800a052:	f000 f8d1 	bl	800a1f8 <pbuf_alloc_reference>
 800a056:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800a058:	e0bd      	b.n	800a1d6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a05a:	2300      	movs	r3, #0
 800a05c:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800a05e:	2300      	movs	r3, #0
 800a060:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a062:	88bb      	ldrh	r3, [r7, #4]
 800a064:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a066:	200b      	movs	r0, #11
 800a068:	f7ff fb66 	bl	8009738 <memp_malloc>
 800a06c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d109      	bne.n	800a088 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800a074:	f7ff ff76 	bl	8009f64 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d002      	beq.n	800a084 <pbuf_alloc+0x78>
            pbuf_free(p);
 800a07e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a080:	f000 faa8 	bl	800a5d4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a084:	2300      	movs	r3, #0
 800a086:	e0a7      	b.n	800a1d8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a088:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a08a:	3303      	adds	r3, #3
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	f023 0303 	bic.w	r3, r3, #3
 800a092:	b29b      	uxth	r3, r3
 800a094:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800a098:	b29b      	uxth	r3, r3
 800a09a:	8b7a      	ldrh	r2, [r7, #26]
 800a09c:	4293      	cmp	r3, r2
 800a09e:	bf28      	it	cs
 800a0a0:	4613      	movcs	r3, r2
 800a0a2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a0a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a0a6:	3310      	adds	r3, #16
 800a0a8:	693a      	ldr	r2, [r7, #16]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	3303      	adds	r3, #3
 800a0ae:	f023 0303 	bic.w	r3, r3, #3
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	89f9      	ldrh	r1, [r7, #14]
 800a0b6:	8b7a      	ldrh	r2, [r7, #26]
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	9301      	str	r3, [sp, #4]
 800a0bc:	887b      	ldrh	r3, [r7, #2]
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	4601      	mov	r1, r0
 800a0c4:	6938      	ldr	r0, [r7, #16]
 800a0c6:	f7ff ff77 	bl	8009fb8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	f003 0303 	and.w	r3, r3, #3
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d006      	beq.n	800a0e4 <pbuf_alloc+0xd8>
 800a0d6:	4b42      	ldr	r3, [pc, #264]	@ (800a1e0 <pbuf_alloc+0x1d4>)
 800a0d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a0dc:	4941      	ldr	r1, [pc, #260]	@ (800a1e4 <pbuf_alloc+0x1d8>)
 800a0de:	4842      	ldr	r0, [pc, #264]	@ (800a1e8 <pbuf_alloc+0x1dc>)
 800a0e0:	f00a fa68 	bl	80145b4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a0e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a0e6:	3303      	adds	r3, #3
 800a0e8:	f023 0303 	bic.w	r3, r3, #3
 800a0ec:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800a0f0:	d106      	bne.n	800a100 <pbuf_alloc+0xf4>
 800a0f2:	4b3b      	ldr	r3, [pc, #236]	@ (800a1e0 <pbuf_alloc+0x1d4>)
 800a0f4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800a0f8:	493c      	ldr	r1, [pc, #240]	@ (800a1ec <pbuf_alloc+0x1e0>)
 800a0fa:	483b      	ldr	r0, [pc, #236]	@ (800a1e8 <pbuf_alloc+0x1dc>)
 800a0fc:	f00a fa5a 	bl	80145b4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a102:	2b00      	cmp	r3, #0
 800a104:	d102      	bne.n	800a10c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	627b      	str	r3, [r7, #36]	@ 0x24
 800a10a:	e002      	b.n	800a112 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	693a      	ldr	r2, [r7, #16]
 800a110:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a116:	8b7a      	ldrh	r2, [r7, #26]
 800a118:	89fb      	ldrh	r3, [r7, #14]
 800a11a:	1ad3      	subs	r3, r2, r3
 800a11c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a11e:	2300      	movs	r3, #0
 800a120:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800a122:	8b7b      	ldrh	r3, [r7, #26]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d19e      	bne.n	800a066 <pbuf_alloc+0x5a>
      break;
 800a128:	e055      	b.n	800a1d6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a12a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a12c:	3303      	adds	r3, #3
 800a12e:	b29b      	uxth	r3, r3
 800a130:	f023 0303 	bic.w	r3, r3, #3
 800a134:	b29a      	uxth	r2, r3
 800a136:	88bb      	ldrh	r3, [r7, #4]
 800a138:	3303      	adds	r3, #3
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	f023 0303 	bic.w	r3, r3, #3
 800a140:	b29b      	uxth	r3, r3
 800a142:	4413      	add	r3, r2
 800a144:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a146:	8b3b      	ldrh	r3, [r7, #24]
 800a148:	3310      	adds	r3, #16
 800a14a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a14c:	8b3a      	ldrh	r2, [r7, #24]
 800a14e:	88bb      	ldrh	r3, [r7, #4]
 800a150:	3303      	adds	r3, #3
 800a152:	f023 0303 	bic.w	r3, r3, #3
 800a156:	429a      	cmp	r2, r3
 800a158:	d306      	bcc.n	800a168 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a15a:	8afa      	ldrh	r2, [r7, #22]
 800a15c:	88bb      	ldrh	r3, [r7, #4]
 800a15e:	3303      	adds	r3, #3
 800a160:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a164:	429a      	cmp	r2, r3
 800a166:	d201      	bcs.n	800a16c <pbuf_alloc+0x160>
        return NULL;
 800a168:	2300      	movs	r3, #0
 800a16a:	e035      	b.n	800a1d8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a16c:	8afb      	ldrh	r3, [r7, #22]
 800a16e:	4618      	mov	r0, r3
 800a170:	f7ff f93e 	bl	80093f0 <mem_malloc>
 800a174:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800a176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d101      	bne.n	800a180 <pbuf_alloc+0x174>
        return NULL;
 800a17c:	2300      	movs	r3, #0
 800a17e:	e02b      	b.n	800a1d8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a180:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a182:	3310      	adds	r3, #16
 800a184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a186:	4413      	add	r3, r2
 800a188:	3303      	adds	r3, #3
 800a18a:	f023 0303 	bic.w	r3, r3, #3
 800a18e:	4618      	mov	r0, r3
 800a190:	88b9      	ldrh	r1, [r7, #4]
 800a192:	88ba      	ldrh	r2, [r7, #4]
 800a194:	2300      	movs	r3, #0
 800a196:	9301      	str	r3, [sp, #4]
 800a198:	887b      	ldrh	r3, [r7, #2]
 800a19a:	9300      	str	r3, [sp, #0]
 800a19c:	460b      	mov	r3, r1
 800a19e:	4601      	mov	r1, r0
 800a1a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a1a2:	f7ff ff09 	bl	8009fb8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	f003 0303 	and.w	r3, r3, #3
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d010      	beq.n	800a1d4 <pbuf_alloc+0x1c8>
 800a1b2:	4b0b      	ldr	r3, [pc, #44]	@ (800a1e0 <pbuf_alloc+0x1d4>)
 800a1b4:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800a1b8:	490d      	ldr	r1, [pc, #52]	@ (800a1f0 <pbuf_alloc+0x1e4>)
 800a1ba:	480b      	ldr	r0, [pc, #44]	@ (800a1e8 <pbuf_alloc+0x1dc>)
 800a1bc:	f00a f9fa 	bl	80145b4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a1c0:	e008      	b.n	800a1d4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a1c2:	4b07      	ldr	r3, [pc, #28]	@ (800a1e0 <pbuf_alloc+0x1d4>)
 800a1c4:	f240 1227 	movw	r2, #295	@ 0x127
 800a1c8:	490a      	ldr	r1, [pc, #40]	@ (800a1f4 <pbuf_alloc+0x1e8>)
 800a1ca:	4807      	ldr	r0, [pc, #28]	@ (800a1e8 <pbuf_alloc+0x1dc>)
 800a1cc:	f00a f9f2 	bl	80145b4 <iprintf>
      return NULL;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	e001      	b.n	800a1d8 <pbuf_alloc+0x1cc>
      break;
 800a1d4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3728      	adds	r7, #40	@ 0x28
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	08015988 	.word	0x08015988
 800a1e4:	080159b8 	.word	0x080159b8
 800a1e8:	080159e8 	.word	0x080159e8
 800a1ec:	08015a10 	.word	0x08015a10
 800a1f0:	08015a44 	.word	0x08015a44
 800a1f4:	08015a70 	.word	0x08015a70

0800a1f8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b086      	sub	sp, #24
 800a1fc:	af02      	add	r7, sp, #8
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	460b      	mov	r3, r1
 800a202:	807b      	strh	r3, [r7, #2]
 800a204:	4613      	mov	r3, r2
 800a206:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a208:	883b      	ldrh	r3, [r7, #0]
 800a20a:	2b41      	cmp	r3, #65	@ 0x41
 800a20c:	d009      	beq.n	800a222 <pbuf_alloc_reference+0x2a>
 800a20e:	883b      	ldrh	r3, [r7, #0]
 800a210:	2b01      	cmp	r3, #1
 800a212:	d006      	beq.n	800a222 <pbuf_alloc_reference+0x2a>
 800a214:	4b0f      	ldr	r3, [pc, #60]	@ (800a254 <pbuf_alloc_reference+0x5c>)
 800a216:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800a21a:	490f      	ldr	r1, [pc, #60]	@ (800a258 <pbuf_alloc_reference+0x60>)
 800a21c:	480f      	ldr	r0, [pc, #60]	@ (800a25c <pbuf_alloc_reference+0x64>)
 800a21e:	f00a f9c9 	bl	80145b4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a222:	200a      	movs	r0, #10
 800a224:	f7ff fa88 	bl	8009738 <memp_malloc>
 800a228:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d101      	bne.n	800a234 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a230:	2300      	movs	r3, #0
 800a232:	e00b      	b.n	800a24c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a234:	8879      	ldrh	r1, [r7, #2]
 800a236:	887a      	ldrh	r2, [r7, #2]
 800a238:	2300      	movs	r3, #0
 800a23a:	9301      	str	r3, [sp, #4]
 800a23c:	883b      	ldrh	r3, [r7, #0]
 800a23e:	9300      	str	r3, [sp, #0]
 800a240:	460b      	mov	r3, r1
 800a242:	6879      	ldr	r1, [r7, #4]
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f7ff feb7 	bl	8009fb8 <pbuf_init_alloced_pbuf>
  return p;
 800a24a:	68fb      	ldr	r3, [r7, #12]
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3710      	adds	r7, #16
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	08015988 	.word	0x08015988
 800a258:	08015a8c 	.word	0x08015a8c
 800a25c:	080159e8 	.word	0x080159e8

0800a260 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b088      	sub	sp, #32
 800a264:	af02      	add	r7, sp, #8
 800a266:	607b      	str	r3, [r7, #4]
 800a268:	4603      	mov	r3, r0
 800a26a:	73fb      	strb	r3, [r7, #15]
 800a26c:	460b      	mov	r3, r1
 800a26e:	81bb      	strh	r3, [r7, #12]
 800a270:	4613      	mov	r3, r2
 800a272:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a274:	7bfb      	ldrb	r3, [r7, #15]
 800a276:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a278:	8a7b      	ldrh	r3, [r7, #18]
 800a27a:	3303      	adds	r3, #3
 800a27c:	f023 0203 	bic.w	r2, r3, #3
 800a280:	89bb      	ldrh	r3, [r7, #12]
 800a282:	441a      	add	r2, r3
 800a284:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a286:	429a      	cmp	r2, r3
 800a288:	d901      	bls.n	800a28e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a28a:	2300      	movs	r3, #0
 800a28c:	e018      	b.n	800a2c0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a28e:	6a3b      	ldr	r3, [r7, #32]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d007      	beq.n	800a2a4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a294:	8a7b      	ldrh	r3, [r7, #18]
 800a296:	3303      	adds	r3, #3
 800a298:	f023 0303 	bic.w	r3, r3, #3
 800a29c:	6a3a      	ldr	r2, [r7, #32]
 800a29e:	4413      	add	r3, r2
 800a2a0:	617b      	str	r3, [r7, #20]
 800a2a2:	e001      	b.n	800a2a8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	89b9      	ldrh	r1, [r7, #12]
 800a2ac:	89ba      	ldrh	r2, [r7, #12]
 800a2ae:	2302      	movs	r3, #2
 800a2b0:	9301      	str	r3, [sp, #4]
 800a2b2:	897b      	ldrh	r3, [r7, #10]
 800a2b4:	9300      	str	r3, [sp, #0]
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	6979      	ldr	r1, [r7, #20]
 800a2ba:	f7ff fe7d 	bl	8009fb8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a2be:	687b      	ldr	r3, [r7, #4]
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3718      	adds	r7, #24
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d106      	bne.n	800a2e8 <pbuf_realloc+0x20>
 800a2da:	4b3a      	ldr	r3, [pc, #232]	@ (800a3c4 <pbuf_realloc+0xfc>)
 800a2dc:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800a2e0:	4939      	ldr	r1, [pc, #228]	@ (800a3c8 <pbuf_realloc+0x100>)
 800a2e2:	483a      	ldr	r0, [pc, #232]	@ (800a3cc <pbuf_realloc+0x104>)
 800a2e4:	f00a f966 	bl	80145b4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	891b      	ldrh	r3, [r3, #8]
 800a2ec:	887a      	ldrh	r2, [r7, #2]
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d263      	bcs.n	800a3ba <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	891a      	ldrh	r2, [r3, #8]
 800a2f6:	887b      	ldrh	r3, [r7, #2]
 800a2f8:	1ad3      	subs	r3, r2, r3
 800a2fa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a2fc:	887b      	ldrh	r3, [r7, #2]
 800a2fe:	817b      	strh	r3, [r7, #10]
  q = p;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a304:	e018      	b.n	800a338 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	895b      	ldrh	r3, [r3, #10]
 800a30a:	897a      	ldrh	r2, [r7, #10]
 800a30c:	1ad3      	subs	r3, r2, r3
 800a30e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	891a      	ldrh	r2, [r3, #8]
 800a314:	893b      	ldrh	r3, [r7, #8]
 800a316:	1ad3      	subs	r3, r2, r3
 800a318:	b29a      	uxth	r2, r3
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d106      	bne.n	800a338 <pbuf_realloc+0x70>
 800a32a:	4b26      	ldr	r3, [pc, #152]	@ (800a3c4 <pbuf_realloc+0xfc>)
 800a32c:	f240 12af 	movw	r2, #431	@ 0x1af
 800a330:	4927      	ldr	r1, [pc, #156]	@ (800a3d0 <pbuf_realloc+0x108>)
 800a332:	4826      	ldr	r0, [pc, #152]	@ (800a3cc <pbuf_realloc+0x104>)
 800a334:	f00a f93e 	bl	80145b4 <iprintf>
  while (rem_len > q->len) {
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	895b      	ldrh	r3, [r3, #10]
 800a33c:	897a      	ldrh	r2, [r7, #10]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d8e1      	bhi.n	800a306 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	7b1b      	ldrb	r3, [r3, #12]
 800a346:	f003 030f 	and.w	r3, r3, #15
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d121      	bne.n	800a392 <pbuf_realloc+0xca>
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	895b      	ldrh	r3, [r3, #10]
 800a352:	897a      	ldrh	r2, [r7, #10]
 800a354:	429a      	cmp	r2, r3
 800a356:	d01c      	beq.n	800a392 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	7b5b      	ldrb	r3, [r3, #13]
 800a35c:	f003 0302 	and.w	r3, r3, #2
 800a360:	2b00      	cmp	r3, #0
 800a362:	d116      	bne.n	800a392 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	685a      	ldr	r2, [r3, #4]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	1ad3      	subs	r3, r2, r3
 800a36c:	b29a      	uxth	r2, r3
 800a36e:	897b      	ldrh	r3, [r7, #10]
 800a370:	4413      	add	r3, r2
 800a372:	b29b      	uxth	r3, r3
 800a374:	4619      	mov	r1, r3
 800a376:	68f8      	ldr	r0, [r7, #12]
 800a378:	f7fe ff30 	bl	80091dc <mem_trim>
 800a37c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d106      	bne.n	800a392 <pbuf_realloc+0xca>
 800a384:	4b0f      	ldr	r3, [pc, #60]	@ (800a3c4 <pbuf_realloc+0xfc>)
 800a386:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800a38a:	4912      	ldr	r1, [pc, #72]	@ (800a3d4 <pbuf_realloc+0x10c>)
 800a38c:	480f      	ldr	r0, [pc, #60]	@ (800a3cc <pbuf_realloc+0x104>)
 800a38e:	f00a f911 	bl	80145b4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	897a      	ldrh	r2, [r7, #10]
 800a396:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	895a      	ldrh	r2, [r3, #10]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d004      	beq.n	800a3b2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f000 f911 	bl	800a5d4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	601a      	str	r2, [r3, #0]
 800a3b8:	e000      	b.n	800a3bc <pbuf_realloc+0xf4>
    return;
 800a3ba:	bf00      	nop

}
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	08015988 	.word	0x08015988
 800a3c8:	08015aa0 	.word	0x08015aa0
 800a3cc:	080159e8 	.word	0x080159e8
 800a3d0:	08015ab8 	.word	0x08015ab8
 800a3d4:	08015ad0 	.word	0x08015ad0

0800a3d8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b086      	sub	sp, #24
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	4613      	mov	r3, r2
 800a3e4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d106      	bne.n	800a3fa <pbuf_add_header_impl+0x22>
 800a3ec:	4b2b      	ldr	r3, [pc, #172]	@ (800a49c <pbuf_add_header_impl+0xc4>)
 800a3ee:	f240 12df 	movw	r2, #479	@ 0x1df
 800a3f2:	492b      	ldr	r1, [pc, #172]	@ (800a4a0 <pbuf_add_header_impl+0xc8>)
 800a3f4:	482b      	ldr	r0, [pc, #172]	@ (800a4a4 <pbuf_add_header_impl+0xcc>)
 800a3f6:	f00a f8dd 	bl	80145b4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d003      	beq.n	800a408 <pbuf_add_header_impl+0x30>
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a406:	d301      	bcc.n	800a40c <pbuf_add_header_impl+0x34>
    return 1;
 800a408:	2301      	movs	r3, #1
 800a40a:	e043      	b.n	800a494 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d101      	bne.n	800a416 <pbuf_add_header_impl+0x3e>
    return 0;
 800a412:	2300      	movs	r3, #0
 800a414:	e03e      	b.n	800a494 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	891a      	ldrh	r2, [r3, #8]
 800a41e:	8a7b      	ldrh	r3, [r7, #18]
 800a420:	4413      	add	r3, r2
 800a422:	b29b      	uxth	r3, r3
 800a424:	8a7a      	ldrh	r2, [r7, #18]
 800a426:	429a      	cmp	r2, r3
 800a428:	d901      	bls.n	800a42e <pbuf_add_header_impl+0x56>
    return 1;
 800a42a:	2301      	movs	r3, #1
 800a42c:	e032      	b.n	800a494 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	7b1b      	ldrb	r3, [r3, #12]
 800a432:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a434:	8a3b      	ldrh	r3, [r7, #16]
 800a436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00c      	beq.n	800a458 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	685a      	ldr	r2, [r3, #4]
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	425b      	negs	r3, r3
 800a446:	4413      	add	r3, r2
 800a448:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	3310      	adds	r3, #16
 800a44e:	697a      	ldr	r2, [r7, #20]
 800a450:	429a      	cmp	r2, r3
 800a452:	d20d      	bcs.n	800a470 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a454:	2301      	movs	r3, #1
 800a456:	e01d      	b.n	800a494 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a458:	79fb      	ldrb	r3, [r7, #7]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d006      	beq.n	800a46c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	685a      	ldr	r2, [r3, #4]
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	425b      	negs	r3, r3
 800a466:	4413      	add	r3, r2
 800a468:	617b      	str	r3, [r7, #20]
 800a46a:	e001      	b.n	800a470 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a46c:	2301      	movs	r3, #1
 800a46e:	e011      	b.n	800a494 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	697a      	ldr	r2, [r7, #20]
 800a474:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	895a      	ldrh	r2, [r3, #10]
 800a47a:	8a7b      	ldrh	r3, [r7, #18]
 800a47c:	4413      	add	r3, r2
 800a47e:	b29a      	uxth	r2, r3
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	891a      	ldrh	r2, [r3, #8]
 800a488:	8a7b      	ldrh	r3, [r7, #18]
 800a48a:	4413      	add	r3, r2
 800a48c:	b29a      	uxth	r2, r3
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	811a      	strh	r2, [r3, #8]


  return 0;
 800a492:	2300      	movs	r3, #0
}
 800a494:	4618      	mov	r0, r3
 800a496:	3718      	adds	r7, #24
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	08015988 	.word	0x08015988
 800a4a0:	08015aec 	.word	0x08015aec
 800a4a4:	080159e8 	.word	0x080159e8

0800a4a8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	6839      	ldr	r1, [r7, #0]
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f7ff ff8e 	bl	800a3d8 <pbuf_add_header_impl>
 800a4bc:	4603      	mov	r3, r0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
	...

0800a4c8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d106      	bne.n	800a4e6 <pbuf_remove_header+0x1e>
 800a4d8:	4b20      	ldr	r3, [pc, #128]	@ (800a55c <pbuf_remove_header+0x94>)
 800a4da:	f240 224b 	movw	r2, #587	@ 0x24b
 800a4de:	4920      	ldr	r1, [pc, #128]	@ (800a560 <pbuf_remove_header+0x98>)
 800a4e0:	4820      	ldr	r0, [pc, #128]	@ (800a564 <pbuf_remove_header+0x9c>)
 800a4e2:	f00a f867 	bl	80145b4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d003      	beq.n	800a4f4 <pbuf_remove_header+0x2c>
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4f2:	d301      	bcc.n	800a4f8 <pbuf_remove_header+0x30>
    return 1;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e02c      	b.n	800a552 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d101      	bne.n	800a502 <pbuf_remove_header+0x3a>
    return 0;
 800a4fe:	2300      	movs	r3, #0
 800a500:	e027      	b.n	800a552 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	895b      	ldrh	r3, [r3, #10]
 800a50a:	89fa      	ldrh	r2, [r7, #14]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d908      	bls.n	800a522 <pbuf_remove_header+0x5a>
 800a510:	4b12      	ldr	r3, [pc, #72]	@ (800a55c <pbuf_remove_header+0x94>)
 800a512:	f240 2255 	movw	r2, #597	@ 0x255
 800a516:	4914      	ldr	r1, [pc, #80]	@ (800a568 <pbuf_remove_header+0xa0>)
 800a518:	4812      	ldr	r0, [pc, #72]	@ (800a564 <pbuf_remove_header+0x9c>)
 800a51a:	f00a f84b 	bl	80145b4 <iprintf>
 800a51e:	2301      	movs	r3, #1
 800a520:	e017      	b.n	800a552 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	685a      	ldr	r2, [r3, #4]
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	441a      	add	r2, r3
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	895a      	ldrh	r2, [r3, #10]
 800a538:	89fb      	ldrh	r3, [r7, #14]
 800a53a:	1ad3      	subs	r3, r2, r3
 800a53c:	b29a      	uxth	r2, r3
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	891a      	ldrh	r2, [r3, #8]
 800a546:	89fb      	ldrh	r3, [r7, #14]
 800a548:	1ad3      	subs	r3, r2, r3
 800a54a:	b29a      	uxth	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3710      	adds	r7, #16
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	08015988 	.word	0x08015988
 800a560:	08015aec 	.word	0x08015aec
 800a564:	080159e8 	.word	0x080159e8
 800a568:	08015af8 	.word	0x08015af8

0800a56c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	460b      	mov	r3, r1
 800a576:	807b      	strh	r3, [r7, #2]
 800a578:	4613      	mov	r3, r2
 800a57a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800a57c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a580:	2b00      	cmp	r3, #0
 800a582:	da08      	bge.n	800a596 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a584:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a588:	425b      	negs	r3, r3
 800a58a:	4619      	mov	r1, r3
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f7ff ff9b 	bl	800a4c8 <pbuf_remove_header>
 800a592:	4603      	mov	r3, r0
 800a594:	e007      	b.n	800a5a6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a596:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a59a:	787a      	ldrb	r2, [r7, #1]
 800a59c:	4619      	mov	r1, r3
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f7ff ff1a 	bl	800a3d8 <pbuf_add_header_impl>
 800a5a4:	4603      	mov	r3, r0
  }
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3708      	adds	r7, #8
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b082      	sub	sp, #8
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800a5ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f7ff ffd2 	bl	800a56c <pbuf_header_impl>
 800a5c8:	4603      	mov	r3, r0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
	...

0800a5d4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b088      	sub	sp, #32
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d10b      	bne.n	800a5fa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d106      	bne.n	800a5f6 <pbuf_free+0x22>
 800a5e8:	4b3b      	ldr	r3, [pc, #236]	@ (800a6d8 <pbuf_free+0x104>)
 800a5ea:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800a5ee:	493b      	ldr	r1, [pc, #236]	@ (800a6dc <pbuf_free+0x108>)
 800a5f0:	483b      	ldr	r0, [pc, #236]	@ (800a6e0 <pbuf_free+0x10c>)
 800a5f2:	f009 ffdf 	bl	80145b4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	e069      	b.n	800a6ce <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a5fe:	e062      	b.n	800a6c6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800a600:	f008 f8e4 	bl	80127cc <sys_arch_protect>
 800a604:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	7b9b      	ldrb	r3, [r3, #14]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d106      	bne.n	800a61c <pbuf_free+0x48>
 800a60e:	4b32      	ldr	r3, [pc, #200]	@ (800a6d8 <pbuf_free+0x104>)
 800a610:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800a614:	4933      	ldr	r1, [pc, #204]	@ (800a6e4 <pbuf_free+0x110>)
 800a616:	4832      	ldr	r0, [pc, #200]	@ (800a6e0 <pbuf_free+0x10c>)
 800a618:	f009 ffcc 	bl	80145b4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	7b9b      	ldrb	r3, [r3, #14]
 800a620:	3b01      	subs	r3, #1
 800a622:	b2da      	uxtb	r2, r3
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	739a      	strb	r2, [r3, #14]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	7b9b      	ldrb	r3, [r3, #14]
 800a62c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800a62e:	69b8      	ldr	r0, [r7, #24]
 800a630:	f008 f8da 	bl	80127e8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a634:	7dfb      	ldrb	r3, [r7, #23]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d143      	bne.n	800a6c2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	7b1b      	ldrb	r3, [r3, #12]
 800a644:	f003 030f 	and.w	r3, r3, #15
 800a648:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	7b5b      	ldrb	r3, [r3, #13]
 800a64e:	f003 0302 	and.w	r3, r3, #2
 800a652:	2b00      	cmp	r3, #0
 800a654:	d011      	beq.n	800a67a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	691b      	ldr	r3, [r3, #16]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d106      	bne.n	800a670 <pbuf_free+0x9c>
 800a662:	4b1d      	ldr	r3, [pc, #116]	@ (800a6d8 <pbuf_free+0x104>)
 800a664:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800a668:	491f      	ldr	r1, [pc, #124]	@ (800a6e8 <pbuf_free+0x114>)
 800a66a:	481d      	ldr	r0, [pc, #116]	@ (800a6e0 <pbuf_free+0x10c>)
 800a66c:	f009 ffa2 	bl	80145b4 <iprintf>
        pc->custom_free_function(p);
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	691b      	ldr	r3, [r3, #16]
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	4798      	blx	r3
 800a678:	e01d      	b.n	800a6b6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a67a:	7bfb      	ldrb	r3, [r7, #15]
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	d104      	bne.n	800a68a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800a680:	6879      	ldr	r1, [r7, #4]
 800a682:	200b      	movs	r0, #11
 800a684:	f7ff f8ce 	bl	8009824 <memp_free>
 800a688:	e015      	b.n	800a6b6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a68a:	7bfb      	ldrb	r3, [r7, #15]
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d104      	bne.n	800a69a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800a690:	6879      	ldr	r1, [r7, #4]
 800a692:	200a      	movs	r0, #10
 800a694:	f7ff f8c6 	bl	8009824 <memp_free>
 800a698:	e00d      	b.n	800a6b6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a69a:	7bfb      	ldrb	r3, [r7, #15]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d103      	bne.n	800a6a8 <pbuf_free+0xd4>
          mem_free(p);
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f7fe fd0b 	bl	80090bc <mem_free>
 800a6a6:	e006      	b.n	800a6b6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800a6a8:	4b0b      	ldr	r3, [pc, #44]	@ (800a6d8 <pbuf_free+0x104>)
 800a6aa:	f240 320f 	movw	r2, #783	@ 0x30f
 800a6ae:	490f      	ldr	r1, [pc, #60]	@ (800a6ec <pbuf_free+0x118>)
 800a6b0:	480b      	ldr	r0, [pc, #44]	@ (800a6e0 <pbuf_free+0x10c>)
 800a6b2:	f009 ff7f 	bl	80145b4 <iprintf>
        }
      }
      count++;
 800a6b6:	7ffb      	ldrb	r3, [r7, #31]
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	607b      	str	r3, [r7, #4]
 800a6c0:	e001      	b.n	800a6c6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d199      	bne.n	800a600 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a6cc:	7ffb      	ldrb	r3, [r7, #31]
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3720      	adds	r7, #32
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	08015988 	.word	0x08015988
 800a6dc:	08015aec 	.word	0x08015aec
 800a6e0:	080159e8 	.word	0x080159e8
 800a6e4:	08015b18 	.word	0x08015b18
 800a6e8:	08015b30 	.word	0x08015b30
 800a6ec:	08015b54 	.word	0x08015b54

0800a6f0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a6fc:	e005      	b.n	800a70a <pbuf_clen+0x1a>
    ++len;
 800a6fe:	89fb      	ldrh	r3, [r7, #14]
 800a700:	3301      	adds	r3, #1
 800a702:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d1f6      	bne.n	800a6fe <pbuf_clen+0xe>
  }
  return len;
 800a710:	89fb      	ldrh	r3, [r7, #14]
}
 800a712:	4618      	mov	r0, r3
 800a714:	3714      	adds	r7, #20
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr
	...

0800a720 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d016      	beq.n	800a75c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a72e:	f008 f84d 	bl	80127cc <sys_arch_protect>
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	7b9b      	ldrb	r3, [r3, #14]
 800a738:	3301      	adds	r3, #1
 800a73a:	b2da      	uxtb	r2, r3
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	739a      	strb	r2, [r3, #14]
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f008 f851 	bl	80127e8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	7b9b      	ldrb	r3, [r3, #14]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d106      	bne.n	800a75c <pbuf_ref+0x3c>
 800a74e:	4b05      	ldr	r3, [pc, #20]	@ (800a764 <pbuf_ref+0x44>)
 800a750:	f240 3242 	movw	r2, #834	@ 0x342
 800a754:	4904      	ldr	r1, [pc, #16]	@ (800a768 <pbuf_ref+0x48>)
 800a756:	4805      	ldr	r0, [pc, #20]	@ (800a76c <pbuf_ref+0x4c>)
 800a758:	f009 ff2c 	bl	80145b4 <iprintf>
  }
}
 800a75c:	bf00      	nop
 800a75e:	3710      	adds	r7, #16
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	08015988 	.word	0x08015988
 800a768:	08015b68 	.word	0x08015b68
 800a76c:	080159e8 	.word	0x080159e8

0800a770 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d002      	beq.n	800a786 <pbuf_cat+0x16>
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d107      	bne.n	800a796 <pbuf_cat+0x26>
 800a786:	4b20      	ldr	r3, [pc, #128]	@ (800a808 <pbuf_cat+0x98>)
 800a788:	f240 3259 	movw	r2, #857	@ 0x359
 800a78c:	491f      	ldr	r1, [pc, #124]	@ (800a80c <pbuf_cat+0x9c>)
 800a78e:	4820      	ldr	r0, [pc, #128]	@ (800a810 <pbuf_cat+0xa0>)
 800a790:	f009 ff10 	bl	80145b4 <iprintf>
 800a794:	e034      	b.n	800a800 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	60fb      	str	r3, [r7, #12]
 800a79a:	e00a      	b.n	800a7b2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	891a      	ldrh	r2, [r3, #8]
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	891b      	ldrh	r3, [r3, #8]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	60fb      	str	r3, [r7, #12]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d1f0      	bne.n	800a79c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	891a      	ldrh	r2, [r3, #8]
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	895b      	ldrh	r3, [r3, #10]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d006      	beq.n	800a7d4 <pbuf_cat+0x64>
 800a7c6:	4b10      	ldr	r3, [pc, #64]	@ (800a808 <pbuf_cat+0x98>)
 800a7c8:	f240 3262 	movw	r2, #866	@ 0x362
 800a7cc:	4911      	ldr	r1, [pc, #68]	@ (800a814 <pbuf_cat+0xa4>)
 800a7ce:	4810      	ldr	r0, [pc, #64]	@ (800a810 <pbuf_cat+0xa0>)
 800a7d0:	f009 fef0 	bl	80145b4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d006      	beq.n	800a7ea <pbuf_cat+0x7a>
 800a7dc:	4b0a      	ldr	r3, [pc, #40]	@ (800a808 <pbuf_cat+0x98>)
 800a7de:	f240 3263 	movw	r2, #867	@ 0x363
 800a7e2:	490d      	ldr	r1, [pc, #52]	@ (800a818 <pbuf_cat+0xa8>)
 800a7e4:	480a      	ldr	r0, [pc, #40]	@ (800a810 <pbuf_cat+0xa0>)
 800a7e6:	f009 fee5 	bl	80145b4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	891a      	ldrh	r2, [r3, #8]
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	891b      	ldrh	r3, [r3, #8]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	683a      	ldr	r2, [r7, #0]
 800a7fe:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	08015988 	.word	0x08015988
 800a80c:	08015b7c 	.word	0x08015b7c
 800a810:	080159e8 	.word	0x080159e8
 800a814:	08015bb4 	.word	0x08015bb4
 800a818:	08015be4 	.word	0x08015be4

0800a81c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b086      	sub	sp, #24
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800a826:	2300      	movs	r3, #0
 800a828:	617b      	str	r3, [r7, #20]
 800a82a:	2300      	movs	r3, #0
 800a82c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d008      	beq.n	800a846 <pbuf_copy+0x2a>
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d005      	beq.n	800a846 <pbuf_copy+0x2a>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	891a      	ldrh	r2, [r3, #8]
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	891b      	ldrh	r3, [r3, #8]
 800a842:	429a      	cmp	r2, r3
 800a844:	d209      	bcs.n	800a85a <pbuf_copy+0x3e>
 800a846:	4b57      	ldr	r3, [pc, #348]	@ (800a9a4 <pbuf_copy+0x188>)
 800a848:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800a84c:	4956      	ldr	r1, [pc, #344]	@ (800a9a8 <pbuf_copy+0x18c>)
 800a84e:	4857      	ldr	r0, [pc, #348]	@ (800a9ac <pbuf_copy+0x190>)
 800a850:	f009 feb0 	bl	80145b4 <iprintf>
 800a854:	f06f 030f 	mvn.w	r3, #15
 800a858:	e09f      	b.n	800a99a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	895b      	ldrh	r3, [r3, #10]
 800a85e:	461a      	mov	r2, r3
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	1ad2      	subs	r2, r2, r3
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	895b      	ldrh	r3, [r3, #10]
 800a868:	4619      	mov	r1, r3
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	1acb      	subs	r3, r1, r3
 800a86e:	429a      	cmp	r2, r3
 800a870:	d306      	bcc.n	800a880 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	895b      	ldrh	r3, [r3, #10]
 800a876:	461a      	mov	r2, r3
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	1ad3      	subs	r3, r2, r3
 800a87c:	60fb      	str	r3, [r7, #12]
 800a87e:	e005      	b.n	800a88c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	895b      	ldrh	r3, [r3, #10]
 800a884:	461a      	mov	r2, r3
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	685a      	ldr	r2, [r3, #4]
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	18d0      	adds	r0, r2, r3
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	685a      	ldr	r2, [r3, #4]
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	4413      	add	r3, r2
 800a89c:	68fa      	ldr	r2, [r7, #12]
 800a89e:	4619      	mov	r1, r3
 800a8a0:	f009 ff79 	bl	8014796 <memcpy>
    offset_to += len;
 800a8a4:	697a      	ldr	r2, [r7, #20]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	4413      	add	r3, r2
 800a8aa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800a8ac:	693a      	ldr	r2, [r7, #16]
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	895b      	ldrh	r3, [r3, #10]
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d906      	bls.n	800a8ce <pbuf_copy+0xb2>
 800a8c0:	4b38      	ldr	r3, [pc, #224]	@ (800a9a4 <pbuf_copy+0x188>)
 800a8c2:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800a8c6:	493a      	ldr	r1, [pc, #232]	@ (800a9b0 <pbuf_copy+0x194>)
 800a8c8:	4838      	ldr	r0, [pc, #224]	@ (800a9ac <pbuf_copy+0x190>)
 800a8ca:	f009 fe73 	bl	80145b4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	895b      	ldrh	r3, [r3, #10]
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d906      	bls.n	800a8e8 <pbuf_copy+0xcc>
 800a8da:	4b32      	ldr	r3, [pc, #200]	@ (800a9a4 <pbuf_copy+0x188>)
 800a8dc:	f240 32da 	movw	r2, #986	@ 0x3da
 800a8e0:	4934      	ldr	r1, [pc, #208]	@ (800a9b4 <pbuf_copy+0x198>)
 800a8e2:	4832      	ldr	r0, [pc, #200]	@ (800a9ac <pbuf_copy+0x190>)
 800a8e4:	f009 fe66 	bl	80145b4 <iprintf>
    if (offset_from >= p_from->len) {
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	895b      	ldrh	r3, [r3, #10]
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d304      	bcc.n	800a8fe <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	895b      	ldrh	r3, [r3, #10]
 800a902:	461a      	mov	r2, r3
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	4293      	cmp	r3, r2
 800a908:	d114      	bne.n	800a934 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800a90a:	2300      	movs	r3, #0
 800a90c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d10c      	bne.n	800a934 <pbuf_copy+0x118>
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d009      	beq.n	800a934 <pbuf_copy+0x118>
 800a920:	4b20      	ldr	r3, [pc, #128]	@ (800a9a4 <pbuf_copy+0x188>)
 800a922:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800a926:	4924      	ldr	r1, [pc, #144]	@ (800a9b8 <pbuf_copy+0x19c>)
 800a928:	4820      	ldr	r0, [pc, #128]	@ (800a9ac <pbuf_copy+0x190>)
 800a92a:	f009 fe43 	bl	80145b4 <iprintf>
 800a92e:	f06f 030f 	mvn.w	r3, #15
 800a932:	e032      	b.n	800a99a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d013      	beq.n	800a962 <pbuf_copy+0x146>
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	895a      	ldrh	r2, [r3, #10]
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	891b      	ldrh	r3, [r3, #8]
 800a942:	429a      	cmp	r2, r3
 800a944:	d10d      	bne.n	800a962 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d009      	beq.n	800a962 <pbuf_copy+0x146>
 800a94e:	4b15      	ldr	r3, [pc, #84]	@ (800a9a4 <pbuf_copy+0x188>)
 800a950:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800a954:	4919      	ldr	r1, [pc, #100]	@ (800a9bc <pbuf_copy+0x1a0>)
 800a956:	4815      	ldr	r0, [pc, #84]	@ (800a9ac <pbuf_copy+0x190>)
 800a958:	f009 fe2c 	bl	80145b4 <iprintf>
 800a95c:	f06f 0305 	mvn.w	r3, #5
 800a960:	e01b      	b.n	800a99a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d013      	beq.n	800a990 <pbuf_copy+0x174>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	895a      	ldrh	r2, [r3, #10]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	891b      	ldrh	r3, [r3, #8]
 800a970:	429a      	cmp	r2, r3
 800a972:	d10d      	bne.n	800a990 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d009      	beq.n	800a990 <pbuf_copy+0x174>
 800a97c:	4b09      	ldr	r3, [pc, #36]	@ (800a9a4 <pbuf_copy+0x188>)
 800a97e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800a982:	490e      	ldr	r1, [pc, #56]	@ (800a9bc <pbuf_copy+0x1a0>)
 800a984:	4809      	ldr	r0, [pc, #36]	@ (800a9ac <pbuf_copy+0x190>)
 800a986:	f009 fe15 	bl	80145b4 <iprintf>
 800a98a:	f06f 0305 	mvn.w	r3, #5
 800a98e:	e004      	b.n	800a99a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	2b00      	cmp	r3, #0
 800a994:	f47f af61 	bne.w	800a85a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a998:	2300      	movs	r3, #0
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3718      	adds	r7, #24
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	08015988 	.word	0x08015988
 800a9a8:	08015c30 	.word	0x08015c30
 800a9ac:	080159e8 	.word	0x080159e8
 800a9b0:	08015c60 	.word	0x08015c60
 800a9b4:	08015c78 	.word	0x08015c78
 800a9b8:	08015c94 	.word	0x08015c94
 800a9bc:	08015ca4 	.word	0x08015ca4

0800a9c0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b088      	sub	sp, #32
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	4611      	mov	r1, r2
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	460b      	mov	r3, r1
 800a9d0:	80fb      	strh	r3, [r7, #6]
 800a9d2:	4613      	mov	r3, r2
 800a9d4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d108      	bne.n	800a9f6 <pbuf_copy_partial+0x36>
 800a9e4:	4b2b      	ldr	r3, [pc, #172]	@ (800aa94 <pbuf_copy_partial+0xd4>)
 800a9e6:	f240 420a 	movw	r2, #1034	@ 0x40a
 800a9ea:	492b      	ldr	r1, [pc, #172]	@ (800aa98 <pbuf_copy_partial+0xd8>)
 800a9ec:	482b      	ldr	r0, [pc, #172]	@ (800aa9c <pbuf_copy_partial+0xdc>)
 800a9ee:	f009 fde1 	bl	80145b4 <iprintf>
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	e04a      	b.n	800aa8c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d108      	bne.n	800aa0e <pbuf_copy_partial+0x4e>
 800a9fc:	4b25      	ldr	r3, [pc, #148]	@ (800aa94 <pbuf_copy_partial+0xd4>)
 800a9fe:	f240 420b 	movw	r2, #1035	@ 0x40b
 800aa02:	4927      	ldr	r1, [pc, #156]	@ (800aaa0 <pbuf_copy_partial+0xe0>)
 800aa04:	4825      	ldr	r0, [pc, #148]	@ (800aa9c <pbuf_copy_partial+0xdc>)
 800aa06:	f009 fdd5 	bl	80145b4 <iprintf>
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	e03e      	b.n	800aa8c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	61fb      	str	r3, [r7, #28]
 800aa12:	e034      	b.n	800aa7e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800aa14:	88bb      	ldrh	r3, [r7, #4]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d00a      	beq.n	800aa30 <pbuf_copy_partial+0x70>
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	895b      	ldrh	r3, [r3, #10]
 800aa1e:	88ba      	ldrh	r2, [r7, #4]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d305      	bcc.n	800aa30 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800aa24:	69fb      	ldr	r3, [r7, #28]
 800aa26:	895b      	ldrh	r3, [r3, #10]
 800aa28:	88ba      	ldrh	r2, [r7, #4]
 800aa2a:	1ad3      	subs	r3, r2, r3
 800aa2c:	80bb      	strh	r3, [r7, #4]
 800aa2e:	e023      	b.n	800aa78 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800aa30:	69fb      	ldr	r3, [r7, #28]
 800aa32:	895a      	ldrh	r2, [r3, #10]
 800aa34:	88bb      	ldrh	r3, [r7, #4]
 800aa36:	1ad3      	subs	r3, r2, r3
 800aa38:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800aa3a:	8b3a      	ldrh	r2, [r7, #24]
 800aa3c:	88fb      	ldrh	r3, [r7, #6]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d901      	bls.n	800aa46 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800aa42:	88fb      	ldrh	r3, [r7, #6]
 800aa44:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800aa46:	8b7b      	ldrh	r3, [r7, #26]
 800aa48:	68ba      	ldr	r2, [r7, #8]
 800aa4a:	18d0      	adds	r0, r2, r3
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	685a      	ldr	r2, [r3, #4]
 800aa50:	88bb      	ldrh	r3, [r7, #4]
 800aa52:	4413      	add	r3, r2
 800aa54:	8b3a      	ldrh	r2, [r7, #24]
 800aa56:	4619      	mov	r1, r3
 800aa58:	f009 fe9d 	bl	8014796 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800aa5c:	8afa      	ldrh	r2, [r7, #22]
 800aa5e:	8b3b      	ldrh	r3, [r7, #24]
 800aa60:	4413      	add	r3, r2
 800aa62:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800aa64:	8b7a      	ldrh	r2, [r7, #26]
 800aa66:	8b3b      	ldrh	r3, [r7, #24]
 800aa68:	4413      	add	r3, r2
 800aa6a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800aa6c:	88fa      	ldrh	r2, [r7, #6]
 800aa6e:	8b3b      	ldrh	r3, [r7, #24]
 800aa70:	1ad3      	subs	r3, r2, r3
 800aa72:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800aa74:	2300      	movs	r3, #0
 800aa76:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800aa78:	69fb      	ldr	r3, [r7, #28]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	61fb      	str	r3, [r7, #28]
 800aa7e:	88fb      	ldrh	r3, [r7, #6]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d002      	beq.n	800aa8a <pbuf_copy_partial+0xca>
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d1c4      	bne.n	800aa14 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800aa8a:	8afb      	ldrh	r3, [r7, #22]
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3720      	adds	r7, #32
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	08015988 	.word	0x08015988
 800aa98:	08015cd0 	.word	0x08015cd0
 800aa9c:	080159e8 	.word	0x080159e8
 800aaa0:	08015cf0 	.word	0x08015cf0

0800aaa4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	4603      	mov	r3, r0
 800aaac:	603a      	str	r2, [r7, #0]
 800aaae:	71fb      	strb	r3, [r7, #7]
 800aab0:	460b      	mov	r3, r1
 800aab2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	8919      	ldrh	r1, [r3, #8]
 800aab8:	88ba      	ldrh	r2, [r7, #4]
 800aaba:	79fb      	ldrb	r3, [r7, #7]
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7ff faa5 	bl	800a00c <pbuf_alloc>
 800aac2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d101      	bne.n	800aace <pbuf_clone+0x2a>
    return NULL;
 800aaca:	2300      	movs	r3, #0
 800aacc:	e011      	b.n	800aaf2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800aace:	6839      	ldr	r1, [r7, #0]
 800aad0:	68f8      	ldr	r0, [r7, #12]
 800aad2:	f7ff fea3 	bl	800a81c <pbuf_copy>
 800aad6:	4603      	mov	r3, r0
 800aad8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800aada:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d006      	beq.n	800aaf0 <pbuf_clone+0x4c>
 800aae2:	4b06      	ldr	r3, [pc, #24]	@ (800aafc <pbuf_clone+0x58>)
 800aae4:	f240 5224 	movw	r2, #1316	@ 0x524
 800aae8:	4905      	ldr	r1, [pc, #20]	@ (800ab00 <pbuf_clone+0x5c>)
 800aaea:	4806      	ldr	r0, [pc, #24]	@ (800ab04 <pbuf_clone+0x60>)
 800aaec:	f009 fd62 	bl	80145b4 <iprintf>
  return q;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3710      	adds	r7, #16
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	08015988 	.word	0x08015988
 800ab00:	08015dfc 	.word	0x08015dfc
 800ab04:	080159e8 	.word	0x080159e8

0800ab08 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ab0c:	f009 fbce 	bl	80142ac <rand>
 800ab10:	4603      	mov	r3, r0
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800ab1e:	b29a      	uxth	r2, r3
 800ab20:	4b01      	ldr	r3, [pc, #4]	@ (800ab28 <tcp_init+0x20>)
 800ab22:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ab24:	bf00      	nop
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	20000024 	.word	0x20000024

0800ab2c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	7d1b      	ldrb	r3, [r3, #20]
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d105      	bne.n	800ab48 <tcp_free+0x1c>
 800ab3c:	4b06      	ldr	r3, [pc, #24]	@ (800ab58 <tcp_free+0x2c>)
 800ab3e:	22d4      	movs	r2, #212	@ 0xd4
 800ab40:	4906      	ldr	r1, [pc, #24]	@ (800ab5c <tcp_free+0x30>)
 800ab42:	4807      	ldr	r0, [pc, #28]	@ (800ab60 <tcp_free+0x34>)
 800ab44:	f009 fd36 	bl	80145b4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ab48:	6879      	ldr	r1, [r7, #4]
 800ab4a:	2000      	movs	r0, #0
 800ab4c:	f7fe fe6a 	bl	8009824 <memp_free>
}
 800ab50:	bf00      	nop
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	08015e88 	.word	0x08015e88
 800ab5c:	08015eb8 	.word	0x08015eb8
 800ab60:	08015ecc 	.word	0x08015ecc

0800ab64 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	7d1b      	ldrb	r3, [r3, #20]
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d105      	bne.n	800ab80 <tcp_free_listen+0x1c>
 800ab74:	4b06      	ldr	r3, [pc, #24]	@ (800ab90 <tcp_free_listen+0x2c>)
 800ab76:	22df      	movs	r2, #223	@ 0xdf
 800ab78:	4906      	ldr	r1, [pc, #24]	@ (800ab94 <tcp_free_listen+0x30>)
 800ab7a:	4807      	ldr	r0, [pc, #28]	@ (800ab98 <tcp_free_listen+0x34>)
 800ab7c:	f009 fd1a 	bl	80145b4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ab80:	6879      	ldr	r1, [r7, #4]
 800ab82:	2001      	movs	r0, #1
 800ab84:	f7fe fe4e 	bl	8009824 <memp_free>
}
 800ab88:	bf00      	nop
 800ab8a:	3708      	adds	r7, #8
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	08015e88 	.word	0x08015e88
 800ab94:	08015ef4 	.word	0x08015ef4
 800ab98:	08015ecc 	.word	0x08015ecc

0800ab9c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800aba0:	f000 fea4 	bl	800b8ec <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800aba4:	4b07      	ldr	r3, [pc, #28]	@ (800abc4 <tcp_tmr+0x28>)
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	3301      	adds	r3, #1
 800abaa:	b2da      	uxtb	r2, r3
 800abac:	4b05      	ldr	r3, [pc, #20]	@ (800abc4 <tcp_tmr+0x28>)
 800abae:	701a      	strb	r2, [r3, #0]
 800abb0:	4b04      	ldr	r3, [pc, #16]	@ (800abc4 <tcp_tmr+0x28>)
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	f003 0301 	and.w	r3, r3, #1
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d001      	beq.n	800abc0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800abbc:	f000 fb54 	bl	800b268 <tcp_slowtmr>
  }
}
 800abc0:	bf00      	nop
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	2000dff5 	.word	0x2000dff5

0800abc8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d105      	bne.n	800abe4 <tcp_remove_listener+0x1c>
 800abd8:	4b0d      	ldr	r3, [pc, #52]	@ (800ac10 <tcp_remove_listener+0x48>)
 800abda:	22ff      	movs	r2, #255	@ 0xff
 800abdc:	490d      	ldr	r1, [pc, #52]	@ (800ac14 <tcp_remove_listener+0x4c>)
 800abde:	480e      	ldr	r0, [pc, #56]	@ (800ac18 <tcp_remove_listener+0x50>)
 800abe0:	f009 fce8 	bl	80145b4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	60fb      	str	r3, [r7, #12]
 800abe8:	e00a      	b.n	800ac00 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800abee:	683a      	ldr	r2, [r7, #0]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d102      	bne.n	800abfa <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2200      	movs	r2, #0
 800abf8:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	60fb      	str	r3, [r7, #12]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d1f1      	bne.n	800abea <tcp_remove_listener+0x22>
    }
  }
}
 800ac06:	bf00      	nop
 800ac08:	bf00      	nop
 800ac0a:	3710      	adds	r7, #16
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}
 800ac10:	08015e88 	.word	0x08015e88
 800ac14:	08015f10 	.word	0x08015f10
 800ac18:	08015ecc 	.word	0x08015ecc

0800ac1c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d106      	bne.n	800ac38 <tcp_listen_closed+0x1c>
 800ac2a:	4b14      	ldr	r3, [pc, #80]	@ (800ac7c <tcp_listen_closed+0x60>)
 800ac2c:	f240 1211 	movw	r2, #273	@ 0x111
 800ac30:	4913      	ldr	r1, [pc, #76]	@ (800ac80 <tcp_listen_closed+0x64>)
 800ac32:	4814      	ldr	r0, [pc, #80]	@ (800ac84 <tcp_listen_closed+0x68>)
 800ac34:	f009 fcbe 	bl	80145b4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	7d1b      	ldrb	r3, [r3, #20]
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d006      	beq.n	800ac4e <tcp_listen_closed+0x32>
 800ac40:	4b0e      	ldr	r3, [pc, #56]	@ (800ac7c <tcp_listen_closed+0x60>)
 800ac42:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800ac46:	4910      	ldr	r1, [pc, #64]	@ (800ac88 <tcp_listen_closed+0x6c>)
 800ac48:	480e      	ldr	r0, [pc, #56]	@ (800ac84 <tcp_listen_closed+0x68>)
 800ac4a:	f009 fcb3 	bl	80145b4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ac4e:	2301      	movs	r3, #1
 800ac50:	60fb      	str	r3, [r7, #12]
 800ac52:	e00b      	b.n	800ac6c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ac54:	4a0d      	ldr	r2, [pc, #52]	@ (800ac8c <tcp_listen_closed+0x70>)
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	6879      	ldr	r1, [r7, #4]
 800ac60:	4618      	mov	r0, r3
 800ac62:	f7ff ffb1 	bl	800abc8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	60fb      	str	r3, [r7, #12]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2b03      	cmp	r3, #3
 800ac70:	d9f0      	bls.n	800ac54 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ac72:	bf00      	nop
 800ac74:	bf00      	nop
 800ac76:	3710      	adds	r7, #16
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}
 800ac7c:	08015e88 	.word	0x08015e88
 800ac80:	08015f38 	.word	0x08015f38
 800ac84:	08015ecc 	.word	0x08015ecc
 800ac88:	08015f44 	.word	0x08015f44
 800ac8c:	08017ba8 	.word	0x08017ba8

0800ac90 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ac90:	b5b0      	push	{r4, r5, r7, lr}
 800ac92:	b088      	sub	sp, #32
 800ac94:	af04      	add	r7, sp, #16
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	460b      	mov	r3, r1
 800ac9a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d106      	bne.n	800acb0 <tcp_close_shutdown+0x20>
 800aca2:	4b63      	ldr	r3, [pc, #396]	@ (800ae30 <tcp_close_shutdown+0x1a0>)
 800aca4:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800aca8:	4962      	ldr	r1, [pc, #392]	@ (800ae34 <tcp_close_shutdown+0x1a4>)
 800acaa:	4863      	ldr	r0, [pc, #396]	@ (800ae38 <tcp_close_shutdown+0x1a8>)
 800acac:	f009 fc82 	bl	80145b4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800acb0:	78fb      	ldrb	r3, [r7, #3]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d066      	beq.n	800ad84 <tcp_close_shutdown+0xf4>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	7d1b      	ldrb	r3, [r3, #20]
 800acba:	2b04      	cmp	r3, #4
 800acbc:	d003      	beq.n	800acc6 <tcp_close_shutdown+0x36>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	7d1b      	ldrb	r3, [r3, #20]
 800acc2:	2b07      	cmp	r3, #7
 800acc4:	d15e      	bne.n	800ad84 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800acca:	2b00      	cmp	r3, #0
 800accc:	d104      	bne.n	800acd8 <tcp_close_shutdown+0x48>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800acd2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800acd6:	d055      	beq.n	800ad84 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	8b5b      	ldrh	r3, [r3, #26]
 800acdc:	f003 0310 	and.w	r3, r3, #16
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d106      	bne.n	800acf2 <tcp_close_shutdown+0x62>
 800ace4:	4b52      	ldr	r3, [pc, #328]	@ (800ae30 <tcp_close_shutdown+0x1a0>)
 800ace6:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800acea:	4954      	ldr	r1, [pc, #336]	@ (800ae3c <tcp_close_shutdown+0x1ac>)
 800acec:	4852      	ldr	r0, [pc, #328]	@ (800ae38 <tcp_close_shutdown+0x1a8>)
 800acee:	f009 fc61 	bl	80145b4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800acfa:	687d      	ldr	r5, [r7, #4]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	3304      	adds	r3, #4
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	8ad2      	ldrh	r2, [r2, #22]
 800ad04:	6879      	ldr	r1, [r7, #4]
 800ad06:	8b09      	ldrh	r1, [r1, #24]
 800ad08:	9102      	str	r1, [sp, #8]
 800ad0a:	9201      	str	r2, [sp, #4]
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	462b      	mov	r3, r5
 800ad10:	4622      	mov	r2, r4
 800ad12:	4601      	mov	r1, r0
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f004 fe8d 	bl	800fa34 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f001 f8c8 	bl	800beb0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ad20:	4b47      	ldr	r3, [pc, #284]	@ (800ae40 <tcp_close_shutdown+0x1b0>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d105      	bne.n	800ad36 <tcp_close_shutdown+0xa6>
 800ad2a:	4b45      	ldr	r3, [pc, #276]	@ (800ae40 <tcp_close_shutdown+0x1b0>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	68db      	ldr	r3, [r3, #12]
 800ad30:	4a43      	ldr	r2, [pc, #268]	@ (800ae40 <tcp_close_shutdown+0x1b0>)
 800ad32:	6013      	str	r3, [r2, #0]
 800ad34:	e013      	b.n	800ad5e <tcp_close_shutdown+0xce>
 800ad36:	4b42      	ldr	r3, [pc, #264]	@ (800ae40 <tcp_close_shutdown+0x1b0>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	60fb      	str	r3, [r7, #12]
 800ad3c:	e00c      	b.n	800ad58 <tcp_close_shutdown+0xc8>
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	68db      	ldr	r3, [r3, #12]
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d104      	bne.n	800ad52 <tcp_close_shutdown+0xc2>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	68da      	ldr	r2, [r3, #12]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	60da      	str	r2, [r3, #12]
 800ad50:	e005      	b.n	800ad5e <tcp_close_shutdown+0xce>
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	68db      	ldr	r3, [r3, #12]
 800ad56:	60fb      	str	r3, [r7, #12]
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d1ef      	bne.n	800ad3e <tcp_close_shutdown+0xae>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2200      	movs	r2, #0
 800ad62:	60da      	str	r2, [r3, #12]
 800ad64:	4b37      	ldr	r3, [pc, #220]	@ (800ae44 <tcp_close_shutdown+0x1b4>)
 800ad66:	2201      	movs	r2, #1
 800ad68:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ad6a:	4b37      	ldr	r3, [pc, #220]	@ (800ae48 <tcp_close_shutdown+0x1b8>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d102      	bne.n	800ad7a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800ad74:	f003 fd5c 	bl	800e830 <tcp_trigger_input_pcb_close>
 800ad78:	e002      	b.n	800ad80 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f7ff fed6 	bl	800ab2c <tcp_free>
      }
      return ERR_OK;
 800ad80:	2300      	movs	r3, #0
 800ad82:	e050      	b.n	800ae26 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	7d1b      	ldrb	r3, [r3, #20]
 800ad88:	2b02      	cmp	r3, #2
 800ad8a:	d03b      	beq.n	800ae04 <tcp_close_shutdown+0x174>
 800ad8c:	2b02      	cmp	r3, #2
 800ad8e:	dc44      	bgt.n	800ae1a <tcp_close_shutdown+0x18a>
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d002      	beq.n	800ad9a <tcp_close_shutdown+0x10a>
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d02a      	beq.n	800adee <tcp_close_shutdown+0x15e>
 800ad98:	e03f      	b.n	800ae1a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	8adb      	ldrh	r3, [r3, #22]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d021      	beq.n	800ade6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ada2:	4b2a      	ldr	r3, [pc, #168]	@ (800ae4c <tcp_close_shutdown+0x1bc>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d105      	bne.n	800adb8 <tcp_close_shutdown+0x128>
 800adac:	4b27      	ldr	r3, [pc, #156]	@ (800ae4c <tcp_close_shutdown+0x1bc>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	4a26      	ldr	r2, [pc, #152]	@ (800ae4c <tcp_close_shutdown+0x1bc>)
 800adb4:	6013      	str	r3, [r2, #0]
 800adb6:	e013      	b.n	800ade0 <tcp_close_shutdown+0x150>
 800adb8:	4b24      	ldr	r3, [pc, #144]	@ (800ae4c <tcp_close_shutdown+0x1bc>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	60bb      	str	r3, [r7, #8]
 800adbe:	e00c      	b.n	800adda <tcp_close_shutdown+0x14a>
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d104      	bne.n	800add4 <tcp_close_shutdown+0x144>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	68da      	ldr	r2, [r3, #12]
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	60da      	str	r2, [r3, #12]
 800add2:	e005      	b.n	800ade0 <tcp_close_shutdown+0x150>
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	60bb      	str	r3, [r7, #8]
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d1ef      	bne.n	800adc0 <tcp_close_shutdown+0x130>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f7ff fea0 	bl	800ab2c <tcp_free>
      break;
 800adec:	e01a      	b.n	800ae24 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f7ff ff14 	bl	800ac1c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800adf4:	6879      	ldr	r1, [r7, #4]
 800adf6:	4816      	ldr	r0, [pc, #88]	@ (800ae50 <tcp_close_shutdown+0x1c0>)
 800adf8:	f001 f8aa 	bl	800bf50 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f7ff feb1 	bl	800ab64 <tcp_free_listen>
      break;
 800ae02:	e00f      	b.n	800ae24 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ae04:	6879      	ldr	r1, [r7, #4]
 800ae06:	480e      	ldr	r0, [pc, #56]	@ (800ae40 <tcp_close_shutdown+0x1b0>)
 800ae08:	f001 f8a2 	bl	800bf50 <tcp_pcb_remove>
 800ae0c:	4b0d      	ldr	r3, [pc, #52]	@ (800ae44 <tcp_close_shutdown+0x1b4>)
 800ae0e:	2201      	movs	r2, #1
 800ae10:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f7ff fe8a 	bl	800ab2c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ae18:	e004      	b.n	800ae24 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 f81a 	bl	800ae54 <tcp_close_shutdown_fin>
 800ae20:	4603      	mov	r3, r0
 800ae22:	e000      	b.n	800ae26 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ae24:	2300      	movs	r3, #0
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3710      	adds	r7, #16
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bdb0      	pop	{r4, r5, r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	08015e88 	.word	0x08015e88
 800ae34:	08015f5c 	.word	0x08015f5c
 800ae38:	08015ecc 	.word	0x08015ecc
 800ae3c:	08015f7c 	.word	0x08015f7c
 800ae40:	2000dfec 	.word	0x2000dfec
 800ae44:	2000dff4 	.word	0x2000dff4
 800ae48:	2000e02c 	.word	0x2000e02c
 800ae4c:	2000dfe4 	.word	0x2000dfe4
 800ae50:	2000dfe8 	.word	0x2000dfe8

0800ae54 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d106      	bne.n	800ae70 <tcp_close_shutdown_fin+0x1c>
 800ae62:	4b2e      	ldr	r3, [pc, #184]	@ (800af1c <tcp_close_shutdown_fin+0xc8>)
 800ae64:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800ae68:	492d      	ldr	r1, [pc, #180]	@ (800af20 <tcp_close_shutdown_fin+0xcc>)
 800ae6a:	482e      	ldr	r0, [pc, #184]	@ (800af24 <tcp_close_shutdown_fin+0xd0>)
 800ae6c:	f009 fba2 	bl	80145b4 <iprintf>

  switch (pcb->state) {
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	7d1b      	ldrb	r3, [r3, #20]
 800ae74:	2b07      	cmp	r3, #7
 800ae76:	d020      	beq.n	800aeba <tcp_close_shutdown_fin+0x66>
 800ae78:	2b07      	cmp	r3, #7
 800ae7a:	dc2b      	bgt.n	800aed4 <tcp_close_shutdown_fin+0x80>
 800ae7c:	2b03      	cmp	r3, #3
 800ae7e:	d002      	beq.n	800ae86 <tcp_close_shutdown_fin+0x32>
 800ae80:	2b04      	cmp	r3, #4
 800ae82:	d00d      	beq.n	800aea0 <tcp_close_shutdown_fin+0x4c>
 800ae84:	e026      	b.n	800aed4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f003 fee2 	bl	800ec50 <tcp_send_fin>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ae90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d11f      	bne.n	800aed8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2205      	movs	r2, #5
 800ae9c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ae9e:	e01b      	b.n	800aed8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f003 fed5 	bl	800ec50 <tcp_send_fin>
 800aea6:	4603      	mov	r3, r0
 800aea8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800aeaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d114      	bne.n	800aedc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2205      	movs	r2, #5
 800aeb6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800aeb8:	e010      	b.n	800aedc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f003 fec8 	bl	800ec50 <tcp_send_fin>
 800aec0:	4603      	mov	r3, r0
 800aec2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800aec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d109      	bne.n	800aee0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2209      	movs	r2, #9
 800aed0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800aed2:	e005      	b.n	800aee0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800aed4:	2300      	movs	r3, #0
 800aed6:	e01c      	b.n	800af12 <tcp_close_shutdown_fin+0xbe>
      break;
 800aed8:	bf00      	nop
 800aeda:	e002      	b.n	800aee2 <tcp_close_shutdown_fin+0x8e>
      break;
 800aedc:	bf00      	nop
 800aede:	e000      	b.n	800aee2 <tcp_close_shutdown_fin+0x8e>
      break;
 800aee0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800aee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d103      	bne.n	800aef2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f003 ffee 	bl	800eecc <tcp_output>
 800aef0:	e00d      	b.n	800af0e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800aef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aefa:	d108      	bne.n	800af0e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	8b5b      	ldrh	r3, [r3, #26]
 800af00:	f043 0308 	orr.w	r3, r3, #8
 800af04:	b29a      	uxth	r2, r3
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800af0a:	2300      	movs	r3, #0
 800af0c:	e001      	b.n	800af12 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800af0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af12:	4618      	mov	r0, r3
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	08015e88 	.word	0x08015e88
 800af20:	08015f38 	.word	0x08015f38
 800af24:	08015ecc 	.word	0x08015ecc

0800af28 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d109      	bne.n	800af4a <tcp_close+0x22>
 800af36:	4b0f      	ldr	r3, [pc, #60]	@ (800af74 <tcp_close+0x4c>)
 800af38:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800af3c:	490e      	ldr	r1, [pc, #56]	@ (800af78 <tcp_close+0x50>)
 800af3e:	480f      	ldr	r0, [pc, #60]	@ (800af7c <tcp_close+0x54>)
 800af40:	f009 fb38 	bl	80145b4 <iprintf>
 800af44:	f06f 030f 	mvn.w	r3, #15
 800af48:	e00f      	b.n	800af6a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	7d1b      	ldrb	r3, [r3, #20]
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d006      	beq.n	800af60 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	8b5b      	ldrh	r3, [r3, #26]
 800af56:	f043 0310 	orr.w	r3, r3, #16
 800af5a:	b29a      	uxth	r2, r3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800af60:	2101      	movs	r1, #1
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f7ff fe94 	bl	800ac90 <tcp_close_shutdown>
 800af68:	4603      	mov	r3, r0
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3708      	adds	r7, #8
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	08015e88 	.word	0x08015e88
 800af78:	08015f98 	.word	0x08015f98
 800af7c:	08015ecc 	.word	0x08015ecc

0800af80 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b08e      	sub	sp, #56	@ 0x38
 800af84:	af04      	add	r7, sp, #16
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d107      	bne.n	800afa0 <tcp_abandon+0x20>
 800af90:	4b52      	ldr	r3, [pc, #328]	@ (800b0dc <tcp_abandon+0x15c>)
 800af92:	f240 223d 	movw	r2, #573	@ 0x23d
 800af96:	4952      	ldr	r1, [pc, #328]	@ (800b0e0 <tcp_abandon+0x160>)
 800af98:	4852      	ldr	r0, [pc, #328]	@ (800b0e4 <tcp_abandon+0x164>)
 800af9a:	f009 fb0b 	bl	80145b4 <iprintf>
 800af9e:	e099      	b.n	800b0d4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	7d1b      	ldrb	r3, [r3, #20]
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d106      	bne.n	800afb6 <tcp_abandon+0x36>
 800afa8:	4b4c      	ldr	r3, [pc, #304]	@ (800b0dc <tcp_abandon+0x15c>)
 800afaa:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800afae:	494e      	ldr	r1, [pc, #312]	@ (800b0e8 <tcp_abandon+0x168>)
 800afb0:	484c      	ldr	r0, [pc, #304]	@ (800b0e4 <tcp_abandon+0x164>)
 800afb2:	f009 faff 	bl	80145b4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	7d1b      	ldrb	r3, [r3, #20]
 800afba:	2b0a      	cmp	r3, #10
 800afbc:	d107      	bne.n	800afce <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800afbe:	6879      	ldr	r1, [r7, #4]
 800afc0:	484a      	ldr	r0, [pc, #296]	@ (800b0ec <tcp_abandon+0x16c>)
 800afc2:	f000 ffc5 	bl	800bf50 <tcp_pcb_remove>
    tcp_free(pcb);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f7ff fdb0 	bl	800ab2c <tcp_free>
 800afcc:	e082      	b.n	800b0d4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800afce:	2300      	movs	r3, #0
 800afd0:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800afd2:	2300      	movs	r3, #0
 800afd4:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afda:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afe0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afe8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	691b      	ldr	r3, [r3, #16]
 800afee:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	7d1b      	ldrb	r3, [r3, #20]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d126      	bne.n	800b046 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	8adb      	ldrh	r3, [r3, #22]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d02e      	beq.n	800b05e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b000:	4b3b      	ldr	r3, [pc, #236]	@ (800b0f0 <tcp_abandon+0x170>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	687a      	ldr	r2, [r7, #4]
 800b006:	429a      	cmp	r2, r3
 800b008:	d105      	bne.n	800b016 <tcp_abandon+0x96>
 800b00a:	4b39      	ldr	r3, [pc, #228]	@ (800b0f0 <tcp_abandon+0x170>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	4a37      	ldr	r2, [pc, #220]	@ (800b0f0 <tcp_abandon+0x170>)
 800b012:	6013      	str	r3, [r2, #0]
 800b014:	e013      	b.n	800b03e <tcp_abandon+0xbe>
 800b016:	4b36      	ldr	r3, [pc, #216]	@ (800b0f0 <tcp_abandon+0x170>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	61fb      	str	r3, [r7, #28]
 800b01c:	e00c      	b.n	800b038 <tcp_abandon+0xb8>
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	68db      	ldr	r3, [r3, #12]
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	429a      	cmp	r2, r3
 800b026:	d104      	bne.n	800b032 <tcp_abandon+0xb2>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	68da      	ldr	r2, [r3, #12]
 800b02c:	69fb      	ldr	r3, [r7, #28]
 800b02e:	60da      	str	r2, [r3, #12]
 800b030:	e005      	b.n	800b03e <tcp_abandon+0xbe>
 800b032:	69fb      	ldr	r3, [r7, #28]
 800b034:	68db      	ldr	r3, [r3, #12]
 800b036:	61fb      	str	r3, [r7, #28]
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d1ef      	bne.n	800b01e <tcp_abandon+0x9e>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2200      	movs	r2, #0
 800b042:	60da      	str	r2, [r3, #12]
 800b044:	e00b      	b.n	800b05e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	8adb      	ldrh	r3, [r3, #22]
 800b04e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b050:	6879      	ldr	r1, [r7, #4]
 800b052:	4828      	ldr	r0, [pc, #160]	@ (800b0f4 <tcp_abandon+0x174>)
 800b054:	f000 ff7c 	bl	800bf50 <tcp_pcb_remove>
 800b058:	4b27      	ldr	r3, [pc, #156]	@ (800b0f8 <tcp_abandon+0x178>)
 800b05a:	2201      	movs	r2, #1
 800b05c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b062:	2b00      	cmp	r3, #0
 800b064:	d004      	beq.n	800b070 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b06a:	4618      	mov	r0, r3
 800b06c:	f000 fd1e 	bl	800baac <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b074:	2b00      	cmp	r3, #0
 800b076:	d004      	beq.n	800b082 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b07c:	4618      	mov	r0, r3
 800b07e:	f000 fd15 	bl	800baac <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b086:	2b00      	cmp	r3, #0
 800b088:	d004      	beq.n	800b094 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b08e:	4618      	mov	r0, r3
 800b090:	f000 fd0c 	bl	800baac <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b096:	2b00      	cmp	r3, #0
 800b098:	d00e      	beq.n	800b0b8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b09a:	6879      	ldr	r1, [r7, #4]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	3304      	adds	r3, #4
 800b0a0:	687a      	ldr	r2, [r7, #4]
 800b0a2:	8b12      	ldrh	r2, [r2, #24]
 800b0a4:	9202      	str	r2, [sp, #8]
 800b0a6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800b0a8:	9201      	str	r2, [sp, #4]
 800b0aa:	9300      	str	r3, [sp, #0]
 800b0ac:	460b      	mov	r3, r1
 800b0ae:	697a      	ldr	r2, [r7, #20]
 800b0b0:	69b9      	ldr	r1, [r7, #24]
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f004 fcbe 	bl	800fa34 <tcp_rst>
    }
    last_state = pcb->state;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	7d1b      	ldrb	r3, [r3, #20]
 800b0bc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f7ff fd34 	bl	800ab2c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d004      	beq.n	800b0d4 <tcp_abandon+0x154>
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	f06f 010c 	mvn.w	r1, #12
 800b0d0:	68f8      	ldr	r0, [r7, #12]
 800b0d2:	4798      	blx	r3
  }
}
 800b0d4:	3728      	adds	r7, #40	@ 0x28
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	08015e88 	.word	0x08015e88
 800b0e0:	08015fcc 	.word	0x08015fcc
 800b0e4:	08015ecc 	.word	0x08015ecc
 800b0e8:	08015fe8 	.word	0x08015fe8
 800b0ec:	2000dff0 	.word	0x2000dff0
 800b0f0:	2000dfe4 	.word	0x2000dfe4
 800b0f4:	2000dfec 	.word	0x2000dfec
 800b0f8:	2000dff4 	.word	0x2000dff4

0800b0fc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b082      	sub	sp, #8
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b104:	2101      	movs	r1, #1
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f7ff ff3a 	bl	800af80 <tcp_abandon>
}
 800b10c:	bf00      	nop
 800b10e:	3708      	adds	r7, #8
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d106      	bne.n	800b130 <tcp_update_rcv_ann_wnd+0x1c>
 800b122:	4b25      	ldr	r3, [pc, #148]	@ (800b1b8 <tcp_update_rcv_ann_wnd+0xa4>)
 800b124:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800b128:	4924      	ldr	r1, [pc, #144]	@ (800b1bc <tcp_update_rcv_ann_wnd+0xa8>)
 800b12a:	4825      	ldr	r0, [pc, #148]	@ (800b1c0 <tcp_update_rcv_ann_wnd+0xac>)
 800b12c:	f009 fa42 	bl	80145b4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b134:	687a      	ldr	r2, [r7, #4]
 800b136:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800b138:	4413      	add	r3, r2
 800b13a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800b144:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800b148:	bf28      	it	cs
 800b14a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800b14e:	b292      	uxth	r2, r2
 800b150:	4413      	add	r3, r2
 800b152:	68fa      	ldr	r2, [r7, #12]
 800b154:	1ad3      	subs	r3, r2, r3
 800b156:	2b00      	cmp	r3, #0
 800b158:	db08      	blt.n	800b16c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b166:	68fa      	ldr	r2, [r7, #12]
 800b168:	1ad3      	subs	r3, r2, r3
 800b16a:	e020      	b.n	800b1ae <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b174:	1ad3      	subs	r3, r2, r3
 800b176:	2b00      	cmp	r3, #0
 800b178:	dd03      	ble.n	800b182 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b180:	e014      	b.n	800b1ac <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b18a:	1ad3      	subs	r3, r2, r3
 800b18c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b194:	d306      	bcc.n	800b1a4 <tcp_update_rcv_ann_wnd+0x90>
 800b196:	4b08      	ldr	r3, [pc, #32]	@ (800b1b8 <tcp_update_rcv_ann_wnd+0xa4>)
 800b198:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800b19c:	4909      	ldr	r1, [pc, #36]	@ (800b1c4 <tcp_update_rcv_ann_wnd+0xb0>)
 800b19e:	4808      	ldr	r0, [pc, #32]	@ (800b1c0 <tcp_update_rcv_ann_wnd+0xac>)
 800b1a0:	f009 fa08 	bl	80145b4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	b29a      	uxth	r2, r3
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800b1ac:	2300      	movs	r3, #0
  }
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3710      	adds	r7, #16
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	08015e88 	.word	0x08015e88
 800b1bc:	080160e4 	.word	0x080160e4
 800b1c0:	08015ecc 	.word	0x08015ecc
 800b1c4:	08016108 	.word	0x08016108

0800b1c8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d107      	bne.n	800b1ea <tcp_recved+0x22>
 800b1da:	4b1f      	ldr	r3, [pc, #124]	@ (800b258 <tcp_recved+0x90>)
 800b1dc:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800b1e0:	491e      	ldr	r1, [pc, #120]	@ (800b25c <tcp_recved+0x94>)
 800b1e2:	481f      	ldr	r0, [pc, #124]	@ (800b260 <tcp_recved+0x98>)
 800b1e4:	f009 f9e6 	bl	80145b4 <iprintf>
 800b1e8:	e032      	b.n	800b250 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	7d1b      	ldrb	r3, [r3, #20]
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d106      	bne.n	800b200 <tcp_recved+0x38>
 800b1f2:	4b19      	ldr	r3, [pc, #100]	@ (800b258 <tcp_recved+0x90>)
 800b1f4:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800b1f8:	491a      	ldr	r1, [pc, #104]	@ (800b264 <tcp_recved+0x9c>)
 800b1fa:	4819      	ldr	r0, [pc, #100]	@ (800b260 <tcp_recved+0x98>)
 800b1fc:	f009 f9da 	bl	80145b4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b204:	887b      	ldrh	r3, [r7, #2]
 800b206:	4413      	add	r3, r2
 800b208:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b20a:	89fb      	ldrh	r3, [r7, #14]
 800b20c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800b210:	d804      	bhi.n	800b21c <tcp_recved+0x54>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b216:	89fa      	ldrh	r2, [r7, #14]
 800b218:	429a      	cmp	r2, r3
 800b21a:	d204      	bcs.n	800b226 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800b222:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b224:	e002      	b.n	800b22c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	89fa      	ldrh	r2, [r7, #14]
 800b22a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f7ff ff71 	bl	800b114 <tcp_update_rcv_ann_wnd>
 800b232:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800b23a:	d309      	bcc.n	800b250 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	8b5b      	ldrh	r3, [r3, #26]
 800b240:	f043 0302 	orr.w	r3, r3, #2
 800b244:	b29a      	uxth	r2, r3
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f003 fe3e 	bl	800eecc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b250:	3710      	adds	r7, #16
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	08015e88 	.word	0x08015e88
 800b25c:	08016124 	.word	0x08016124
 800b260:	08015ecc 	.word	0x08015ecc
 800b264:	0801613c 	.word	0x0801613c

0800b268 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b268:	b5b0      	push	{r4, r5, r7, lr}
 800b26a:	b090      	sub	sp, #64	@ 0x40
 800b26c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b26e:	2300      	movs	r3, #0
 800b270:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800b274:	4b95      	ldr	r3, [pc, #596]	@ (800b4cc <tcp_slowtmr+0x264>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	3301      	adds	r3, #1
 800b27a:	4a94      	ldr	r2, [pc, #592]	@ (800b4cc <tcp_slowtmr+0x264>)
 800b27c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b27e:	4b94      	ldr	r3, [pc, #592]	@ (800b4d0 <tcp_slowtmr+0x268>)
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	3301      	adds	r3, #1
 800b284:	b2da      	uxtb	r2, r3
 800b286:	4b92      	ldr	r3, [pc, #584]	@ (800b4d0 <tcp_slowtmr+0x268>)
 800b288:	701a      	strb	r2, [r3, #0]
 800b28a:	e000      	b.n	800b28e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800b28c:	bf00      	nop
  prev = NULL;
 800b28e:	2300      	movs	r3, #0
 800b290:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800b292:	4b90      	ldr	r3, [pc, #576]	@ (800b4d4 <tcp_slowtmr+0x26c>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800b298:	e29f      	b.n	800b7da <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b29a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b29c:	7d1b      	ldrb	r3, [r3, #20]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d106      	bne.n	800b2b0 <tcp_slowtmr+0x48>
 800b2a2:	4b8d      	ldr	r3, [pc, #564]	@ (800b4d8 <tcp_slowtmr+0x270>)
 800b2a4:	f240 42be 	movw	r2, #1214	@ 0x4be
 800b2a8:	498c      	ldr	r1, [pc, #560]	@ (800b4dc <tcp_slowtmr+0x274>)
 800b2aa:	488d      	ldr	r0, [pc, #564]	@ (800b4e0 <tcp_slowtmr+0x278>)
 800b2ac:	f009 f982 	bl	80145b4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b2b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2b2:	7d1b      	ldrb	r3, [r3, #20]
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d106      	bne.n	800b2c6 <tcp_slowtmr+0x5e>
 800b2b8:	4b87      	ldr	r3, [pc, #540]	@ (800b4d8 <tcp_slowtmr+0x270>)
 800b2ba:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800b2be:	4989      	ldr	r1, [pc, #548]	@ (800b4e4 <tcp_slowtmr+0x27c>)
 800b2c0:	4887      	ldr	r0, [pc, #540]	@ (800b4e0 <tcp_slowtmr+0x278>)
 800b2c2:	f009 f977 	bl	80145b4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b2c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2c8:	7d1b      	ldrb	r3, [r3, #20]
 800b2ca:	2b0a      	cmp	r3, #10
 800b2cc:	d106      	bne.n	800b2dc <tcp_slowtmr+0x74>
 800b2ce:	4b82      	ldr	r3, [pc, #520]	@ (800b4d8 <tcp_slowtmr+0x270>)
 800b2d0:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800b2d4:	4984      	ldr	r1, [pc, #528]	@ (800b4e8 <tcp_slowtmr+0x280>)
 800b2d6:	4882      	ldr	r0, [pc, #520]	@ (800b4e0 <tcp_slowtmr+0x278>)
 800b2d8:	f009 f96c 	bl	80145b4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2de:	7f9a      	ldrb	r2, [r3, #30]
 800b2e0:	4b7b      	ldr	r3, [pc, #492]	@ (800b4d0 <tcp_slowtmr+0x268>)
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d105      	bne.n	800b2f4 <tcp_slowtmr+0x8c>
      prev = pcb;
 800b2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800b2ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800b2f2:	e272      	b.n	800b7da <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800b2f4:	4b76      	ldr	r3, [pc, #472]	@ (800b4d0 <tcp_slowtmr+0x268>)
 800b2f6:	781a      	ldrb	r2, [r3, #0]
 800b2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2fa:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800b302:	2300      	movs	r3, #0
 800b304:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b30a:	7d1b      	ldrb	r3, [r3, #20]
 800b30c:	2b02      	cmp	r3, #2
 800b30e:	d10a      	bne.n	800b326 <tcp_slowtmr+0xbe>
 800b310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b312:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b316:	2b05      	cmp	r3, #5
 800b318:	d905      	bls.n	800b326 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800b31a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b31e:	3301      	adds	r3, #1
 800b320:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b324:	e11e      	b.n	800b564 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b328:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b32c:	2b0b      	cmp	r3, #11
 800b32e:	d905      	bls.n	800b33c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800b330:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b334:	3301      	adds	r3, #1
 800b336:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b33a:	e113      	b.n	800b564 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800b33c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b33e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b342:	2b00      	cmp	r3, #0
 800b344:	d075      	beq.n	800b432 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d006      	beq.n	800b35c <tcp_slowtmr+0xf4>
 800b34e:	4b62      	ldr	r3, [pc, #392]	@ (800b4d8 <tcp_slowtmr+0x270>)
 800b350:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800b354:	4965      	ldr	r1, [pc, #404]	@ (800b4ec <tcp_slowtmr+0x284>)
 800b356:	4862      	ldr	r0, [pc, #392]	@ (800b4e0 <tcp_slowtmr+0x278>)
 800b358:	f009 f92c 	bl	80145b4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b35c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b35e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b360:	2b00      	cmp	r3, #0
 800b362:	d106      	bne.n	800b372 <tcp_slowtmr+0x10a>
 800b364:	4b5c      	ldr	r3, [pc, #368]	@ (800b4d8 <tcp_slowtmr+0x270>)
 800b366:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800b36a:	4961      	ldr	r1, [pc, #388]	@ (800b4f0 <tcp_slowtmr+0x288>)
 800b36c:	485c      	ldr	r0, [pc, #368]	@ (800b4e0 <tcp_slowtmr+0x278>)
 800b36e:	f009 f921 	bl	80145b4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b374:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800b378:	2b0b      	cmp	r3, #11
 800b37a:	d905      	bls.n	800b388 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800b37c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b380:	3301      	adds	r3, #1
 800b382:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b386:	e0ed      	b.n	800b564 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b38a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b38e:	3b01      	subs	r3, #1
 800b390:	4a58      	ldr	r2, [pc, #352]	@ (800b4f4 <tcp_slowtmr+0x28c>)
 800b392:	5cd3      	ldrb	r3, [r2, r3]
 800b394:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800b396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b398:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800b39c:	7c7a      	ldrb	r2, [r7, #17]
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d907      	bls.n	800b3b2 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800b3a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3a4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	b2da      	uxtb	r2, r3
 800b3ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ae:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800b3b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3b4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800b3b8:	7c7a      	ldrb	r2, [r7, #17]
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	f200 80d2 	bhi.w	800b564 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800b3c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d108      	bne.n	800b3e0 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b3ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b3d0:	f004 fc24 	bl	800fc1c <tcp_zero_window_probe>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d014      	beq.n	800b404 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800b3da:	2300      	movs	r3, #0
 800b3dc:	623b      	str	r3, [r7, #32]
 800b3de:	e011      	b.n	800b404 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b3ea:	f003 fae9 	bl	800e9c0 <tcp_split_unsent_seg>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d107      	bne.n	800b404 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800b3f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b3f6:	f003 fd69 	bl	800eecc <tcp_output>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d101      	bne.n	800b404 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800b400:	2300      	movs	r3, #0
 800b402:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800b404:	6a3b      	ldr	r3, [r7, #32]
 800b406:	2b00      	cmp	r3, #0
 800b408:	f000 80ac 	beq.w	800b564 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800b40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b40e:	2200      	movs	r2, #0
 800b410:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b416:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b41a:	2b06      	cmp	r3, #6
 800b41c:	f200 80a2 	bhi.w	800b564 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800b420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b422:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b426:	3301      	adds	r3, #1
 800b428:	b2da      	uxtb	r2, r3
 800b42a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b42c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800b430:	e098      	b.n	800b564 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b434:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b438:	2b00      	cmp	r3, #0
 800b43a:	db0f      	blt.n	800b45c <tcp_slowtmr+0x1f4>
 800b43c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b43e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b442:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800b446:	4293      	cmp	r3, r2
 800b448:	d008      	beq.n	800b45c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800b44a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b44c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b450:	b29b      	uxth	r3, r3
 800b452:	3301      	adds	r3, #1
 800b454:	b29b      	uxth	r3, r3
 800b456:	b21a      	sxth	r2, r3
 800b458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b45a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800b45c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b45e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800b462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b464:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800b468:	429a      	cmp	r2, r3
 800b46a:	db7b      	blt.n	800b564 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b46c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b46e:	f004 f821 	bl	800f4b4 <tcp_rexmit_rto_prepare>
 800b472:	4603      	mov	r3, r0
 800b474:	2b00      	cmp	r3, #0
 800b476:	d007      	beq.n	800b488 <tcp_slowtmr+0x220>
 800b478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b47a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d171      	bne.n	800b564 <tcp_slowtmr+0x2fc>
 800b480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b482:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b484:	2b00      	cmp	r3, #0
 800b486:	d06d      	beq.n	800b564 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800b488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b48a:	7d1b      	ldrb	r3, [r3, #20]
 800b48c:	2b02      	cmp	r3, #2
 800b48e:	d03a      	beq.n	800b506 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b492:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b496:	2b0c      	cmp	r3, #12
 800b498:	bf28      	it	cs
 800b49a:	230c      	movcs	r3, #12
 800b49c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b49e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4a0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b4a4:	10db      	asrs	r3, r3, #3
 800b4a6:	b21b      	sxth	r3, r3
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b4b0:	4413      	add	r3, r2
 800b4b2:	7efa      	ldrb	r2, [r7, #27]
 800b4b4:	4910      	ldr	r1, [pc, #64]	@ (800b4f8 <tcp_slowtmr+0x290>)
 800b4b6:	5c8a      	ldrb	r2, [r1, r2]
 800b4b8:	4093      	lsls	r3, r2
 800b4ba:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	dc1a      	bgt.n	800b4fc <tcp_slowtmr+0x294>
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	b21a      	sxth	r2, r3
 800b4ca:	e019      	b.n	800b500 <tcp_slowtmr+0x298>
 800b4cc:	2000dfe0 	.word	0x2000dfe0
 800b4d0:	2000dff6 	.word	0x2000dff6
 800b4d4:	2000dfec 	.word	0x2000dfec
 800b4d8:	08015e88 	.word	0x08015e88
 800b4dc:	080161cc 	.word	0x080161cc
 800b4e0:	08015ecc 	.word	0x08015ecc
 800b4e4:	080161f8 	.word	0x080161f8
 800b4e8:	08016224 	.word	0x08016224
 800b4ec:	08016254 	.word	0x08016254
 800b4f0:	08016288 	.word	0x08016288
 800b4f4:	08017ba0 	.word	0x08017ba0
 800b4f8:	08017b90 	.word	0x08017b90
 800b4fc:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800b500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b502:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800b506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b508:	2200      	movs	r2, #0
 800b50a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b50c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b50e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b514:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b518:	4293      	cmp	r3, r2
 800b51a:	bf28      	it	cs
 800b51c:	4613      	movcs	r3, r2
 800b51e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800b520:	8a7b      	ldrh	r3, [r7, #18]
 800b522:	085b      	lsrs	r3, r3, #1
 800b524:	b29a      	uxth	r2, r3
 800b526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b528:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b52c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b52e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800b532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b534:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b536:	005b      	lsls	r3, r3, #1
 800b538:	b29b      	uxth	r3, r3
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d206      	bcs.n	800b54c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800b53e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b540:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b542:	005b      	lsls	r3, r3, #1
 800b544:	b29a      	uxth	r2, r3
 800b546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b548:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800b54c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b54e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800b550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b552:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800b556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b558:	2200      	movs	r2, #0
 800b55a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800b55e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b560:	f004 f818 	bl	800f594 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800b564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b566:	7d1b      	ldrb	r3, [r3, #20]
 800b568:	2b06      	cmp	r3, #6
 800b56a:	d111      	bne.n	800b590 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800b56c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b56e:	8b5b      	ldrh	r3, [r3, #26]
 800b570:	f003 0310 	and.w	r3, r3, #16
 800b574:	2b00      	cmp	r3, #0
 800b576:	d00b      	beq.n	800b590 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b578:	4b9d      	ldr	r3, [pc, #628]	@ (800b7f0 <tcp_slowtmr+0x588>)
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b57e:	6a1b      	ldr	r3, [r3, #32]
 800b580:	1ad3      	subs	r3, r2, r3
 800b582:	2b28      	cmp	r3, #40	@ 0x28
 800b584:	d904      	bls.n	800b590 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800b586:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b58a:	3301      	adds	r3, #1
 800b58c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b592:	7a5b      	ldrb	r3, [r3, #9]
 800b594:	f003 0308 	and.w	r3, r3, #8
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d04c      	beq.n	800b636 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800b59c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b59e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b5a0:	2b04      	cmp	r3, #4
 800b5a2:	d003      	beq.n	800b5ac <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800b5a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5a6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800b5a8:	2b07      	cmp	r3, #7
 800b5aa:	d144      	bne.n	800b636 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b5ac:	4b90      	ldr	r3, [pc, #576]	@ (800b7f0 <tcp_slowtmr+0x588>)
 800b5ae:	681a      	ldr	r2, [r3, #0]
 800b5b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5b2:	6a1b      	ldr	r3, [r3, #32]
 800b5b4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b5b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b5bc:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800b5c0:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800b5c4:	498b      	ldr	r1, [pc, #556]	@ (800b7f4 <tcp_slowtmr+0x58c>)
 800b5c6:	fba1 1303 	umull	r1, r3, r1, r3
 800b5ca:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d90a      	bls.n	800b5e6 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800b5d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800b5da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b5de:	3301      	adds	r3, #1
 800b5e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b5e4:	e027      	b.n	800b636 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b5e6:	4b82      	ldr	r3, [pc, #520]	@ (800b7f0 <tcp_slowtmr+0x588>)
 800b5e8:	681a      	ldr	r2, [r3, #0]
 800b5ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ec:	6a1b      	ldr	r3, [r3, #32]
 800b5ee:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b5f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5f2:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800b5f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5f8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	4b7e      	ldr	r3, [pc, #504]	@ (800b7f8 <tcp_slowtmr+0x590>)
 800b600:	fb00 f303 	mul.w	r3, r0, r3
 800b604:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800b606:	497b      	ldr	r1, [pc, #492]	@ (800b7f4 <tcp_slowtmr+0x58c>)
 800b608:	fba1 1303 	umull	r1, r3, r1, r3
 800b60c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b60e:	429a      	cmp	r2, r3
 800b610:	d911      	bls.n	800b636 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800b612:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b614:	f004 fac2 	bl	800fb9c <tcp_keepalive>
 800b618:	4603      	mov	r3, r0
 800b61a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800b61e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800b622:	2b00      	cmp	r3, #0
 800b624:	d107      	bne.n	800b636 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800b626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b628:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800b62c:	3301      	adds	r3, #1
 800b62e:	b2da      	uxtb	r2, r3
 800b630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b632:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800b636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d011      	beq.n	800b662 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800b63e:	4b6c      	ldr	r3, [pc, #432]	@ (800b7f0 <tcp_slowtmr+0x588>)
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b644:	6a1b      	ldr	r3, [r3, #32]
 800b646:	1ad2      	subs	r2, r2, r3
 800b648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b64a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800b64e:	4619      	mov	r1, r3
 800b650:	460b      	mov	r3, r1
 800b652:	005b      	lsls	r3, r3, #1
 800b654:	440b      	add	r3, r1
 800b656:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800b658:	429a      	cmp	r2, r3
 800b65a:	d302      	bcc.n	800b662 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 800b65c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b65e:	f000 fddb 	bl	800c218 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800b662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b664:	7d1b      	ldrb	r3, [r3, #20]
 800b666:	2b03      	cmp	r3, #3
 800b668:	d10b      	bne.n	800b682 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b66a:	4b61      	ldr	r3, [pc, #388]	@ (800b7f0 <tcp_slowtmr+0x588>)
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b670:	6a1b      	ldr	r3, [r3, #32]
 800b672:	1ad3      	subs	r3, r2, r3
 800b674:	2b28      	cmp	r3, #40	@ 0x28
 800b676:	d904      	bls.n	800b682 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 800b678:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b67c:	3301      	adds	r3, #1
 800b67e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800b682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b684:	7d1b      	ldrb	r3, [r3, #20]
 800b686:	2b09      	cmp	r3, #9
 800b688:	d10b      	bne.n	800b6a2 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b68a:	4b59      	ldr	r3, [pc, #356]	@ (800b7f0 <tcp_slowtmr+0x588>)
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b690:	6a1b      	ldr	r3, [r3, #32]
 800b692:	1ad3      	subs	r3, r2, r3
 800b694:	2bf0      	cmp	r3, #240	@ 0xf0
 800b696:	d904      	bls.n	800b6a2 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 800b698:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b69c:	3301      	adds	r3, #1
 800b69e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800b6a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d060      	beq.n	800b76c <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800b6aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6b0:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800b6b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b6b4:	f000 fbfc 	bl	800beb0 <tcp_pcb_purge>
      if (prev != NULL) {
 800b6b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d010      	beq.n	800b6e0 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b6be:	4b4f      	ldr	r3, [pc, #316]	@ (800b7fc <tcp_slowtmr+0x594>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d106      	bne.n	800b6d6 <tcp_slowtmr+0x46e>
 800b6c8:	4b4d      	ldr	r3, [pc, #308]	@ (800b800 <tcp_slowtmr+0x598>)
 800b6ca:	f240 526d 	movw	r2, #1389	@ 0x56d
 800b6ce:	494d      	ldr	r1, [pc, #308]	@ (800b804 <tcp_slowtmr+0x59c>)
 800b6d0:	484d      	ldr	r0, [pc, #308]	@ (800b808 <tcp_slowtmr+0x5a0>)
 800b6d2:	f008 ff6f 	bl	80145b4 <iprintf>
        prev->next = pcb->next;
 800b6d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6d8:	68da      	ldr	r2, [r3, #12]
 800b6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6dc:	60da      	str	r2, [r3, #12]
 800b6de:	e00f      	b.n	800b700 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b6e0:	4b46      	ldr	r3, [pc, #280]	@ (800b7fc <tcp_slowtmr+0x594>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d006      	beq.n	800b6f8 <tcp_slowtmr+0x490>
 800b6ea:	4b45      	ldr	r3, [pc, #276]	@ (800b800 <tcp_slowtmr+0x598>)
 800b6ec:	f240 5271 	movw	r2, #1393	@ 0x571
 800b6f0:	4946      	ldr	r1, [pc, #280]	@ (800b80c <tcp_slowtmr+0x5a4>)
 800b6f2:	4845      	ldr	r0, [pc, #276]	@ (800b808 <tcp_slowtmr+0x5a0>)
 800b6f4:	f008 ff5e 	bl	80145b4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800b6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	4a3f      	ldr	r2, [pc, #252]	@ (800b7fc <tcp_slowtmr+0x594>)
 800b6fe:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800b700:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b704:	2b00      	cmp	r3, #0
 800b706:	d013      	beq.n	800b730 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b70a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800b70c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b70e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800b710:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800b712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b714:	3304      	adds	r3, #4
 800b716:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b718:	8ad2      	ldrh	r2, [r2, #22]
 800b71a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b71c:	8b09      	ldrh	r1, [r1, #24]
 800b71e:	9102      	str	r1, [sp, #8]
 800b720:	9201      	str	r2, [sp, #4]
 800b722:	9300      	str	r3, [sp, #0]
 800b724:	462b      	mov	r3, r5
 800b726:	4622      	mov	r2, r4
 800b728:	4601      	mov	r1, r0
 800b72a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b72c:	f004 f982 	bl	800fa34 <tcp_rst>
      err_arg = pcb->callback_arg;
 800b730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b732:	691b      	ldr	r3, [r3, #16]
 800b734:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b738:	7d1b      	ldrb	r3, [r3, #20]
 800b73a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b73c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b73e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b742:	68db      	ldr	r3, [r3, #12]
 800b744:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800b746:	6838      	ldr	r0, [r7, #0]
 800b748:	f7ff f9f0 	bl	800ab2c <tcp_free>
      tcp_active_pcbs_changed = 0;
 800b74c:	4b30      	ldr	r3, [pc, #192]	@ (800b810 <tcp_slowtmr+0x5a8>)
 800b74e:	2200      	movs	r2, #0
 800b750:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d004      	beq.n	800b762 <tcp_slowtmr+0x4fa>
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f06f 010c 	mvn.w	r1, #12
 800b75e:	68b8      	ldr	r0, [r7, #8]
 800b760:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b762:	4b2b      	ldr	r3, [pc, #172]	@ (800b810 <tcp_slowtmr+0x5a8>)
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d037      	beq.n	800b7da <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800b76a:	e590      	b.n	800b28e <tcp_slowtmr+0x26>
      prev = pcb;
 800b76c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b76e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800b770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b772:	68db      	ldr	r3, [r3, #12]
 800b774:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800b776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b778:	7f1b      	ldrb	r3, [r3, #28]
 800b77a:	3301      	adds	r3, #1
 800b77c:	b2da      	uxtb	r2, r3
 800b77e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b780:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b784:	7f1a      	ldrb	r2, [r3, #28]
 800b786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b788:	7f5b      	ldrb	r3, [r3, #29]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d325      	bcc.n	800b7da <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800b78e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b790:	2200      	movs	r2, #0
 800b792:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800b794:	4b1e      	ldr	r3, [pc, #120]	@ (800b810 <tcp_slowtmr+0x5a8>)
 800b796:	2200      	movs	r2, #0
 800b798:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b79a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b79c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d00b      	beq.n	800b7bc <tcp_slowtmr+0x554>
 800b7a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b7aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b7ac:	6912      	ldr	r2, [r2, #16]
 800b7ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b7b0:	4610      	mov	r0, r2
 800b7b2:	4798      	blx	r3
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800b7ba:	e002      	b.n	800b7c2 <tcp_slowtmr+0x55a>
 800b7bc:	2300      	movs	r3, #0
 800b7be:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800b7c2:	4b13      	ldr	r3, [pc, #76]	@ (800b810 <tcp_slowtmr+0x5a8>)
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	f47f ad60 	bne.w	800b28c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b7cc:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d102      	bne.n	800b7da <tcp_slowtmr+0x572>
          tcp_output(prev);
 800b7d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b7d6:	f003 fb79 	bl	800eecc <tcp_output>
  while (pcb != NULL) {
 800b7da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	f47f ad5c 	bne.w	800b29a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800b7e6:	4b0b      	ldr	r3, [pc, #44]	@ (800b814 <tcp_slowtmr+0x5ac>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800b7ec:	e067      	b.n	800b8be <tcp_slowtmr+0x656>
 800b7ee:	bf00      	nop
 800b7f0:	2000dfe0 	.word	0x2000dfe0
 800b7f4:	10624dd3 	.word	0x10624dd3
 800b7f8:	000124f8 	.word	0x000124f8
 800b7fc:	2000dfec 	.word	0x2000dfec
 800b800:	08015e88 	.word	0x08015e88
 800b804:	080162c0 	.word	0x080162c0
 800b808:	08015ecc 	.word	0x08015ecc
 800b80c:	080162ec 	.word	0x080162ec
 800b810:	2000dff4 	.word	0x2000dff4
 800b814:	2000dff0 	.word	0x2000dff0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b81a:	7d1b      	ldrb	r3, [r3, #20]
 800b81c:	2b0a      	cmp	r3, #10
 800b81e:	d006      	beq.n	800b82e <tcp_slowtmr+0x5c6>
 800b820:	4b2b      	ldr	r3, [pc, #172]	@ (800b8d0 <tcp_slowtmr+0x668>)
 800b822:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800b826:	492b      	ldr	r1, [pc, #172]	@ (800b8d4 <tcp_slowtmr+0x66c>)
 800b828:	482b      	ldr	r0, [pc, #172]	@ (800b8d8 <tcp_slowtmr+0x670>)
 800b82a:	f008 fec3 	bl	80145b4 <iprintf>
    pcb_remove = 0;
 800b82e:	2300      	movs	r3, #0
 800b830:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b834:	4b29      	ldr	r3, [pc, #164]	@ (800b8dc <tcp_slowtmr+0x674>)
 800b836:	681a      	ldr	r2, [r3, #0]
 800b838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b83a:	6a1b      	ldr	r3, [r3, #32]
 800b83c:	1ad3      	subs	r3, r2, r3
 800b83e:	2bf0      	cmp	r3, #240	@ 0xf0
 800b840:	d904      	bls.n	800b84c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800b842:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b846:	3301      	adds	r3, #1
 800b848:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b84c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b850:	2b00      	cmp	r3, #0
 800b852:	d02f      	beq.n	800b8b4 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800b854:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b856:	f000 fb2b 	bl	800beb0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800b85a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d010      	beq.n	800b882 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b860:	4b1f      	ldr	r3, [pc, #124]	@ (800b8e0 <tcp_slowtmr+0x678>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b866:	429a      	cmp	r2, r3
 800b868:	d106      	bne.n	800b878 <tcp_slowtmr+0x610>
 800b86a:	4b19      	ldr	r3, [pc, #100]	@ (800b8d0 <tcp_slowtmr+0x668>)
 800b86c:	f240 52af 	movw	r2, #1455	@ 0x5af
 800b870:	491c      	ldr	r1, [pc, #112]	@ (800b8e4 <tcp_slowtmr+0x67c>)
 800b872:	4819      	ldr	r0, [pc, #100]	@ (800b8d8 <tcp_slowtmr+0x670>)
 800b874:	f008 fe9e 	bl	80145b4 <iprintf>
        prev->next = pcb->next;
 800b878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b87a:	68da      	ldr	r2, [r3, #12]
 800b87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b87e:	60da      	str	r2, [r3, #12]
 800b880:	e00f      	b.n	800b8a2 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b882:	4b17      	ldr	r3, [pc, #92]	@ (800b8e0 <tcp_slowtmr+0x678>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b888:	429a      	cmp	r2, r3
 800b88a:	d006      	beq.n	800b89a <tcp_slowtmr+0x632>
 800b88c:	4b10      	ldr	r3, [pc, #64]	@ (800b8d0 <tcp_slowtmr+0x668>)
 800b88e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800b892:	4915      	ldr	r1, [pc, #84]	@ (800b8e8 <tcp_slowtmr+0x680>)
 800b894:	4810      	ldr	r0, [pc, #64]	@ (800b8d8 <tcp_slowtmr+0x670>)
 800b896:	f008 fe8d 	bl	80145b4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800b89a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b89c:	68db      	ldr	r3, [r3, #12]
 800b89e:	4a10      	ldr	r2, [pc, #64]	@ (800b8e0 <tcp_slowtmr+0x678>)
 800b8a0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800b8a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8a4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800b8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8a8:	68db      	ldr	r3, [r3, #12]
 800b8aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800b8ac:	69f8      	ldr	r0, [r7, #28]
 800b8ae:	f7ff f93d 	bl	800ab2c <tcp_free>
 800b8b2:	e004      	b.n	800b8be <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800b8b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800b8b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8ba:	68db      	ldr	r3, [r3, #12]
 800b8bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800b8be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d1a9      	bne.n	800b818 <tcp_slowtmr+0x5b0>
    }
  }
}
 800b8c4:	bf00      	nop
 800b8c6:	bf00      	nop
 800b8c8:	3730      	adds	r7, #48	@ 0x30
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bdb0      	pop	{r4, r5, r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	08015e88 	.word	0x08015e88
 800b8d4:	08016318 	.word	0x08016318
 800b8d8:	08015ecc 	.word	0x08015ecc
 800b8dc:	2000dfe0 	.word	0x2000dfe0
 800b8e0:	2000dff0 	.word	0x2000dff0
 800b8e4:	08016348 	.word	0x08016348
 800b8e8:	08016370 	.word	0x08016370

0800b8ec <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800b8f2:	4b2d      	ldr	r3, [pc, #180]	@ (800b9a8 <tcp_fasttmr+0xbc>)
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	b2da      	uxtb	r2, r3
 800b8fa:	4b2b      	ldr	r3, [pc, #172]	@ (800b9a8 <tcp_fasttmr+0xbc>)
 800b8fc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800b8fe:	4b2b      	ldr	r3, [pc, #172]	@ (800b9ac <tcp_fasttmr+0xc0>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b904:	e048      	b.n	800b998 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	7f9a      	ldrb	r2, [r3, #30]
 800b90a:	4b27      	ldr	r3, [pc, #156]	@ (800b9a8 <tcp_fasttmr+0xbc>)
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d03f      	beq.n	800b992 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800b912:	4b25      	ldr	r3, [pc, #148]	@ (800b9a8 <tcp_fasttmr+0xbc>)
 800b914:	781a      	ldrb	r2, [r3, #0]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	8b5b      	ldrh	r3, [r3, #26]
 800b91e:	f003 0301 	and.w	r3, r3, #1
 800b922:	2b00      	cmp	r3, #0
 800b924:	d010      	beq.n	800b948 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	8b5b      	ldrh	r3, [r3, #26]
 800b92a:	f043 0302 	orr.w	r3, r3, #2
 800b92e:	b29a      	uxth	r2, r3
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f003 fac9 	bl	800eecc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	8b5b      	ldrh	r3, [r3, #26]
 800b93e:	f023 0303 	bic.w	r3, r3, #3
 800b942:	b29a      	uxth	r2, r3
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	8b5b      	ldrh	r3, [r3, #26]
 800b94c:	f003 0308 	and.w	r3, r3, #8
 800b950:	2b00      	cmp	r3, #0
 800b952:	d009      	beq.n	800b968 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	8b5b      	ldrh	r3, [r3, #26]
 800b958:	f023 0308 	bic.w	r3, r3, #8
 800b95c:	b29a      	uxth	r2, r3
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f7ff fa76 	bl	800ae54 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	68db      	ldr	r3, [r3, #12]
 800b96c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b972:	2b00      	cmp	r3, #0
 800b974:	d00a      	beq.n	800b98c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b976:	4b0e      	ldr	r3, [pc, #56]	@ (800b9b0 <tcp_fasttmr+0xc4>)
 800b978:	2200      	movs	r2, #0
 800b97a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 f819 	bl	800b9b4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b982:	4b0b      	ldr	r3, [pc, #44]	@ (800b9b0 <tcp_fasttmr+0xc4>)
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d000      	beq.n	800b98c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b98a:	e7b8      	b.n	800b8fe <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	607b      	str	r3, [r7, #4]
 800b990:	e002      	b.n	800b998 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d1b3      	bne.n	800b906 <tcp_fasttmr+0x1a>
    }
  }
}
 800b99e:	bf00      	nop
 800b9a0:	bf00      	nop
 800b9a2:	3708      	adds	r7, #8
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	2000dff6 	.word	0x2000dff6
 800b9ac:	2000dfec 	.word	0x2000dfec
 800b9b0:	2000dff4 	.word	0x2000dff4

0800b9b4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b9b4:	b590      	push	{r4, r7, lr}
 800b9b6:	b085      	sub	sp, #20
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d109      	bne.n	800b9d6 <tcp_process_refused_data+0x22>
 800b9c2:	4b37      	ldr	r3, [pc, #220]	@ (800baa0 <tcp_process_refused_data+0xec>)
 800b9c4:	f240 6209 	movw	r2, #1545	@ 0x609
 800b9c8:	4936      	ldr	r1, [pc, #216]	@ (800baa4 <tcp_process_refused_data+0xf0>)
 800b9ca:	4837      	ldr	r0, [pc, #220]	@ (800baa8 <tcp_process_refused_data+0xf4>)
 800b9cc:	f008 fdf2 	bl	80145b4 <iprintf>
 800b9d0:	f06f 030f 	mvn.w	r3, #15
 800b9d4:	e060      	b.n	800ba98 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b9da:	7b5b      	ldrb	r3, [r3, #13]
 800b9dc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b9e2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d00b      	beq.n	800ba0c <tcp_process_refused_data+0x58>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6918      	ldr	r0, [r3, #16]
 800b9fe:	2300      	movs	r3, #0
 800ba00:	68ba      	ldr	r2, [r7, #8]
 800ba02:	6879      	ldr	r1, [r7, #4]
 800ba04:	47a0      	blx	r4
 800ba06:	4603      	mov	r3, r0
 800ba08:	73fb      	strb	r3, [r7, #15]
 800ba0a:	e007      	b.n	800ba1c <tcp_process_refused_data+0x68>
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	68ba      	ldr	r2, [r7, #8]
 800ba10:	6879      	ldr	r1, [r7, #4]
 800ba12:	2000      	movs	r0, #0
 800ba14:	f000 f8a4 	bl	800bb60 <tcp_recv_null>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ba1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d12a      	bne.n	800ba7a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ba24:	7bbb      	ldrb	r3, [r7, #14]
 800ba26:	f003 0320 	and.w	r3, r3, #32
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d033      	beq.n	800ba96 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba32:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800ba36:	d005      	beq.n	800ba44 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	b29a      	uxth	r2, r3
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d00b      	beq.n	800ba66 <tcp_process_refused_data+0xb2>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6918      	ldr	r0, [r3, #16]
 800ba58:	2300      	movs	r3, #0
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	6879      	ldr	r1, [r7, #4]
 800ba5e:	47a0      	blx	r4
 800ba60:	4603      	mov	r3, r0
 800ba62:	73fb      	strb	r3, [r7, #15]
 800ba64:	e001      	b.n	800ba6a <tcp_process_refused_data+0xb6>
 800ba66:	2300      	movs	r3, #0
 800ba68:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ba6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba6e:	f113 0f0d 	cmn.w	r3, #13
 800ba72:	d110      	bne.n	800ba96 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ba74:	f06f 030c 	mvn.w	r3, #12
 800ba78:	e00e      	b.n	800ba98 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ba7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba7e:	f113 0f0d 	cmn.w	r3, #13
 800ba82:	d102      	bne.n	800ba8a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ba84:	f06f 030c 	mvn.w	r3, #12
 800ba88:	e006      	b.n	800ba98 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	68ba      	ldr	r2, [r7, #8]
 800ba8e:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800ba90:	f06f 0304 	mvn.w	r3, #4
 800ba94:	e000      	b.n	800ba98 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ba96:	2300      	movs	r3, #0
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3714      	adds	r7, #20
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd90      	pop	{r4, r7, pc}
 800baa0:	08015e88 	.word	0x08015e88
 800baa4:	08016398 	.word	0x08016398
 800baa8:	08015ecc 	.word	0x08015ecc

0800baac <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800bab4:	e007      	b.n	800bac6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 f80a 	bl	800bad6 <tcp_seg_free>
    seg = next;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d1f4      	bne.n	800bab6 <tcp_segs_free+0xa>
  }
}
 800bacc:	bf00      	nop
 800bace:	bf00      	nop
 800bad0:	3710      	adds	r7, #16
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}

0800bad6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800bad6:	b580      	push	{r7, lr}
 800bad8:	b082      	sub	sp, #8
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d00c      	beq.n	800bafe <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d004      	beq.n	800baf6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7fe fd6f 	bl	800a5d4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800baf6:	6879      	ldr	r1, [r7, #4]
 800baf8:	2002      	movs	r0, #2
 800bafa:	f7fd fe93 	bl	8009824 <memp_free>
  }
}
 800bafe:	bf00      	nop
 800bb00:	3708      	adds	r7, #8
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
	...

0800bb08 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b084      	sub	sp, #16
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d106      	bne.n	800bb24 <tcp_seg_copy+0x1c>
 800bb16:	4b0f      	ldr	r3, [pc, #60]	@ (800bb54 <tcp_seg_copy+0x4c>)
 800bb18:	f240 6282 	movw	r2, #1666	@ 0x682
 800bb1c:	490e      	ldr	r1, [pc, #56]	@ (800bb58 <tcp_seg_copy+0x50>)
 800bb1e:	480f      	ldr	r0, [pc, #60]	@ (800bb5c <tcp_seg_copy+0x54>)
 800bb20:	f008 fd48 	bl	80145b4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800bb24:	2002      	movs	r0, #2
 800bb26:	f7fd fe07 	bl	8009738 <memp_malloc>
 800bb2a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d101      	bne.n	800bb36 <tcp_seg_copy+0x2e>
    return NULL;
 800bb32:	2300      	movs	r3, #0
 800bb34:	e00a      	b.n	800bb4c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800bb36:	2210      	movs	r2, #16
 800bb38:	6879      	ldr	r1, [r7, #4]
 800bb3a:	68f8      	ldr	r0, [r7, #12]
 800bb3c:	f008 fe2b 	bl	8014796 <memcpy>
  pbuf_ref(cseg->p);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7fe fdeb 	bl	800a720 <pbuf_ref>
  return cseg;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3710      	adds	r7, #16
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}
 800bb54:	08015e88 	.word	0x08015e88
 800bb58:	080163dc 	.word	0x080163dc
 800bb5c:	08015ecc 	.word	0x08015ecc

0800bb60 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b084      	sub	sp, #16
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	607a      	str	r2, [r7, #4]
 800bb6c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d109      	bne.n	800bb88 <tcp_recv_null+0x28>
 800bb74:	4b12      	ldr	r3, [pc, #72]	@ (800bbc0 <tcp_recv_null+0x60>)
 800bb76:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800bb7a:	4912      	ldr	r1, [pc, #72]	@ (800bbc4 <tcp_recv_null+0x64>)
 800bb7c:	4812      	ldr	r0, [pc, #72]	@ (800bbc8 <tcp_recv_null+0x68>)
 800bb7e:	f008 fd19 	bl	80145b4 <iprintf>
 800bb82:	f06f 030f 	mvn.w	r3, #15
 800bb86:	e016      	b.n	800bbb6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d009      	beq.n	800bba2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	891b      	ldrh	r3, [r3, #8]
 800bb92:	4619      	mov	r1, r3
 800bb94:	68b8      	ldr	r0, [r7, #8]
 800bb96:	f7ff fb17 	bl	800b1c8 <tcp_recved>
    pbuf_free(p);
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f7fe fd1a 	bl	800a5d4 <pbuf_free>
 800bba0:	e008      	b.n	800bbb4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800bba2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d104      	bne.n	800bbb4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800bbaa:	68b8      	ldr	r0, [r7, #8]
 800bbac:	f7ff f9bc 	bl	800af28 <tcp_close>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	e000      	b.n	800bbb6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800bbb4:	2300      	movs	r3, #0
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3710      	adds	r7, #16
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	08015e88 	.word	0x08015e88
 800bbc4:	080163f8 	.word	0x080163f8
 800bbc8:	08015ecc 	.word	0x08015ecc

0800bbcc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b086      	sub	sp, #24
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800bbd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	db01      	blt.n	800bbe2 <tcp_kill_prio+0x16>
 800bbde:	79fb      	ldrb	r3, [r7, #7]
 800bbe0:	e000      	b.n	800bbe4 <tcp_kill_prio+0x18>
 800bbe2:	237f      	movs	r3, #127	@ 0x7f
 800bbe4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800bbe6:	7afb      	ldrb	r3, [r7, #11]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d034      	beq.n	800bc56 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800bbec:	7afb      	ldrb	r3, [r7, #11]
 800bbee:	3b01      	subs	r3, #1
 800bbf0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bbfa:	4b19      	ldr	r3, [pc, #100]	@ (800bc60 <tcp_kill_prio+0x94>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	617b      	str	r3, [r7, #20]
 800bc00:	e01f      	b.n	800bc42 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	7d5b      	ldrb	r3, [r3, #21]
 800bc06:	7afa      	ldrb	r2, [r7, #11]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d80c      	bhi.n	800bc26 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800bc10:	7afa      	ldrb	r2, [r7, #11]
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d112      	bne.n	800bc3c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800bc16:	4b13      	ldr	r3, [pc, #76]	@ (800bc64 <tcp_kill_prio+0x98>)
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	6a1b      	ldr	r3, [r3, #32]
 800bc1e:	1ad3      	subs	r3, r2, r3
 800bc20:	68fa      	ldr	r2, [r7, #12]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d80a      	bhi.n	800bc3c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800bc26:	4b0f      	ldr	r3, [pc, #60]	@ (800bc64 <tcp_kill_prio+0x98>)
 800bc28:	681a      	ldr	r2, [r3, #0]
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	6a1b      	ldr	r3, [r3, #32]
 800bc2e:	1ad3      	subs	r3, r2, r3
 800bc30:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	7d5b      	ldrb	r3, [r3, #21]
 800bc3a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	68db      	ldr	r3, [r3, #12]
 800bc40:	617b      	str	r3, [r7, #20]
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d1dc      	bne.n	800bc02 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d004      	beq.n	800bc58 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bc4e:	6938      	ldr	r0, [r7, #16]
 800bc50:	f7ff fa54 	bl	800b0fc <tcp_abort>
 800bc54:	e000      	b.n	800bc58 <tcp_kill_prio+0x8c>
    return;
 800bc56:	bf00      	nop
  }
}
 800bc58:	3718      	adds	r7, #24
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	2000dfec 	.word	0x2000dfec
 800bc64:	2000dfe0 	.word	0x2000dfe0

0800bc68 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b086      	sub	sp, #24
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	4603      	mov	r3, r0
 800bc70:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800bc72:	79fb      	ldrb	r3, [r7, #7]
 800bc74:	2b08      	cmp	r3, #8
 800bc76:	d009      	beq.n	800bc8c <tcp_kill_state+0x24>
 800bc78:	79fb      	ldrb	r3, [r7, #7]
 800bc7a:	2b09      	cmp	r3, #9
 800bc7c:	d006      	beq.n	800bc8c <tcp_kill_state+0x24>
 800bc7e:	4b1a      	ldr	r3, [pc, #104]	@ (800bce8 <tcp_kill_state+0x80>)
 800bc80:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800bc84:	4919      	ldr	r1, [pc, #100]	@ (800bcec <tcp_kill_state+0x84>)
 800bc86:	481a      	ldr	r0, [pc, #104]	@ (800bcf0 <tcp_kill_state+0x88>)
 800bc88:	f008 fc94 	bl	80145b4 <iprintf>

  inactivity = 0;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800bc90:	2300      	movs	r3, #0
 800bc92:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc94:	4b17      	ldr	r3, [pc, #92]	@ (800bcf4 <tcp_kill_state+0x8c>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	617b      	str	r3, [r7, #20]
 800bc9a:	e017      	b.n	800bccc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	7d1b      	ldrb	r3, [r3, #20]
 800bca0:	79fa      	ldrb	r2, [r7, #7]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d10f      	bne.n	800bcc6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bca6:	4b14      	ldr	r3, [pc, #80]	@ (800bcf8 <tcp_kill_state+0x90>)
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	6a1b      	ldr	r3, [r3, #32]
 800bcae:	1ad3      	subs	r3, r2, r3
 800bcb0:	68fa      	ldr	r2, [r7, #12]
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d807      	bhi.n	800bcc6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800bcb6:	4b10      	ldr	r3, [pc, #64]	@ (800bcf8 <tcp_kill_state+0x90>)
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	6a1b      	ldr	r3, [r3, #32]
 800bcbe:	1ad3      	subs	r3, r2, r3
 800bcc0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	68db      	ldr	r3, [r3, #12]
 800bcca:	617b      	str	r3, [r7, #20]
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d1e4      	bne.n	800bc9c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d003      	beq.n	800bce0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800bcd8:	2100      	movs	r1, #0
 800bcda:	6938      	ldr	r0, [r7, #16]
 800bcdc:	f7ff f950 	bl	800af80 <tcp_abandon>
  }
}
 800bce0:	bf00      	nop
 800bce2:	3718      	adds	r7, #24
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	08015e88 	.word	0x08015e88
 800bcec:	08016414 	.word	0x08016414
 800bcf0:	08015ecc 	.word	0x08015ecc
 800bcf4:	2000dfec 	.word	0x2000dfec
 800bcf8:	2000dfe0 	.word	0x2000dfe0

0800bcfc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b084      	sub	sp, #16
 800bd00:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800bd02:	2300      	movs	r3, #0
 800bd04:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800bd06:	2300      	movs	r3, #0
 800bd08:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd0a:	4b12      	ldr	r3, [pc, #72]	@ (800bd54 <tcp_kill_timewait+0x58>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	60fb      	str	r3, [r7, #12]
 800bd10:	e012      	b.n	800bd38 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bd12:	4b11      	ldr	r3, [pc, #68]	@ (800bd58 <tcp_kill_timewait+0x5c>)
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	6a1b      	ldr	r3, [r3, #32]
 800bd1a:	1ad3      	subs	r3, r2, r3
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d807      	bhi.n	800bd32 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800bd22:	4b0d      	ldr	r3, [pc, #52]	@ (800bd58 <tcp_kill_timewait+0x5c>)
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	6a1b      	ldr	r3, [r3, #32]
 800bd2a:	1ad3      	subs	r3, r2, r3
 800bd2c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	68db      	ldr	r3, [r3, #12]
 800bd36:	60fb      	str	r3, [r7, #12]
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d1e9      	bne.n	800bd12 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d002      	beq.n	800bd4a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bd44:	68b8      	ldr	r0, [r7, #8]
 800bd46:	f7ff f9d9 	bl	800b0fc <tcp_abort>
  }
}
 800bd4a:	bf00      	nop
 800bd4c:	3710      	adds	r7, #16
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	2000dff0 	.word	0x2000dff0
 800bd58:	2000dfe0 	.word	0x2000dfe0

0800bd5c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800bd62:	4b10      	ldr	r3, [pc, #64]	@ (800bda4 <tcp_handle_closepend+0x48>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bd68:	e014      	b.n	800bd94 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	68db      	ldr	r3, [r3, #12]
 800bd6e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	8b5b      	ldrh	r3, [r3, #26]
 800bd74:	f003 0308 	and.w	r3, r3, #8
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d009      	beq.n	800bd90 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	8b5b      	ldrh	r3, [r3, #26]
 800bd80:	f023 0308 	bic.w	r3, r3, #8
 800bd84:	b29a      	uxth	r2, r3
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f7ff f862 	bl	800ae54 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d1e7      	bne.n	800bd6a <tcp_handle_closepend+0xe>
  }
}
 800bd9a:	bf00      	nop
 800bd9c:	bf00      	nop
 800bd9e:	3708      	adds	r7, #8
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}
 800bda4:	2000dfec 	.word	0x2000dfec

0800bda8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	4603      	mov	r3, r0
 800bdb0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bdb2:	2000      	movs	r0, #0
 800bdb4:	f7fd fcc0 	bl	8009738 <memp_malloc>
 800bdb8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d126      	bne.n	800be0e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800bdc0:	f7ff ffcc 	bl	800bd5c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800bdc4:	f7ff ff9a 	bl	800bcfc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bdc8:	2000      	movs	r0, #0
 800bdca:	f7fd fcb5 	bl	8009738 <memp_malloc>
 800bdce:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d11b      	bne.n	800be0e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800bdd6:	2009      	movs	r0, #9
 800bdd8:	f7ff ff46 	bl	800bc68 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bddc:	2000      	movs	r0, #0
 800bdde:	f7fd fcab 	bl	8009738 <memp_malloc>
 800bde2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d111      	bne.n	800be0e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800bdea:	2008      	movs	r0, #8
 800bdec:	f7ff ff3c 	bl	800bc68 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bdf0:	2000      	movs	r0, #0
 800bdf2:	f7fd fca1 	bl	8009738 <memp_malloc>
 800bdf6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d107      	bne.n	800be0e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800bdfe:	79fb      	ldrb	r3, [r7, #7]
 800be00:	4618      	mov	r0, r3
 800be02:	f7ff fee3 	bl	800bbcc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800be06:	2000      	movs	r0, #0
 800be08:	f7fd fc96 	bl	8009738 <memp_malloc>
 800be0c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d03f      	beq.n	800be94 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800be14:	229c      	movs	r2, #156	@ 0x9c
 800be16:	2100      	movs	r1, #0
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f008 fc30 	bl	801467e <memset>
    pcb->prio = prio;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	79fa      	ldrb	r2, [r7, #7]
 800be22:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800be2a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800be34:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	22ff      	movs	r2, #255	@ 0xff
 800be42:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800be4a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2206      	movs	r2, #6
 800be50:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2206      	movs	r2, #6
 800be58:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800be60:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2201      	movs	r2, #1
 800be66:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800be6a:	4b0d      	ldr	r3, [pc, #52]	@ (800bea0 <tcp_alloc+0xf8>)
 800be6c:	681a      	ldr	r2, [r3, #0]
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800be72:	4b0c      	ldr	r3, [pc, #48]	@ (800bea4 <tcp_alloc+0xfc>)
 800be74:	781a      	ldrb	r2, [r3, #0]
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800be80:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	4a08      	ldr	r2, [pc, #32]	@ (800bea8 <tcp_alloc+0x100>)
 800be88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	4a07      	ldr	r2, [pc, #28]	@ (800beac <tcp_alloc+0x104>)
 800be90:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800be94:	68fb      	ldr	r3, [r7, #12]
}
 800be96:	4618      	mov	r0, r3
 800be98:	3710      	adds	r7, #16
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
 800be9e:	bf00      	nop
 800bea0:	2000dfe0 	.word	0x2000dfe0
 800bea4:	2000dff6 	.word	0x2000dff6
 800bea8:	0800bb61 	.word	0x0800bb61
 800beac:	006ddd00 	.word	0x006ddd00

0800beb0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b082      	sub	sp, #8
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d107      	bne.n	800bece <tcp_pcb_purge+0x1e>
 800bebe:	4b21      	ldr	r3, [pc, #132]	@ (800bf44 <tcp_pcb_purge+0x94>)
 800bec0:	f640 0251 	movw	r2, #2129	@ 0x851
 800bec4:	4920      	ldr	r1, [pc, #128]	@ (800bf48 <tcp_pcb_purge+0x98>)
 800bec6:	4821      	ldr	r0, [pc, #132]	@ (800bf4c <tcp_pcb_purge+0x9c>)
 800bec8:	f008 fb74 	bl	80145b4 <iprintf>
 800becc:	e037      	b.n	800bf3e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	7d1b      	ldrb	r3, [r3, #20]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d033      	beq.n	800bf3e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800beda:	2b0a      	cmp	r3, #10
 800bedc:	d02f      	beq.n	800bf3e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d02b      	beq.n	800bf3e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800beea:	2b00      	cmp	r3, #0
 800beec:	d007      	beq.n	800befe <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7fe fb6e 	bl	800a5d4 <pbuf_free>
      pcb->refused_data = NULL;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d002      	beq.n	800bf0c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 f986 	bl	800c218 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bf12:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f7ff fdc7 	bl	800baac <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7ff fdc2 	bl	800baac <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800bf3e:	3708      	adds	r7, #8
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}
 800bf44:	08015e88 	.word	0x08015e88
 800bf48:	080164d4 	.word	0x080164d4
 800bf4c:	08015ecc 	.word	0x08015ecc

0800bf50 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b084      	sub	sp, #16
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d106      	bne.n	800bf6e <tcp_pcb_remove+0x1e>
 800bf60:	4b3e      	ldr	r3, [pc, #248]	@ (800c05c <tcp_pcb_remove+0x10c>)
 800bf62:	f640 0283 	movw	r2, #2179	@ 0x883
 800bf66:	493e      	ldr	r1, [pc, #248]	@ (800c060 <tcp_pcb_remove+0x110>)
 800bf68:	483e      	ldr	r0, [pc, #248]	@ (800c064 <tcp_pcb_remove+0x114>)
 800bf6a:	f008 fb23 	bl	80145b4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d106      	bne.n	800bf82 <tcp_pcb_remove+0x32>
 800bf74:	4b39      	ldr	r3, [pc, #228]	@ (800c05c <tcp_pcb_remove+0x10c>)
 800bf76:	f640 0284 	movw	r2, #2180	@ 0x884
 800bf7a:	493b      	ldr	r1, [pc, #236]	@ (800c068 <tcp_pcb_remove+0x118>)
 800bf7c:	4839      	ldr	r0, [pc, #228]	@ (800c064 <tcp_pcb_remove+0x114>)
 800bf7e:	f008 fb19 	bl	80145b4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	683a      	ldr	r2, [r7, #0]
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d105      	bne.n	800bf98 <tcp_pcb_remove+0x48>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	68da      	ldr	r2, [r3, #12]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	601a      	str	r2, [r3, #0]
 800bf96:	e013      	b.n	800bfc0 <tcp_pcb_remove+0x70>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	60fb      	str	r3, [r7, #12]
 800bf9e:	e00c      	b.n	800bfba <tcp_pcb_remove+0x6a>
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	68db      	ldr	r3, [r3, #12]
 800bfa4:	683a      	ldr	r2, [r7, #0]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d104      	bne.n	800bfb4 <tcp_pcb_remove+0x64>
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	68da      	ldr	r2, [r3, #12]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	60da      	str	r2, [r3, #12]
 800bfb2:	e005      	b.n	800bfc0 <tcp_pcb_remove+0x70>
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	68db      	ldr	r3, [r3, #12]
 800bfb8:	60fb      	str	r3, [r7, #12]
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d1ef      	bne.n	800bfa0 <tcp_pcb_remove+0x50>
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800bfc6:	6838      	ldr	r0, [r7, #0]
 800bfc8:	f7ff ff72 	bl	800beb0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	7d1b      	ldrb	r3, [r3, #20]
 800bfd0:	2b0a      	cmp	r3, #10
 800bfd2:	d013      	beq.n	800bffc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	d00f      	beq.n	800bffc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	8b5b      	ldrh	r3, [r3, #26]
 800bfe0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d009      	beq.n	800bffc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	8b5b      	ldrh	r3, [r3, #26]
 800bfec:	f043 0302 	orr.w	r3, r3, #2
 800bff0:	b29a      	uxth	r2, r3
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bff6:	6838      	ldr	r0, [r7, #0]
 800bff8:	f002 ff68 	bl	800eecc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	7d1b      	ldrb	r3, [r3, #20]
 800c000:	2b01      	cmp	r3, #1
 800c002:	d020      	beq.n	800c046 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d006      	beq.n	800c01a <tcp_pcb_remove+0xca>
 800c00c:	4b13      	ldr	r3, [pc, #76]	@ (800c05c <tcp_pcb_remove+0x10c>)
 800c00e:	f640 0293 	movw	r2, #2195	@ 0x893
 800c012:	4916      	ldr	r1, [pc, #88]	@ (800c06c <tcp_pcb_remove+0x11c>)
 800c014:	4813      	ldr	r0, [pc, #76]	@ (800c064 <tcp_pcb_remove+0x114>)
 800c016:	f008 facd 	bl	80145b4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d006      	beq.n	800c030 <tcp_pcb_remove+0xe0>
 800c022:	4b0e      	ldr	r3, [pc, #56]	@ (800c05c <tcp_pcb_remove+0x10c>)
 800c024:	f640 0294 	movw	r2, #2196	@ 0x894
 800c028:	4911      	ldr	r1, [pc, #68]	@ (800c070 <tcp_pcb_remove+0x120>)
 800c02a:	480e      	ldr	r0, [pc, #56]	@ (800c064 <tcp_pcb_remove+0x114>)
 800c02c:	f008 fac2 	bl	80145b4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c034:	2b00      	cmp	r3, #0
 800c036:	d006      	beq.n	800c046 <tcp_pcb_remove+0xf6>
 800c038:	4b08      	ldr	r3, [pc, #32]	@ (800c05c <tcp_pcb_remove+0x10c>)
 800c03a:	f640 0296 	movw	r2, #2198	@ 0x896
 800c03e:	490d      	ldr	r1, [pc, #52]	@ (800c074 <tcp_pcb_remove+0x124>)
 800c040:	4808      	ldr	r0, [pc, #32]	@ (800c064 <tcp_pcb_remove+0x114>)
 800c042:	f008 fab7 	bl	80145b4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	2200      	movs	r2, #0
 800c04a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	2200      	movs	r2, #0
 800c050:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c052:	bf00      	nop
 800c054:	3710      	adds	r7, #16
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	bf00      	nop
 800c05c:	08015e88 	.word	0x08015e88
 800c060:	080164f0 	.word	0x080164f0
 800c064:	08015ecc 	.word	0x08015ecc
 800c068:	0801650c 	.word	0x0801650c
 800c06c:	0801652c 	.word	0x0801652c
 800c070:	08016544 	.word	0x08016544
 800c074:	08016560 	.word	0x08016560

0800c078 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d106      	bne.n	800c094 <tcp_next_iss+0x1c>
 800c086:	4b0a      	ldr	r3, [pc, #40]	@ (800c0b0 <tcp_next_iss+0x38>)
 800c088:	f640 02af 	movw	r2, #2223	@ 0x8af
 800c08c:	4909      	ldr	r1, [pc, #36]	@ (800c0b4 <tcp_next_iss+0x3c>)
 800c08e:	480a      	ldr	r0, [pc, #40]	@ (800c0b8 <tcp_next_iss+0x40>)
 800c090:	f008 fa90 	bl	80145b4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c094:	4b09      	ldr	r3, [pc, #36]	@ (800c0bc <tcp_next_iss+0x44>)
 800c096:	681a      	ldr	r2, [r3, #0]
 800c098:	4b09      	ldr	r3, [pc, #36]	@ (800c0c0 <tcp_next_iss+0x48>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	4413      	add	r3, r2
 800c09e:	4a07      	ldr	r2, [pc, #28]	@ (800c0bc <tcp_next_iss+0x44>)
 800c0a0:	6013      	str	r3, [r2, #0]
  return iss;
 800c0a2:	4b06      	ldr	r3, [pc, #24]	@ (800c0bc <tcp_next_iss+0x44>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3708      	adds	r7, #8
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	08015e88 	.word	0x08015e88
 800c0b4:	08016578 	.word	0x08016578
 800c0b8:	08015ecc 	.word	0x08015ecc
 800c0bc:	20000028 	.word	0x20000028
 800c0c0:	2000dfe0 	.word	0x2000dfe0

0800c0c4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b086      	sub	sp, #24
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	60b9      	str	r1, [r7, #8]
 800c0ce:	607a      	str	r2, [r7, #4]
 800c0d0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d106      	bne.n	800c0e6 <tcp_eff_send_mss_netif+0x22>
 800c0d8:	4b14      	ldr	r3, [pc, #80]	@ (800c12c <tcp_eff_send_mss_netif+0x68>)
 800c0da:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800c0de:	4914      	ldr	r1, [pc, #80]	@ (800c130 <tcp_eff_send_mss_netif+0x6c>)
 800c0e0:	4814      	ldr	r0, [pc, #80]	@ (800c134 <tcp_eff_send_mss_netif+0x70>)
 800c0e2:	f008 fa67 	bl	80145b4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d101      	bne.n	800c0f0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800c0ec:	89fb      	ldrh	r3, [r7, #14]
 800c0ee:	e019      	b.n	800c124 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800c0f4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c0f6:	8afb      	ldrh	r3, [r7, #22]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d012      	beq.n	800c122 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800c0fc:	2328      	movs	r3, #40	@ 0x28
 800c0fe:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c100:	8afa      	ldrh	r2, [r7, #22]
 800c102:	8abb      	ldrh	r3, [r7, #20]
 800c104:	429a      	cmp	r2, r3
 800c106:	d904      	bls.n	800c112 <tcp_eff_send_mss_netif+0x4e>
 800c108:	8afa      	ldrh	r2, [r7, #22]
 800c10a:	8abb      	ldrh	r3, [r7, #20]
 800c10c:	1ad3      	subs	r3, r2, r3
 800c10e:	b29b      	uxth	r3, r3
 800c110:	e000      	b.n	800c114 <tcp_eff_send_mss_netif+0x50>
 800c112:	2300      	movs	r3, #0
 800c114:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c116:	8a7a      	ldrh	r2, [r7, #18]
 800c118:	89fb      	ldrh	r3, [r7, #14]
 800c11a:	4293      	cmp	r3, r2
 800c11c:	bf28      	it	cs
 800c11e:	4613      	movcs	r3, r2
 800c120:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800c122:	89fb      	ldrh	r3, [r7, #14]
}
 800c124:	4618      	mov	r0, r3
 800c126:	3718      	adds	r7, #24
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	08015e88 	.word	0x08015e88
 800c130:	08016594 	.word	0x08016594
 800c134:	08015ecc 	.word	0x08015ecc

0800c138 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d119      	bne.n	800c180 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800c14c:	4b10      	ldr	r3, [pc, #64]	@ (800c190 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800c14e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800c152:	4910      	ldr	r1, [pc, #64]	@ (800c194 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800c154:	4810      	ldr	r0, [pc, #64]	@ (800c198 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800c156:	f008 fa2d 	bl	80145b4 <iprintf>

  while (pcb != NULL) {
 800c15a:	e011      	b.n	800c180 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	429a      	cmp	r2, r3
 800c166:	d108      	bne.n	800c17a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	68db      	ldr	r3, [r3, #12]
 800c16c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c16e:	68f8      	ldr	r0, [r7, #12]
 800c170:	f7fe ffc4 	bl	800b0fc <tcp_abort>
      pcb = next;
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	60fb      	str	r3, [r7, #12]
 800c178:	e002      	b.n	800c180 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d1ea      	bne.n	800c15c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800c186:	bf00      	nop
 800c188:	bf00      	nop
 800c18a:	3710      	adds	r7, #16
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	08015e88 	.word	0x08015e88
 800c194:	080165bc 	.word	0x080165bc
 800c198:	08015ecc 	.word	0x08015ecc

0800c19c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b084      	sub	sp, #16
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d02a      	beq.n	800c202 <tcp_netif_ip_addr_changed+0x66>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d026      	beq.n	800c202 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c1b4:	4b15      	ldr	r3, [pc, #84]	@ (800c20c <tcp_netif_ip_addr_changed+0x70>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f7ff ffbc 	bl	800c138 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c1c0:	4b13      	ldr	r3, [pc, #76]	@ (800c210 <tcp_netif_ip_addr_changed+0x74>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f7ff ffb6 	bl	800c138 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d017      	beq.n	800c202 <tcp_netif_ip_addr_changed+0x66>
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d013      	beq.n	800c202 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c1da:	4b0e      	ldr	r3, [pc, #56]	@ (800c214 <tcp_netif_ip_addr_changed+0x78>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	60fb      	str	r3, [r7, #12]
 800c1e0:	e00c      	b.n	800c1fc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681a      	ldr	r2, [r3, #0]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d103      	bne.n	800c1f6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	681a      	ldr	r2, [r3, #0]
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	68db      	ldr	r3, [r3, #12]
 800c1fa:	60fb      	str	r3, [r7, #12]
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d1ef      	bne.n	800c1e2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c202:	bf00      	nop
 800c204:	3710      	adds	r7, #16
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	2000dfec 	.word	0x2000dfec
 800c210:	2000dfe4 	.word	0x2000dfe4
 800c214:	2000dfe8 	.word	0x2000dfe8

0800c218 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c224:	2b00      	cmp	r3, #0
 800c226:	d007      	beq.n	800c238 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7ff fc3d 	bl	800baac <tcp_segs_free>
    pcb->ooseq = NULL;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2200      	movs	r2, #0
 800c236:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c238:	bf00      	nop
 800c23a:	3708      	adds	r7, #8
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c240:	b590      	push	{r4, r7, lr}
 800c242:	b08d      	sub	sp, #52	@ 0x34
 800c244:	af04      	add	r7, sp, #16
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d105      	bne.n	800c25c <tcp_input+0x1c>
 800c250:	4b9b      	ldr	r3, [pc, #620]	@ (800c4c0 <tcp_input+0x280>)
 800c252:	2283      	movs	r2, #131	@ 0x83
 800c254:	499b      	ldr	r1, [pc, #620]	@ (800c4c4 <tcp_input+0x284>)
 800c256:	489c      	ldr	r0, [pc, #624]	@ (800c4c8 <tcp_input+0x288>)
 800c258:	f008 f9ac 	bl	80145b4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	4a9a      	ldr	r2, [pc, #616]	@ (800c4cc <tcp_input+0x28c>)
 800c262:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	895b      	ldrh	r3, [r3, #10]
 800c268:	2b13      	cmp	r3, #19
 800c26a:	f240 83d1 	bls.w	800ca10 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c26e:	4b98      	ldr	r3, [pc, #608]	@ (800c4d0 <tcp_input+0x290>)
 800c270:	695b      	ldr	r3, [r3, #20]
 800c272:	4a97      	ldr	r2, [pc, #604]	@ (800c4d0 <tcp_input+0x290>)
 800c274:	6812      	ldr	r2, [r2, #0]
 800c276:	4611      	mov	r1, r2
 800c278:	4618      	mov	r0, r3
 800c27a:	f005 fa7d 	bl	8011778 <ip4_addr_isbroadcast_u32>
 800c27e:	4603      	mov	r3, r0
 800c280:	2b00      	cmp	r3, #0
 800c282:	f040 83c7 	bne.w	800ca14 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c286:	4b92      	ldr	r3, [pc, #584]	@ (800c4d0 <tcp_input+0x290>)
 800c288:	695b      	ldr	r3, [r3, #20]
 800c28a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c28e:	2be0      	cmp	r3, #224	@ 0xe0
 800c290:	f000 83c0 	beq.w	800ca14 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c294:	4b8d      	ldr	r3, [pc, #564]	@ (800c4cc <tcp_input+0x28c>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	899b      	ldrh	r3, [r3, #12]
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	4618      	mov	r0, r3
 800c29e:	f7fc fd75 	bl	8008d8c <lwip_htons>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	0b1b      	lsrs	r3, r3, #12
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	009b      	lsls	r3, r3, #2
 800c2ac:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c2ae:	7cbb      	ldrb	r3, [r7, #18]
 800c2b0:	2b13      	cmp	r3, #19
 800c2b2:	f240 83b1 	bls.w	800ca18 <tcp_input+0x7d8>
 800c2b6:	7cbb      	ldrb	r3, [r7, #18]
 800c2b8:	b29a      	uxth	r2, r3
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	891b      	ldrh	r3, [r3, #8]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	f200 83aa 	bhi.w	800ca18 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c2c4:	7cbb      	ldrb	r3, [r7, #18]
 800c2c6:	b29b      	uxth	r3, r3
 800c2c8:	3b14      	subs	r3, #20
 800c2ca:	b29a      	uxth	r2, r3
 800c2cc:	4b81      	ldr	r3, [pc, #516]	@ (800c4d4 <tcp_input+0x294>)
 800c2ce:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c2d0:	4b81      	ldr	r3, [pc, #516]	@ (800c4d8 <tcp_input+0x298>)
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	895a      	ldrh	r2, [r3, #10]
 800c2da:	7cbb      	ldrb	r3, [r7, #18]
 800c2dc:	b29b      	uxth	r3, r3
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d309      	bcc.n	800c2f6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c2e2:	4b7c      	ldr	r3, [pc, #496]	@ (800c4d4 <tcp_input+0x294>)
 800c2e4:	881a      	ldrh	r2, [r3, #0]
 800c2e6:	4b7d      	ldr	r3, [pc, #500]	@ (800c4dc <tcp_input+0x29c>)
 800c2e8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c2ea:	7cbb      	ldrb	r3, [r7, #18]
 800c2ec:	4619      	mov	r1, r3
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f7fe f8ea 	bl	800a4c8 <pbuf_remove_header>
 800c2f4:	e04e      	b.n	800c394 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d105      	bne.n	800c30a <tcp_input+0xca>
 800c2fe:	4b70      	ldr	r3, [pc, #448]	@ (800c4c0 <tcp_input+0x280>)
 800c300:	22c2      	movs	r2, #194	@ 0xc2
 800c302:	4977      	ldr	r1, [pc, #476]	@ (800c4e0 <tcp_input+0x2a0>)
 800c304:	4870      	ldr	r0, [pc, #448]	@ (800c4c8 <tcp_input+0x288>)
 800c306:	f008 f955 	bl	80145b4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c30a:	2114      	movs	r1, #20
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f7fe f8db 	bl	800a4c8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	895a      	ldrh	r2, [r3, #10]
 800c316:	4b71      	ldr	r3, [pc, #452]	@ (800c4dc <tcp_input+0x29c>)
 800c318:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c31a:	4b6e      	ldr	r3, [pc, #440]	@ (800c4d4 <tcp_input+0x294>)
 800c31c:	881a      	ldrh	r2, [r3, #0]
 800c31e:	4b6f      	ldr	r3, [pc, #444]	@ (800c4dc <tcp_input+0x29c>)
 800c320:	881b      	ldrh	r3, [r3, #0]
 800c322:	1ad3      	subs	r3, r2, r3
 800c324:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c326:	4b6d      	ldr	r3, [pc, #436]	@ (800c4dc <tcp_input+0x29c>)
 800c328:	881b      	ldrh	r3, [r3, #0]
 800c32a:	4619      	mov	r1, r3
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f7fe f8cb 	bl	800a4c8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	895b      	ldrh	r3, [r3, #10]
 800c338:	8a3a      	ldrh	r2, [r7, #16]
 800c33a:	429a      	cmp	r2, r3
 800c33c:	f200 836e 	bhi.w	800ca1c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	685b      	ldr	r3, [r3, #4]
 800c346:	4a64      	ldr	r2, [pc, #400]	@ (800c4d8 <tcp_input+0x298>)
 800c348:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	8a3a      	ldrh	r2, [r7, #16]
 800c350:	4611      	mov	r1, r2
 800c352:	4618      	mov	r0, r3
 800c354:	f7fe f8b8 	bl	800a4c8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	891a      	ldrh	r2, [r3, #8]
 800c35c:	8a3b      	ldrh	r3, [r7, #16]
 800c35e:	1ad3      	subs	r3, r2, r3
 800c360:	b29a      	uxth	r2, r3
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	895b      	ldrh	r3, [r3, #10]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d005      	beq.n	800c37a <tcp_input+0x13a>
 800c36e:	4b54      	ldr	r3, [pc, #336]	@ (800c4c0 <tcp_input+0x280>)
 800c370:	22df      	movs	r2, #223	@ 0xdf
 800c372:	495c      	ldr	r1, [pc, #368]	@ (800c4e4 <tcp_input+0x2a4>)
 800c374:	4854      	ldr	r0, [pc, #336]	@ (800c4c8 <tcp_input+0x288>)
 800c376:	f008 f91d 	bl	80145b4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	891a      	ldrh	r2, [r3, #8]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	891b      	ldrh	r3, [r3, #8]
 800c384:	429a      	cmp	r2, r3
 800c386:	d005      	beq.n	800c394 <tcp_input+0x154>
 800c388:	4b4d      	ldr	r3, [pc, #308]	@ (800c4c0 <tcp_input+0x280>)
 800c38a:	22e0      	movs	r2, #224	@ 0xe0
 800c38c:	4956      	ldr	r1, [pc, #344]	@ (800c4e8 <tcp_input+0x2a8>)
 800c38e:	484e      	ldr	r0, [pc, #312]	@ (800c4c8 <tcp_input+0x288>)
 800c390:	f008 f910 	bl	80145b4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c394:	4b4d      	ldr	r3, [pc, #308]	@ (800c4cc <tcp_input+0x28c>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	881b      	ldrh	r3, [r3, #0]
 800c39a:	b29b      	uxth	r3, r3
 800c39c:	4a4b      	ldr	r2, [pc, #300]	@ (800c4cc <tcp_input+0x28c>)
 800c39e:	6814      	ldr	r4, [r2, #0]
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7fc fcf3 	bl	8008d8c <lwip_htons>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c3aa:	4b48      	ldr	r3, [pc, #288]	@ (800c4cc <tcp_input+0x28c>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	885b      	ldrh	r3, [r3, #2]
 800c3b0:	b29b      	uxth	r3, r3
 800c3b2:	4a46      	ldr	r2, [pc, #280]	@ (800c4cc <tcp_input+0x28c>)
 800c3b4:	6814      	ldr	r4, [r2, #0]
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7fc fce8 	bl	8008d8c <lwip_htons>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c3c0:	4b42      	ldr	r3, [pc, #264]	@ (800c4cc <tcp_input+0x28c>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	4a41      	ldr	r2, [pc, #260]	@ (800c4cc <tcp_input+0x28c>)
 800c3c8:	6814      	ldr	r4, [r2, #0]
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f7fc fcf3 	bl	8008db6 <lwip_htonl>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	6063      	str	r3, [r4, #4]
 800c3d4:	6863      	ldr	r3, [r4, #4]
 800c3d6:	4a45      	ldr	r2, [pc, #276]	@ (800c4ec <tcp_input+0x2ac>)
 800c3d8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c3da:	4b3c      	ldr	r3, [pc, #240]	@ (800c4cc <tcp_input+0x28c>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	689b      	ldr	r3, [r3, #8]
 800c3e0:	4a3a      	ldr	r2, [pc, #232]	@ (800c4cc <tcp_input+0x28c>)
 800c3e2:	6814      	ldr	r4, [r2, #0]
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7fc fce6 	bl	8008db6 <lwip_htonl>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	60a3      	str	r3, [r4, #8]
 800c3ee:	68a3      	ldr	r3, [r4, #8]
 800c3f0:	4a3f      	ldr	r2, [pc, #252]	@ (800c4f0 <tcp_input+0x2b0>)
 800c3f2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c3f4:	4b35      	ldr	r3, [pc, #212]	@ (800c4cc <tcp_input+0x28c>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	89db      	ldrh	r3, [r3, #14]
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	4a33      	ldr	r2, [pc, #204]	@ (800c4cc <tcp_input+0x28c>)
 800c3fe:	6814      	ldr	r4, [r2, #0]
 800c400:	4618      	mov	r0, r3
 800c402:	f7fc fcc3 	bl	8008d8c <lwip_htons>
 800c406:	4603      	mov	r3, r0
 800c408:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c40a:	4b30      	ldr	r3, [pc, #192]	@ (800c4cc <tcp_input+0x28c>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	899b      	ldrh	r3, [r3, #12]
 800c410:	b29b      	uxth	r3, r3
 800c412:	4618      	mov	r0, r3
 800c414:	f7fc fcba 	bl	8008d8c <lwip_htons>
 800c418:	4603      	mov	r3, r0
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c420:	b2da      	uxtb	r2, r3
 800c422:	4b34      	ldr	r3, [pc, #208]	@ (800c4f4 <tcp_input+0x2b4>)
 800c424:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	891a      	ldrh	r2, [r3, #8]
 800c42a:	4b33      	ldr	r3, [pc, #204]	@ (800c4f8 <tcp_input+0x2b8>)
 800c42c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c42e:	4b31      	ldr	r3, [pc, #196]	@ (800c4f4 <tcp_input+0x2b4>)
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	f003 0303 	and.w	r3, r3, #3
 800c436:	2b00      	cmp	r3, #0
 800c438:	d00c      	beq.n	800c454 <tcp_input+0x214>
    tcplen++;
 800c43a:	4b2f      	ldr	r3, [pc, #188]	@ (800c4f8 <tcp_input+0x2b8>)
 800c43c:	881b      	ldrh	r3, [r3, #0]
 800c43e:	3301      	adds	r3, #1
 800c440:	b29a      	uxth	r2, r3
 800c442:	4b2d      	ldr	r3, [pc, #180]	@ (800c4f8 <tcp_input+0x2b8>)
 800c444:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	891a      	ldrh	r2, [r3, #8]
 800c44a:	4b2b      	ldr	r3, [pc, #172]	@ (800c4f8 <tcp_input+0x2b8>)
 800c44c:	881b      	ldrh	r3, [r3, #0]
 800c44e:	429a      	cmp	r2, r3
 800c450:	f200 82e6 	bhi.w	800ca20 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c454:	2300      	movs	r3, #0
 800c456:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c458:	4b28      	ldr	r3, [pc, #160]	@ (800c4fc <tcp_input+0x2bc>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	61fb      	str	r3, [r7, #28]
 800c45e:	e09d      	b.n	800c59c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c460:	69fb      	ldr	r3, [r7, #28]
 800c462:	7d1b      	ldrb	r3, [r3, #20]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d105      	bne.n	800c474 <tcp_input+0x234>
 800c468:	4b15      	ldr	r3, [pc, #84]	@ (800c4c0 <tcp_input+0x280>)
 800c46a:	22fb      	movs	r2, #251	@ 0xfb
 800c46c:	4924      	ldr	r1, [pc, #144]	@ (800c500 <tcp_input+0x2c0>)
 800c46e:	4816      	ldr	r0, [pc, #88]	@ (800c4c8 <tcp_input+0x288>)
 800c470:	f008 f8a0 	bl	80145b4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c474:	69fb      	ldr	r3, [r7, #28]
 800c476:	7d1b      	ldrb	r3, [r3, #20]
 800c478:	2b0a      	cmp	r3, #10
 800c47a:	d105      	bne.n	800c488 <tcp_input+0x248>
 800c47c:	4b10      	ldr	r3, [pc, #64]	@ (800c4c0 <tcp_input+0x280>)
 800c47e:	22fc      	movs	r2, #252	@ 0xfc
 800c480:	4920      	ldr	r1, [pc, #128]	@ (800c504 <tcp_input+0x2c4>)
 800c482:	4811      	ldr	r0, [pc, #68]	@ (800c4c8 <tcp_input+0x288>)
 800c484:	f008 f896 	bl	80145b4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c488:	69fb      	ldr	r3, [r7, #28]
 800c48a:	7d1b      	ldrb	r3, [r3, #20]
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	d105      	bne.n	800c49c <tcp_input+0x25c>
 800c490:	4b0b      	ldr	r3, [pc, #44]	@ (800c4c0 <tcp_input+0x280>)
 800c492:	22fd      	movs	r2, #253	@ 0xfd
 800c494:	491c      	ldr	r1, [pc, #112]	@ (800c508 <tcp_input+0x2c8>)
 800c496:	480c      	ldr	r0, [pc, #48]	@ (800c4c8 <tcp_input+0x288>)
 800c498:	f008 f88c 	bl	80145b4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c49c:	69fb      	ldr	r3, [r7, #28]
 800c49e:	7a1b      	ldrb	r3, [r3, #8]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d033      	beq.n	800c50c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c4a4:	69fb      	ldr	r3, [r7, #28]
 800c4a6:	7a1a      	ldrb	r2, [r3, #8]
 800c4a8:	4b09      	ldr	r3, [pc, #36]	@ (800c4d0 <tcp_input+0x290>)
 800c4aa:	685b      	ldr	r3, [r3, #4]
 800c4ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d029      	beq.n	800c50c <tcp_input+0x2cc>
      prev = pcb;
 800c4b8:	69fb      	ldr	r3, [r7, #28]
 800c4ba:	61bb      	str	r3, [r7, #24]
      continue;
 800c4bc:	e06b      	b.n	800c596 <tcp_input+0x356>
 800c4be:	bf00      	nop
 800c4c0:	080165f0 	.word	0x080165f0
 800c4c4:	08016624 	.word	0x08016624
 800c4c8:	0801663c 	.word	0x0801663c
 800c4cc:	2000e008 	.word	0x2000e008
 800c4d0:	20009b54 	.word	0x20009b54
 800c4d4:	2000e00c 	.word	0x2000e00c
 800c4d8:	2000e010 	.word	0x2000e010
 800c4dc:	2000e00e 	.word	0x2000e00e
 800c4e0:	08016664 	.word	0x08016664
 800c4e4:	08016674 	.word	0x08016674
 800c4e8:	08016680 	.word	0x08016680
 800c4ec:	2000e018 	.word	0x2000e018
 800c4f0:	2000e01c 	.word	0x2000e01c
 800c4f4:	2000e024 	.word	0x2000e024
 800c4f8:	2000e022 	.word	0x2000e022
 800c4fc:	2000dfec 	.word	0x2000dfec
 800c500:	080166a0 	.word	0x080166a0
 800c504:	080166c8 	.word	0x080166c8
 800c508:	080166f4 	.word	0x080166f4
    }

    if (pcb->remote_port == tcphdr->src &&
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	8b1a      	ldrh	r2, [r3, #24]
 800c510:	4b72      	ldr	r3, [pc, #456]	@ (800c6dc <tcp_input+0x49c>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	881b      	ldrh	r3, [r3, #0]
 800c516:	b29b      	uxth	r3, r3
 800c518:	429a      	cmp	r2, r3
 800c51a:	d13a      	bne.n	800c592 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800c51c:	69fb      	ldr	r3, [r7, #28]
 800c51e:	8ada      	ldrh	r2, [r3, #22]
 800c520:	4b6e      	ldr	r3, [pc, #440]	@ (800c6dc <tcp_input+0x49c>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	885b      	ldrh	r3, [r3, #2]
 800c526:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c528:	429a      	cmp	r2, r3
 800c52a:	d132      	bne.n	800c592 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c52c:	69fb      	ldr	r3, [r7, #28]
 800c52e:	685a      	ldr	r2, [r3, #4]
 800c530:	4b6b      	ldr	r3, [pc, #428]	@ (800c6e0 <tcp_input+0x4a0>)
 800c532:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c534:	429a      	cmp	r2, r3
 800c536:	d12c      	bne.n	800c592 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c538:	69fb      	ldr	r3, [r7, #28]
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	4b68      	ldr	r3, [pc, #416]	@ (800c6e0 <tcp_input+0x4a0>)
 800c53e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c540:	429a      	cmp	r2, r3
 800c542:	d126      	bne.n	800c592 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c544:	69fb      	ldr	r3, [r7, #28]
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	69fa      	ldr	r2, [r7, #28]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d106      	bne.n	800c55c <tcp_input+0x31c>
 800c54e:	4b65      	ldr	r3, [pc, #404]	@ (800c6e4 <tcp_input+0x4a4>)
 800c550:	f240 120d 	movw	r2, #269	@ 0x10d
 800c554:	4964      	ldr	r1, [pc, #400]	@ (800c6e8 <tcp_input+0x4a8>)
 800c556:	4865      	ldr	r0, [pc, #404]	@ (800c6ec <tcp_input+0x4ac>)
 800c558:	f008 f82c 	bl	80145b4 <iprintf>
      if (prev != NULL) {
 800c55c:	69bb      	ldr	r3, [r7, #24]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d00a      	beq.n	800c578 <tcp_input+0x338>
        prev->next = pcb->next;
 800c562:	69fb      	ldr	r3, [r7, #28]
 800c564:	68da      	ldr	r2, [r3, #12]
 800c566:	69bb      	ldr	r3, [r7, #24]
 800c568:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c56a:	4b61      	ldr	r3, [pc, #388]	@ (800c6f0 <tcp_input+0x4b0>)
 800c56c:	681a      	ldr	r2, [r3, #0]
 800c56e:	69fb      	ldr	r3, [r7, #28]
 800c570:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c572:	4a5f      	ldr	r2, [pc, #380]	@ (800c6f0 <tcp_input+0x4b0>)
 800c574:	69fb      	ldr	r3, [r7, #28]
 800c576:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c578:	69fb      	ldr	r3, [r7, #28]
 800c57a:	68db      	ldr	r3, [r3, #12]
 800c57c:	69fa      	ldr	r2, [r7, #28]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d111      	bne.n	800c5a6 <tcp_input+0x366>
 800c582:	4b58      	ldr	r3, [pc, #352]	@ (800c6e4 <tcp_input+0x4a4>)
 800c584:	f240 1215 	movw	r2, #277	@ 0x115
 800c588:	495a      	ldr	r1, [pc, #360]	@ (800c6f4 <tcp_input+0x4b4>)
 800c58a:	4858      	ldr	r0, [pc, #352]	@ (800c6ec <tcp_input+0x4ac>)
 800c58c:	f008 f812 	bl	80145b4 <iprintf>
      break;
 800c590:	e009      	b.n	800c5a6 <tcp_input+0x366>
    }
    prev = pcb;
 800c592:	69fb      	ldr	r3, [r7, #28]
 800c594:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c596:	69fb      	ldr	r3, [r7, #28]
 800c598:	68db      	ldr	r3, [r3, #12]
 800c59a:	61fb      	str	r3, [r7, #28]
 800c59c:	69fb      	ldr	r3, [r7, #28]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	f47f af5e 	bne.w	800c460 <tcp_input+0x220>
 800c5a4:	e000      	b.n	800c5a8 <tcp_input+0x368>
      break;
 800c5a6:	bf00      	nop
  }

  if (pcb == NULL) {
 800c5a8:	69fb      	ldr	r3, [r7, #28]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	f040 80aa 	bne.w	800c704 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c5b0:	4b51      	ldr	r3, [pc, #324]	@ (800c6f8 <tcp_input+0x4b8>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	61fb      	str	r3, [r7, #28]
 800c5b6:	e03f      	b.n	800c638 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	7d1b      	ldrb	r3, [r3, #20]
 800c5bc:	2b0a      	cmp	r3, #10
 800c5be:	d006      	beq.n	800c5ce <tcp_input+0x38e>
 800c5c0:	4b48      	ldr	r3, [pc, #288]	@ (800c6e4 <tcp_input+0x4a4>)
 800c5c2:	f240 121f 	movw	r2, #287	@ 0x11f
 800c5c6:	494d      	ldr	r1, [pc, #308]	@ (800c6fc <tcp_input+0x4bc>)
 800c5c8:	4848      	ldr	r0, [pc, #288]	@ (800c6ec <tcp_input+0x4ac>)
 800c5ca:	f007 fff3 	bl	80145b4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c5ce:	69fb      	ldr	r3, [r7, #28]
 800c5d0:	7a1b      	ldrb	r3, [r3, #8]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d009      	beq.n	800c5ea <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c5d6:	69fb      	ldr	r3, [r7, #28]
 800c5d8:	7a1a      	ldrb	r2, [r3, #8]
 800c5da:	4b41      	ldr	r3, [pc, #260]	@ (800c6e0 <tcp_input+0x4a0>)
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d122      	bne.n	800c630 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800c5ea:	69fb      	ldr	r3, [r7, #28]
 800c5ec:	8b1a      	ldrh	r2, [r3, #24]
 800c5ee:	4b3b      	ldr	r3, [pc, #236]	@ (800c6dc <tcp_input+0x49c>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	881b      	ldrh	r3, [r3, #0]
 800c5f4:	b29b      	uxth	r3, r3
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d11b      	bne.n	800c632 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800c5fa:	69fb      	ldr	r3, [r7, #28]
 800c5fc:	8ada      	ldrh	r2, [r3, #22]
 800c5fe:	4b37      	ldr	r3, [pc, #220]	@ (800c6dc <tcp_input+0x49c>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	885b      	ldrh	r3, [r3, #2]
 800c604:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c606:	429a      	cmp	r2, r3
 800c608:	d113      	bne.n	800c632 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c60a:	69fb      	ldr	r3, [r7, #28]
 800c60c:	685a      	ldr	r2, [r3, #4]
 800c60e:	4b34      	ldr	r3, [pc, #208]	@ (800c6e0 <tcp_input+0x4a0>)
 800c610:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c612:	429a      	cmp	r2, r3
 800c614:	d10d      	bne.n	800c632 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c616:	69fb      	ldr	r3, [r7, #28]
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	4b31      	ldr	r3, [pc, #196]	@ (800c6e0 <tcp_input+0x4a0>)
 800c61c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c61e:	429a      	cmp	r2, r3
 800c620:	d107      	bne.n	800c632 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800c622:	69f8      	ldr	r0, [r7, #28]
 800c624:	f000 fb56 	bl	800ccd4 <tcp_timewait_input>
        }
        pbuf_free(p);
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f7fd ffd3 	bl	800a5d4 <pbuf_free>
        return;
 800c62e:	e1fd      	b.n	800ca2c <tcp_input+0x7ec>
        continue;
 800c630:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c632:	69fb      	ldr	r3, [r7, #28]
 800c634:	68db      	ldr	r3, [r3, #12]
 800c636:	61fb      	str	r3, [r7, #28]
 800c638:	69fb      	ldr	r3, [r7, #28]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d1bc      	bne.n	800c5b8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c63e:	2300      	movs	r3, #0
 800c640:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c642:	4b2f      	ldr	r3, [pc, #188]	@ (800c700 <tcp_input+0x4c0>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	617b      	str	r3, [r7, #20]
 800c648:	e02a      	b.n	800c6a0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	7a1b      	ldrb	r3, [r3, #8]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d00c      	beq.n	800c66c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	7a1a      	ldrb	r2, [r3, #8]
 800c656:	4b22      	ldr	r3, [pc, #136]	@ (800c6e0 <tcp_input+0x4a0>)
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c65e:	3301      	adds	r3, #1
 800c660:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c662:	429a      	cmp	r2, r3
 800c664:	d002      	beq.n	800c66c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	61bb      	str	r3, [r7, #24]
        continue;
 800c66a:	e016      	b.n	800c69a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	8ada      	ldrh	r2, [r3, #22]
 800c670:	4b1a      	ldr	r3, [pc, #104]	@ (800c6dc <tcp_input+0x49c>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	885b      	ldrh	r3, [r3, #2]
 800c676:	b29b      	uxth	r3, r3
 800c678:	429a      	cmp	r2, r3
 800c67a:	d10c      	bne.n	800c696 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	681a      	ldr	r2, [r3, #0]
 800c680:	4b17      	ldr	r3, [pc, #92]	@ (800c6e0 <tcp_input+0x4a0>)
 800c682:	695b      	ldr	r3, [r3, #20]
 800c684:	429a      	cmp	r2, r3
 800c686:	d00f      	beq.n	800c6a8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d00d      	beq.n	800c6aa <tcp_input+0x46a>
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d009      	beq.n	800c6aa <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	68db      	ldr	r3, [r3, #12]
 800c69e:	617b      	str	r3, [r7, #20]
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d1d1      	bne.n	800c64a <tcp_input+0x40a>
 800c6a6:	e000      	b.n	800c6aa <tcp_input+0x46a>
            break;
 800c6a8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d029      	beq.n	800c704 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c6b0:	69bb      	ldr	r3, [r7, #24]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d00a      	beq.n	800c6cc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	68da      	ldr	r2, [r3, #12]
 800c6ba:	69bb      	ldr	r3, [r7, #24]
 800c6bc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c6be:	4b10      	ldr	r3, [pc, #64]	@ (800c700 <tcp_input+0x4c0>)
 800c6c0:	681a      	ldr	r2, [r3, #0]
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c6c6:	4a0e      	ldr	r2, [pc, #56]	@ (800c700 <tcp_input+0x4c0>)
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800c6cc:	6978      	ldr	r0, [r7, #20]
 800c6ce:	f000 fa03 	bl	800cad8 <tcp_listen_input>
      }
      pbuf_free(p);
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f7fd ff7e 	bl	800a5d4 <pbuf_free>
      return;
 800c6d8:	e1a8      	b.n	800ca2c <tcp_input+0x7ec>
 800c6da:	bf00      	nop
 800c6dc:	2000e008 	.word	0x2000e008
 800c6e0:	20009b54 	.word	0x20009b54
 800c6e4:	080165f0 	.word	0x080165f0
 800c6e8:	0801671c 	.word	0x0801671c
 800c6ec:	0801663c 	.word	0x0801663c
 800c6f0:	2000dfec 	.word	0x2000dfec
 800c6f4:	08016748 	.word	0x08016748
 800c6f8:	2000dff0 	.word	0x2000dff0
 800c6fc:	08016774 	.word	0x08016774
 800c700:	2000dfe8 	.word	0x2000dfe8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	2b00      	cmp	r3, #0
 800c708:	f000 8158 	beq.w	800c9bc <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c70c:	4b95      	ldr	r3, [pc, #596]	@ (800c964 <tcp_input+0x724>)
 800c70e:	2200      	movs	r2, #0
 800c710:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	891a      	ldrh	r2, [r3, #8]
 800c716:	4b93      	ldr	r3, [pc, #588]	@ (800c964 <tcp_input+0x724>)
 800c718:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800c71a:	4a92      	ldr	r2, [pc, #584]	@ (800c964 <tcp_input+0x724>)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800c720:	4b91      	ldr	r3, [pc, #580]	@ (800c968 <tcp_input+0x728>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	4a8f      	ldr	r2, [pc, #572]	@ (800c964 <tcp_input+0x724>)
 800c726:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800c728:	4b90      	ldr	r3, [pc, #576]	@ (800c96c <tcp_input+0x72c>)
 800c72a:	2200      	movs	r2, #0
 800c72c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800c72e:	4b90      	ldr	r3, [pc, #576]	@ (800c970 <tcp_input+0x730>)
 800c730:	2200      	movs	r2, #0
 800c732:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800c734:	4b8f      	ldr	r3, [pc, #572]	@ (800c974 <tcp_input+0x734>)
 800c736:	2200      	movs	r2, #0
 800c738:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800c73a:	4b8f      	ldr	r3, [pc, #572]	@ (800c978 <tcp_input+0x738>)
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	f003 0308 	and.w	r3, r3, #8
 800c742:	2b00      	cmp	r3, #0
 800c744:	d006      	beq.n	800c754 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	7b5b      	ldrb	r3, [r3, #13]
 800c74a:	f043 0301 	orr.w	r3, r3, #1
 800c74e:	b2da      	uxtb	r2, r3
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c754:	69fb      	ldr	r3, [r7, #28]
 800c756:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d017      	beq.n	800c78c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c75c:	69f8      	ldr	r0, [r7, #28]
 800c75e:	f7ff f929 	bl	800b9b4 <tcp_process_refused_data>
 800c762:	4603      	mov	r3, r0
 800c764:	f113 0f0d 	cmn.w	r3, #13
 800c768:	d007      	beq.n	800c77a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c76a:	69fb      	ldr	r3, [r7, #28]
 800c76c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d00c      	beq.n	800c78c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c772:	4b82      	ldr	r3, [pc, #520]	@ (800c97c <tcp_input+0x73c>)
 800c774:	881b      	ldrh	r3, [r3, #0]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d008      	beq.n	800c78c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800c77a:	69fb      	ldr	r3, [r7, #28]
 800c77c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c77e:	2b00      	cmp	r3, #0
 800c780:	f040 80e3 	bne.w	800c94a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800c784:	69f8      	ldr	r0, [r7, #28]
 800c786:	f003 f9a7 	bl	800fad8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800c78a:	e0de      	b.n	800c94a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800c78c:	4a7c      	ldr	r2, [pc, #496]	@ (800c980 <tcp_input+0x740>)
 800c78e:	69fb      	ldr	r3, [r7, #28]
 800c790:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c792:	69f8      	ldr	r0, [r7, #28]
 800c794:	f000 fb18 	bl	800cdc8 <tcp_process>
 800c798:	4603      	mov	r3, r0
 800c79a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c79c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c7a0:	f113 0f0d 	cmn.w	r3, #13
 800c7a4:	f000 80d3 	beq.w	800c94e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800c7a8:	4b71      	ldr	r3, [pc, #452]	@ (800c970 <tcp_input+0x730>)
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	f003 0308 	and.w	r3, r3, #8
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d015      	beq.n	800c7e0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c7b4:	69fb      	ldr	r3, [r7, #28]
 800c7b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d008      	beq.n	800c7d0 <tcp_input+0x590>
 800c7be:	69fb      	ldr	r3, [r7, #28]
 800c7c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7c4:	69fa      	ldr	r2, [r7, #28]
 800c7c6:	6912      	ldr	r2, [r2, #16]
 800c7c8:	f06f 010d 	mvn.w	r1, #13
 800c7cc:	4610      	mov	r0, r2
 800c7ce:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c7d0:	69f9      	ldr	r1, [r7, #28]
 800c7d2:	486c      	ldr	r0, [pc, #432]	@ (800c984 <tcp_input+0x744>)
 800c7d4:	f7ff fbbc 	bl	800bf50 <tcp_pcb_remove>
        tcp_free(pcb);
 800c7d8:	69f8      	ldr	r0, [r7, #28]
 800c7da:	f7fe f9a7 	bl	800ab2c <tcp_free>
 800c7de:	e0da      	b.n	800c996 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800c7e4:	4b63      	ldr	r3, [pc, #396]	@ (800c974 <tcp_input+0x734>)
 800c7e6:	881b      	ldrh	r3, [r3, #0]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d01d      	beq.n	800c828 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800c7ec:	4b61      	ldr	r3, [pc, #388]	@ (800c974 <tcp_input+0x734>)
 800c7ee:	881b      	ldrh	r3, [r3, #0]
 800c7f0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c7f2:	69fb      	ldr	r3, [r7, #28]
 800c7f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d00a      	beq.n	800c812 <tcp_input+0x5d2>
 800c7fc:	69fb      	ldr	r3, [r7, #28]
 800c7fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c802:	69fa      	ldr	r2, [r7, #28]
 800c804:	6910      	ldr	r0, [r2, #16]
 800c806:	89fa      	ldrh	r2, [r7, #14]
 800c808:	69f9      	ldr	r1, [r7, #28]
 800c80a:	4798      	blx	r3
 800c80c:	4603      	mov	r3, r0
 800c80e:	74fb      	strb	r3, [r7, #19]
 800c810:	e001      	b.n	800c816 <tcp_input+0x5d6>
 800c812:	2300      	movs	r3, #0
 800c814:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c816:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c81a:	f113 0f0d 	cmn.w	r3, #13
 800c81e:	f000 8098 	beq.w	800c952 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800c822:	4b54      	ldr	r3, [pc, #336]	@ (800c974 <tcp_input+0x734>)
 800c824:	2200      	movs	r2, #0
 800c826:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800c828:	69f8      	ldr	r0, [r7, #28]
 800c82a:	f000 f915 	bl	800ca58 <tcp_input_delayed_close>
 800c82e:	4603      	mov	r3, r0
 800c830:	2b00      	cmp	r3, #0
 800c832:	f040 8090 	bne.w	800c956 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800c836:	4b4d      	ldr	r3, [pc, #308]	@ (800c96c <tcp_input+0x72c>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d041      	beq.n	800c8c2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c83e:	69fb      	ldr	r3, [r7, #28]
 800c840:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c842:	2b00      	cmp	r3, #0
 800c844:	d006      	beq.n	800c854 <tcp_input+0x614>
 800c846:	4b50      	ldr	r3, [pc, #320]	@ (800c988 <tcp_input+0x748>)
 800c848:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800c84c:	494f      	ldr	r1, [pc, #316]	@ (800c98c <tcp_input+0x74c>)
 800c84e:	4850      	ldr	r0, [pc, #320]	@ (800c990 <tcp_input+0x750>)
 800c850:	f007 feb0 	bl	80145b4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800c854:	69fb      	ldr	r3, [r7, #28]
 800c856:	8b5b      	ldrh	r3, [r3, #26]
 800c858:	f003 0310 	and.w	r3, r3, #16
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d008      	beq.n	800c872 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800c860:	4b42      	ldr	r3, [pc, #264]	@ (800c96c <tcp_input+0x72c>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4618      	mov	r0, r3
 800c866:	f7fd feb5 	bl	800a5d4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800c86a:	69f8      	ldr	r0, [r7, #28]
 800c86c:	f7fe fc46 	bl	800b0fc <tcp_abort>
            goto aborted;
 800c870:	e091      	b.n	800c996 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d00c      	beq.n	800c896 <tcp_input+0x656>
 800c87c:	69fb      	ldr	r3, [r7, #28]
 800c87e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800c882:	69fb      	ldr	r3, [r7, #28]
 800c884:	6918      	ldr	r0, [r3, #16]
 800c886:	4b39      	ldr	r3, [pc, #228]	@ (800c96c <tcp_input+0x72c>)
 800c888:	681a      	ldr	r2, [r3, #0]
 800c88a:	2300      	movs	r3, #0
 800c88c:	69f9      	ldr	r1, [r7, #28]
 800c88e:	47a0      	blx	r4
 800c890:	4603      	mov	r3, r0
 800c892:	74fb      	strb	r3, [r7, #19]
 800c894:	e008      	b.n	800c8a8 <tcp_input+0x668>
 800c896:	4b35      	ldr	r3, [pc, #212]	@ (800c96c <tcp_input+0x72c>)
 800c898:	681a      	ldr	r2, [r3, #0]
 800c89a:	2300      	movs	r3, #0
 800c89c:	69f9      	ldr	r1, [r7, #28]
 800c89e:	2000      	movs	r0, #0
 800c8a0:	f7ff f95e 	bl	800bb60 <tcp_recv_null>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800c8a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c8ac:	f113 0f0d 	cmn.w	r3, #13
 800c8b0:	d053      	beq.n	800c95a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800c8b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d003      	beq.n	800c8c2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800c8ba:	4b2c      	ldr	r3, [pc, #176]	@ (800c96c <tcp_input+0x72c>)
 800c8bc:	681a      	ldr	r2, [r3, #0]
 800c8be:	69fb      	ldr	r3, [r7, #28]
 800c8c0:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800c8c2:	4b2b      	ldr	r3, [pc, #172]	@ (800c970 <tcp_input+0x730>)
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	f003 0320 	and.w	r3, r3, #32
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d030      	beq.n	800c930 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800c8ce:	69fb      	ldr	r3, [r7, #28]
 800c8d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d009      	beq.n	800c8ea <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c8da:	7b5a      	ldrb	r2, [r3, #13]
 800c8dc:	69fb      	ldr	r3, [r7, #28]
 800c8de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c8e0:	f042 0220 	orr.w	r2, r2, #32
 800c8e4:	b2d2      	uxtb	r2, r2
 800c8e6:	735a      	strb	r2, [r3, #13]
 800c8e8:	e022      	b.n	800c930 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c8ea:	69fb      	ldr	r3, [r7, #28]
 800c8ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c8ee:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c8f2:	d005      	beq.n	800c900 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800c8f4:	69fb      	ldr	r3, [r7, #28]
 800c8f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	b29a      	uxth	r2, r3
 800c8fc:	69fb      	ldr	r3, [r7, #28]
 800c8fe:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800c900:	69fb      	ldr	r3, [r7, #28]
 800c902:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c906:	2b00      	cmp	r3, #0
 800c908:	d00b      	beq.n	800c922 <tcp_input+0x6e2>
 800c90a:	69fb      	ldr	r3, [r7, #28]
 800c90c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800c910:	69fb      	ldr	r3, [r7, #28]
 800c912:	6918      	ldr	r0, [r3, #16]
 800c914:	2300      	movs	r3, #0
 800c916:	2200      	movs	r2, #0
 800c918:	69f9      	ldr	r1, [r7, #28]
 800c91a:	47a0      	blx	r4
 800c91c:	4603      	mov	r3, r0
 800c91e:	74fb      	strb	r3, [r7, #19]
 800c920:	e001      	b.n	800c926 <tcp_input+0x6e6>
 800c922:	2300      	movs	r3, #0
 800c924:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c926:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c92a:	f113 0f0d 	cmn.w	r3, #13
 800c92e:	d016      	beq.n	800c95e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800c930:	4b13      	ldr	r3, [pc, #76]	@ (800c980 <tcp_input+0x740>)
 800c932:	2200      	movs	r2, #0
 800c934:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c936:	69f8      	ldr	r0, [r7, #28]
 800c938:	f000 f88e 	bl	800ca58 <tcp_input_delayed_close>
 800c93c:	4603      	mov	r3, r0
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d128      	bne.n	800c994 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800c942:	69f8      	ldr	r0, [r7, #28]
 800c944:	f002 fac2 	bl	800eecc <tcp_output>
 800c948:	e025      	b.n	800c996 <tcp_input+0x756>
        goto aborted;
 800c94a:	bf00      	nop
 800c94c:	e023      	b.n	800c996 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c94e:	bf00      	nop
 800c950:	e021      	b.n	800c996 <tcp_input+0x756>
              goto aborted;
 800c952:	bf00      	nop
 800c954:	e01f      	b.n	800c996 <tcp_input+0x756>
          goto aborted;
 800c956:	bf00      	nop
 800c958:	e01d      	b.n	800c996 <tcp_input+0x756>
            goto aborted;
 800c95a:	bf00      	nop
 800c95c:	e01b      	b.n	800c996 <tcp_input+0x756>
              goto aborted;
 800c95e:	bf00      	nop
 800c960:	e019      	b.n	800c996 <tcp_input+0x756>
 800c962:	bf00      	nop
 800c964:	2000dff8 	.word	0x2000dff8
 800c968:	2000e008 	.word	0x2000e008
 800c96c:	2000e028 	.word	0x2000e028
 800c970:	2000e025 	.word	0x2000e025
 800c974:	2000e020 	.word	0x2000e020
 800c978:	2000e024 	.word	0x2000e024
 800c97c:	2000e022 	.word	0x2000e022
 800c980:	2000e02c 	.word	0x2000e02c
 800c984:	2000dfec 	.word	0x2000dfec
 800c988:	080165f0 	.word	0x080165f0
 800c98c:	080167a4 	.word	0x080167a4
 800c990:	0801663c 	.word	0x0801663c
          goto aborted;
 800c994:	bf00      	nop
    tcp_input_pcb = NULL;
 800c996:	4b27      	ldr	r3, [pc, #156]	@ (800ca34 <tcp_input+0x7f4>)
 800c998:	2200      	movs	r2, #0
 800c99a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c99c:	4b26      	ldr	r3, [pc, #152]	@ (800ca38 <tcp_input+0x7f8>)
 800c99e:	2200      	movs	r2, #0
 800c9a0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800c9a2:	4b26      	ldr	r3, [pc, #152]	@ (800ca3c <tcp_input+0x7fc>)
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d03f      	beq.n	800ca2a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800c9aa:	4b24      	ldr	r3, [pc, #144]	@ (800ca3c <tcp_input+0x7fc>)
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7fd fe10 	bl	800a5d4 <pbuf_free>
      inseg.p = NULL;
 800c9b4:	4b21      	ldr	r3, [pc, #132]	@ (800ca3c <tcp_input+0x7fc>)
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c9ba:	e036      	b.n	800ca2a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c9bc:	4b20      	ldr	r3, [pc, #128]	@ (800ca40 <tcp_input+0x800>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	899b      	ldrh	r3, [r3, #12]
 800c9c2:	b29b      	uxth	r3, r3
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7fc f9e1 	bl	8008d8c <lwip_htons>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	b2db      	uxtb	r3, r3
 800c9ce:	f003 0304 	and.w	r3, r3, #4
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d118      	bne.n	800ca08 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c9d6:	4b1b      	ldr	r3, [pc, #108]	@ (800ca44 <tcp_input+0x804>)
 800c9d8:	6819      	ldr	r1, [r3, #0]
 800c9da:	4b1b      	ldr	r3, [pc, #108]	@ (800ca48 <tcp_input+0x808>)
 800c9dc:	881b      	ldrh	r3, [r3, #0]
 800c9de:	461a      	mov	r2, r3
 800c9e0:	4b1a      	ldr	r3, [pc, #104]	@ (800ca4c <tcp_input+0x80c>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c9e6:	4b16      	ldr	r3, [pc, #88]	@ (800ca40 <tcp_input+0x800>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c9ea:	885b      	ldrh	r3, [r3, #2]
 800c9ec:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c9ee:	4a14      	ldr	r2, [pc, #80]	@ (800ca40 <tcp_input+0x800>)
 800c9f0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c9f2:	8812      	ldrh	r2, [r2, #0]
 800c9f4:	b292      	uxth	r2, r2
 800c9f6:	9202      	str	r2, [sp, #8]
 800c9f8:	9301      	str	r3, [sp, #4]
 800c9fa:	4b15      	ldr	r3, [pc, #84]	@ (800ca50 <tcp_input+0x810>)
 800c9fc:	9300      	str	r3, [sp, #0]
 800c9fe:	4b15      	ldr	r3, [pc, #84]	@ (800ca54 <tcp_input+0x814>)
 800ca00:	4602      	mov	r2, r0
 800ca02:	2000      	movs	r0, #0
 800ca04:	f003 f816 	bl	800fa34 <tcp_rst>
    pbuf_free(p);
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f7fd fde3 	bl	800a5d4 <pbuf_free>
  return;
 800ca0e:	e00c      	b.n	800ca2a <tcp_input+0x7ea>
    goto dropped;
 800ca10:	bf00      	nop
 800ca12:	e006      	b.n	800ca22 <tcp_input+0x7e2>
    goto dropped;
 800ca14:	bf00      	nop
 800ca16:	e004      	b.n	800ca22 <tcp_input+0x7e2>
    goto dropped;
 800ca18:	bf00      	nop
 800ca1a:	e002      	b.n	800ca22 <tcp_input+0x7e2>
      goto dropped;
 800ca1c:	bf00      	nop
 800ca1e:	e000      	b.n	800ca22 <tcp_input+0x7e2>
      goto dropped;
 800ca20:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f7fd fdd6 	bl	800a5d4 <pbuf_free>
 800ca28:	e000      	b.n	800ca2c <tcp_input+0x7ec>
  return;
 800ca2a:	bf00      	nop
}
 800ca2c:	3724      	adds	r7, #36	@ 0x24
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd90      	pop	{r4, r7, pc}
 800ca32:	bf00      	nop
 800ca34:	2000e02c 	.word	0x2000e02c
 800ca38:	2000e028 	.word	0x2000e028
 800ca3c:	2000dff8 	.word	0x2000dff8
 800ca40:	2000e008 	.word	0x2000e008
 800ca44:	2000e01c 	.word	0x2000e01c
 800ca48:	2000e022 	.word	0x2000e022
 800ca4c:	2000e018 	.word	0x2000e018
 800ca50:	20009b64 	.word	0x20009b64
 800ca54:	20009b68 	.word	0x20009b68

0800ca58 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d106      	bne.n	800ca74 <tcp_input_delayed_close+0x1c>
 800ca66:	4b17      	ldr	r3, [pc, #92]	@ (800cac4 <tcp_input_delayed_close+0x6c>)
 800ca68:	f240 225a 	movw	r2, #602	@ 0x25a
 800ca6c:	4916      	ldr	r1, [pc, #88]	@ (800cac8 <tcp_input_delayed_close+0x70>)
 800ca6e:	4817      	ldr	r0, [pc, #92]	@ (800cacc <tcp_input_delayed_close+0x74>)
 800ca70:	f007 fda0 	bl	80145b4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ca74:	4b16      	ldr	r3, [pc, #88]	@ (800cad0 <tcp_input_delayed_close+0x78>)
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	f003 0310 	and.w	r3, r3, #16
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d01c      	beq.n	800caba <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	8b5b      	ldrh	r3, [r3, #26]
 800ca84:	f003 0310 	and.w	r3, r3, #16
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d10d      	bne.n	800caa8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d008      	beq.n	800caa8 <tcp_input_delayed_close+0x50>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	6912      	ldr	r2, [r2, #16]
 800caa0:	f06f 010e 	mvn.w	r1, #14
 800caa4:	4610      	mov	r0, r2
 800caa6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800caa8:	6879      	ldr	r1, [r7, #4]
 800caaa:	480a      	ldr	r0, [pc, #40]	@ (800cad4 <tcp_input_delayed_close+0x7c>)
 800caac:	f7ff fa50 	bl	800bf50 <tcp_pcb_remove>
    tcp_free(pcb);
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f7fe f83b 	bl	800ab2c <tcp_free>
    return 1;
 800cab6:	2301      	movs	r3, #1
 800cab8:	e000      	b.n	800cabc <tcp_input_delayed_close+0x64>
  }
  return 0;
 800caba:	2300      	movs	r3, #0
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3708      	adds	r7, #8
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}
 800cac4:	080165f0 	.word	0x080165f0
 800cac8:	080167c0 	.word	0x080167c0
 800cacc:	0801663c 	.word	0x0801663c
 800cad0:	2000e025 	.word	0x2000e025
 800cad4:	2000dfec 	.word	0x2000dfec

0800cad8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800cad8:	b590      	push	{r4, r7, lr}
 800cada:	b08b      	sub	sp, #44	@ 0x2c
 800cadc:	af04      	add	r7, sp, #16
 800cade:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800cae0:	4b6f      	ldr	r3, [pc, #444]	@ (800cca0 <tcp_listen_input+0x1c8>)
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	f003 0304 	and.w	r3, r3, #4
 800cae8:	2b00      	cmp	r3, #0
 800caea:	f040 80d2 	bne.w	800cc92 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d106      	bne.n	800cb02 <tcp_listen_input+0x2a>
 800caf4:	4b6b      	ldr	r3, [pc, #428]	@ (800cca4 <tcp_listen_input+0x1cc>)
 800caf6:	f240 2281 	movw	r2, #641	@ 0x281
 800cafa:	496b      	ldr	r1, [pc, #428]	@ (800cca8 <tcp_listen_input+0x1d0>)
 800cafc:	486b      	ldr	r0, [pc, #428]	@ (800ccac <tcp_listen_input+0x1d4>)
 800cafe:	f007 fd59 	bl	80145b4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800cb02:	4b67      	ldr	r3, [pc, #412]	@ (800cca0 <tcp_listen_input+0x1c8>)
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	f003 0310 	and.w	r3, r3, #16
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d019      	beq.n	800cb42 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cb0e:	4b68      	ldr	r3, [pc, #416]	@ (800ccb0 <tcp_listen_input+0x1d8>)
 800cb10:	6819      	ldr	r1, [r3, #0]
 800cb12:	4b68      	ldr	r3, [pc, #416]	@ (800ccb4 <tcp_listen_input+0x1dc>)
 800cb14:	881b      	ldrh	r3, [r3, #0]
 800cb16:	461a      	mov	r2, r3
 800cb18:	4b67      	ldr	r3, [pc, #412]	@ (800ccb8 <tcp_listen_input+0x1e0>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cb1e:	4b67      	ldr	r3, [pc, #412]	@ (800ccbc <tcp_listen_input+0x1e4>)
 800cb20:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cb22:	885b      	ldrh	r3, [r3, #2]
 800cb24:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cb26:	4a65      	ldr	r2, [pc, #404]	@ (800ccbc <tcp_listen_input+0x1e4>)
 800cb28:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cb2a:	8812      	ldrh	r2, [r2, #0]
 800cb2c:	b292      	uxth	r2, r2
 800cb2e:	9202      	str	r2, [sp, #8]
 800cb30:	9301      	str	r3, [sp, #4]
 800cb32:	4b63      	ldr	r3, [pc, #396]	@ (800ccc0 <tcp_listen_input+0x1e8>)
 800cb34:	9300      	str	r3, [sp, #0]
 800cb36:	4b63      	ldr	r3, [pc, #396]	@ (800ccc4 <tcp_listen_input+0x1ec>)
 800cb38:	4602      	mov	r2, r0
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f002 ff7a 	bl	800fa34 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800cb40:	e0a9      	b.n	800cc96 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800cb42:	4b57      	ldr	r3, [pc, #348]	@ (800cca0 <tcp_listen_input+0x1c8>)
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	f003 0302 	and.w	r3, r3, #2
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	f000 80a3 	beq.w	800cc96 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	7d5b      	ldrb	r3, [r3, #21]
 800cb54:	4618      	mov	r0, r3
 800cb56:	f7ff f927 	bl	800bda8 <tcp_alloc>
 800cb5a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d111      	bne.n	800cb86 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	699b      	ldr	r3, [r3, #24]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d00a      	beq.n	800cb80 <tcp_listen_input+0xa8>
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	699b      	ldr	r3, [r3, #24]
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	6910      	ldr	r0, [r2, #16]
 800cb72:	f04f 32ff 	mov.w	r2, #4294967295
 800cb76:	2100      	movs	r1, #0
 800cb78:	4798      	blx	r3
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	73bb      	strb	r3, [r7, #14]
      return;
 800cb7e:	e08b      	b.n	800cc98 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800cb80:	23f0      	movs	r3, #240	@ 0xf0
 800cb82:	73bb      	strb	r3, [r7, #14]
      return;
 800cb84:	e088      	b.n	800cc98 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800cb86:	4b50      	ldr	r3, [pc, #320]	@ (800ccc8 <tcp_listen_input+0x1f0>)
 800cb88:	695a      	ldr	r2, [r3, #20]
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800cb8e:	4b4e      	ldr	r3, [pc, #312]	@ (800ccc8 <tcp_listen_input+0x1f0>)
 800cb90:	691a      	ldr	r2, [r3, #16]
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	8ada      	ldrh	r2, [r3, #22]
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800cb9e:	4b47      	ldr	r3, [pc, #284]	@ (800ccbc <tcp_listen_input+0x1e4>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	881b      	ldrh	r3, [r3, #0]
 800cba4:	b29a      	uxth	r2, r3
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	2203      	movs	r2, #3
 800cbae:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800cbb0:	4b41      	ldr	r3, [pc, #260]	@ (800ccb8 <tcp_listen_input+0x1e0>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	1c5a      	adds	r2, r3, #1
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800cbc2:	6978      	ldr	r0, [r7, #20]
 800cbc4:	f7ff fa58 	bl	800c078 <tcp_next_iss>
 800cbc8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	693a      	ldr	r2, [r7, #16]
 800cbce:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	693a      	ldr	r2, [r7, #16]
 800cbd4:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	693a      	ldr	r2, [r7, #16]
 800cbda:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	693a      	ldr	r2, [r7, #16]
 800cbe0:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800cbe2:	4b35      	ldr	r3, [pc, #212]	@ (800ccb8 <tcp_listen_input+0x1e0>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	1e5a      	subs	r2, r3, #1
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	691a      	ldr	r2, [r3, #16]
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	687a      	ldr	r2, [r7, #4]
 800cbf8:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	7a5b      	ldrb	r3, [r3, #9]
 800cbfe:	f003 030c 	and.w	r3, r3, #12
 800cc02:	b2da      	uxtb	r2, r3
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	7a1a      	ldrb	r2, [r3, #8]
 800cc0c:	697b      	ldr	r3, [r7, #20]
 800cc0e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800cc10:	4b2e      	ldr	r3, [pc, #184]	@ (800cccc <tcp_listen_input+0x1f4>)
 800cc12:	681a      	ldr	r2, [r3, #0]
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	60da      	str	r2, [r3, #12]
 800cc18:	4a2c      	ldr	r2, [pc, #176]	@ (800cccc <tcp_listen_input+0x1f4>)
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	6013      	str	r3, [r2, #0]
 800cc1e:	f003 f8cb 	bl	800fdb8 <tcp_timer_needed>
 800cc22:	4b2b      	ldr	r3, [pc, #172]	@ (800ccd0 <tcp_listen_input+0x1f8>)
 800cc24:	2201      	movs	r2, #1
 800cc26:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800cc28:	6978      	ldr	r0, [r7, #20]
 800cc2a:	f001 fd8b 	bl	800e744 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800cc2e:	4b23      	ldr	r3, [pc, #140]	@ (800ccbc <tcp_listen_input+0x1e4>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	89db      	ldrh	r3, [r3, #14]
 800cc34:	b29a      	uxth	r2, r3
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	3304      	adds	r3, #4
 800cc50:	4618      	mov	r0, r3
 800cc52:	f004 fb05 	bl	8011260 <ip4_route>
 800cc56:	4601      	mov	r1, r0
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	3304      	adds	r3, #4
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	4620      	mov	r0, r4
 800cc60:	f7ff fa30 	bl	800c0c4 <tcp_eff_send_mss_netif>
 800cc64:	4603      	mov	r3, r0
 800cc66:	461a      	mov	r2, r3
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800cc6c:	2112      	movs	r1, #18
 800cc6e:	6978      	ldr	r0, [r7, #20]
 800cc70:	f002 f83e 	bl	800ecf0 <tcp_enqueue_flags>
 800cc74:	4603      	mov	r3, r0
 800cc76:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800cc78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d004      	beq.n	800cc8a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800cc80:	2100      	movs	r1, #0
 800cc82:	6978      	ldr	r0, [r7, #20]
 800cc84:	f7fe f97c 	bl	800af80 <tcp_abandon>
      return;
 800cc88:	e006      	b.n	800cc98 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800cc8a:	6978      	ldr	r0, [r7, #20]
 800cc8c:	f002 f91e 	bl	800eecc <tcp_output>
  return;
 800cc90:	e001      	b.n	800cc96 <tcp_listen_input+0x1be>
    return;
 800cc92:	bf00      	nop
 800cc94:	e000      	b.n	800cc98 <tcp_listen_input+0x1c0>
  return;
 800cc96:	bf00      	nop
}
 800cc98:	371c      	adds	r7, #28
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd90      	pop	{r4, r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	2000e024 	.word	0x2000e024
 800cca4:	080165f0 	.word	0x080165f0
 800cca8:	080167e8 	.word	0x080167e8
 800ccac:	0801663c 	.word	0x0801663c
 800ccb0:	2000e01c 	.word	0x2000e01c
 800ccb4:	2000e022 	.word	0x2000e022
 800ccb8:	2000e018 	.word	0x2000e018
 800ccbc:	2000e008 	.word	0x2000e008
 800ccc0:	20009b64 	.word	0x20009b64
 800ccc4:	20009b68 	.word	0x20009b68
 800ccc8:	20009b54 	.word	0x20009b54
 800cccc:	2000dfec 	.word	0x2000dfec
 800ccd0:	2000dff4 	.word	0x2000dff4

0800ccd4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b086      	sub	sp, #24
 800ccd8:	af04      	add	r7, sp, #16
 800ccda:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ccdc:	4b2f      	ldr	r3, [pc, #188]	@ (800cd9c <tcp_timewait_input+0xc8>)
 800ccde:	781b      	ldrb	r3, [r3, #0]
 800cce0:	f003 0304 	and.w	r3, r3, #4
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d153      	bne.n	800cd90 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d106      	bne.n	800ccfc <tcp_timewait_input+0x28>
 800ccee:	4b2c      	ldr	r3, [pc, #176]	@ (800cda0 <tcp_timewait_input+0xcc>)
 800ccf0:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800ccf4:	492b      	ldr	r1, [pc, #172]	@ (800cda4 <tcp_timewait_input+0xd0>)
 800ccf6:	482c      	ldr	r0, [pc, #176]	@ (800cda8 <tcp_timewait_input+0xd4>)
 800ccf8:	f007 fc5c 	bl	80145b4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ccfc:	4b27      	ldr	r3, [pc, #156]	@ (800cd9c <tcp_timewait_input+0xc8>)
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	f003 0302 	and.w	r3, r3, #2
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d02a      	beq.n	800cd5e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800cd08:	4b28      	ldr	r3, [pc, #160]	@ (800cdac <tcp_timewait_input+0xd8>)
 800cd0a:	681a      	ldr	r2, [r3, #0]
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd10:	1ad3      	subs	r3, r2, r3
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	db2d      	blt.n	800cd72 <tcp_timewait_input+0x9e>
 800cd16:	4b25      	ldr	r3, [pc, #148]	@ (800cdac <tcp_timewait_input+0xd8>)
 800cd18:	681a      	ldr	r2, [r3, #0]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd1e:	6879      	ldr	r1, [r7, #4]
 800cd20:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800cd22:	440b      	add	r3, r1
 800cd24:	1ad3      	subs	r3, r2, r3
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	dc23      	bgt.n	800cd72 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd2a:	4b21      	ldr	r3, [pc, #132]	@ (800cdb0 <tcp_timewait_input+0xdc>)
 800cd2c:	6819      	ldr	r1, [r3, #0]
 800cd2e:	4b21      	ldr	r3, [pc, #132]	@ (800cdb4 <tcp_timewait_input+0xe0>)
 800cd30:	881b      	ldrh	r3, [r3, #0]
 800cd32:	461a      	mov	r2, r3
 800cd34:	4b1d      	ldr	r3, [pc, #116]	@ (800cdac <tcp_timewait_input+0xd8>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cd3a:	4b1f      	ldr	r3, [pc, #124]	@ (800cdb8 <tcp_timewait_input+0xe4>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd3e:	885b      	ldrh	r3, [r3, #2]
 800cd40:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cd42:	4a1d      	ldr	r2, [pc, #116]	@ (800cdb8 <tcp_timewait_input+0xe4>)
 800cd44:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd46:	8812      	ldrh	r2, [r2, #0]
 800cd48:	b292      	uxth	r2, r2
 800cd4a:	9202      	str	r2, [sp, #8]
 800cd4c:	9301      	str	r3, [sp, #4]
 800cd4e:	4b1b      	ldr	r3, [pc, #108]	@ (800cdbc <tcp_timewait_input+0xe8>)
 800cd50:	9300      	str	r3, [sp, #0]
 800cd52:	4b1b      	ldr	r3, [pc, #108]	@ (800cdc0 <tcp_timewait_input+0xec>)
 800cd54:	4602      	mov	r2, r0
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f002 fe6c 	bl	800fa34 <tcp_rst>
      return;
 800cd5c:	e01b      	b.n	800cd96 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800cd5e:	4b0f      	ldr	r3, [pc, #60]	@ (800cd9c <tcp_timewait_input+0xc8>)
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	f003 0301 	and.w	r3, r3, #1
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d003      	beq.n	800cd72 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800cd6a:	4b16      	ldr	r3, [pc, #88]	@ (800cdc4 <tcp_timewait_input+0xf0>)
 800cd6c:	681a      	ldr	r2, [r3, #0]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800cd72:	4b10      	ldr	r3, [pc, #64]	@ (800cdb4 <tcp_timewait_input+0xe0>)
 800cd74:	881b      	ldrh	r3, [r3, #0]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d00c      	beq.n	800cd94 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	8b5b      	ldrh	r3, [r3, #26]
 800cd7e:	f043 0302 	orr.w	r3, r3, #2
 800cd82:	b29a      	uxth	r2, r3
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f002 f89f 	bl	800eecc <tcp_output>
  }
  return;
 800cd8e:	e001      	b.n	800cd94 <tcp_timewait_input+0xc0>
    return;
 800cd90:	bf00      	nop
 800cd92:	e000      	b.n	800cd96 <tcp_timewait_input+0xc2>
  return;
 800cd94:	bf00      	nop
}
 800cd96:	3708      	adds	r7, #8
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	2000e024 	.word	0x2000e024
 800cda0:	080165f0 	.word	0x080165f0
 800cda4:	08016808 	.word	0x08016808
 800cda8:	0801663c 	.word	0x0801663c
 800cdac:	2000e018 	.word	0x2000e018
 800cdb0:	2000e01c 	.word	0x2000e01c
 800cdb4:	2000e022 	.word	0x2000e022
 800cdb8:	2000e008 	.word	0x2000e008
 800cdbc:	20009b64 	.word	0x20009b64
 800cdc0:	20009b68 	.word	0x20009b68
 800cdc4:	2000dfe0 	.word	0x2000dfe0

0800cdc8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800cdc8:	b590      	push	{r4, r7, lr}
 800cdca:	b08d      	sub	sp, #52	@ 0x34
 800cdcc:	af04      	add	r7, sp, #16
 800cdce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d106      	bne.n	800cdec <tcp_process+0x24>
 800cdde:	4b9d      	ldr	r3, [pc, #628]	@ (800d054 <tcp_process+0x28c>)
 800cde0:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800cde4:	499c      	ldr	r1, [pc, #624]	@ (800d058 <tcp_process+0x290>)
 800cde6:	489d      	ldr	r0, [pc, #628]	@ (800d05c <tcp_process+0x294>)
 800cde8:	f007 fbe4 	bl	80145b4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800cdec:	4b9c      	ldr	r3, [pc, #624]	@ (800d060 <tcp_process+0x298>)
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	f003 0304 	and.w	r3, r3, #4
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d04e      	beq.n	800ce96 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	7d1b      	ldrb	r3, [r3, #20]
 800cdfc:	2b02      	cmp	r3, #2
 800cdfe:	d108      	bne.n	800ce12 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ce04:	4b97      	ldr	r3, [pc, #604]	@ (800d064 <tcp_process+0x29c>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d123      	bne.n	800ce54 <tcp_process+0x8c>
        acceptable = 1;
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	76fb      	strb	r3, [r7, #27]
 800ce10:	e020      	b.n	800ce54 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ce16:	4b94      	ldr	r3, [pc, #592]	@ (800d068 <tcp_process+0x2a0>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d102      	bne.n	800ce24 <tcp_process+0x5c>
        acceptable = 1;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	76fb      	strb	r3, [r7, #27]
 800ce22:	e017      	b.n	800ce54 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ce24:	4b90      	ldr	r3, [pc, #576]	@ (800d068 <tcp_process+0x2a0>)
 800ce26:	681a      	ldr	r2, [r3, #0]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce2c:	1ad3      	subs	r3, r2, r3
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	db10      	blt.n	800ce54 <tcp_process+0x8c>
 800ce32:	4b8d      	ldr	r3, [pc, #564]	@ (800d068 <tcp_process+0x2a0>)
 800ce34:	681a      	ldr	r2, [r3, #0]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce3a:	6879      	ldr	r1, [r7, #4]
 800ce3c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ce3e:	440b      	add	r3, r1
 800ce40:	1ad3      	subs	r3, r2, r3
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	dc06      	bgt.n	800ce54 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	8b5b      	ldrh	r3, [r3, #26]
 800ce4a:	f043 0302 	orr.w	r3, r3, #2
 800ce4e:	b29a      	uxth	r2, r3
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ce54:	7efb      	ldrb	r3, [r7, #27]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d01b      	beq.n	800ce92 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	7d1b      	ldrb	r3, [r3, #20]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d106      	bne.n	800ce70 <tcp_process+0xa8>
 800ce62:	4b7c      	ldr	r3, [pc, #496]	@ (800d054 <tcp_process+0x28c>)
 800ce64:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800ce68:	4980      	ldr	r1, [pc, #512]	@ (800d06c <tcp_process+0x2a4>)
 800ce6a:	487c      	ldr	r0, [pc, #496]	@ (800d05c <tcp_process+0x294>)
 800ce6c:	f007 fba2 	bl	80145b4 <iprintf>
      recv_flags |= TF_RESET;
 800ce70:	4b7f      	ldr	r3, [pc, #508]	@ (800d070 <tcp_process+0x2a8>)
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	f043 0308 	orr.w	r3, r3, #8
 800ce78:	b2da      	uxtb	r2, r3
 800ce7a:	4b7d      	ldr	r3, [pc, #500]	@ (800d070 <tcp_process+0x2a8>)
 800ce7c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	8b5b      	ldrh	r3, [r3, #26]
 800ce82:	f023 0301 	bic.w	r3, r3, #1
 800ce86:	b29a      	uxth	r2, r3
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ce8c:	f06f 030d 	mvn.w	r3, #13
 800ce90:	e37a      	b.n	800d588 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ce92:	2300      	movs	r3, #0
 800ce94:	e378      	b.n	800d588 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ce96:	4b72      	ldr	r3, [pc, #456]	@ (800d060 <tcp_process+0x298>)
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	f003 0302 	and.w	r3, r3, #2
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d010      	beq.n	800cec4 <tcp_process+0xfc>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	7d1b      	ldrb	r3, [r3, #20]
 800cea6:	2b02      	cmp	r3, #2
 800cea8:	d00c      	beq.n	800cec4 <tcp_process+0xfc>
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	7d1b      	ldrb	r3, [r3, #20]
 800ceae:	2b03      	cmp	r3, #3
 800ceb0:	d008      	beq.n	800cec4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	8b5b      	ldrh	r3, [r3, #26]
 800ceb6:	f043 0302 	orr.w	r3, r3, #2
 800ceba:	b29a      	uxth	r2, r3
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800cec0:	2300      	movs	r3, #0
 800cec2:	e361      	b.n	800d588 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	8b5b      	ldrh	r3, [r3, #26]
 800cec8:	f003 0310 	and.w	r3, r3, #16
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d103      	bne.n	800ced8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ced0:	4b68      	ldr	r3, [pc, #416]	@ (800d074 <tcp_process+0x2ac>)
 800ced2:	681a      	ldr	r2, [r3, #0]
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2200      	movs	r2, #0
 800cedc:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2200      	movs	r2, #0
 800cee4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f001 fc2b 	bl	800e744 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	7d1b      	ldrb	r3, [r3, #20]
 800cef2:	3b02      	subs	r3, #2
 800cef4:	2b07      	cmp	r3, #7
 800cef6:	f200 8337 	bhi.w	800d568 <tcp_process+0x7a0>
 800cefa:	a201      	add	r2, pc, #4	@ (adr r2, 800cf00 <tcp_process+0x138>)
 800cefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf00:	0800cf21 	.word	0x0800cf21
 800cf04:	0800d151 	.word	0x0800d151
 800cf08:	0800d2c9 	.word	0x0800d2c9
 800cf0c:	0800d2f3 	.word	0x0800d2f3
 800cf10:	0800d417 	.word	0x0800d417
 800cf14:	0800d2c9 	.word	0x0800d2c9
 800cf18:	0800d4a3 	.word	0x0800d4a3
 800cf1c:	0800d533 	.word	0x0800d533
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800cf20:	4b4f      	ldr	r3, [pc, #316]	@ (800d060 <tcp_process+0x298>)
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	f003 0310 	and.w	r3, r3, #16
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	f000 80e4 	beq.w	800d0f6 <tcp_process+0x32e>
 800cf2e:	4b4c      	ldr	r3, [pc, #304]	@ (800d060 <tcp_process+0x298>)
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	f003 0302 	and.w	r3, r3, #2
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	f000 80dd 	beq.w	800d0f6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf40:	1c5a      	adds	r2, r3, #1
 800cf42:	4b48      	ldr	r3, [pc, #288]	@ (800d064 <tcp_process+0x29c>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	429a      	cmp	r2, r3
 800cf48:	f040 80d5 	bne.w	800d0f6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800cf4c:	4b46      	ldr	r3, [pc, #280]	@ (800d068 <tcp_process+0x2a0>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	1c5a      	adds	r2, r3, #1
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800cf5e:	4b41      	ldr	r3, [pc, #260]	@ (800d064 <tcp_process+0x29c>)
 800cf60:	681a      	ldr	r2, [r3, #0]
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800cf66:	4b44      	ldr	r3, [pc, #272]	@ (800d078 <tcp_process+0x2b0>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	89db      	ldrh	r3, [r3, #14]
 800cf6c:	b29a      	uxth	r2, r3
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800cf80:	4b39      	ldr	r3, [pc, #228]	@ (800d068 <tcp_process+0x2a0>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	1e5a      	subs	r2, r3, #1
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2204      	movs	r2, #4
 800cf8e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	3304      	adds	r3, #4
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f004 f961 	bl	8011260 <ip4_route>
 800cf9e:	4601      	mov	r1, r0
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	3304      	adds	r3, #4
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	4620      	mov	r0, r4
 800cfa8:	f7ff f88c 	bl	800c0c4 <tcp_eff_send_mss_netif>
 800cfac:	4603      	mov	r3, r0
 800cfae:	461a      	mov	r2, r3
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cfb8:	009a      	lsls	r2, r3, #2
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cfbe:	005b      	lsls	r3, r3, #1
 800cfc0:	f241 111c 	movw	r1, #4380	@ 0x111c
 800cfc4:	428b      	cmp	r3, r1
 800cfc6:	bf38      	it	cc
 800cfc8:	460b      	movcc	r3, r1
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d204      	bcs.n	800cfd8 <tcp_process+0x210>
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cfd2:	009b      	lsls	r3, r3, #2
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	e00d      	b.n	800cff4 <tcp_process+0x22c>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cfdc:	005b      	lsls	r3, r3, #1
 800cfde:	f241 121c 	movw	r2, #4380	@ 0x111c
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	d904      	bls.n	800cff0 <tcp_process+0x228>
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cfea:	005b      	lsls	r3, r3, #1
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	e001      	b.n	800cff4 <tcp_process+0x22c>
 800cff0:	f241 131c 	movw	r3, #4380	@ 0x111c
 800cff4:	687a      	ldr	r2, [r7, #4]
 800cff6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d000:	2b00      	cmp	r3, #0
 800d002:	d106      	bne.n	800d012 <tcp_process+0x24a>
 800d004:	4b13      	ldr	r3, [pc, #76]	@ (800d054 <tcp_process+0x28c>)
 800d006:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800d00a:	491c      	ldr	r1, [pc, #112]	@ (800d07c <tcp_process+0x2b4>)
 800d00c:	4813      	ldr	r0, [pc, #76]	@ (800d05c <tcp_process+0x294>)
 800d00e:	f007 fad1 	bl	80145b4 <iprintf>
        --pcb->snd_queuelen;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d018:	3b01      	subs	r3, #1
 800d01a:	b29a      	uxth	r2, r3
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d026:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800d028:	69fb      	ldr	r3, [r7, #28]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d12a      	bne.n	800d084 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d032:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d034:	69fb      	ldr	r3, [r7, #28]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d106      	bne.n	800d048 <tcp_process+0x280>
 800d03a:	4b06      	ldr	r3, [pc, #24]	@ (800d054 <tcp_process+0x28c>)
 800d03c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800d040:	490f      	ldr	r1, [pc, #60]	@ (800d080 <tcp_process+0x2b8>)
 800d042:	4806      	ldr	r0, [pc, #24]	@ (800d05c <tcp_process+0x294>)
 800d044:	f007 fab6 	bl	80145b4 <iprintf>
          pcb->unsent = rseg->next;
 800d048:	69fb      	ldr	r3, [r7, #28]
 800d04a:	681a      	ldr	r2, [r3, #0]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d050:	e01c      	b.n	800d08c <tcp_process+0x2c4>
 800d052:	bf00      	nop
 800d054:	080165f0 	.word	0x080165f0
 800d058:	08016828 	.word	0x08016828
 800d05c:	0801663c 	.word	0x0801663c
 800d060:	2000e024 	.word	0x2000e024
 800d064:	2000e01c 	.word	0x2000e01c
 800d068:	2000e018 	.word	0x2000e018
 800d06c:	08016844 	.word	0x08016844
 800d070:	2000e025 	.word	0x2000e025
 800d074:	2000dfe0 	.word	0x2000dfe0
 800d078:	2000e008 	.word	0x2000e008
 800d07c:	08016864 	.word	0x08016864
 800d080:	0801687c 	.word	0x0801687c
        } else {
          pcb->unacked = rseg->next;
 800d084:	69fb      	ldr	r3, [r7, #28]
 800d086:	681a      	ldr	r2, [r3, #0]
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800d08c:	69f8      	ldr	r0, [r7, #28]
 800d08e:	f7fe fd22 	bl	800bad6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d096:	2b00      	cmp	r3, #0
 800d098:	d104      	bne.n	800d0a4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d0a0:	861a      	strh	r2, [r3, #48]	@ 0x30
 800d0a2:	e006      	b.n	800d0b2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d00a      	beq.n	800d0d2 <tcp_process+0x30a>
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d0c2:	687a      	ldr	r2, [r7, #4]
 800d0c4:	6910      	ldr	r0, [r2, #16]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	6879      	ldr	r1, [r7, #4]
 800d0ca:	4798      	blx	r3
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	76bb      	strb	r3, [r7, #26]
 800d0d0:	e001      	b.n	800d0d6 <tcp_process+0x30e>
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800d0d6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d0da:	f113 0f0d 	cmn.w	r3, #13
 800d0de:	d102      	bne.n	800d0e6 <tcp_process+0x31e>
          return ERR_ABRT;
 800d0e0:	f06f 030c 	mvn.w	r3, #12
 800d0e4:	e250      	b.n	800d588 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	8b5b      	ldrh	r3, [r3, #26]
 800d0ea:	f043 0302 	orr.w	r3, r3, #2
 800d0ee:	b29a      	uxth	r2, r3
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800d0f4:	e23a      	b.n	800d56c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800d0f6:	4b98      	ldr	r3, [pc, #608]	@ (800d358 <tcp_process+0x590>)
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	f003 0310 	and.w	r3, r3, #16
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	f000 8234 	beq.w	800d56c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d104:	4b95      	ldr	r3, [pc, #596]	@ (800d35c <tcp_process+0x594>)
 800d106:	6819      	ldr	r1, [r3, #0]
 800d108:	4b95      	ldr	r3, [pc, #596]	@ (800d360 <tcp_process+0x598>)
 800d10a:	881b      	ldrh	r3, [r3, #0]
 800d10c:	461a      	mov	r2, r3
 800d10e:	4b95      	ldr	r3, [pc, #596]	@ (800d364 <tcp_process+0x59c>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d114:	4b94      	ldr	r3, [pc, #592]	@ (800d368 <tcp_process+0x5a0>)
 800d116:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d118:	885b      	ldrh	r3, [r3, #2]
 800d11a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d11c:	4a92      	ldr	r2, [pc, #584]	@ (800d368 <tcp_process+0x5a0>)
 800d11e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d120:	8812      	ldrh	r2, [r2, #0]
 800d122:	b292      	uxth	r2, r2
 800d124:	9202      	str	r2, [sp, #8]
 800d126:	9301      	str	r3, [sp, #4]
 800d128:	4b90      	ldr	r3, [pc, #576]	@ (800d36c <tcp_process+0x5a4>)
 800d12a:	9300      	str	r3, [sp, #0]
 800d12c:	4b90      	ldr	r3, [pc, #576]	@ (800d370 <tcp_process+0x5a8>)
 800d12e:	4602      	mov	r2, r0
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f002 fc7f 	bl	800fa34 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d13c:	2b05      	cmp	r3, #5
 800d13e:	f200 8215 	bhi.w	800d56c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2200      	movs	r2, #0
 800d146:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f002 fa4b 	bl	800f5e4 <tcp_rexmit_rto>
      break;
 800d14e:	e20d      	b.n	800d56c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800d150:	4b81      	ldr	r3, [pc, #516]	@ (800d358 <tcp_process+0x590>)
 800d152:	781b      	ldrb	r3, [r3, #0]
 800d154:	f003 0310 	and.w	r3, r3, #16
 800d158:	2b00      	cmp	r3, #0
 800d15a:	f000 80a1 	beq.w	800d2a0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d15e:	4b7f      	ldr	r3, [pc, #508]	@ (800d35c <tcp_process+0x594>)
 800d160:	681a      	ldr	r2, [r3, #0]
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d166:	1ad3      	subs	r3, r2, r3
 800d168:	3b01      	subs	r3, #1
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	db7e      	blt.n	800d26c <tcp_process+0x4a4>
 800d16e:	4b7b      	ldr	r3, [pc, #492]	@ (800d35c <tcp_process+0x594>)
 800d170:	681a      	ldr	r2, [r3, #0]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d176:	1ad3      	subs	r3, r2, r3
 800d178:	2b00      	cmp	r3, #0
 800d17a:	dc77      	bgt.n	800d26c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2204      	movs	r2, #4
 800d180:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d186:	2b00      	cmp	r3, #0
 800d188:	d102      	bne.n	800d190 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800d18a:	23fa      	movs	r3, #250	@ 0xfa
 800d18c:	76bb      	strb	r3, [r7, #26]
 800d18e:	e01d      	b.n	800d1cc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d194:	699b      	ldr	r3, [r3, #24]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d106      	bne.n	800d1a8 <tcp_process+0x3e0>
 800d19a:	4b76      	ldr	r3, [pc, #472]	@ (800d374 <tcp_process+0x5ac>)
 800d19c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800d1a0:	4975      	ldr	r1, [pc, #468]	@ (800d378 <tcp_process+0x5b0>)
 800d1a2:	4876      	ldr	r0, [pc, #472]	@ (800d37c <tcp_process+0x5b4>)
 800d1a4:	f007 fa06 	bl	80145b4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d1ac:	699b      	ldr	r3, [r3, #24]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d00a      	beq.n	800d1c8 <tcp_process+0x400>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d1b6:	699b      	ldr	r3, [r3, #24]
 800d1b8:	687a      	ldr	r2, [r7, #4]
 800d1ba:	6910      	ldr	r0, [r2, #16]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	6879      	ldr	r1, [r7, #4]
 800d1c0:	4798      	blx	r3
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	76bb      	strb	r3, [r7, #26]
 800d1c6:	e001      	b.n	800d1cc <tcp_process+0x404>
 800d1c8:	23f0      	movs	r3, #240	@ 0xf0
 800d1ca:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800d1cc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d00a      	beq.n	800d1ea <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800d1d4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d1d8:	f113 0f0d 	cmn.w	r3, #13
 800d1dc:	d002      	beq.n	800d1e4 <tcp_process+0x41c>
              tcp_abort(pcb);
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f7fd ff8c 	bl	800b0fc <tcp_abort>
            }
            return ERR_ABRT;
 800d1e4:	f06f 030c 	mvn.w	r3, #12
 800d1e8:	e1ce      	b.n	800d588 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 fae0 	bl	800d7b0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800d1f0:	4b63      	ldr	r3, [pc, #396]	@ (800d380 <tcp_process+0x5b8>)
 800d1f2:	881b      	ldrh	r3, [r3, #0]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d005      	beq.n	800d204 <tcp_process+0x43c>
            recv_acked--;
 800d1f8:	4b61      	ldr	r3, [pc, #388]	@ (800d380 <tcp_process+0x5b8>)
 800d1fa:	881b      	ldrh	r3, [r3, #0]
 800d1fc:	3b01      	subs	r3, #1
 800d1fe:	b29a      	uxth	r2, r3
 800d200:	4b5f      	ldr	r3, [pc, #380]	@ (800d380 <tcp_process+0x5b8>)
 800d202:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d208:	009a      	lsls	r2, r3, #2
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d20e:	005b      	lsls	r3, r3, #1
 800d210:	f241 111c 	movw	r1, #4380	@ 0x111c
 800d214:	428b      	cmp	r3, r1
 800d216:	bf38      	it	cc
 800d218:	460b      	movcc	r3, r1
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d204      	bcs.n	800d228 <tcp_process+0x460>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d222:	009b      	lsls	r3, r3, #2
 800d224:	b29b      	uxth	r3, r3
 800d226:	e00d      	b.n	800d244 <tcp_process+0x47c>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d22c:	005b      	lsls	r3, r3, #1
 800d22e:	f241 121c 	movw	r2, #4380	@ 0x111c
 800d232:	4293      	cmp	r3, r2
 800d234:	d904      	bls.n	800d240 <tcp_process+0x478>
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d23a:	005b      	lsls	r3, r3, #1
 800d23c:	b29b      	uxth	r3, r3
 800d23e:	e001      	b.n	800d244 <tcp_process+0x47c>
 800d240:	f241 131c 	movw	r3, #4380	@ 0x111c
 800d244:	687a      	ldr	r2, [r7, #4]
 800d246:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800d24a:	4b4e      	ldr	r3, [pc, #312]	@ (800d384 <tcp_process+0x5bc>)
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	f003 0320 	and.w	r3, r3, #32
 800d252:	2b00      	cmp	r3, #0
 800d254:	d037      	beq.n	800d2c6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	8b5b      	ldrh	r3, [r3, #26]
 800d25a:	f043 0302 	orr.w	r3, r3, #2
 800d25e:	b29a      	uxth	r2, r3
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2207      	movs	r2, #7
 800d268:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d26a:	e02c      	b.n	800d2c6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d26c:	4b3b      	ldr	r3, [pc, #236]	@ (800d35c <tcp_process+0x594>)
 800d26e:	6819      	ldr	r1, [r3, #0]
 800d270:	4b3b      	ldr	r3, [pc, #236]	@ (800d360 <tcp_process+0x598>)
 800d272:	881b      	ldrh	r3, [r3, #0]
 800d274:	461a      	mov	r2, r3
 800d276:	4b3b      	ldr	r3, [pc, #236]	@ (800d364 <tcp_process+0x59c>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d27c:	4b3a      	ldr	r3, [pc, #232]	@ (800d368 <tcp_process+0x5a0>)
 800d27e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d280:	885b      	ldrh	r3, [r3, #2]
 800d282:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d284:	4a38      	ldr	r2, [pc, #224]	@ (800d368 <tcp_process+0x5a0>)
 800d286:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d288:	8812      	ldrh	r2, [r2, #0]
 800d28a:	b292      	uxth	r2, r2
 800d28c:	9202      	str	r2, [sp, #8]
 800d28e:	9301      	str	r3, [sp, #4]
 800d290:	4b36      	ldr	r3, [pc, #216]	@ (800d36c <tcp_process+0x5a4>)
 800d292:	9300      	str	r3, [sp, #0]
 800d294:	4b36      	ldr	r3, [pc, #216]	@ (800d370 <tcp_process+0x5a8>)
 800d296:	4602      	mov	r2, r0
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f002 fbcb 	bl	800fa34 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d29e:	e167      	b.n	800d570 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d2a0:	4b2d      	ldr	r3, [pc, #180]	@ (800d358 <tcp_process+0x590>)
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	f003 0302 	and.w	r3, r3, #2
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	f000 8161 	beq.w	800d570 <tcp_process+0x7a8>
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2b2:	1e5a      	subs	r2, r3, #1
 800d2b4:	4b2b      	ldr	r3, [pc, #172]	@ (800d364 <tcp_process+0x59c>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	f040 8159 	bne.w	800d570 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f002 f9b2 	bl	800f628 <tcp_rexmit>
      break;
 800d2c4:	e154      	b.n	800d570 <tcp_process+0x7a8>
 800d2c6:	e153      	b.n	800d570 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f000 fa71 	bl	800d7b0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d2ce:	4b2d      	ldr	r3, [pc, #180]	@ (800d384 <tcp_process+0x5bc>)
 800d2d0:	781b      	ldrb	r3, [r3, #0]
 800d2d2:	f003 0320 	and.w	r3, r3, #32
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	f000 814c 	beq.w	800d574 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	8b5b      	ldrh	r3, [r3, #26]
 800d2e0:	f043 0302 	orr.w	r3, r3, #2
 800d2e4:	b29a      	uxth	r2, r3
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2207      	movs	r2, #7
 800d2ee:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d2f0:	e140      	b.n	800d574 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f000 fa5c 	bl	800d7b0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d2f8:	4b22      	ldr	r3, [pc, #136]	@ (800d384 <tcp_process+0x5bc>)
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	f003 0320 	and.w	r3, r3, #32
 800d300:	2b00      	cmp	r3, #0
 800d302:	d071      	beq.n	800d3e8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d304:	4b14      	ldr	r3, [pc, #80]	@ (800d358 <tcp_process+0x590>)
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	f003 0310 	and.w	r3, r3, #16
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d060      	beq.n	800d3d2 <tcp_process+0x60a>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d314:	4b11      	ldr	r3, [pc, #68]	@ (800d35c <tcp_process+0x594>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	429a      	cmp	r2, r3
 800d31a:	d15a      	bne.n	800d3d2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d320:	2b00      	cmp	r3, #0
 800d322:	d156      	bne.n	800d3d2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	8b5b      	ldrh	r3, [r3, #26]
 800d328:	f043 0302 	orr.w	r3, r3, #2
 800d32c:	b29a      	uxth	r2, r3
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f7fe fdbc 	bl	800beb0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d338:	4b13      	ldr	r3, [pc, #76]	@ (800d388 <tcp_process+0x5c0>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	687a      	ldr	r2, [r7, #4]
 800d33e:	429a      	cmp	r2, r3
 800d340:	d105      	bne.n	800d34e <tcp_process+0x586>
 800d342:	4b11      	ldr	r3, [pc, #68]	@ (800d388 <tcp_process+0x5c0>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	68db      	ldr	r3, [r3, #12]
 800d348:	4a0f      	ldr	r2, [pc, #60]	@ (800d388 <tcp_process+0x5c0>)
 800d34a:	6013      	str	r3, [r2, #0]
 800d34c:	e02e      	b.n	800d3ac <tcp_process+0x5e4>
 800d34e:	4b0e      	ldr	r3, [pc, #56]	@ (800d388 <tcp_process+0x5c0>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	617b      	str	r3, [r7, #20]
 800d354:	e027      	b.n	800d3a6 <tcp_process+0x5de>
 800d356:	bf00      	nop
 800d358:	2000e024 	.word	0x2000e024
 800d35c:	2000e01c 	.word	0x2000e01c
 800d360:	2000e022 	.word	0x2000e022
 800d364:	2000e018 	.word	0x2000e018
 800d368:	2000e008 	.word	0x2000e008
 800d36c:	20009b64 	.word	0x20009b64
 800d370:	20009b68 	.word	0x20009b68
 800d374:	080165f0 	.word	0x080165f0
 800d378:	08016890 	.word	0x08016890
 800d37c:	0801663c 	.word	0x0801663c
 800d380:	2000e020 	.word	0x2000e020
 800d384:	2000e025 	.word	0x2000e025
 800d388:	2000dfec 	.word	0x2000dfec
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	68db      	ldr	r3, [r3, #12]
 800d390:	687a      	ldr	r2, [r7, #4]
 800d392:	429a      	cmp	r2, r3
 800d394:	d104      	bne.n	800d3a0 <tcp_process+0x5d8>
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	68da      	ldr	r2, [r3, #12]
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	60da      	str	r2, [r3, #12]
 800d39e:	e005      	b.n	800d3ac <tcp_process+0x5e4>
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	68db      	ldr	r3, [r3, #12]
 800d3a4:	617b      	str	r3, [r7, #20]
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d1ef      	bne.n	800d38c <tcp_process+0x5c4>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	60da      	str	r2, [r3, #12]
 800d3b2:	4b77      	ldr	r3, [pc, #476]	@ (800d590 <tcp_process+0x7c8>)
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	220a      	movs	r2, #10
 800d3bc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800d3be:	4b75      	ldr	r3, [pc, #468]	@ (800d594 <tcp_process+0x7cc>)
 800d3c0:	681a      	ldr	r2, [r3, #0]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	60da      	str	r2, [r3, #12]
 800d3c6:	4a73      	ldr	r2, [pc, #460]	@ (800d594 <tcp_process+0x7cc>)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6013      	str	r3, [r2, #0]
 800d3cc:	f002 fcf4 	bl	800fdb8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d3d0:	e0d2      	b.n	800d578 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	8b5b      	ldrh	r3, [r3, #26]
 800d3d6:	f043 0302 	orr.w	r3, r3, #2
 800d3da:	b29a      	uxth	r2, r3
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2208      	movs	r2, #8
 800d3e4:	751a      	strb	r2, [r3, #20]
      break;
 800d3e6:	e0c7      	b.n	800d578 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d3e8:	4b6b      	ldr	r3, [pc, #428]	@ (800d598 <tcp_process+0x7d0>)
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	f003 0310 	and.w	r3, r3, #16
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	f000 80c1 	beq.w	800d578 <tcp_process+0x7b0>
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d3fa:	4b68      	ldr	r3, [pc, #416]	@ (800d59c <tcp_process+0x7d4>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	429a      	cmp	r2, r3
 800d400:	f040 80ba 	bne.w	800d578 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d408:	2b00      	cmp	r3, #0
 800d40a:	f040 80b5 	bne.w	800d578 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2206      	movs	r2, #6
 800d412:	751a      	strb	r2, [r3, #20]
      break;
 800d414:	e0b0      	b.n	800d578 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f000 f9ca 	bl	800d7b0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d41c:	4b60      	ldr	r3, [pc, #384]	@ (800d5a0 <tcp_process+0x7d8>)
 800d41e:	781b      	ldrb	r3, [r3, #0]
 800d420:	f003 0320 	and.w	r3, r3, #32
 800d424:	2b00      	cmp	r3, #0
 800d426:	f000 80a9 	beq.w	800d57c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	8b5b      	ldrh	r3, [r3, #26]
 800d42e:	f043 0302 	orr.w	r3, r3, #2
 800d432:	b29a      	uxth	r2, r3
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f7fe fd39 	bl	800beb0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d43e:	4b59      	ldr	r3, [pc, #356]	@ (800d5a4 <tcp_process+0x7dc>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	687a      	ldr	r2, [r7, #4]
 800d444:	429a      	cmp	r2, r3
 800d446:	d105      	bne.n	800d454 <tcp_process+0x68c>
 800d448:	4b56      	ldr	r3, [pc, #344]	@ (800d5a4 <tcp_process+0x7dc>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	68db      	ldr	r3, [r3, #12]
 800d44e:	4a55      	ldr	r2, [pc, #340]	@ (800d5a4 <tcp_process+0x7dc>)
 800d450:	6013      	str	r3, [r2, #0]
 800d452:	e013      	b.n	800d47c <tcp_process+0x6b4>
 800d454:	4b53      	ldr	r3, [pc, #332]	@ (800d5a4 <tcp_process+0x7dc>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	613b      	str	r3, [r7, #16]
 800d45a:	e00c      	b.n	800d476 <tcp_process+0x6ae>
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	68db      	ldr	r3, [r3, #12]
 800d460:	687a      	ldr	r2, [r7, #4]
 800d462:	429a      	cmp	r2, r3
 800d464:	d104      	bne.n	800d470 <tcp_process+0x6a8>
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	68da      	ldr	r2, [r3, #12]
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	60da      	str	r2, [r3, #12]
 800d46e:	e005      	b.n	800d47c <tcp_process+0x6b4>
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	68db      	ldr	r3, [r3, #12]
 800d474:	613b      	str	r3, [r7, #16]
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d1ef      	bne.n	800d45c <tcp_process+0x694>
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	60da      	str	r2, [r3, #12]
 800d482:	4b43      	ldr	r3, [pc, #268]	@ (800d590 <tcp_process+0x7c8>)
 800d484:	2201      	movs	r2, #1
 800d486:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	220a      	movs	r2, #10
 800d48c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d48e:	4b41      	ldr	r3, [pc, #260]	@ (800d594 <tcp_process+0x7cc>)
 800d490:	681a      	ldr	r2, [r3, #0]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	60da      	str	r2, [r3, #12]
 800d496:	4a3f      	ldr	r2, [pc, #252]	@ (800d594 <tcp_process+0x7cc>)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6013      	str	r3, [r2, #0]
 800d49c:	f002 fc8c 	bl	800fdb8 <tcp_timer_needed>
      }
      break;
 800d4a0:	e06c      	b.n	800d57c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f000 f984 	bl	800d7b0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d4a8:	4b3b      	ldr	r3, [pc, #236]	@ (800d598 <tcp_process+0x7d0>)
 800d4aa:	781b      	ldrb	r3, [r3, #0]
 800d4ac:	f003 0310 	and.w	r3, r3, #16
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d065      	beq.n	800d580 <tcp_process+0x7b8>
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d4b8:	4b38      	ldr	r3, [pc, #224]	@ (800d59c <tcp_process+0x7d4>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d15f      	bne.n	800d580 <tcp_process+0x7b8>
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d15b      	bne.n	800d580 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f7fe fcf1 	bl	800beb0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d4ce:	4b35      	ldr	r3, [pc, #212]	@ (800d5a4 <tcp_process+0x7dc>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	687a      	ldr	r2, [r7, #4]
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d105      	bne.n	800d4e4 <tcp_process+0x71c>
 800d4d8:	4b32      	ldr	r3, [pc, #200]	@ (800d5a4 <tcp_process+0x7dc>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	68db      	ldr	r3, [r3, #12]
 800d4de:	4a31      	ldr	r2, [pc, #196]	@ (800d5a4 <tcp_process+0x7dc>)
 800d4e0:	6013      	str	r3, [r2, #0]
 800d4e2:	e013      	b.n	800d50c <tcp_process+0x744>
 800d4e4:	4b2f      	ldr	r3, [pc, #188]	@ (800d5a4 <tcp_process+0x7dc>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	60fb      	str	r3, [r7, #12]
 800d4ea:	e00c      	b.n	800d506 <tcp_process+0x73e>
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	68db      	ldr	r3, [r3, #12]
 800d4f0:	687a      	ldr	r2, [r7, #4]
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d104      	bne.n	800d500 <tcp_process+0x738>
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	68da      	ldr	r2, [r3, #12]
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	60da      	str	r2, [r3, #12]
 800d4fe:	e005      	b.n	800d50c <tcp_process+0x744>
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	68db      	ldr	r3, [r3, #12]
 800d504:	60fb      	str	r3, [r7, #12]
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d1ef      	bne.n	800d4ec <tcp_process+0x724>
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2200      	movs	r2, #0
 800d510:	60da      	str	r2, [r3, #12]
 800d512:	4b1f      	ldr	r3, [pc, #124]	@ (800d590 <tcp_process+0x7c8>)
 800d514:	2201      	movs	r2, #1
 800d516:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	220a      	movs	r2, #10
 800d51c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d51e:	4b1d      	ldr	r3, [pc, #116]	@ (800d594 <tcp_process+0x7cc>)
 800d520:	681a      	ldr	r2, [r3, #0]
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	60da      	str	r2, [r3, #12]
 800d526:	4a1b      	ldr	r2, [pc, #108]	@ (800d594 <tcp_process+0x7cc>)
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6013      	str	r3, [r2, #0]
 800d52c:	f002 fc44 	bl	800fdb8 <tcp_timer_needed>
      }
      break;
 800d530:	e026      	b.n	800d580 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f000 f93c 	bl	800d7b0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d538:	4b17      	ldr	r3, [pc, #92]	@ (800d598 <tcp_process+0x7d0>)
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	f003 0310 	and.w	r3, r3, #16
 800d540:	2b00      	cmp	r3, #0
 800d542:	d01f      	beq.n	800d584 <tcp_process+0x7bc>
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d548:	4b14      	ldr	r3, [pc, #80]	@ (800d59c <tcp_process+0x7d4>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d119      	bne.n	800d584 <tcp_process+0x7bc>
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d554:	2b00      	cmp	r3, #0
 800d556:	d115      	bne.n	800d584 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800d558:	4b11      	ldr	r3, [pc, #68]	@ (800d5a0 <tcp_process+0x7d8>)
 800d55a:	781b      	ldrb	r3, [r3, #0]
 800d55c:	f043 0310 	orr.w	r3, r3, #16
 800d560:	b2da      	uxtb	r2, r3
 800d562:	4b0f      	ldr	r3, [pc, #60]	@ (800d5a0 <tcp_process+0x7d8>)
 800d564:	701a      	strb	r2, [r3, #0]
      }
      break;
 800d566:	e00d      	b.n	800d584 <tcp_process+0x7bc>
    default:
      break;
 800d568:	bf00      	nop
 800d56a:	e00c      	b.n	800d586 <tcp_process+0x7be>
      break;
 800d56c:	bf00      	nop
 800d56e:	e00a      	b.n	800d586 <tcp_process+0x7be>
      break;
 800d570:	bf00      	nop
 800d572:	e008      	b.n	800d586 <tcp_process+0x7be>
      break;
 800d574:	bf00      	nop
 800d576:	e006      	b.n	800d586 <tcp_process+0x7be>
      break;
 800d578:	bf00      	nop
 800d57a:	e004      	b.n	800d586 <tcp_process+0x7be>
      break;
 800d57c:	bf00      	nop
 800d57e:	e002      	b.n	800d586 <tcp_process+0x7be>
      break;
 800d580:	bf00      	nop
 800d582:	e000      	b.n	800d586 <tcp_process+0x7be>
      break;
 800d584:	bf00      	nop
  }
  return ERR_OK;
 800d586:	2300      	movs	r3, #0
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3724      	adds	r7, #36	@ 0x24
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd90      	pop	{r4, r7, pc}
 800d590:	2000dff4 	.word	0x2000dff4
 800d594:	2000dff0 	.word	0x2000dff0
 800d598:	2000e024 	.word	0x2000e024
 800d59c:	2000e01c 	.word	0x2000e01c
 800d5a0:	2000e025 	.word	0x2000e025
 800d5a4:	2000dfec 	.word	0x2000dfec

0800d5a8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d5a8:	b590      	push	{r4, r7, lr}
 800d5aa:	b085      	sub	sp, #20
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d106      	bne.n	800d5c6 <tcp_oos_insert_segment+0x1e>
 800d5b8:	4b3b      	ldr	r3, [pc, #236]	@ (800d6a8 <tcp_oos_insert_segment+0x100>)
 800d5ba:	f240 421f 	movw	r2, #1055	@ 0x41f
 800d5be:	493b      	ldr	r1, [pc, #236]	@ (800d6ac <tcp_oos_insert_segment+0x104>)
 800d5c0:	483b      	ldr	r0, [pc, #236]	@ (800d6b0 <tcp_oos_insert_segment+0x108>)
 800d5c2:	f006 fff7 	bl	80145b4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	68db      	ldr	r3, [r3, #12]
 800d5ca:	899b      	ldrh	r3, [r3, #12]
 800d5cc:	b29b      	uxth	r3, r3
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f7fb fbdc 	bl	8008d8c <lwip_htons>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	b2db      	uxtb	r3, r3
 800d5d8:	f003 0301 	and.w	r3, r3, #1
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d028      	beq.n	800d632 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d5e0:	6838      	ldr	r0, [r7, #0]
 800d5e2:	f7fe fa63 	bl	800baac <tcp_segs_free>
    next = NULL;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	603b      	str	r3, [r7, #0]
 800d5ea:	e056      	b.n	800d69a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	68db      	ldr	r3, [r3, #12]
 800d5f0:	899b      	ldrh	r3, [r3, #12]
 800d5f2:	b29b      	uxth	r3, r3
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f7fb fbc9 	bl	8008d8c <lwip_htons>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	f003 0301 	and.w	r3, r3, #1
 800d602:	2b00      	cmp	r3, #0
 800d604:	d00d      	beq.n	800d622 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	68db      	ldr	r3, [r3, #12]
 800d60a:	899b      	ldrh	r3, [r3, #12]
 800d60c:	b29c      	uxth	r4, r3
 800d60e:	2001      	movs	r0, #1
 800d610:	f7fb fbbc 	bl	8008d8c <lwip_htons>
 800d614:	4603      	mov	r3, r0
 800d616:	461a      	mov	r2, r3
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	68db      	ldr	r3, [r3, #12]
 800d61c:	4322      	orrs	r2, r4
 800d61e:	b292      	uxth	r2, r2
 800d620:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d62c:	68f8      	ldr	r0, [r7, #12]
 800d62e:	f7fe fa52 	bl	800bad6 <tcp_seg_free>
    while (next &&
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d00e      	beq.n	800d656 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	891b      	ldrh	r3, [r3, #8]
 800d63c:	461a      	mov	r2, r3
 800d63e:	4b1d      	ldr	r3, [pc, #116]	@ (800d6b4 <tcp_oos_insert_segment+0x10c>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	441a      	add	r2, r3
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	68db      	ldr	r3, [r3, #12]
 800d648:	685b      	ldr	r3, [r3, #4]
 800d64a:	6839      	ldr	r1, [r7, #0]
 800d64c:	8909      	ldrh	r1, [r1, #8]
 800d64e:	440b      	add	r3, r1
 800d650:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d652:	2b00      	cmp	r3, #0
 800d654:	daca      	bge.n	800d5ec <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d01e      	beq.n	800d69a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	891b      	ldrh	r3, [r3, #8]
 800d660:	461a      	mov	r2, r3
 800d662:	4b14      	ldr	r3, [pc, #80]	@ (800d6b4 <tcp_oos_insert_segment+0x10c>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	441a      	add	r2, r3
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	68db      	ldr	r3, [r3, #12]
 800d66c:	685b      	ldr	r3, [r3, #4]
 800d66e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d670:	2b00      	cmp	r3, #0
 800d672:	dd12      	ble.n	800d69a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	68db      	ldr	r3, [r3, #12]
 800d678:	685b      	ldr	r3, [r3, #4]
 800d67a:	b29a      	uxth	r2, r3
 800d67c:	4b0d      	ldr	r3, [pc, #52]	@ (800d6b4 <tcp_oos_insert_segment+0x10c>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	b29b      	uxth	r3, r3
 800d682:	1ad3      	subs	r3, r2, r3
 800d684:	b29a      	uxth	r2, r3
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	685a      	ldr	r2, [r3, #4]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	891b      	ldrh	r3, [r3, #8]
 800d692:	4619      	mov	r1, r3
 800d694:	4610      	mov	r0, r2
 800d696:	f7fc fe17 	bl	800a2c8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	683a      	ldr	r2, [r7, #0]
 800d69e:	601a      	str	r2, [r3, #0]
}
 800d6a0:	bf00      	nop
 800d6a2:	3714      	adds	r7, #20
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd90      	pop	{r4, r7, pc}
 800d6a8:	080165f0 	.word	0x080165f0
 800d6ac:	080168b0 	.word	0x080168b0
 800d6b0:	0801663c 	.word	0x0801663c
 800d6b4:	2000e018 	.word	0x2000e018

0800d6b8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800d6b8:	b5b0      	push	{r4, r5, r7, lr}
 800d6ba:	b086      	sub	sp, #24
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	60f8      	str	r0, [r7, #12]
 800d6c0:	60b9      	str	r1, [r7, #8]
 800d6c2:	607a      	str	r2, [r7, #4]
 800d6c4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800d6c6:	e03e      	b.n	800d746 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7fd f80a 	bl	800a6f0 <pbuf_clen>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d6e6:	8a7a      	ldrh	r2, [r7, #18]
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d906      	bls.n	800d6fa <tcp_free_acked_segments+0x42>
 800d6ec:	4b2a      	ldr	r3, [pc, #168]	@ (800d798 <tcp_free_acked_segments+0xe0>)
 800d6ee:	f240 4257 	movw	r2, #1111	@ 0x457
 800d6f2:	492a      	ldr	r1, [pc, #168]	@ (800d79c <tcp_free_acked_segments+0xe4>)
 800d6f4:	482a      	ldr	r0, [pc, #168]	@ (800d7a0 <tcp_free_acked_segments+0xe8>)
 800d6f6:	f006 ff5d 	bl	80145b4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800d700:	8a7b      	ldrh	r3, [r7, #18]
 800d702:	1ad3      	subs	r3, r2, r3
 800d704:	b29a      	uxth	r2, r3
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	891a      	ldrh	r2, [r3, #8]
 800d710:	4b24      	ldr	r3, [pc, #144]	@ (800d7a4 <tcp_free_acked_segments+0xec>)
 800d712:	881b      	ldrh	r3, [r3, #0]
 800d714:	4413      	add	r3, r2
 800d716:	b29a      	uxth	r2, r3
 800d718:	4b22      	ldr	r3, [pc, #136]	@ (800d7a4 <tcp_free_acked_segments+0xec>)
 800d71a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800d71c:	6978      	ldr	r0, [r7, #20]
 800d71e:	f7fe f9da 	bl	800bad6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d00c      	beq.n	800d746 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d109      	bne.n	800d746 <tcp_free_acked_segments+0x8e>
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d106      	bne.n	800d746 <tcp_free_acked_segments+0x8e>
 800d738:	4b17      	ldr	r3, [pc, #92]	@ (800d798 <tcp_free_acked_segments+0xe0>)
 800d73a:	f240 4261 	movw	r2, #1121	@ 0x461
 800d73e:	491a      	ldr	r1, [pc, #104]	@ (800d7a8 <tcp_free_acked_segments+0xf0>)
 800d740:	4817      	ldr	r0, [pc, #92]	@ (800d7a0 <tcp_free_acked_segments+0xe8>)
 800d742:	f006 ff37 	bl	80145b4 <iprintf>
  while (seg_list != NULL &&
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d020      	beq.n	800d78e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	68db      	ldr	r3, [r3, #12]
 800d750:	685b      	ldr	r3, [r3, #4]
 800d752:	4618      	mov	r0, r3
 800d754:	f7fb fb2f 	bl	8008db6 <lwip_htonl>
 800d758:	4604      	mov	r4, r0
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	891b      	ldrh	r3, [r3, #8]
 800d75e:	461d      	mov	r5, r3
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	68db      	ldr	r3, [r3, #12]
 800d764:	899b      	ldrh	r3, [r3, #12]
 800d766:	b29b      	uxth	r3, r3
 800d768:	4618      	mov	r0, r3
 800d76a:	f7fb fb0f 	bl	8008d8c <lwip_htons>
 800d76e:	4603      	mov	r3, r0
 800d770:	b2db      	uxtb	r3, r3
 800d772:	f003 0303 	and.w	r3, r3, #3
 800d776:	2b00      	cmp	r3, #0
 800d778:	d001      	beq.n	800d77e <tcp_free_acked_segments+0xc6>
 800d77a:	2301      	movs	r3, #1
 800d77c:	e000      	b.n	800d780 <tcp_free_acked_segments+0xc8>
 800d77e:	2300      	movs	r3, #0
 800d780:	442b      	add	r3, r5
 800d782:	18e2      	adds	r2, r4, r3
 800d784:	4b09      	ldr	r3, [pc, #36]	@ (800d7ac <tcp_free_acked_segments+0xf4>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	dd9c      	ble.n	800d6c8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800d78e:	68bb      	ldr	r3, [r7, #8]
}
 800d790:	4618      	mov	r0, r3
 800d792:	3718      	adds	r7, #24
 800d794:	46bd      	mov	sp, r7
 800d796:	bdb0      	pop	{r4, r5, r7, pc}
 800d798:	080165f0 	.word	0x080165f0
 800d79c:	080168d8 	.word	0x080168d8
 800d7a0:	0801663c 	.word	0x0801663c
 800d7a4:	2000e020 	.word	0x2000e020
 800d7a8:	08016900 	.word	0x08016900
 800d7ac:	2000e01c 	.word	0x2000e01c

0800d7b0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d7b0:	b5b0      	push	{r4, r5, r7, lr}
 800d7b2:	b094      	sub	sp, #80	@ 0x50
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d106      	bne.n	800d7d0 <tcp_receive+0x20>
 800d7c2:	4b91      	ldr	r3, [pc, #580]	@ (800da08 <tcp_receive+0x258>)
 800d7c4:	f240 427b 	movw	r2, #1147	@ 0x47b
 800d7c8:	4990      	ldr	r1, [pc, #576]	@ (800da0c <tcp_receive+0x25c>)
 800d7ca:	4891      	ldr	r0, [pc, #580]	@ (800da10 <tcp_receive+0x260>)
 800d7cc:	f006 fef2 	bl	80145b4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	7d1b      	ldrb	r3, [r3, #20]
 800d7d4:	2b03      	cmp	r3, #3
 800d7d6:	d806      	bhi.n	800d7e6 <tcp_receive+0x36>
 800d7d8:	4b8b      	ldr	r3, [pc, #556]	@ (800da08 <tcp_receive+0x258>)
 800d7da:	f240 427c 	movw	r2, #1148	@ 0x47c
 800d7de:	498d      	ldr	r1, [pc, #564]	@ (800da14 <tcp_receive+0x264>)
 800d7e0:	488b      	ldr	r0, [pc, #556]	@ (800da10 <tcp_receive+0x260>)
 800d7e2:	f006 fee7 	bl	80145b4 <iprintf>

  if (flags & TCP_ACK) {
 800d7e6:	4b8c      	ldr	r3, [pc, #560]	@ (800da18 <tcp_receive+0x268>)
 800d7e8:	781b      	ldrb	r3, [r3, #0]
 800d7ea:	f003 0310 	and.w	r3, r3, #16
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	f000 8264 	beq.w	800dcbc <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d800:	4413      	add	r3, r2
 800d802:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d808:	4b84      	ldr	r3, [pc, #528]	@ (800da1c <tcp_receive+0x26c>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	1ad3      	subs	r3, r2, r3
 800d80e:	2b00      	cmp	r3, #0
 800d810:	db1b      	blt.n	800d84a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d816:	4b81      	ldr	r3, [pc, #516]	@ (800da1c <tcp_receive+0x26c>)
 800d818:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d106      	bne.n	800d82c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d822:	4b7f      	ldr	r3, [pc, #508]	@ (800da20 <tcp_receive+0x270>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	1ad3      	subs	r3, r2, r3
 800d828:	2b00      	cmp	r3, #0
 800d82a:	db0e      	blt.n	800d84a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d830:	4b7b      	ldr	r3, [pc, #492]	@ (800da20 <tcp_receive+0x270>)
 800d832:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d834:	429a      	cmp	r2, r3
 800d836:	d125      	bne.n	800d884 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d838:	4b7a      	ldr	r3, [pc, #488]	@ (800da24 <tcp_receive+0x274>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	89db      	ldrh	r3, [r3, #14]
 800d83e:	b29a      	uxth	r2, r3
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d846:	429a      	cmp	r2, r3
 800d848:	d91c      	bls.n	800d884 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d84a:	4b76      	ldr	r3, [pc, #472]	@ (800da24 <tcp_receive+0x274>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	89db      	ldrh	r3, [r3, #14]
 800d850:	b29a      	uxth	r2, r3
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d864:	429a      	cmp	r2, r3
 800d866:	d205      	bcs.n	800d874 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800d874:	4b69      	ldr	r3, [pc, #420]	@ (800da1c <tcp_receive+0x26c>)
 800d876:	681a      	ldr	r2, [r3, #0]
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800d87c:	4b68      	ldr	r3, [pc, #416]	@ (800da20 <tcp_receive+0x270>)
 800d87e:	681a      	ldr	r2, [r3, #0]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800d884:	4b66      	ldr	r3, [pc, #408]	@ (800da20 <tcp_receive+0x270>)
 800d886:	681a      	ldr	r2, [r3, #0]
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d88c:	1ad3      	subs	r3, r2, r3
 800d88e:	2b00      	cmp	r3, #0
 800d890:	dc58      	bgt.n	800d944 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800d892:	4b65      	ldr	r3, [pc, #404]	@ (800da28 <tcp_receive+0x278>)
 800d894:	881b      	ldrh	r3, [r3, #0]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d14b      	bne.n	800d932 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d89e:	687a      	ldr	r2, [r7, #4]
 800d8a0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800d8a4:	4413      	add	r3, r2
 800d8a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d142      	bne.n	800d932 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	db3d      	blt.n	800d932 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d8ba:	4b59      	ldr	r3, [pc, #356]	@ (800da20 <tcp_receive+0x270>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d137      	bne.n	800d932 <tcp_receive+0x182>
              found_dupack = 1;
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d8cc:	2bff      	cmp	r3, #255	@ 0xff
 800d8ce:	d007      	beq.n	800d8e0 <tcp_receive+0x130>
                ++pcb->dupacks;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d8d6:	3301      	adds	r3, #1
 800d8d8:	b2da      	uxtb	r2, r3
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d8e6:	2b03      	cmp	r3, #3
 800d8e8:	d91b      	bls.n	800d922 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d8f4:	4413      	add	r3, r2
 800d8f6:	b29a      	uxth	r2, r3
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d8fe:	429a      	cmp	r2, r3
 800d900:	d30a      	bcc.n	800d918 <tcp_receive+0x168>
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d90c:	4413      	add	r3, r2
 800d90e:	b29a      	uxth	r2, r3
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d916:	e004      	b.n	800d922 <tcp_receive+0x172>
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d91e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d928:	2b02      	cmp	r3, #2
 800d92a:	d902      	bls.n	800d932 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f001 fee7 	bl	800f700 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800d932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d934:	2b00      	cmp	r3, #0
 800d936:	f040 8161 	bne.w	800dbfc <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2200      	movs	r2, #0
 800d93e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d942:	e15b      	b.n	800dbfc <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d944:	4b36      	ldr	r3, [pc, #216]	@ (800da20 <tcp_receive+0x270>)
 800d946:	681a      	ldr	r2, [r3, #0]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d94c:	1ad3      	subs	r3, r2, r3
 800d94e:	3b01      	subs	r3, #1
 800d950:	2b00      	cmp	r3, #0
 800d952:	f2c0 814e 	blt.w	800dbf2 <tcp_receive+0x442>
 800d956:	4b32      	ldr	r3, [pc, #200]	@ (800da20 <tcp_receive+0x270>)
 800d958:	681a      	ldr	r2, [r3, #0]
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d95e:	1ad3      	subs	r3, r2, r3
 800d960:	2b00      	cmp	r3, #0
 800d962:	f300 8146 	bgt.w	800dbf2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	8b5b      	ldrh	r3, [r3, #26]
 800d96a:	f003 0304 	and.w	r3, r3, #4
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d010      	beq.n	800d994 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	8b5b      	ldrh	r3, [r3, #26]
 800d976:	f023 0304 	bic.w	r3, r3, #4
 800d97a:	b29a      	uxth	r2, r3
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2200      	movs	r2, #0
 800d990:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2200      	movs	r2, #0
 800d998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d9a2:	10db      	asrs	r3, r3, #3
 800d9a4:	b21b      	sxth	r3, r3
 800d9a6:	b29a      	uxth	r2, r3
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d9ae:	b29b      	uxth	r3, r3
 800d9b0:	4413      	add	r3, r2
 800d9b2:	b29b      	uxth	r3, r3
 800d9b4:	b21a      	sxth	r2, r3
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800d9bc:	4b18      	ldr	r3, [pc, #96]	@ (800da20 <tcp_receive+0x270>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	b29a      	uxth	r2, r3
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9c6:	b29b      	uxth	r3, r3
 800d9c8:	1ad3      	subs	r3, r2, r3
 800d9ca:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800d9d4:	4b12      	ldr	r3, [pc, #72]	@ (800da20 <tcp_receive+0x270>)
 800d9d6:	681a      	ldr	r2, [r3, #0]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	7d1b      	ldrb	r3, [r3, #20]
 800d9e0:	2b03      	cmp	r3, #3
 800d9e2:	f240 8097 	bls.w	800db14 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d245      	bcs.n	800da82 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	8b5b      	ldrh	r3, [r3, #26]
 800d9fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d014      	beq.n	800da2c <tcp_receive+0x27c>
 800da02:	2301      	movs	r3, #1
 800da04:	e013      	b.n	800da2e <tcp_receive+0x27e>
 800da06:	bf00      	nop
 800da08:	080165f0 	.word	0x080165f0
 800da0c:	08016920 	.word	0x08016920
 800da10:	0801663c 	.word	0x0801663c
 800da14:	0801693c 	.word	0x0801693c
 800da18:	2000e024 	.word	0x2000e024
 800da1c:	2000e018 	.word	0x2000e018
 800da20:	2000e01c 	.word	0x2000e01c
 800da24:	2000e008 	.word	0x2000e008
 800da28:	2000e022 	.word	0x2000e022
 800da2c:	2302      	movs	r3, #2
 800da2e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800da32:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800da36:	b29a      	uxth	r2, r3
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800da3c:	fb12 f303 	smulbb	r3, r2, r3
 800da40:	b29b      	uxth	r3, r3
 800da42:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800da44:	4293      	cmp	r3, r2
 800da46:	bf28      	it	cs
 800da48:	4613      	movcs	r3, r2
 800da4a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800da52:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800da54:	4413      	add	r3, r2
 800da56:	b29a      	uxth	r2, r3
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800da5e:	429a      	cmp	r2, r3
 800da60:	d309      	bcc.n	800da76 <tcp_receive+0x2c6>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800da68:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800da6a:	4413      	add	r3, r2
 800da6c:	b29a      	uxth	r2, r3
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800da74:	e04e      	b.n	800db14 <tcp_receive+0x364>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800da7c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800da80:	e048      	b.n	800db14 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800da88:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800da8a:	4413      	add	r3, r2
 800da8c:	b29a      	uxth	r2, r3
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800da94:	429a      	cmp	r2, r3
 800da96:	d309      	bcc.n	800daac <tcp_receive+0x2fc>
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800da9e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800daa0:	4413      	add	r3, r2
 800daa2:	b29a      	uxth	r2, r3
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800daaa:	e004      	b.n	800dab6 <tcp_receive+0x306>
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dab2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d326      	bcc.n	800db14 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800dad2:	1ad3      	subs	r3, r2, r3
 800dad4:	b29a      	uxth	r2, r3
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800dae6:	4413      	add	r3, r2
 800dae8:	b29a      	uxth	r2, r3
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d30a      	bcc.n	800db0a <tcp_receive+0x35a>
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800dafe:	4413      	add	r3, r2
 800db00:	b29a      	uxth	r2, r3
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800db08:	e004      	b.n	800db14 <tcp_receive+0x364>
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800db10:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db1c:	4a98      	ldr	r2, [pc, #608]	@ (800dd80 <tcp_receive+0x5d0>)
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f7ff fdca 	bl	800d6b8 <tcp_free_acked_segments>
 800db24:	4602      	mov	r2, r0
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db32:	4a94      	ldr	r2, [pc, #592]	@ (800dd84 <tcp_receive+0x5d4>)
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f7ff fdbf 	bl	800d6b8 <tcp_free_acked_segments>
 800db3a:	4602      	mov	r2, r0
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db44:	2b00      	cmp	r3, #0
 800db46:	d104      	bne.n	800db52 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800db4e:	861a      	strh	r2, [r3, #48]	@ 0x30
 800db50:	e002      	b.n	800db58 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2200      	movs	r2, #0
 800db56:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2200      	movs	r2, #0
 800db5c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db62:	2b00      	cmp	r3, #0
 800db64:	d103      	bne.n	800db6e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2200      	movs	r2, #0
 800db6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800db74:	4b84      	ldr	r3, [pc, #528]	@ (800dd88 <tcp_receive+0x5d8>)
 800db76:	881b      	ldrh	r3, [r3, #0]
 800db78:	4413      	add	r3, r2
 800db7a:	b29a      	uxth	r2, r3
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	8b5b      	ldrh	r3, [r3, #26]
 800db86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d035      	beq.n	800dbfa <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db92:	2b00      	cmp	r3, #0
 800db94:	d118      	bne.n	800dbc8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d00c      	beq.n	800dbb8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dba6:	68db      	ldr	r3, [r3, #12]
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f7fb f903 	bl	8008db6 <lwip_htonl>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	dc20      	bgt.n	800dbfa <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	8b5b      	ldrh	r3, [r3, #26]
 800dbbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dbc0:	b29a      	uxth	r2, r3
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dbc6:	e018      	b.n	800dbfa <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dbd0:	68db      	ldr	r3, [r3, #12]
 800dbd2:	685b      	ldr	r3, [r3, #4]
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f7fb f8ee 	bl	8008db6 <lwip_htonl>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	1ae3      	subs	r3, r4, r3
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	dc0b      	bgt.n	800dbfa <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	8b5b      	ldrh	r3, [r3, #26]
 800dbe6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dbea:	b29a      	uxth	r2, r3
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dbf0:	e003      	b.n	800dbfa <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f001 ff70 	bl	800fad8 <tcp_send_empty_ack>
 800dbf8:	e000      	b.n	800dbfc <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dbfa:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d05b      	beq.n	800dcbc <tcp_receive+0x50c>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dc08:	4b60      	ldr	r3, [pc, #384]	@ (800dd8c <tcp_receive+0x5dc>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	1ad3      	subs	r3, r2, r3
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	da54      	bge.n	800dcbc <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800dc12:	4b5f      	ldr	r3, [pc, #380]	@ (800dd90 <tcp_receive+0x5e0>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	b29a      	uxth	r2, r3
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc1c:	b29b      	uxth	r3, r3
 800dc1e:	1ad3      	subs	r3, r2, r3
 800dc20:	b29b      	uxth	r3, r3
 800dc22:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800dc26:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800dc30:	10db      	asrs	r3, r3, #3
 800dc32:	b21b      	sxth	r3, r3
 800dc34:	b29b      	uxth	r3, r3
 800dc36:	1ad3      	subs	r3, r2, r3
 800dc38:	b29b      	uxth	r3, r3
 800dc3a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800dc44:	b29a      	uxth	r2, r3
 800dc46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800dc4a:	4413      	add	r3, r2
 800dc4c:	b29b      	uxth	r3, r3
 800dc4e:	b21a      	sxth	r2, r3
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800dc54:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	da05      	bge.n	800dc68 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800dc5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800dc60:	425b      	negs	r3, r3
 800dc62:	b29b      	uxth	r3, r3
 800dc64:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800dc68:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800dc72:	109b      	asrs	r3, r3, #2
 800dc74:	b21b      	sxth	r3, r3
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	1ad3      	subs	r3, r2, r3
 800dc7a:	b29b      	uxth	r3, r3
 800dc7c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800dc86:	b29a      	uxth	r2, r3
 800dc88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800dc8c:	4413      	add	r3, r2
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	b21a      	sxth	r2, r3
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800dc9c:	10db      	asrs	r3, r3, #3
 800dc9e:	b21b      	sxth	r3, r3
 800dca0:	b29a      	uxth	r2, r3
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	4413      	add	r3, r2
 800dcac:	b29b      	uxth	r3, r3
 800dcae:	b21a      	sxth	r2, r3
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800dcbc:	4b35      	ldr	r3, [pc, #212]	@ (800dd94 <tcp_receive+0x5e4>)
 800dcbe:	881b      	ldrh	r3, [r3, #0]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	f000 84df 	beq.w	800e684 <tcp_receive+0xed4>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	7d1b      	ldrb	r3, [r3, #20]
 800dcca:	2b06      	cmp	r3, #6
 800dccc:	f200 84da 	bhi.w	800e684 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dcd4:	4b30      	ldr	r3, [pc, #192]	@ (800dd98 <tcp_receive+0x5e8>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	1ad3      	subs	r3, r2, r3
 800dcda:	3b01      	subs	r3, #1
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	f2c0 808f 	blt.w	800de00 <tcp_receive+0x650>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dce6:	4b2b      	ldr	r3, [pc, #172]	@ (800dd94 <tcp_receive+0x5e4>)
 800dce8:	881b      	ldrh	r3, [r3, #0]
 800dcea:	4619      	mov	r1, r3
 800dcec:	4b2a      	ldr	r3, [pc, #168]	@ (800dd98 <tcp_receive+0x5e8>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	440b      	add	r3, r1
 800dcf2:	1ad3      	subs	r3, r2, r3
 800dcf4:	3301      	adds	r3, #1
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	f300 8082 	bgt.w	800de00 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800dcfc:	4b27      	ldr	r3, [pc, #156]	@ (800dd9c <tcp_receive+0x5ec>)
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dd06:	4b24      	ldr	r3, [pc, #144]	@ (800dd98 <tcp_receive+0x5e8>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	1ad3      	subs	r3, r2, r3
 800dd0c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800dd0e:	4b23      	ldr	r3, [pc, #140]	@ (800dd9c <tcp_receive+0x5ec>)
 800dd10:	685b      	ldr	r3, [r3, #4]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d106      	bne.n	800dd24 <tcp_receive+0x574>
 800dd16:	4b22      	ldr	r3, [pc, #136]	@ (800dda0 <tcp_receive+0x5f0>)
 800dd18:	f240 5294 	movw	r2, #1428	@ 0x594
 800dd1c:	4921      	ldr	r1, [pc, #132]	@ (800dda4 <tcp_receive+0x5f4>)
 800dd1e:	4822      	ldr	r0, [pc, #136]	@ (800dda8 <tcp_receive+0x5f8>)
 800dd20:	f006 fc48 	bl	80145b4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800dd24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd26:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	d906      	bls.n	800dd3c <tcp_receive+0x58c>
 800dd2e:	4b1c      	ldr	r3, [pc, #112]	@ (800dda0 <tcp_receive+0x5f0>)
 800dd30:	f240 5295 	movw	r2, #1429	@ 0x595
 800dd34:	491d      	ldr	r1, [pc, #116]	@ (800ddac <tcp_receive+0x5fc>)
 800dd36:	481c      	ldr	r0, [pc, #112]	@ (800dda8 <tcp_receive+0x5f8>)
 800dd38:	f006 fc3c 	bl	80145b4 <iprintf>
      off = (u16_t)off32;
 800dd3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd3e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800dd42:	4b16      	ldr	r3, [pc, #88]	@ (800dd9c <tcp_receive+0x5ec>)
 800dd44:	685b      	ldr	r3, [r3, #4]
 800dd46:	891b      	ldrh	r3, [r3, #8]
 800dd48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d906      	bls.n	800dd5e <tcp_receive+0x5ae>
 800dd50:	4b13      	ldr	r3, [pc, #76]	@ (800dda0 <tcp_receive+0x5f0>)
 800dd52:	f240 5297 	movw	r2, #1431	@ 0x597
 800dd56:	4916      	ldr	r1, [pc, #88]	@ (800ddb0 <tcp_receive+0x600>)
 800dd58:	4813      	ldr	r0, [pc, #76]	@ (800dda8 <tcp_receive+0x5f8>)
 800dd5a:	f006 fc2b 	bl	80145b4 <iprintf>
      inseg.len -= off;
 800dd5e:	4b0f      	ldr	r3, [pc, #60]	@ (800dd9c <tcp_receive+0x5ec>)
 800dd60:	891a      	ldrh	r2, [r3, #8]
 800dd62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dd66:	1ad3      	subs	r3, r2, r3
 800dd68:	b29a      	uxth	r2, r3
 800dd6a:	4b0c      	ldr	r3, [pc, #48]	@ (800dd9c <tcp_receive+0x5ec>)
 800dd6c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800dd6e:	4b0b      	ldr	r3, [pc, #44]	@ (800dd9c <tcp_receive+0x5ec>)
 800dd70:	685b      	ldr	r3, [r3, #4]
 800dd72:	891a      	ldrh	r2, [r3, #8]
 800dd74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dd78:	1ad3      	subs	r3, r2, r3
 800dd7a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800dd7c:	e02a      	b.n	800ddd4 <tcp_receive+0x624>
 800dd7e:	bf00      	nop
 800dd80:	08016958 	.word	0x08016958
 800dd84:	08016960 	.word	0x08016960
 800dd88:	2000e020 	.word	0x2000e020
 800dd8c:	2000e01c 	.word	0x2000e01c
 800dd90:	2000dfe0 	.word	0x2000dfe0
 800dd94:	2000e022 	.word	0x2000e022
 800dd98:	2000e018 	.word	0x2000e018
 800dd9c:	2000dff8 	.word	0x2000dff8
 800dda0:	080165f0 	.word	0x080165f0
 800dda4:	08016968 	.word	0x08016968
 800dda8:	0801663c 	.word	0x0801663c
 800ddac:	08016978 	.word	0x08016978
 800ddb0:	08016988 	.word	0x08016988
        off -= p->len;
 800ddb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ddb6:	895b      	ldrh	r3, [r3, #10]
 800ddb8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ddbc:	1ad3      	subs	r3, r2, r3
 800ddbe:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ddc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ddc4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800ddc6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ddc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ddca:	2200      	movs	r2, #0
 800ddcc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ddce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800ddd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ddd6:	895b      	ldrh	r3, [r3, #10]
 800ddd8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d8e9      	bhi.n	800ddb4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800dde0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dde4:	4619      	mov	r1, r3
 800dde6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800dde8:	f7fc fb6e 	bl	800a4c8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddf0:	4a90      	ldr	r2, [pc, #576]	@ (800e034 <tcp_receive+0x884>)
 800ddf2:	6013      	str	r3, [r2, #0]
 800ddf4:	4b90      	ldr	r3, [pc, #576]	@ (800e038 <tcp_receive+0x888>)
 800ddf6:	68db      	ldr	r3, [r3, #12]
 800ddf8:	4a8e      	ldr	r2, [pc, #568]	@ (800e034 <tcp_receive+0x884>)
 800ddfa:	6812      	ldr	r2, [r2, #0]
 800ddfc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ddfe:	e00d      	b.n	800de1c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800de00:	4b8c      	ldr	r3, [pc, #560]	@ (800e034 <tcp_receive+0x884>)
 800de02:	681a      	ldr	r2, [r3, #0]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de08:	1ad3      	subs	r3, r2, r3
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	da06      	bge.n	800de1c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	8b5b      	ldrh	r3, [r3, #26]
 800de12:	f043 0302 	orr.w	r3, r3, #2
 800de16:	b29a      	uxth	r2, r3
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800de1c:	4b85      	ldr	r3, [pc, #532]	@ (800e034 <tcp_receive+0x884>)
 800de1e:	681a      	ldr	r2, [r3, #0]
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de24:	1ad3      	subs	r3, r2, r3
 800de26:	2b00      	cmp	r3, #0
 800de28:	f2c0 8427 	blt.w	800e67a <tcp_receive+0xeca>
 800de2c:	4b81      	ldr	r3, [pc, #516]	@ (800e034 <tcp_receive+0x884>)
 800de2e:	681a      	ldr	r2, [r3, #0]
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de34:	6879      	ldr	r1, [r7, #4]
 800de36:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800de38:	440b      	add	r3, r1
 800de3a:	1ad3      	subs	r3, r2, r3
 800de3c:	3301      	adds	r3, #1
 800de3e:	2b00      	cmp	r3, #0
 800de40:	f300 841b 	bgt.w	800e67a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800de48:	4b7a      	ldr	r3, [pc, #488]	@ (800e034 <tcp_receive+0x884>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	f040 8298 	bne.w	800e382 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800de52:	4b79      	ldr	r3, [pc, #484]	@ (800e038 <tcp_receive+0x888>)
 800de54:	891c      	ldrh	r4, [r3, #8]
 800de56:	4b78      	ldr	r3, [pc, #480]	@ (800e038 <tcp_receive+0x888>)
 800de58:	68db      	ldr	r3, [r3, #12]
 800de5a:	899b      	ldrh	r3, [r3, #12]
 800de5c:	b29b      	uxth	r3, r3
 800de5e:	4618      	mov	r0, r3
 800de60:	f7fa ff94 	bl	8008d8c <lwip_htons>
 800de64:	4603      	mov	r3, r0
 800de66:	b2db      	uxtb	r3, r3
 800de68:	f003 0303 	and.w	r3, r3, #3
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d001      	beq.n	800de74 <tcp_receive+0x6c4>
 800de70:	2301      	movs	r3, #1
 800de72:	e000      	b.n	800de76 <tcp_receive+0x6c6>
 800de74:	2300      	movs	r3, #0
 800de76:	4423      	add	r3, r4
 800de78:	b29a      	uxth	r2, r3
 800de7a:	4b70      	ldr	r3, [pc, #448]	@ (800e03c <tcp_receive+0x88c>)
 800de7c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800de82:	4b6e      	ldr	r3, [pc, #440]	@ (800e03c <tcp_receive+0x88c>)
 800de84:	881b      	ldrh	r3, [r3, #0]
 800de86:	429a      	cmp	r2, r3
 800de88:	d274      	bcs.n	800df74 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800de8a:	4b6b      	ldr	r3, [pc, #428]	@ (800e038 <tcp_receive+0x888>)
 800de8c:	68db      	ldr	r3, [r3, #12]
 800de8e:	899b      	ldrh	r3, [r3, #12]
 800de90:	b29b      	uxth	r3, r3
 800de92:	4618      	mov	r0, r3
 800de94:	f7fa ff7a 	bl	8008d8c <lwip_htons>
 800de98:	4603      	mov	r3, r0
 800de9a:	b2db      	uxtb	r3, r3
 800de9c:	f003 0301 	and.w	r3, r3, #1
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d01e      	beq.n	800dee2 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800dea4:	4b64      	ldr	r3, [pc, #400]	@ (800e038 <tcp_receive+0x888>)
 800dea6:	68db      	ldr	r3, [r3, #12]
 800dea8:	899b      	ldrh	r3, [r3, #12]
 800deaa:	b29b      	uxth	r3, r3
 800deac:	b21b      	sxth	r3, r3
 800deae:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800deb2:	b21c      	sxth	r4, r3
 800deb4:	4b60      	ldr	r3, [pc, #384]	@ (800e038 <tcp_receive+0x888>)
 800deb6:	68db      	ldr	r3, [r3, #12]
 800deb8:	899b      	ldrh	r3, [r3, #12]
 800deba:	b29b      	uxth	r3, r3
 800debc:	4618      	mov	r0, r3
 800debe:	f7fa ff65 	bl	8008d8c <lwip_htons>
 800dec2:	4603      	mov	r3, r0
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800deca:	b29b      	uxth	r3, r3
 800decc:	4618      	mov	r0, r3
 800dece:	f7fa ff5d 	bl	8008d8c <lwip_htons>
 800ded2:	4603      	mov	r3, r0
 800ded4:	b21b      	sxth	r3, r3
 800ded6:	4323      	orrs	r3, r4
 800ded8:	b21a      	sxth	r2, r3
 800deda:	4b57      	ldr	r3, [pc, #348]	@ (800e038 <tcp_receive+0x888>)
 800dedc:	68db      	ldr	r3, [r3, #12]
 800dede:	b292      	uxth	r2, r2
 800dee0:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800dee6:	4b54      	ldr	r3, [pc, #336]	@ (800e038 <tcp_receive+0x888>)
 800dee8:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800deea:	4b53      	ldr	r3, [pc, #332]	@ (800e038 <tcp_receive+0x888>)
 800deec:	68db      	ldr	r3, [r3, #12]
 800deee:	899b      	ldrh	r3, [r3, #12]
 800def0:	b29b      	uxth	r3, r3
 800def2:	4618      	mov	r0, r3
 800def4:	f7fa ff4a 	bl	8008d8c <lwip_htons>
 800def8:	4603      	mov	r3, r0
 800defa:	b2db      	uxtb	r3, r3
 800defc:	f003 0302 	and.w	r3, r3, #2
 800df00:	2b00      	cmp	r3, #0
 800df02:	d005      	beq.n	800df10 <tcp_receive+0x760>
            inseg.len -= 1;
 800df04:	4b4c      	ldr	r3, [pc, #304]	@ (800e038 <tcp_receive+0x888>)
 800df06:	891b      	ldrh	r3, [r3, #8]
 800df08:	3b01      	subs	r3, #1
 800df0a:	b29a      	uxth	r2, r3
 800df0c:	4b4a      	ldr	r3, [pc, #296]	@ (800e038 <tcp_receive+0x888>)
 800df0e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800df10:	4b49      	ldr	r3, [pc, #292]	@ (800e038 <tcp_receive+0x888>)
 800df12:	685b      	ldr	r3, [r3, #4]
 800df14:	4a48      	ldr	r2, [pc, #288]	@ (800e038 <tcp_receive+0x888>)
 800df16:	8912      	ldrh	r2, [r2, #8]
 800df18:	4611      	mov	r1, r2
 800df1a:	4618      	mov	r0, r3
 800df1c:	f7fc f9d4 	bl	800a2c8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800df20:	4b45      	ldr	r3, [pc, #276]	@ (800e038 <tcp_receive+0x888>)
 800df22:	891c      	ldrh	r4, [r3, #8]
 800df24:	4b44      	ldr	r3, [pc, #272]	@ (800e038 <tcp_receive+0x888>)
 800df26:	68db      	ldr	r3, [r3, #12]
 800df28:	899b      	ldrh	r3, [r3, #12]
 800df2a:	b29b      	uxth	r3, r3
 800df2c:	4618      	mov	r0, r3
 800df2e:	f7fa ff2d 	bl	8008d8c <lwip_htons>
 800df32:	4603      	mov	r3, r0
 800df34:	b2db      	uxtb	r3, r3
 800df36:	f003 0303 	and.w	r3, r3, #3
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d001      	beq.n	800df42 <tcp_receive+0x792>
 800df3e:	2301      	movs	r3, #1
 800df40:	e000      	b.n	800df44 <tcp_receive+0x794>
 800df42:	2300      	movs	r3, #0
 800df44:	4423      	add	r3, r4
 800df46:	b29a      	uxth	r2, r3
 800df48:	4b3c      	ldr	r3, [pc, #240]	@ (800e03c <tcp_receive+0x88c>)
 800df4a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800df4c:	4b3b      	ldr	r3, [pc, #236]	@ (800e03c <tcp_receive+0x88c>)
 800df4e:	881b      	ldrh	r3, [r3, #0]
 800df50:	461a      	mov	r2, r3
 800df52:	4b38      	ldr	r3, [pc, #224]	@ (800e034 <tcp_receive+0x884>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	441a      	add	r2, r3
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df5c:	6879      	ldr	r1, [r7, #4]
 800df5e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800df60:	440b      	add	r3, r1
 800df62:	429a      	cmp	r2, r3
 800df64:	d006      	beq.n	800df74 <tcp_receive+0x7c4>
 800df66:	4b36      	ldr	r3, [pc, #216]	@ (800e040 <tcp_receive+0x890>)
 800df68:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800df6c:	4935      	ldr	r1, [pc, #212]	@ (800e044 <tcp_receive+0x894>)
 800df6e:	4836      	ldr	r0, [pc, #216]	@ (800e048 <tcp_receive+0x898>)
 800df70:	f006 fb20 	bl	80145b4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df78:	2b00      	cmp	r3, #0
 800df7a:	f000 80e6 	beq.w	800e14a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800df7e:	4b2e      	ldr	r3, [pc, #184]	@ (800e038 <tcp_receive+0x888>)
 800df80:	68db      	ldr	r3, [r3, #12]
 800df82:	899b      	ldrh	r3, [r3, #12]
 800df84:	b29b      	uxth	r3, r3
 800df86:	4618      	mov	r0, r3
 800df88:	f7fa ff00 	bl	8008d8c <lwip_htons>
 800df8c:	4603      	mov	r3, r0
 800df8e:	b2db      	uxtb	r3, r3
 800df90:	f003 0301 	and.w	r3, r3, #1
 800df94:	2b00      	cmp	r3, #0
 800df96:	d010      	beq.n	800dfba <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800df98:	e00a      	b.n	800dfb0 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df9e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dfa4:	681a      	ldr	r2, [r3, #0]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800dfaa:	68f8      	ldr	r0, [r7, #12]
 800dfac:	f7fd fd93 	bl	800bad6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d1f0      	bne.n	800df9a <tcp_receive+0x7ea>
 800dfb8:	e0c7      	b.n	800e14a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dfbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800dfc0:	e051      	b.n	800e066 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800dfc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfc4:	68db      	ldr	r3, [r3, #12]
 800dfc6:	899b      	ldrh	r3, [r3, #12]
 800dfc8:	b29b      	uxth	r3, r3
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7fa fede 	bl	8008d8c <lwip_htons>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	b2db      	uxtb	r3, r3
 800dfd4:	f003 0301 	and.w	r3, r3, #1
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d03c      	beq.n	800e056 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800dfdc:	4b16      	ldr	r3, [pc, #88]	@ (800e038 <tcp_receive+0x888>)
 800dfde:	68db      	ldr	r3, [r3, #12]
 800dfe0:	899b      	ldrh	r3, [r3, #12]
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f7fa fed1 	bl	8008d8c <lwip_htons>
 800dfea:	4603      	mov	r3, r0
 800dfec:	b2db      	uxtb	r3, r3
 800dfee:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d12f      	bne.n	800e056 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800dff6:	4b10      	ldr	r3, [pc, #64]	@ (800e038 <tcp_receive+0x888>)
 800dff8:	68db      	ldr	r3, [r3, #12]
 800dffa:	899b      	ldrh	r3, [r3, #12]
 800dffc:	b29c      	uxth	r4, r3
 800dffe:	2001      	movs	r0, #1
 800e000:	f7fa fec4 	bl	8008d8c <lwip_htons>
 800e004:	4603      	mov	r3, r0
 800e006:	461a      	mov	r2, r3
 800e008:	4b0b      	ldr	r3, [pc, #44]	@ (800e038 <tcp_receive+0x888>)
 800e00a:	68db      	ldr	r3, [r3, #12]
 800e00c:	4322      	orrs	r2, r4
 800e00e:	b292      	uxth	r2, r2
 800e010:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e012:	4b09      	ldr	r3, [pc, #36]	@ (800e038 <tcp_receive+0x888>)
 800e014:	891c      	ldrh	r4, [r3, #8]
 800e016:	4b08      	ldr	r3, [pc, #32]	@ (800e038 <tcp_receive+0x888>)
 800e018:	68db      	ldr	r3, [r3, #12]
 800e01a:	899b      	ldrh	r3, [r3, #12]
 800e01c:	b29b      	uxth	r3, r3
 800e01e:	4618      	mov	r0, r3
 800e020:	f7fa feb4 	bl	8008d8c <lwip_htons>
 800e024:	4603      	mov	r3, r0
 800e026:	b2db      	uxtb	r3, r3
 800e028:	f003 0303 	and.w	r3, r3, #3
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d00d      	beq.n	800e04c <tcp_receive+0x89c>
 800e030:	2301      	movs	r3, #1
 800e032:	e00c      	b.n	800e04e <tcp_receive+0x89e>
 800e034:	2000e018 	.word	0x2000e018
 800e038:	2000dff8 	.word	0x2000dff8
 800e03c:	2000e022 	.word	0x2000e022
 800e040:	080165f0 	.word	0x080165f0
 800e044:	08016998 	.word	0x08016998
 800e048:	0801663c 	.word	0x0801663c
 800e04c:	2300      	movs	r3, #0
 800e04e:	4423      	add	r3, r4
 800e050:	b29a      	uxth	r2, r3
 800e052:	4b98      	ldr	r3, [pc, #608]	@ (800e2b4 <tcp_receive+0xb04>)
 800e054:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800e056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e058:	613b      	str	r3, [r7, #16]
              next = next->next;
 800e05a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800e060:	6938      	ldr	r0, [r7, #16]
 800e062:	f7fd fd38 	bl	800bad6 <tcp_seg_free>
            while (next &&
 800e066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d00e      	beq.n	800e08a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e06c:	4b91      	ldr	r3, [pc, #580]	@ (800e2b4 <tcp_receive+0xb04>)
 800e06e:	881b      	ldrh	r3, [r3, #0]
 800e070:	461a      	mov	r2, r3
 800e072:	4b91      	ldr	r3, [pc, #580]	@ (800e2b8 <tcp_receive+0xb08>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	441a      	add	r2, r3
 800e078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e07a:	68db      	ldr	r3, [r3, #12]
 800e07c:	685b      	ldr	r3, [r3, #4]
 800e07e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e080:	8909      	ldrh	r1, [r1, #8]
 800e082:	440b      	add	r3, r1
 800e084:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e086:	2b00      	cmp	r3, #0
 800e088:	da9b      	bge.n	800dfc2 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e08a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d059      	beq.n	800e144 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800e090:	4b88      	ldr	r3, [pc, #544]	@ (800e2b4 <tcp_receive+0xb04>)
 800e092:	881b      	ldrh	r3, [r3, #0]
 800e094:	461a      	mov	r2, r3
 800e096:	4b88      	ldr	r3, [pc, #544]	@ (800e2b8 <tcp_receive+0xb08>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	441a      	add	r2, r3
 800e09c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e09e:	68db      	ldr	r3, [r3, #12]
 800e0a0:	685b      	ldr	r3, [r3, #4]
 800e0a2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	dd4d      	ble.n	800e144 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e0a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0aa:	68db      	ldr	r3, [r3, #12]
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	b29a      	uxth	r2, r3
 800e0b0:	4b81      	ldr	r3, [pc, #516]	@ (800e2b8 <tcp_receive+0xb08>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	b29b      	uxth	r3, r3
 800e0b6:	1ad3      	subs	r3, r2, r3
 800e0b8:	b29a      	uxth	r2, r3
 800e0ba:	4b80      	ldr	r3, [pc, #512]	@ (800e2bc <tcp_receive+0xb0c>)
 800e0bc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e0be:	4b7f      	ldr	r3, [pc, #508]	@ (800e2bc <tcp_receive+0xb0c>)
 800e0c0:	68db      	ldr	r3, [r3, #12]
 800e0c2:	899b      	ldrh	r3, [r3, #12]
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7fa fe60 	bl	8008d8c <lwip_htons>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	b2db      	uxtb	r3, r3
 800e0d0:	f003 0302 	and.w	r3, r3, #2
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d005      	beq.n	800e0e4 <tcp_receive+0x934>
                inseg.len -= 1;
 800e0d8:	4b78      	ldr	r3, [pc, #480]	@ (800e2bc <tcp_receive+0xb0c>)
 800e0da:	891b      	ldrh	r3, [r3, #8]
 800e0dc:	3b01      	subs	r3, #1
 800e0de:	b29a      	uxth	r2, r3
 800e0e0:	4b76      	ldr	r3, [pc, #472]	@ (800e2bc <tcp_receive+0xb0c>)
 800e0e2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e0e4:	4b75      	ldr	r3, [pc, #468]	@ (800e2bc <tcp_receive+0xb0c>)
 800e0e6:	685b      	ldr	r3, [r3, #4]
 800e0e8:	4a74      	ldr	r2, [pc, #464]	@ (800e2bc <tcp_receive+0xb0c>)
 800e0ea:	8912      	ldrh	r2, [r2, #8]
 800e0ec:	4611      	mov	r1, r2
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f7fc f8ea 	bl	800a2c8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e0f4:	4b71      	ldr	r3, [pc, #452]	@ (800e2bc <tcp_receive+0xb0c>)
 800e0f6:	891c      	ldrh	r4, [r3, #8]
 800e0f8:	4b70      	ldr	r3, [pc, #448]	@ (800e2bc <tcp_receive+0xb0c>)
 800e0fa:	68db      	ldr	r3, [r3, #12]
 800e0fc:	899b      	ldrh	r3, [r3, #12]
 800e0fe:	b29b      	uxth	r3, r3
 800e100:	4618      	mov	r0, r3
 800e102:	f7fa fe43 	bl	8008d8c <lwip_htons>
 800e106:	4603      	mov	r3, r0
 800e108:	b2db      	uxtb	r3, r3
 800e10a:	f003 0303 	and.w	r3, r3, #3
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d001      	beq.n	800e116 <tcp_receive+0x966>
 800e112:	2301      	movs	r3, #1
 800e114:	e000      	b.n	800e118 <tcp_receive+0x968>
 800e116:	2300      	movs	r3, #0
 800e118:	4423      	add	r3, r4
 800e11a:	b29a      	uxth	r2, r3
 800e11c:	4b65      	ldr	r3, [pc, #404]	@ (800e2b4 <tcp_receive+0xb04>)
 800e11e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e120:	4b64      	ldr	r3, [pc, #400]	@ (800e2b4 <tcp_receive+0xb04>)
 800e122:	881b      	ldrh	r3, [r3, #0]
 800e124:	461a      	mov	r2, r3
 800e126:	4b64      	ldr	r3, [pc, #400]	@ (800e2b8 <tcp_receive+0xb08>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	441a      	add	r2, r3
 800e12c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e12e:	68db      	ldr	r3, [r3, #12]
 800e130:	685b      	ldr	r3, [r3, #4]
 800e132:	429a      	cmp	r2, r3
 800e134:	d006      	beq.n	800e144 <tcp_receive+0x994>
 800e136:	4b62      	ldr	r3, [pc, #392]	@ (800e2c0 <tcp_receive+0xb10>)
 800e138:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800e13c:	4961      	ldr	r1, [pc, #388]	@ (800e2c4 <tcp_receive+0xb14>)
 800e13e:	4862      	ldr	r0, [pc, #392]	@ (800e2c8 <tcp_receive+0xb18>)
 800e140:	f006 fa38 	bl	80145b4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e148:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800e14a:	4b5a      	ldr	r3, [pc, #360]	@ (800e2b4 <tcp_receive+0xb04>)
 800e14c:	881b      	ldrh	r3, [r3, #0]
 800e14e:	461a      	mov	r2, r3
 800e150:	4b59      	ldr	r3, [pc, #356]	@ (800e2b8 <tcp_receive+0xb08>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	441a      	add	r2, r3
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e15e:	4b55      	ldr	r3, [pc, #340]	@ (800e2b4 <tcp_receive+0xb04>)
 800e160:	881b      	ldrh	r3, [r3, #0]
 800e162:	429a      	cmp	r2, r3
 800e164:	d206      	bcs.n	800e174 <tcp_receive+0x9c4>
 800e166:	4b56      	ldr	r3, [pc, #344]	@ (800e2c0 <tcp_receive+0xb10>)
 800e168:	f240 6207 	movw	r2, #1543	@ 0x607
 800e16c:	4957      	ldr	r1, [pc, #348]	@ (800e2cc <tcp_receive+0xb1c>)
 800e16e:	4856      	ldr	r0, [pc, #344]	@ (800e2c8 <tcp_receive+0xb18>)
 800e170:	f006 fa20 	bl	80145b4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e178:	4b4e      	ldr	r3, [pc, #312]	@ (800e2b4 <tcp_receive+0xb04>)
 800e17a:	881b      	ldrh	r3, [r3, #0]
 800e17c:	1ad3      	subs	r3, r2, r3
 800e17e:	b29a      	uxth	r2, r3
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f7fc ffc5 	bl	800b114 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e18a:	4b4c      	ldr	r3, [pc, #304]	@ (800e2bc <tcp_receive+0xb0c>)
 800e18c:	685b      	ldr	r3, [r3, #4]
 800e18e:	891b      	ldrh	r3, [r3, #8]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d006      	beq.n	800e1a2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800e194:	4b49      	ldr	r3, [pc, #292]	@ (800e2bc <tcp_receive+0xb0c>)
 800e196:	685b      	ldr	r3, [r3, #4]
 800e198:	4a4d      	ldr	r2, [pc, #308]	@ (800e2d0 <tcp_receive+0xb20>)
 800e19a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e19c:	4b47      	ldr	r3, [pc, #284]	@ (800e2bc <tcp_receive+0xb0c>)
 800e19e:	2200      	movs	r2, #0
 800e1a0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e1a2:	4b46      	ldr	r3, [pc, #280]	@ (800e2bc <tcp_receive+0xb0c>)
 800e1a4:	68db      	ldr	r3, [r3, #12]
 800e1a6:	899b      	ldrh	r3, [r3, #12]
 800e1a8:	b29b      	uxth	r3, r3
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f7fa fdee 	bl	8008d8c <lwip_htons>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	b2db      	uxtb	r3, r3
 800e1b4:	f003 0301 	and.w	r3, r3, #1
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	f000 80b8 	beq.w	800e32e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e1be:	4b45      	ldr	r3, [pc, #276]	@ (800e2d4 <tcp_receive+0xb24>)
 800e1c0:	781b      	ldrb	r3, [r3, #0]
 800e1c2:	f043 0320 	orr.w	r3, r3, #32
 800e1c6:	b2da      	uxtb	r2, r3
 800e1c8:	4b42      	ldr	r3, [pc, #264]	@ (800e2d4 <tcp_receive+0xb24>)
 800e1ca:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e1cc:	e0af      	b.n	800e32e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e1d2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e1d8:	68db      	ldr	r3, [r3, #12]
 800e1da:	685b      	ldr	r3, [r3, #4]
 800e1dc:	4a36      	ldr	r2, [pc, #216]	@ (800e2b8 <tcp_receive+0xb08>)
 800e1de:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	891b      	ldrh	r3, [r3, #8]
 800e1e4:	461c      	mov	r4, r3
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	68db      	ldr	r3, [r3, #12]
 800e1ea:	899b      	ldrh	r3, [r3, #12]
 800e1ec:	b29b      	uxth	r3, r3
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7fa fdcc 	bl	8008d8c <lwip_htons>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	b2db      	uxtb	r3, r3
 800e1f8:	f003 0303 	and.w	r3, r3, #3
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d001      	beq.n	800e204 <tcp_receive+0xa54>
 800e200:	2301      	movs	r3, #1
 800e202:	e000      	b.n	800e206 <tcp_receive+0xa56>
 800e204:	2300      	movs	r3, #0
 800e206:	191a      	adds	r2, r3, r4
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e20c:	441a      	add	r2, r3
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e216:	461c      	mov	r4, r3
 800e218:	68bb      	ldr	r3, [r7, #8]
 800e21a:	891b      	ldrh	r3, [r3, #8]
 800e21c:	461d      	mov	r5, r3
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	68db      	ldr	r3, [r3, #12]
 800e222:	899b      	ldrh	r3, [r3, #12]
 800e224:	b29b      	uxth	r3, r3
 800e226:	4618      	mov	r0, r3
 800e228:	f7fa fdb0 	bl	8008d8c <lwip_htons>
 800e22c:	4603      	mov	r3, r0
 800e22e:	b2db      	uxtb	r3, r3
 800e230:	f003 0303 	and.w	r3, r3, #3
 800e234:	2b00      	cmp	r3, #0
 800e236:	d001      	beq.n	800e23c <tcp_receive+0xa8c>
 800e238:	2301      	movs	r3, #1
 800e23a:	e000      	b.n	800e23e <tcp_receive+0xa8e>
 800e23c:	2300      	movs	r3, #0
 800e23e:	442b      	add	r3, r5
 800e240:	429c      	cmp	r4, r3
 800e242:	d206      	bcs.n	800e252 <tcp_receive+0xaa2>
 800e244:	4b1e      	ldr	r3, [pc, #120]	@ (800e2c0 <tcp_receive+0xb10>)
 800e246:	f240 622b 	movw	r2, #1579	@ 0x62b
 800e24a:	4923      	ldr	r1, [pc, #140]	@ (800e2d8 <tcp_receive+0xb28>)
 800e24c:	481e      	ldr	r0, [pc, #120]	@ (800e2c8 <tcp_receive+0xb18>)
 800e24e:	f006 f9b1 	bl	80145b4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	891b      	ldrh	r3, [r3, #8]
 800e256:	461c      	mov	r4, r3
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	68db      	ldr	r3, [r3, #12]
 800e25c:	899b      	ldrh	r3, [r3, #12]
 800e25e:	b29b      	uxth	r3, r3
 800e260:	4618      	mov	r0, r3
 800e262:	f7fa fd93 	bl	8008d8c <lwip_htons>
 800e266:	4603      	mov	r3, r0
 800e268:	b2db      	uxtb	r3, r3
 800e26a:	f003 0303 	and.w	r3, r3, #3
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d001      	beq.n	800e276 <tcp_receive+0xac6>
 800e272:	2301      	movs	r3, #1
 800e274:	e000      	b.n	800e278 <tcp_receive+0xac8>
 800e276:	2300      	movs	r3, #0
 800e278:	1919      	adds	r1, r3, r4
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e27e:	b28b      	uxth	r3, r1
 800e280:	1ad3      	subs	r3, r2, r3
 800e282:	b29a      	uxth	r2, r3
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f7fc ff43 	bl	800b114 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	685b      	ldr	r3, [r3, #4]
 800e292:	891b      	ldrh	r3, [r3, #8]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d028      	beq.n	800e2ea <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e298:	4b0d      	ldr	r3, [pc, #52]	@ (800e2d0 <tcp_receive+0xb20>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d01d      	beq.n	800e2dc <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800e2a0:	4b0b      	ldr	r3, [pc, #44]	@ (800e2d0 <tcp_receive+0xb20>)
 800e2a2:	681a      	ldr	r2, [r3, #0]
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	685b      	ldr	r3, [r3, #4]
 800e2a8:	4619      	mov	r1, r3
 800e2aa:	4610      	mov	r0, r2
 800e2ac:	f7fc fa60 	bl	800a770 <pbuf_cat>
 800e2b0:	e018      	b.n	800e2e4 <tcp_receive+0xb34>
 800e2b2:	bf00      	nop
 800e2b4:	2000e022 	.word	0x2000e022
 800e2b8:	2000e018 	.word	0x2000e018
 800e2bc:	2000dff8 	.word	0x2000dff8
 800e2c0:	080165f0 	.word	0x080165f0
 800e2c4:	080169d0 	.word	0x080169d0
 800e2c8:	0801663c 	.word	0x0801663c
 800e2cc:	08016a0c 	.word	0x08016a0c
 800e2d0:	2000e028 	.word	0x2000e028
 800e2d4:	2000e025 	.word	0x2000e025
 800e2d8:	08016a2c 	.word	0x08016a2c
            } else {
              recv_data = cseg->p;
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	685b      	ldr	r3, [r3, #4]
 800e2e0:	4a70      	ldr	r2, [pc, #448]	@ (800e4a4 <tcp_receive+0xcf4>)
 800e2e2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	68db      	ldr	r3, [r3, #12]
 800e2ee:	899b      	ldrh	r3, [r3, #12]
 800e2f0:	b29b      	uxth	r3, r3
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f7fa fd4a 	bl	8008d8c <lwip_htons>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	b2db      	uxtb	r3, r3
 800e2fc:	f003 0301 	and.w	r3, r3, #1
 800e300:	2b00      	cmp	r3, #0
 800e302:	d00d      	beq.n	800e320 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e304:	4b68      	ldr	r3, [pc, #416]	@ (800e4a8 <tcp_receive+0xcf8>)
 800e306:	781b      	ldrb	r3, [r3, #0]
 800e308:	f043 0320 	orr.w	r3, r3, #32
 800e30c:	b2da      	uxtb	r2, r3
 800e30e:	4b66      	ldr	r3, [pc, #408]	@ (800e4a8 <tcp_receive+0xcf8>)
 800e310:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	7d1b      	ldrb	r3, [r3, #20]
 800e316:	2b04      	cmp	r3, #4
 800e318:	d102      	bne.n	800e320 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2207      	movs	r2, #7
 800e31e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	681a      	ldr	r2, [r3, #0]
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800e328:	68b8      	ldr	r0, [r7, #8]
 800e32a:	f7fd fbd4 	bl	800bad6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e332:	2b00      	cmp	r3, #0
 800e334:	d008      	beq.n	800e348 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e33a:	68db      	ldr	r3, [r3, #12]
 800e33c:	685a      	ldr	r2, [r3, #4]
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800e342:	429a      	cmp	r2, r3
 800e344:	f43f af43 	beq.w	800e1ce <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	8b5b      	ldrh	r3, [r3, #26]
 800e34c:	f003 0301 	and.w	r3, r3, #1
 800e350:	2b00      	cmp	r3, #0
 800e352:	d00e      	beq.n	800e372 <tcp_receive+0xbc2>
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	8b5b      	ldrh	r3, [r3, #26]
 800e358:	f023 0301 	bic.w	r3, r3, #1
 800e35c:	b29a      	uxth	r2, r3
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	835a      	strh	r2, [r3, #26]
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	8b5b      	ldrh	r3, [r3, #26]
 800e366:	f043 0302 	orr.w	r3, r3, #2
 800e36a:	b29a      	uxth	r2, r3
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e370:	e187      	b.n	800e682 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	8b5b      	ldrh	r3, [r3, #26]
 800e376:	f043 0301 	orr.w	r3, r3, #1
 800e37a:	b29a      	uxth	r2, r3
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e380:	e17f      	b.n	800e682 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e386:	2b00      	cmp	r3, #0
 800e388:	d106      	bne.n	800e398 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e38a:	4848      	ldr	r0, [pc, #288]	@ (800e4ac <tcp_receive+0xcfc>)
 800e38c:	f7fd fbbc 	bl	800bb08 <tcp_seg_copy>
 800e390:	4602      	mov	r2, r0
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	675a      	str	r2, [r3, #116]	@ 0x74
 800e396:	e16c      	b.n	800e672 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800e398:	2300      	movs	r3, #0
 800e39a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e3a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e3a2:	e156      	b.n	800e652 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800e3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3a6:	68db      	ldr	r3, [r3, #12]
 800e3a8:	685a      	ldr	r2, [r3, #4]
 800e3aa:	4b41      	ldr	r3, [pc, #260]	@ (800e4b0 <tcp_receive+0xd00>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	d11d      	bne.n	800e3ee <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e3b2:	4b3e      	ldr	r3, [pc, #248]	@ (800e4ac <tcp_receive+0xcfc>)
 800e3b4:	891a      	ldrh	r2, [r3, #8]
 800e3b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3b8:	891b      	ldrh	r3, [r3, #8]
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	f240 814e 	bls.w	800e65c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e3c0:	483a      	ldr	r0, [pc, #232]	@ (800e4ac <tcp_receive+0xcfc>)
 800e3c2:	f7fd fba1 	bl	800bb08 <tcp_seg_copy>
 800e3c6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	f000 8148 	beq.w	800e660 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800e3d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d003      	beq.n	800e3de <tcp_receive+0xc2e>
                    prev->next = cseg;
 800e3d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3d8:	697a      	ldr	r2, [r7, #20]
 800e3da:	601a      	str	r2, [r3, #0]
 800e3dc:	e002      	b.n	800e3e4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	697a      	ldr	r2, [r7, #20]
 800e3e2:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e3e4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e3e6:	6978      	ldr	r0, [r7, #20]
 800e3e8:	f7ff f8de 	bl	800d5a8 <tcp_oos_insert_segment>
                }
                break;
 800e3ec:	e138      	b.n	800e660 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e3ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d117      	bne.n	800e424 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e3f4:	4b2e      	ldr	r3, [pc, #184]	@ (800e4b0 <tcp_receive+0xd00>)
 800e3f6:	681a      	ldr	r2, [r3, #0]
 800e3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3fa:	68db      	ldr	r3, [r3, #12]
 800e3fc:	685b      	ldr	r3, [r3, #4]
 800e3fe:	1ad3      	subs	r3, r2, r3
 800e400:	2b00      	cmp	r3, #0
 800e402:	da57      	bge.n	800e4b4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e404:	4829      	ldr	r0, [pc, #164]	@ (800e4ac <tcp_receive+0xcfc>)
 800e406:	f7fd fb7f 	bl	800bb08 <tcp_seg_copy>
 800e40a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800e40c:	69bb      	ldr	r3, [r7, #24]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	f000 8128 	beq.w	800e664 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	69ba      	ldr	r2, [r7, #24]
 800e418:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e41a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e41c:	69b8      	ldr	r0, [r7, #24]
 800e41e:	f7ff f8c3 	bl	800d5a8 <tcp_oos_insert_segment>
                  }
                  break;
 800e422:	e11f      	b.n	800e664 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e424:	4b22      	ldr	r3, [pc, #136]	@ (800e4b0 <tcp_receive+0xd00>)
 800e426:	681a      	ldr	r2, [r3, #0]
 800e428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e42a:	68db      	ldr	r3, [r3, #12]
 800e42c:	685b      	ldr	r3, [r3, #4]
 800e42e:	1ad3      	subs	r3, r2, r3
 800e430:	3b01      	subs	r3, #1
 800e432:	2b00      	cmp	r3, #0
 800e434:	db3e      	blt.n	800e4b4 <tcp_receive+0xd04>
 800e436:	4b1e      	ldr	r3, [pc, #120]	@ (800e4b0 <tcp_receive+0xd00>)
 800e438:	681a      	ldr	r2, [r3, #0]
 800e43a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e43c:	68db      	ldr	r3, [r3, #12]
 800e43e:	685b      	ldr	r3, [r3, #4]
 800e440:	1ad3      	subs	r3, r2, r3
 800e442:	3301      	adds	r3, #1
 800e444:	2b00      	cmp	r3, #0
 800e446:	dc35      	bgt.n	800e4b4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e448:	4818      	ldr	r0, [pc, #96]	@ (800e4ac <tcp_receive+0xcfc>)
 800e44a:	f7fd fb5d 	bl	800bb08 <tcp_seg_copy>
 800e44e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800e450:	69fb      	ldr	r3, [r7, #28]
 800e452:	2b00      	cmp	r3, #0
 800e454:	f000 8108 	beq.w	800e668 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e45a:	68db      	ldr	r3, [r3, #12]
 800e45c:	685b      	ldr	r3, [r3, #4]
 800e45e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e460:	8912      	ldrh	r2, [r2, #8]
 800e462:	441a      	add	r2, r3
 800e464:	4b12      	ldr	r3, [pc, #72]	@ (800e4b0 <tcp_receive+0xd00>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	1ad3      	subs	r3, r2, r3
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	dd12      	ble.n	800e494 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e46e:	4b10      	ldr	r3, [pc, #64]	@ (800e4b0 <tcp_receive+0xd00>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	b29a      	uxth	r2, r3
 800e474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e476:	68db      	ldr	r3, [r3, #12]
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	b29b      	uxth	r3, r3
 800e47c:	1ad3      	subs	r3, r2, r3
 800e47e:	b29a      	uxth	r2, r3
 800e480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e482:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e486:	685a      	ldr	r2, [r3, #4]
 800e488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e48a:	891b      	ldrh	r3, [r3, #8]
 800e48c:	4619      	mov	r1, r3
 800e48e:	4610      	mov	r0, r2
 800e490:	f7fb ff1a 	bl	800a2c8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e496:	69fa      	ldr	r2, [r7, #28]
 800e498:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e49a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e49c:	69f8      	ldr	r0, [r7, #28]
 800e49e:	f7ff f883 	bl	800d5a8 <tcp_oos_insert_segment>
                  }
                  break;
 800e4a2:	e0e1      	b.n	800e668 <tcp_receive+0xeb8>
 800e4a4:	2000e028 	.word	0x2000e028
 800e4a8:	2000e025 	.word	0x2000e025
 800e4ac:	2000dff8 	.word	0x2000dff8
 800e4b0:	2000e018 	.word	0x2000e018
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800e4b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4b6:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e4b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	f040 80c5 	bne.w	800e64c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e4c2:	4b7f      	ldr	r3, [pc, #508]	@ (800e6c0 <tcp_receive+0xf10>)
 800e4c4:	681a      	ldr	r2, [r3, #0]
 800e4c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4c8:	68db      	ldr	r3, [r3, #12]
 800e4ca:	685b      	ldr	r3, [r3, #4]
 800e4cc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	f340 80bc 	ble.w	800e64c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e4d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4d6:	68db      	ldr	r3, [r3, #12]
 800e4d8:	899b      	ldrh	r3, [r3, #12]
 800e4da:	b29b      	uxth	r3, r3
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f7fa fc55 	bl	8008d8c <lwip_htons>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	b2db      	uxtb	r3, r3
 800e4e6:	f003 0301 	and.w	r3, r3, #1
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	f040 80be 	bne.w	800e66c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e4f0:	4874      	ldr	r0, [pc, #464]	@ (800e6c4 <tcp_receive+0xf14>)
 800e4f2:	f7fd fb09 	bl	800bb08 <tcp_seg_copy>
 800e4f6:	4602      	mov	r2, r0
 800e4f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4fa:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	f000 80b5 	beq.w	800e670 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e508:	68db      	ldr	r3, [r3, #12]
 800e50a:	685b      	ldr	r3, [r3, #4]
 800e50c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e50e:	8912      	ldrh	r2, [r2, #8]
 800e510:	441a      	add	r2, r3
 800e512:	4b6b      	ldr	r3, [pc, #428]	@ (800e6c0 <tcp_receive+0xf10>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	1ad3      	subs	r3, r2, r3
 800e518:	2b00      	cmp	r3, #0
 800e51a:	dd12      	ble.n	800e542 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e51c:	4b68      	ldr	r3, [pc, #416]	@ (800e6c0 <tcp_receive+0xf10>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	b29a      	uxth	r2, r3
 800e522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e524:	68db      	ldr	r3, [r3, #12]
 800e526:	685b      	ldr	r3, [r3, #4]
 800e528:	b29b      	uxth	r3, r3
 800e52a:	1ad3      	subs	r3, r2, r3
 800e52c:	b29a      	uxth	r2, r3
 800e52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e530:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e534:	685a      	ldr	r2, [r3, #4]
 800e536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e538:	891b      	ldrh	r3, [r3, #8]
 800e53a:	4619      	mov	r1, r3
 800e53c:	4610      	mov	r0, r2
 800e53e:	f7fb fec3 	bl	800a2c8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e542:	4b61      	ldr	r3, [pc, #388]	@ (800e6c8 <tcp_receive+0xf18>)
 800e544:	881b      	ldrh	r3, [r3, #0]
 800e546:	461a      	mov	r2, r3
 800e548:	4b5d      	ldr	r3, [pc, #372]	@ (800e6c0 <tcp_receive+0xf10>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	441a      	add	r2, r3
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e552:	6879      	ldr	r1, [r7, #4]
 800e554:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e556:	440b      	add	r3, r1
 800e558:	1ad3      	subs	r3, r2, r3
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	f340 8088 	ble.w	800e670 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	68db      	ldr	r3, [r3, #12]
 800e566:	899b      	ldrh	r3, [r3, #12]
 800e568:	b29b      	uxth	r3, r3
 800e56a:	4618      	mov	r0, r3
 800e56c:	f7fa fc0e 	bl	8008d8c <lwip_htons>
 800e570:	4603      	mov	r3, r0
 800e572:	b2db      	uxtb	r3, r3
 800e574:	f003 0301 	and.w	r3, r3, #1
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d021      	beq.n	800e5c0 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e57c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	68db      	ldr	r3, [r3, #12]
 800e582:	899b      	ldrh	r3, [r3, #12]
 800e584:	b29b      	uxth	r3, r3
 800e586:	b21b      	sxth	r3, r3
 800e588:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e58c:	b21c      	sxth	r4, r3
 800e58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	68db      	ldr	r3, [r3, #12]
 800e594:	899b      	ldrh	r3, [r3, #12]
 800e596:	b29b      	uxth	r3, r3
 800e598:	4618      	mov	r0, r3
 800e59a:	f7fa fbf7 	bl	8008d8c <lwip_htons>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	b2db      	uxtb	r3, r3
 800e5a2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800e5a6:	b29b      	uxth	r3, r3
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f7fa fbef 	bl	8008d8c <lwip_htons>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	b21b      	sxth	r3, r3
 800e5b2:	4323      	orrs	r3, r4
 800e5b4:	b21a      	sxth	r2, r3
 800e5b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	68db      	ldr	r3, [r3, #12]
 800e5bc:	b292      	uxth	r2, r2
 800e5be:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5c4:	b29a      	uxth	r2, r3
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e5ca:	4413      	add	r3, r2
 800e5cc:	b299      	uxth	r1, r3
 800e5ce:	4b3c      	ldr	r3, [pc, #240]	@ (800e6c0 <tcp_receive+0xf10>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	b29a      	uxth	r2, r3
 800e5d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	1a8a      	subs	r2, r1, r2
 800e5da:	b292      	uxth	r2, r2
 800e5dc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e5de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	685a      	ldr	r2, [r3, #4]
 800e5e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	891b      	ldrh	r3, [r3, #8]
 800e5ea:	4619      	mov	r1, r3
 800e5ec:	4610      	mov	r0, r2
 800e5ee:	f7fb fe6b 	bl	800a2c8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e5f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	891c      	ldrh	r4, [r3, #8]
 800e5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	68db      	ldr	r3, [r3, #12]
 800e5fe:	899b      	ldrh	r3, [r3, #12]
 800e600:	b29b      	uxth	r3, r3
 800e602:	4618      	mov	r0, r3
 800e604:	f7fa fbc2 	bl	8008d8c <lwip_htons>
 800e608:	4603      	mov	r3, r0
 800e60a:	b2db      	uxtb	r3, r3
 800e60c:	f003 0303 	and.w	r3, r3, #3
 800e610:	2b00      	cmp	r3, #0
 800e612:	d001      	beq.n	800e618 <tcp_receive+0xe68>
 800e614:	2301      	movs	r3, #1
 800e616:	e000      	b.n	800e61a <tcp_receive+0xe6a>
 800e618:	2300      	movs	r3, #0
 800e61a:	4423      	add	r3, r4
 800e61c:	b29a      	uxth	r2, r3
 800e61e:	4b2a      	ldr	r3, [pc, #168]	@ (800e6c8 <tcp_receive+0xf18>)
 800e620:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e622:	4b29      	ldr	r3, [pc, #164]	@ (800e6c8 <tcp_receive+0xf18>)
 800e624:	881b      	ldrh	r3, [r3, #0]
 800e626:	461a      	mov	r2, r3
 800e628:	4b25      	ldr	r3, [pc, #148]	@ (800e6c0 <tcp_receive+0xf10>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	441a      	add	r2, r3
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e632:	6879      	ldr	r1, [r7, #4]
 800e634:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e636:	440b      	add	r3, r1
 800e638:	429a      	cmp	r2, r3
 800e63a:	d019      	beq.n	800e670 <tcp_receive+0xec0>
 800e63c:	4b23      	ldr	r3, [pc, #140]	@ (800e6cc <tcp_receive+0xf1c>)
 800e63e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800e642:	4923      	ldr	r1, [pc, #140]	@ (800e6d0 <tcp_receive+0xf20>)
 800e644:	4823      	ldr	r0, [pc, #140]	@ (800e6d4 <tcp_receive+0xf24>)
 800e646:	f005 ffb5 	bl	80145b4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e64a:	e011      	b.n	800e670 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e654:	2b00      	cmp	r3, #0
 800e656:	f47f aea5 	bne.w	800e3a4 <tcp_receive+0xbf4>
 800e65a:	e00a      	b.n	800e672 <tcp_receive+0xec2>
                break;
 800e65c:	bf00      	nop
 800e65e:	e008      	b.n	800e672 <tcp_receive+0xec2>
                break;
 800e660:	bf00      	nop
 800e662:	e006      	b.n	800e672 <tcp_receive+0xec2>
                  break;
 800e664:	bf00      	nop
 800e666:	e004      	b.n	800e672 <tcp_receive+0xec2>
                  break;
 800e668:	bf00      	nop
 800e66a:	e002      	b.n	800e672 <tcp_receive+0xec2>
                  break;
 800e66c:	bf00      	nop
 800e66e:	e000      	b.n	800e672 <tcp_receive+0xec2>
                break;
 800e670:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f001 fa30 	bl	800fad8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800e678:	e003      	b.n	800e682 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	f001 fa2c 	bl	800fad8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e680:	e01a      	b.n	800e6b8 <tcp_receive+0xf08>
 800e682:	e019      	b.n	800e6b8 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e684:	4b0e      	ldr	r3, [pc, #56]	@ (800e6c0 <tcp_receive+0xf10>)
 800e686:	681a      	ldr	r2, [r3, #0]
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e68c:	1ad3      	subs	r3, r2, r3
 800e68e:	2b00      	cmp	r3, #0
 800e690:	db0a      	blt.n	800e6a8 <tcp_receive+0xef8>
 800e692:	4b0b      	ldr	r3, [pc, #44]	@ (800e6c0 <tcp_receive+0xf10>)
 800e694:	681a      	ldr	r2, [r3, #0]
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e69a:	6879      	ldr	r1, [r7, #4]
 800e69c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e69e:	440b      	add	r3, r1
 800e6a0:	1ad3      	subs	r3, r2, r3
 800e6a2:	3301      	adds	r3, #1
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	dd07      	ble.n	800e6b8 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	8b5b      	ldrh	r3, [r3, #26]
 800e6ac:	f043 0302 	orr.w	r3, r3, #2
 800e6b0:	b29a      	uxth	r2, r3
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800e6b6:	e7ff      	b.n	800e6b8 <tcp_receive+0xf08>
 800e6b8:	bf00      	nop
 800e6ba:	3750      	adds	r7, #80	@ 0x50
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bdb0      	pop	{r4, r5, r7, pc}
 800e6c0:	2000e018 	.word	0x2000e018
 800e6c4:	2000dff8 	.word	0x2000dff8
 800e6c8:	2000e022 	.word	0x2000e022
 800e6cc:	080165f0 	.word	0x080165f0
 800e6d0:	08016998 	.word	0x08016998
 800e6d4:	0801663c 	.word	0x0801663c

0800e6d8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800e6d8:	b480      	push	{r7}
 800e6da:	b083      	sub	sp, #12
 800e6dc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800e6de:	4b15      	ldr	r3, [pc, #84]	@ (800e734 <tcp_get_next_optbyte+0x5c>)
 800e6e0:	881b      	ldrh	r3, [r3, #0]
 800e6e2:	1c5a      	adds	r2, r3, #1
 800e6e4:	b291      	uxth	r1, r2
 800e6e6:	4a13      	ldr	r2, [pc, #76]	@ (800e734 <tcp_get_next_optbyte+0x5c>)
 800e6e8:	8011      	strh	r1, [r2, #0]
 800e6ea:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e6ec:	4b12      	ldr	r3, [pc, #72]	@ (800e738 <tcp_get_next_optbyte+0x60>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d004      	beq.n	800e6fe <tcp_get_next_optbyte+0x26>
 800e6f4:	4b11      	ldr	r3, [pc, #68]	@ (800e73c <tcp_get_next_optbyte+0x64>)
 800e6f6:	881b      	ldrh	r3, [r3, #0]
 800e6f8:	88fa      	ldrh	r2, [r7, #6]
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	d208      	bcs.n	800e710 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800e6fe:	4b10      	ldr	r3, [pc, #64]	@ (800e740 <tcp_get_next_optbyte+0x68>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	3314      	adds	r3, #20
 800e704:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800e706:	88fb      	ldrh	r3, [r7, #6]
 800e708:	683a      	ldr	r2, [r7, #0]
 800e70a:	4413      	add	r3, r2
 800e70c:	781b      	ldrb	r3, [r3, #0]
 800e70e:	e00b      	b.n	800e728 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e710:	88fb      	ldrh	r3, [r7, #6]
 800e712:	b2da      	uxtb	r2, r3
 800e714:	4b09      	ldr	r3, [pc, #36]	@ (800e73c <tcp_get_next_optbyte+0x64>)
 800e716:	881b      	ldrh	r3, [r3, #0]
 800e718:	b2db      	uxtb	r3, r3
 800e71a:	1ad3      	subs	r3, r2, r3
 800e71c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800e71e:	4b06      	ldr	r3, [pc, #24]	@ (800e738 <tcp_get_next_optbyte+0x60>)
 800e720:	681a      	ldr	r2, [r3, #0]
 800e722:	797b      	ldrb	r3, [r7, #5]
 800e724:	4413      	add	r3, r2
 800e726:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e728:	4618      	mov	r0, r3
 800e72a:	370c      	adds	r7, #12
 800e72c:	46bd      	mov	sp, r7
 800e72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e732:	4770      	bx	lr
 800e734:	2000e014 	.word	0x2000e014
 800e738:	2000e010 	.word	0x2000e010
 800e73c:	2000e00e 	.word	0x2000e00e
 800e740:	2000e008 	.word	0x2000e008

0800e744 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b084      	sub	sp, #16
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d106      	bne.n	800e760 <tcp_parseopt+0x1c>
 800e752:	4b32      	ldr	r3, [pc, #200]	@ (800e81c <tcp_parseopt+0xd8>)
 800e754:	f240 727d 	movw	r2, #1917	@ 0x77d
 800e758:	4931      	ldr	r1, [pc, #196]	@ (800e820 <tcp_parseopt+0xdc>)
 800e75a:	4832      	ldr	r0, [pc, #200]	@ (800e824 <tcp_parseopt+0xe0>)
 800e75c:	f005 ff2a 	bl	80145b4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e760:	4b31      	ldr	r3, [pc, #196]	@ (800e828 <tcp_parseopt+0xe4>)
 800e762:	881b      	ldrh	r3, [r3, #0]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d056      	beq.n	800e816 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e768:	4b30      	ldr	r3, [pc, #192]	@ (800e82c <tcp_parseopt+0xe8>)
 800e76a:	2200      	movs	r2, #0
 800e76c:	801a      	strh	r2, [r3, #0]
 800e76e:	e046      	b.n	800e7fe <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800e770:	f7ff ffb2 	bl	800e6d8 <tcp_get_next_optbyte>
 800e774:	4603      	mov	r3, r0
 800e776:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800e778:	7bfb      	ldrb	r3, [r7, #15]
 800e77a:	2b02      	cmp	r3, #2
 800e77c:	d006      	beq.n	800e78c <tcp_parseopt+0x48>
 800e77e:	2b02      	cmp	r3, #2
 800e780:	dc2a      	bgt.n	800e7d8 <tcp_parseopt+0x94>
 800e782:	2b00      	cmp	r3, #0
 800e784:	d042      	beq.n	800e80c <tcp_parseopt+0xc8>
 800e786:	2b01      	cmp	r3, #1
 800e788:	d038      	beq.n	800e7fc <tcp_parseopt+0xb8>
 800e78a:	e025      	b.n	800e7d8 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e78c:	f7ff ffa4 	bl	800e6d8 <tcp_get_next_optbyte>
 800e790:	4603      	mov	r3, r0
 800e792:	2b04      	cmp	r3, #4
 800e794:	d13c      	bne.n	800e810 <tcp_parseopt+0xcc>
 800e796:	4b25      	ldr	r3, [pc, #148]	@ (800e82c <tcp_parseopt+0xe8>)
 800e798:	881b      	ldrh	r3, [r3, #0]
 800e79a:	3301      	adds	r3, #1
 800e79c:	4a22      	ldr	r2, [pc, #136]	@ (800e828 <tcp_parseopt+0xe4>)
 800e79e:	8812      	ldrh	r2, [r2, #0]
 800e7a0:	4293      	cmp	r3, r2
 800e7a2:	da35      	bge.n	800e810 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e7a4:	f7ff ff98 	bl	800e6d8 <tcp_get_next_optbyte>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	021b      	lsls	r3, r3, #8
 800e7ac:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800e7ae:	f7ff ff93 	bl	800e6d8 <tcp_get_next_optbyte>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	461a      	mov	r2, r3
 800e7b6:	89bb      	ldrh	r3, [r7, #12]
 800e7b8:	4313      	orrs	r3, r2
 800e7ba:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e7bc:	89bb      	ldrh	r3, [r7, #12]
 800e7be:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800e7c2:	d804      	bhi.n	800e7ce <tcp_parseopt+0x8a>
 800e7c4:	89bb      	ldrh	r3, [r7, #12]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d001      	beq.n	800e7ce <tcp_parseopt+0x8a>
 800e7ca:	89ba      	ldrh	r2, [r7, #12]
 800e7cc:	e001      	b.n	800e7d2 <tcp_parseopt+0x8e>
 800e7ce:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800e7d6:	e012      	b.n	800e7fe <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800e7d8:	f7ff ff7e 	bl	800e6d8 <tcp_get_next_optbyte>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800e7e0:	7afb      	ldrb	r3, [r7, #11]
 800e7e2:	2b01      	cmp	r3, #1
 800e7e4:	d916      	bls.n	800e814 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800e7e6:	7afb      	ldrb	r3, [r7, #11]
 800e7e8:	b29a      	uxth	r2, r3
 800e7ea:	4b10      	ldr	r3, [pc, #64]	@ (800e82c <tcp_parseopt+0xe8>)
 800e7ec:	881b      	ldrh	r3, [r3, #0]
 800e7ee:	4413      	add	r3, r2
 800e7f0:	b29b      	uxth	r3, r3
 800e7f2:	3b02      	subs	r3, #2
 800e7f4:	b29a      	uxth	r2, r3
 800e7f6:	4b0d      	ldr	r3, [pc, #52]	@ (800e82c <tcp_parseopt+0xe8>)
 800e7f8:	801a      	strh	r2, [r3, #0]
 800e7fa:	e000      	b.n	800e7fe <tcp_parseopt+0xba>
          break;
 800e7fc:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e7fe:	4b0b      	ldr	r3, [pc, #44]	@ (800e82c <tcp_parseopt+0xe8>)
 800e800:	881a      	ldrh	r2, [r3, #0]
 800e802:	4b09      	ldr	r3, [pc, #36]	@ (800e828 <tcp_parseopt+0xe4>)
 800e804:	881b      	ldrh	r3, [r3, #0]
 800e806:	429a      	cmp	r2, r3
 800e808:	d3b2      	bcc.n	800e770 <tcp_parseopt+0x2c>
 800e80a:	e004      	b.n	800e816 <tcp_parseopt+0xd2>
          return;
 800e80c:	bf00      	nop
 800e80e:	e002      	b.n	800e816 <tcp_parseopt+0xd2>
            return;
 800e810:	bf00      	nop
 800e812:	e000      	b.n	800e816 <tcp_parseopt+0xd2>
            return;
 800e814:	bf00      	nop
      }
    }
  }
}
 800e816:	3710      	adds	r7, #16
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd80      	pop	{r7, pc}
 800e81c:	080165f0 	.word	0x080165f0
 800e820:	08016a54 	.word	0x08016a54
 800e824:	0801663c 	.word	0x0801663c
 800e828:	2000e00c 	.word	0x2000e00c
 800e82c:	2000e014 	.word	0x2000e014

0800e830 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800e830:	b480      	push	{r7}
 800e832:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800e834:	4b05      	ldr	r3, [pc, #20]	@ (800e84c <tcp_trigger_input_pcb_close+0x1c>)
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	f043 0310 	orr.w	r3, r3, #16
 800e83c:	b2da      	uxtb	r2, r3
 800e83e:	4b03      	ldr	r3, [pc, #12]	@ (800e84c <tcp_trigger_input_pcb_close+0x1c>)
 800e840:	701a      	strb	r2, [r3, #0]
}
 800e842:	bf00      	nop
 800e844:	46bd      	mov	sp, r7
 800e846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84a:	4770      	bx	lr
 800e84c:	2000e025 	.word	0x2000e025

0800e850 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b084      	sub	sp, #16
 800e854:	af00      	add	r7, sp, #0
 800e856:	60f8      	str	r0, [r7, #12]
 800e858:	60b9      	str	r1, [r7, #8]
 800e85a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d00a      	beq.n	800e878 <tcp_route+0x28>
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	7a1b      	ldrb	r3, [r3, #8]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d006      	beq.n	800e878 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	7a1b      	ldrb	r3, [r3, #8]
 800e86e:	4618      	mov	r0, r3
 800e870:	f7fb faea 	bl	8009e48 <netif_get_by_index>
 800e874:	4603      	mov	r3, r0
 800e876:	e003      	b.n	800e880 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f002 fcf1 	bl	8011260 <ip4_route>
 800e87e:	4603      	mov	r3, r0
  }
}
 800e880:	4618      	mov	r0, r3
 800e882:	3710      	adds	r7, #16
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}

0800e888 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800e888:	b590      	push	{r4, r7, lr}
 800e88a:	b087      	sub	sp, #28
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	60f8      	str	r0, [r7, #12]
 800e890:	60b9      	str	r1, [r7, #8]
 800e892:	603b      	str	r3, [r7, #0]
 800e894:	4613      	mov	r3, r2
 800e896:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d105      	bne.n	800e8aa <tcp_create_segment+0x22>
 800e89e:	4b43      	ldr	r3, [pc, #268]	@ (800e9ac <tcp_create_segment+0x124>)
 800e8a0:	22a3      	movs	r2, #163	@ 0xa3
 800e8a2:	4943      	ldr	r1, [pc, #268]	@ (800e9b0 <tcp_create_segment+0x128>)
 800e8a4:	4843      	ldr	r0, [pc, #268]	@ (800e9b4 <tcp_create_segment+0x12c>)
 800e8a6:	f005 fe85 	bl	80145b4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d105      	bne.n	800e8bc <tcp_create_segment+0x34>
 800e8b0:	4b3e      	ldr	r3, [pc, #248]	@ (800e9ac <tcp_create_segment+0x124>)
 800e8b2:	22a4      	movs	r2, #164	@ 0xa4
 800e8b4:	4940      	ldr	r1, [pc, #256]	@ (800e9b8 <tcp_create_segment+0x130>)
 800e8b6:	483f      	ldr	r0, [pc, #252]	@ (800e9b4 <tcp_create_segment+0x12c>)
 800e8b8:	f005 fe7c 	bl	80145b4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e8bc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e8c0:	009b      	lsls	r3, r3, #2
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	f003 0304 	and.w	r3, r3, #4
 800e8c8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800e8ca:	2002      	movs	r0, #2
 800e8cc:	f7fa ff34 	bl	8009738 <memp_malloc>
 800e8d0:	6138      	str	r0, [r7, #16]
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d104      	bne.n	800e8e2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800e8d8:	68b8      	ldr	r0, [r7, #8]
 800e8da:	f7fb fe7b 	bl	800a5d4 <pbuf_free>
    return NULL;
 800e8de:	2300      	movs	r3, #0
 800e8e0:	e060      	b.n	800e9a4 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800e8e2:	693b      	ldr	r3, [r7, #16]
 800e8e4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800e8e8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800e8f0:	693b      	ldr	r3, [r7, #16]
 800e8f2:	68ba      	ldr	r2, [r7, #8]
 800e8f4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	891a      	ldrh	r2, [r3, #8]
 800e8fa:	7dfb      	ldrb	r3, [r7, #23]
 800e8fc:	b29b      	uxth	r3, r3
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d205      	bcs.n	800e90e <tcp_create_segment+0x86>
 800e902:	4b2a      	ldr	r3, [pc, #168]	@ (800e9ac <tcp_create_segment+0x124>)
 800e904:	22b0      	movs	r2, #176	@ 0xb0
 800e906:	492d      	ldr	r1, [pc, #180]	@ (800e9bc <tcp_create_segment+0x134>)
 800e908:	482a      	ldr	r0, [pc, #168]	@ (800e9b4 <tcp_create_segment+0x12c>)
 800e90a:	f005 fe53 	bl	80145b4 <iprintf>
  seg->len = p->tot_len - optlen;
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	891a      	ldrh	r2, [r3, #8]
 800e912:	7dfb      	ldrb	r3, [r7, #23]
 800e914:	b29b      	uxth	r3, r3
 800e916:	1ad3      	subs	r3, r2, r3
 800e918:	b29a      	uxth	r2, r3
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800e91e:	2114      	movs	r1, #20
 800e920:	68b8      	ldr	r0, [r7, #8]
 800e922:	f7fb fdc1 	bl	800a4a8 <pbuf_add_header>
 800e926:	4603      	mov	r3, r0
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d004      	beq.n	800e936 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800e92c:	6938      	ldr	r0, [r7, #16]
 800e92e:	f7fd f8d2 	bl	800bad6 <tcp_seg_free>
    return NULL;
 800e932:	2300      	movs	r3, #0
 800e934:	e036      	b.n	800e9a4 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	685b      	ldr	r3, [r3, #4]
 800e93a:	685a      	ldr	r2, [r3, #4]
 800e93c:	693b      	ldr	r3, [r7, #16]
 800e93e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	8ada      	ldrh	r2, [r3, #22]
 800e944:	693b      	ldr	r3, [r7, #16]
 800e946:	68dc      	ldr	r4, [r3, #12]
 800e948:	4610      	mov	r0, r2
 800e94a:	f7fa fa1f 	bl	8008d8c <lwip_htons>
 800e94e:	4603      	mov	r3, r0
 800e950:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	8b1a      	ldrh	r2, [r3, #24]
 800e956:	693b      	ldr	r3, [r7, #16]
 800e958:	68dc      	ldr	r4, [r3, #12]
 800e95a:	4610      	mov	r0, r2
 800e95c:	f7fa fa16 	bl	8008d8c <lwip_htons>
 800e960:	4603      	mov	r3, r0
 800e962:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800e964:	693b      	ldr	r3, [r7, #16]
 800e966:	68dc      	ldr	r4, [r3, #12]
 800e968:	6838      	ldr	r0, [r7, #0]
 800e96a:	f7fa fa24 	bl	8008db6 <lwip_htonl>
 800e96e:	4603      	mov	r3, r0
 800e970:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800e972:	7dfb      	ldrb	r3, [r7, #23]
 800e974:	089b      	lsrs	r3, r3, #2
 800e976:	b2db      	uxtb	r3, r3
 800e978:	3305      	adds	r3, #5
 800e97a:	b29b      	uxth	r3, r3
 800e97c:	031b      	lsls	r3, r3, #12
 800e97e:	b29a      	uxth	r2, r3
 800e980:	79fb      	ldrb	r3, [r7, #7]
 800e982:	b29b      	uxth	r3, r3
 800e984:	4313      	orrs	r3, r2
 800e986:	b29a      	uxth	r2, r3
 800e988:	693b      	ldr	r3, [r7, #16]
 800e98a:	68dc      	ldr	r4, [r3, #12]
 800e98c:	4610      	mov	r0, r2
 800e98e:	f7fa f9fd 	bl	8008d8c <lwip_htons>
 800e992:	4603      	mov	r3, r0
 800e994:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800e996:	693b      	ldr	r3, [r7, #16]
 800e998:	68db      	ldr	r3, [r3, #12]
 800e99a:	2200      	movs	r2, #0
 800e99c:	749a      	strb	r2, [r3, #18]
 800e99e:	2200      	movs	r2, #0
 800e9a0:	74da      	strb	r2, [r3, #19]
  return seg;
 800e9a2:	693b      	ldr	r3, [r7, #16]
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	371c      	adds	r7, #28
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd90      	pop	{r4, r7, pc}
 800e9ac:	08016a70 	.word	0x08016a70
 800e9b0:	08016aa4 	.word	0x08016aa4
 800e9b4:	08016ac4 	.word	0x08016ac4
 800e9b8:	08016aec 	.word	0x08016aec
 800e9bc:	08016b10 	.word	0x08016b10

0800e9c0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e9c0:	b590      	push	{r4, r7, lr}
 800e9c2:	b08b      	sub	sp, #44	@ 0x2c
 800e9c4:	af02      	add	r7, sp, #8
 800e9c6:	6078      	str	r0, [r7, #4]
 800e9c8:	460b      	mov	r3, r1
 800e9ca:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	61fb      	str	r3, [r7, #28]
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d106      	bne.n	800e9ec <tcp_split_unsent_seg+0x2c>
 800e9de:	4b95      	ldr	r3, [pc, #596]	@ (800ec34 <tcp_split_unsent_seg+0x274>)
 800e9e0:	f240 324b 	movw	r2, #843	@ 0x34b
 800e9e4:	4994      	ldr	r1, [pc, #592]	@ (800ec38 <tcp_split_unsent_seg+0x278>)
 800e9e6:	4895      	ldr	r0, [pc, #596]	@ (800ec3c <tcp_split_unsent_seg+0x27c>)
 800e9e8:	f005 fde4 	bl	80145b4 <iprintf>

  useg = pcb->unsent;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e9f0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d102      	bne.n	800e9fe <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800e9f8:	f04f 33ff 	mov.w	r3, #4294967295
 800e9fc:	e116      	b.n	800ec2c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800e9fe:	887b      	ldrh	r3, [r7, #2]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d109      	bne.n	800ea18 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ea04:	4b8b      	ldr	r3, [pc, #556]	@ (800ec34 <tcp_split_unsent_seg+0x274>)
 800ea06:	f240 3253 	movw	r2, #851	@ 0x353
 800ea0a:	498d      	ldr	r1, [pc, #564]	@ (800ec40 <tcp_split_unsent_seg+0x280>)
 800ea0c:	488b      	ldr	r0, [pc, #556]	@ (800ec3c <tcp_split_unsent_seg+0x27c>)
 800ea0e:	f005 fdd1 	bl	80145b4 <iprintf>
    return ERR_VAL;
 800ea12:	f06f 0305 	mvn.w	r3, #5
 800ea16:	e109      	b.n	800ec2c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ea18:	697b      	ldr	r3, [r7, #20]
 800ea1a:	891b      	ldrh	r3, [r3, #8]
 800ea1c:	887a      	ldrh	r2, [r7, #2]
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	d301      	bcc.n	800ea26 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ea22:	2300      	movs	r3, #0
 800ea24:	e102      	b.n	800ec2c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ea2a:	887a      	ldrh	r2, [r7, #2]
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	d906      	bls.n	800ea3e <tcp_split_unsent_seg+0x7e>
 800ea30:	4b80      	ldr	r3, [pc, #512]	@ (800ec34 <tcp_split_unsent_seg+0x274>)
 800ea32:	f240 325b 	movw	r2, #859	@ 0x35b
 800ea36:	4983      	ldr	r1, [pc, #524]	@ (800ec44 <tcp_split_unsent_seg+0x284>)
 800ea38:	4880      	ldr	r0, [pc, #512]	@ (800ec3c <tcp_split_unsent_seg+0x27c>)
 800ea3a:	f005 fdbb 	bl	80145b4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	891b      	ldrh	r3, [r3, #8]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d106      	bne.n	800ea54 <tcp_split_unsent_seg+0x94>
 800ea46:	4b7b      	ldr	r3, [pc, #492]	@ (800ec34 <tcp_split_unsent_seg+0x274>)
 800ea48:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800ea4c:	497e      	ldr	r1, [pc, #504]	@ (800ec48 <tcp_split_unsent_seg+0x288>)
 800ea4e:	487b      	ldr	r0, [pc, #492]	@ (800ec3c <tcp_split_unsent_seg+0x27c>)
 800ea50:	f005 fdb0 	bl	80145b4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	7a9b      	ldrb	r3, [r3, #10]
 800ea58:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ea5a:	7bfb      	ldrb	r3, [r7, #15]
 800ea5c:	009b      	lsls	r3, r3, #2
 800ea5e:	b2db      	uxtb	r3, r3
 800ea60:	f003 0304 	and.w	r3, r3, #4
 800ea64:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ea66:	697b      	ldr	r3, [r7, #20]
 800ea68:	891a      	ldrh	r2, [r3, #8]
 800ea6a:	887b      	ldrh	r3, [r7, #2]
 800ea6c:	1ad3      	subs	r3, r2, r3
 800ea6e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ea70:	7bbb      	ldrb	r3, [r7, #14]
 800ea72:	b29a      	uxth	r2, r3
 800ea74:	89bb      	ldrh	r3, [r7, #12]
 800ea76:	4413      	add	r3, r2
 800ea78:	b29b      	uxth	r3, r3
 800ea7a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ea7e:	4619      	mov	r1, r3
 800ea80:	2036      	movs	r0, #54	@ 0x36
 800ea82:	f7fb fac3 	bl	800a00c <pbuf_alloc>
 800ea86:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	f000 80b7 	beq.w	800ebfe <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800ea90:	697b      	ldr	r3, [r7, #20]
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	891a      	ldrh	r2, [r3, #8]
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	891b      	ldrh	r3, [r3, #8]
 800ea9a:	1ad3      	subs	r3, r2, r3
 800ea9c:	b29a      	uxth	r2, r3
 800ea9e:	887b      	ldrh	r3, [r7, #2]
 800eaa0:	4413      	add	r3, r2
 800eaa2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800eaa4:	697b      	ldr	r3, [r7, #20]
 800eaa6:	6858      	ldr	r0, [r3, #4]
 800eaa8:	693b      	ldr	r3, [r7, #16]
 800eaaa:	685a      	ldr	r2, [r3, #4]
 800eaac:	7bbb      	ldrb	r3, [r7, #14]
 800eaae:	18d1      	adds	r1, r2, r3
 800eab0:	897b      	ldrh	r3, [r7, #10]
 800eab2:	89ba      	ldrh	r2, [r7, #12]
 800eab4:	f7fb ff84 	bl	800a9c0 <pbuf_copy_partial>
 800eab8:	4603      	mov	r3, r0
 800eaba:	461a      	mov	r2, r3
 800eabc:	89bb      	ldrh	r3, [r7, #12]
 800eabe:	4293      	cmp	r3, r2
 800eac0:	f040 809f 	bne.w	800ec02 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	68db      	ldr	r3, [r3, #12]
 800eac8:	899b      	ldrh	r3, [r3, #12]
 800eaca:	b29b      	uxth	r3, r3
 800eacc:	4618      	mov	r0, r3
 800eace:	f7fa f95d 	bl	8008d8c <lwip_htons>
 800ead2:	4603      	mov	r3, r0
 800ead4:	b2db      	uxtb	r3, r3
 800ead6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800eada:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800eadc:	2300      	movs	r3, #0
 800eade:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800eae0:	7efb      	ldrb	r3, [r7, #27]
 800eae2:	f003 0308 	and.w	r3, r3, #8
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d007      	beq.n	800eafa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800eaea:	7efb      	ldrb	r3, [r7, #27]
 800eaec:	f023 0308 	bic.w	r3, r3, #8
 800eaf0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800eaf2:	7ebb      	ldrb	r3, [r7, #26]
 800eaf4:	f043 0308 	orr.w	r3, r3, #8
 800eaf8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800eafa:	7efb      	ldrb	r3, [r7, #27]
 800eafc:	f003 0301 	and.w	r3, r3, #1
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d007      	beq.n	800eb14 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800eb04:	7efb      	ldrb	r3, [r7, #27]
 800eb06:	f023 0301 	bic.w	r3, r3, #1
 800eb0a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800eb0c:	7ebb      	ldrb	r3, [r7, #26]
 800eb0e:	f043 0301 	orr.w	r3, r3, #1
 800eb12:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800eb14:	697b      	ldr	r3, [r7, #20]
 800eb16:	68db      	ldr	r3, [r3, #12]
 800eb18:	685b      	ldr	r3, [r3, #4]
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f7fa f94b 	bl	8008db6 <lwip_htonl>
 800eb20:	4602      	mov	r2, r0
 800eb22:	887b      	ldrh	r3, [r7, #2]
 800eb24:	18d1      	adds	r1, r2, r3
 800eb26:	7eba      	ldrb	r2, [r7, #26]
 800eb28:	7bfb      	ldrb	r3, [r7, #15]
 800eb2a:	9300      	str	r3, [sp, #0]
 800eb2c:	460b      	mov	r3, r1
 800eb2e:	6939      	ldr	r1, [r7, #16]
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f7ff fea9 	bl	800e888 <tcp_create_segment>
 800eb36:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800eb38:	69fb      	ldr	r3, [r7, #28]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d063      	beq.n	800ec06 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	685b      	ldr	r3, [r3, #4]
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7fb fdd4 	bl	800a6f0 <pbuf_clen>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	461a      	mov	r2, r3
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800eb52:	1a9b      	subs	r3, r3, r2
 800eb54:	b29a      	uxth	r2, r3
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800eb5c:	697b      	ldr	r3, [r7, #20]
 800eb5e:	6858      	ldr	r0, [r3, #4]
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	685b      	ldr	r3, [r3, #4]
 800eb64:	891a      	ldrh	r2, [r3, #8]
 800eb66:	89bb      	ldrh	r3, [r7, #12]
 800eb68:	1ad3      	subs	r3, r2, r3
 800eb6a:	b29b      	uxth	r3, r3
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	f7fb fbab 	bl	800a2c8 <pbuf_realloc>
  useg->len -= remainder;
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	891a      	ldrh	r2, [r3, #8]
 800eb76:	89bb      	ldrh	r3, [r7, #12]
 800eb78:	1ad3      	subs	r3, r2, r3
 800eb7a:	b29a      	uxth	r2, r3
 800eb7c:	697b      	ldr	r3, [r7, #20]
 800eb7e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	68db      	ldr	r3, [r3, #12]
 800eb84:	899b      	ldrh	r3, [r3, #12]
 800eb86:	b29c      	uxth	r4, r3
 800eb88:	7efb      	ldrb	r3, [r7, #27]
 800eb8a:	b29b      	uxth	r3, r3
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	f7fa f8fd 	bl	8008d8c <lwip_htons>
 800eb92:	4603      	mov	r3, r0
 800eb94:	461a      	mov	r2, r3
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	68db      	ldr	r3, [r3, #12]
 800eb9a:	4322      	orrs	r2, r4
 800eb9c:	b292      	uxth	r2, r2
 800eb9e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	685b      	ldr	r3, [r3, #4]
 800eba4:	4618      	mov	r0, r3
 800eba6:	f7fb fda3 	bl	800a6f0 <pbuf_clen>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	461a      	mov	r2, r3
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ebb4:	4413      	add	r3, r2
 800ebb6:	b29a      	uxth	r2, r3
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ebbe:	69fb      	ldr	r3, [r7, #28]
 800ebc0:	685b      	ldr	r3, [r3, #4]
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f7fb fd94 	bl	800a6f0 <pbuf_clen>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	461a      	mov	r2, r3
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ebd2:	4413      	add	r3, r2
 800ebd4:	b29a      	uxth	r2, r3
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ebdc:	697b      	ldr	r3, [r7, #20]
 800ebde:	681a      	ldr	r2, [r3, #0]
 800ebe0:	69fb      	ldr	r3, [r7, #28]
 800ebe2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	69fa      	ldr	r2, [r7, #28]
 800ebe8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ebea:	69fb      	ldr	r3, [r7, #28]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d103      	bne.n	800ebfa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	e016      	b.n	800ec2c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800ebfe:	bf00      	nop
 800ec00:	e002      	b.n	800ec08 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ec02:	bf00      	nop
 800ec04:	e000      	b.n	800ec08 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ec06:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ec08:	69fb      	ldr	r3, [r7, #28]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d006      	beq.n	800ec1c <tcp_split_unsent_seg+0x25c>
 800ec0e:	4b09      	ldr	r3, [pc, #36]	@ (800ec34 <tcp_split_unsent_seg+0x274>)
 800ec10:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800ec14:	490d      	ldr	r1, [pc, #52]	@ (800ec4c <tcp_split_unsent_seg+0x28c>)
 800ec16:	4809      	ldr	r0, [pc, #36]	@ (800ec3c <tcp_split_unsent_seg+0x27c>)
 800ec18:	f005 fccc 	bl	80145b4 <iprintf>
  if (p != NULL) {
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d002      	beq.n	800ec28 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ec22:	6938      	ldr	r0, [r7, #16]
 800ec24:	f7fb fcd6 	bl	800a5d4 <pbuf_free>
  }

  return ERR_MEM;
 800ec28:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	3724      	adds	r7, #36	@ 0x24
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd90      	pop	{r4, r7, pc}
 800ec34:	08016a70 	.word	0x08016a70
 800ec38:	08016e04 	.word	0x08016e04
 800ec3c:	08016ac4 	.word	0x08016ac4
 800ec40:	08016e28 	.word	0x08016e28
 800ec44:	08016e4c 	.word	0x08016e4c
 800ec48:	08016e5c 	.word	0x08016e5c
 800ec4c:	08016e6c 	.word	0x08016e6c

0800ec50 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ec50:	b590      	push	{r4, r7, lr}
 800ec52:	b085      	sub	sp, #20
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d106      	bne.n	800ec6c <tcp_send_fin+0x1c>
 800ec5e:	4b21      	ldr	r3, [pc, #132]	@ (800ece4 <tcp_send_fin+0x94>)
 800ec60:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800ec64:	4920      	ldr	r1, [pc, #128]	@ (800ece8 <tcp_send_fin+0x98>)
 800ec66:	4821      	ldr	r0, [pc, #132]	@ (800ecec <tcp_send_fin+0x9c>)
 800ec68:	f005 fca4 	bl	80145b4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d02e      	beq.n	800ecd2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ec78:	60fb      	str	r3, [r7, #12]
 800ec7a:	e002      	b.n	800ec82 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d1f8      	bne.n	800ec7c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	68db      	ldr	r3, [r3, #12]
 800ec8e:	899b      	ldrh	r3, [r3, #12]
 800ec90:	b29b      	uxth	r3, r3
 800ec92:	4618      	mov	r0, r3
 800ec94:	f7fa f87a 	bl	8008d8c <lwip_htons>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	b2db      	uxtb	r3, r3
 800ec9c:	f003 0307 	and.w	r3, r3, #7
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d116      	bne.n	800ecd2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	68db      	ldr	r3, [r3, #12]
 800eca8:	899b      	ldrh	r3, [r3, #12]
 800ecaa:	b29c      	uxth	r4, r3
 800ecac:	2001      	movs	r0, #1
 800ecae:	f7fa f86d 	bl	8008d8c <lwip_htons>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	461a      	mov	r2, r3
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	68db      	ldr	r3, [r3, #12]
 800ecba:	4322      	orrs	r2, r4
 800ecbc:	b292      	uxth	r2, r2
 800ecbe:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	8b5b      	ldrh	r3, [r3, #26]
 800ecc4:	f043 0320 	orr.w	r3, r3, #32
 800ecc8:	b29a      	uxth	r2, r3
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	e004      	b.n	800ecdc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ecd2:	2101      	movs	r1, #1
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f000 f80b 	bl	800ecf0 <tcp_enqueue_flags>
 800ecda:	4603      	mov	r3, r0
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3714      	adds	r7, #20
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd90      	pop	{r4, r7, pc}
 800ece4:	08016a70 	.word	0x08016a70
 800ece8:	08016e78 	.word	0x08016e78
 800ecec:	08016ac4 	.word	0x08016ac4

0800ecf0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b08a      	sub	sp, #40	@ 0x28
 800ecf4:	af02      	add	r7, sp, #8
 800ecf6:	6078      	str	r0, [r7, #4]
 800ecf8:	460b      	mov	r3, r1
 800ecfa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ed00:	2300      	movs	r3, #0
 800ed02:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ed04:	78fb      	ldrb	r3, [r7, #3]
 800ed06:	f003 0303 	and.w	r3, r3, #3
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d106      	bne.n	800ed1c <tcp_enqueue_flags+0x2c>
 800ed0e:	4b67      	ldr	r3, [pc, #412]	@ (800eeac <tcp_enqueue_flags+0x1bc>)
 800ed10:	f240 4211 	movw	r2, #1041	@ 0x411
 800ed14:	4966      	ldr	r1, [pc, #408]	@ (800eeb0 <tcp_enqueue_flags+0x1c0>)
 800ed16:	4867      	ldr	r0, [pc, #412]	@ (800eeb4 <tcp_enqueue_flags+0x1c4>)
 800ed18:	f005 fc4c 	bl	80145b4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d106      	bne.n	800ed30 <tcp_enqueue_flags+0x40>
 800ed22:	4b62      	ldr	r3, [pc, #392]	@ (800eeac <tcp_enqueue_flags+0x1bc>)
 800ed24:	f240 4213 	movw	r2, #1043	@ 0x413
 800ed28:	4963      	ldr	r1, [pc, #396]	@ (800eeb8 <tcp_enqueue_flags+0x1c8>)
 800ed2a:	4862      	ldr	r0, [pc, #392]	@ (800eeb4 <tcp_enqueue_flags+0x1c4>)
 800ed2c:	f005 fc42 	bl	80145b4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ed30:	78fb      	ldrb	r3, [r7, #3]
 800ed32:	f003 0302 	and.w	r3, r3, #2
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d001      	beq.n	800ed3e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ed3a:	2301      	movs	r3, #1
 800ed3c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ed3e:	7ffb      	ldrb	r3, [r7, #31]
 800ed40:	009b      	lsls	r3, r3, #2
 800ed42:	b2db      	uxtb	r3, r3
 800ed44:	f003 0304 	and.w	r3, r3, #4
 800ed48:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ed4a:	7dfb      	ldrb	r3, [r7, #23]
 800ed4c:	b29b      	uxth	r3, r3
 800ed4e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ed52:	4619      	mov	r1, r3
 800ed54:	2036      	movs	r0, #54	@ 0x36
 800ed56:	f7fb f959 	bl	800a00c <pbuf_alloc>
 800ed5a:	6138      	str	r0, [r7, #16]
 800ed5c:	693b      	ldr	r3, [r7, #16]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d109      	bne.n	800ed76 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	8b5b      	ldrh	r3, [r3, #26]
 800ed66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed6a:	b29a      	uxth	r2, r3
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ed70:	f04f 33ff 	mov.w	r3, #4294967295
 800ed74:	e095      	b.n	800eea2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	895a      	ldrh	r2, [r3, #10]
 800ed7a:	7dfb      	ldrb	r3, [r7, #23]
 800ed7c:	b29b      	uxth	r3, r3
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	d206      	bcs.n	800ed90 <tcp_enqueue_flags+0xa0>
 800ed82:	4b4a      	ldr	r3, [pc, #296]	@ (800eeac <tcp_enqueue_flags+0x1bc>)
 800ed84:	f240 4239 	movw	r2, #1081	@ 0x439
 800ed88:	494c      	ldr	r1, [pc, #304]	@ (800eebc <tcp_enqueue_flags+0x1cc>)
 800ed8a:	484a      	ldr	r0, [pc, #296]	@ (800eeb4 <tcp_enqueue_flags+0x1c4>)
 800ed8c:	f005 fc12 	bl	80145b4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800ed94:	78fa      	ldrb	r2, [r7, #3]
 800ed96:	7ffb      	ldrb	r3, [r7, #31]
 800ed98:	9300      	str	r3, [sp, #0]
 800ed9a:	460b      	mov	r3, r1
 800ed9c:	6939      	ldr	r1, [r7, #16]
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f7ff fd72 	bl	800e888 <tcp_create_segment>
 800eda4:	60f8      	str	r0, [r7, #12]
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d109      	bne.n	800edc0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	8b5b      	ldrh	r3, [r3, #26]
 800edb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800edb4:	b29a      	uxth	r2, r3
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800edba:	f04f 33ff 	mov.w	r3, #4294967295
 800edbe:	e070      	b.n	800eea2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	68db      	ldr	r3, [r3, #12]
 800edc4:	f003 0303 	and.w	r3, r3, #3
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d006      	beq.n	800edda <tcp_enqueue_flags+0xea>
 800edcc:	4b37      	ldr	r3, [pc, #220]	@ (800eeac <tcp_enqueue_flags+0x1bc>)
 800edce:	f240 4242 	movw	r2, #1090	@ 0x442
 800edd2:	493b      	ldr	r1, [pc, #236]	@ (800eec0 <tcp_enqueue_flags+0x1d0>)
 800edd4:	4837      	ldr	r0, [pc, #220]	@ (800eeb4 <tcp_enqueue_flags+0x1c4>)
 800edd6:	f005 fbed 	bl	80145b4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	891b      	ldrh	r3, [r3, #8]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d006      	beq.n	800edf0 <tcp_enqueue_flags+0x100>
 800ede2:	4b32      	ldr	r3, [pc, #200]	@ (800eeac <tcp_enqueue_flags+0x1bc>)
 800ede4:	f240 4243 	movw	r2, #1091	@ 0x443
 800ede8:	4936      	ldr	r1, [pc, #216]	@ (800eec4 <tcp_enqueue_flags+0x1d4>)
 800edea:	4832      	ldr	r0, [pc, #200]	@ (800eeb4 <tcp_enqueue_flags+0x1c4>)
 800edec:	f005 fbe2 	bl	80145b4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d103      	bne.n	800ee00 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	68fa      	ldr	r2, [r7, #12]
 800edfc:	66da      	str	r2, [r3, #108]	@ 0x6c
 800edfe:	e00d      	b.n	800ee1c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee04:	61bb      	str	r3, [r7, #24]
 800ee06:	e002      	b.n	800ee0e <tcp_enqueue_flags+0x11e>
 800ee08:	69bb      	ldr	r3, [r7, #24]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	61bb      	str	r3, [r7, #24]
 800ee0e:	69bb      	ldr	r3, [r7, #24]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d1f8      	bne.n	800ee08 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ee16:	69bb      	ldr	r3, [r7, #24]
 800ee18:	68fa      	ldr	r2, [r7, #12]
 800ee1a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2200      	movs	r2, #0
 800ee20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ee24:	78fb      	ldrb	r3, [r7, #3]
 800ee26:	f003 0302 	and.w	r3, r3, #2
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d104      	bne.n	800ee38 <tcp_enqueue_flags+0x148>
 800ee2e:	78fb      	ldrb	r3, [r7, #3]
 800ee30:	f003 0301 	and.w	r3, r3, #1
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d004      	beq.n	800ee42 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ee3c:	1c5a      	adds	r2, r3, #1
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ee42:	78fb      	ldrb	r3, [r7, #3]
 800ee44:	f003 0301 	and.w	r3, r3, #1
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d006      	beq.n	800ee5a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	8b5b      	ldrh	r3, [r3, #26]
 800ee50:	f043 0320 	orr.w	r3, r3, #32
 800ee54:	b29a      	uxth	r2, r3
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	685b      	ldr	r3, [r3, #4]
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7fb fc46 	bl	800a6f0 <pbuf_clen>
 800ee64:	4603      	mov	r3, r0
 800ee66:	461a      	mov	r2, r3
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ee6e:	4413      	add	r3, r2
 800ee70:	b29a      	uxth	r2, r3
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d00e      	beq.n	800eea0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d10a      	bne.n	800eea0 <tcp_enqueue_flags+0x1b0>
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d106      	bne.n	800eea0 <tcp_enqueue_flags+0x1b0>
 800ee92:	4b06      	ldr	r3, [pc, #24]	@ (800eeac <tcp_enqueue_flags+0x1bc>)
 800ee94:	f240 4265 	movw	r2, #1125	@ 0x465
 800ee98:	490b      	ldr	r1, [pc, #44]	@ (800eec8 <tcp_enqueue_flags+0x1d8>)
 800ee9a:	4806      	ldr	r0, [pc, #24]	@ (800eeb4 <tcp_enqueue_flags+0x1c4>)
 800ee9c:	f005 fb8a 	bl	80145b4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800eea0:	2300      	movs	r3, #0
}
 800eea2:	4618      	mov	r0, r3
 800eea4:	3720      	adds	r7, #32
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}
 800eeaa:	bf00      	nop
 800eeac:	08016a70 	.word	0x08016a70
 800eeb0:	08016e94 	.word	0x08016e94
 800eeb4:	08016ac4 	.word	0x08016ac4
 800eeb8:	08016eec 	.word	0x08016eec
 800eebc:	08016f0c 	.word	0x08016f0c
 800eec0:	08016f48 	.word	0x08016f48
 800eec4:	08016f60 	.word	0x08016f60
 800eec8:	08016f8c 	.word	0x08016f8c

0800eecc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800eecc:	b5b0      	push	{r4, r5, r7, lr}
 800eece:	b08a      	sub	sp, #40	@ 0x28
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d106      	bne.n	800eee8 <tcp_output+0x1c>
 800eeda:	4b8a      	ldr	r3, [pc, #552]	@ (800f104 <tcp_output+0x238>)
 800eedc:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800eee0:	4989      	ldr	r1, [pc, #548]	@ (800f108 <tcp_output+0x23c>)
 800eee2:	488a      	ldr	r0, [pc, #552]	@ (800f10c <tcp_output+0x240>)
 800eee4:	f005 fb66 	bl	80145b4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	7d1b      	ldrb	r3, [r3, #20]
 800eeec:	2b01      	cmp	r3, #1
 800eeee:	d106      	bne.n	800eefe <tcp_output+0x32>
 800eef0:	4b84      	ldr	r3, [pc, #528]	@ (800f104 <tcp_output+0x238>)
 800eef2:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800eef6:	4986      	ldr	r1, [pc, #536]	@ (800f110 <tcp_output+0x244>)
 800eef8:	4884      	ldr	r0, [pc, #528]	@ (800f10c <tcp_output+0x240>)
 800eefa:	f005 fb5b 	bl	80145b4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800eefe:	4b85      	ldr	r3, [pc, #532]	@ (800f114 <tcp_output+0x248>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	687a      	ldr	r2, [r7, #4]
 800ef04:	429a      	cmp	r2, r3
 800ef06:	d101      	bne.n	800ef0c <tcp_output+0x40>
    return ERR_OK;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	e1ce      	b.n	800f2aa <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	bf28      	it	cs
 800ef1c:	4613      	movcs	r3, r2
 800ef1e:	b29b      	uxth	r3, r3
 800ef20:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ef26:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800ef28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d10b      	bne.n	800ef46 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	8b5b      	ldrh	r3, [r3, #26]
 800ef32:	f003 0302 	and.w	r3, r3, #2
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	f000 81aa 	beq.w	800f290 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f000 fdcb 	bl	800fad8 <tcp_send_empty_ack>
 800ef42:	4603      	mov	r3, r0
 800ef44:	e1b1      	b.n	800f2aa <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ef46:	6879      	ldr	r1, [r7, #4]
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	3304      	adds	r3, #4
 800ef4c:	461a      	mov	r2, r3
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f7ff fc7e 	bl	800e850 <tcp_route>
 800ef54:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d102      	bne.n	800ef62 <tcp_output+0x96>
    return ERR_RTE;
 800ef5c:	f06f 0303 	mvn.w	r3, #3
 800ef60:	e1a3      	b.n	800f2aa <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d003      	beq.n	800ef70 <tcp_output+0xa4>
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d111      	bne.n	800ef94 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d002      	beq.n	800ef7c <tcp_output+0xb0>
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	3304      	adds	r3, #4
 800ef7a:	e000      	b.n	800ef7e <tcp_output+0xb2>
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ef80:	693b      	ldr	r3, [r7, #16]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d102      	bne.n	800ef8c <tcp_output+0xc0>
      return ERR_RTE;
 800ef86:	f06f 0303 	mvn.w	r3, #3
 800ef8a:	e18e      	b.n	800f2aa <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ef8c:	693b      	ldr	r3, [r7, #16]
 800ef8e:	681a      	ldr	r2, [r3, #0]
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ef94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef96:	68db      	ldr	r3, [r3, #12]
 800ef98:	685b      	ldr	r3, [r3, #4]
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f7f9 ff0b 	bl	8008db6 <lwip_htonl>
 800efa0:	4602      	mov	r2, r0
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800efa6:	1ad3      	subs	r3, r2, r3
 800efa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800efaa:	8912      	ldrh	r2, [r2, #8]
 800efac:	4413      	add	r3, r2
 800efae:	69ba      	ldr	r2, [r7, #24]
 800efb0:	429a      	cmp	r2, r3
 800efb2:	d227      	bcs.n	800f004 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800efba:	461a      	mov	r2, r3
 800efbc:	69bb      	ldr	r3, [r7, #24]
 800efbe:	4293      	cmp	r3, r2
 800efc0:	d114      	bne.n	800efec <tcp_output+0x120>
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d110      	bne.n	800efec <tcp_output+0x120>
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d10b      	bne.n	800efec <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2200      	movs	r2, #0
 800efd8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2201      	movs	r2, #1
 800efe0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2200      	movs	r2, #0
 800efe8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	8b5b      	ldrh	r3, [r3, #26]
 800eff0:	f003 0302 	and.w	r3, r3, #2
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	f000 814d 	beq.w	800f294 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f000 fd6c 	bl	800fad8 <tcp_send_empty_ack>
 800f000:	4603      	mov	r3, r0
 800f002:	e152      	b.n	800f2aa <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2200      	movs	r2, #0
 800f008:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f010:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f012:	6a3b      	ldr	r3, [r7, #32]
 800f014:	2b00      	cmp	r3, #0
 800f016:	f000 811c 	beq.w	800f252 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800f01a:	e002      	b.n	800f022 <tcp_output+0x156>
 800f01c:	6a3b      	ldr	r3, [r7, #32]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	623b      	str	r3, [r7, #32]
 800f022:	6a3b      	ldr	r3, [r7, #32]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d1f8      	bne.n	800f01c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f02a:	e112      	b.n	800f252 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f02e:	68db      	ldr	r3, [r3, #12]
 800f030:	899b      	ldrh	r3, [r3, #12]
 800f032:	b29b      	uxth	r3, r3
 800f034:	4618      	mov	r0, r3
 800f036:	f7f9 fea9 	bl	8008d8c <lwip_htons>
 800f03a:	4603      	mov	r3, r0
 800f03c:	b2db      	uxtb	r3, r3
 800f03e:	f003 0304 	and.w	r3, r3, #4
 800f042:	2b00      	cmp	r3, #0
 800f044:	d006      	beq.n	800f054 <tcp_output+0x188>
 800f046:	4b2f      	ldr	r3, [pc, #188]	@ (800f104 <tcp_output+0x238>)
 800f048:	f240 5236 	movw	r2, #1334	@ 0x536
 800f04c:	4932      	ldr	r1, [pc, #200]	@ (800f118 <tcp_output+0x24c>)
 800f04e:	482f      	ldr	r0, [pc, #188]	@ (800f10c <tcp_output+0x240>)
 800f050:	f005 fab0 	bl	80145b4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d01f      	beq.n	800f09c <tcp_output+0x1d0>
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	8b5b      	ldrh	r3, [r3, #26]
 800f060:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800f064:	2b00      	cmp	r3, #0
 800f066:	d119      	bne.n	800f09c <tcp_output+0x1d0>
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d00b      	beq.n	800f088 <tcp_output+0x1bc>
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d110      	bne.n	800f09c <tcp_output+0x1d0>
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f07e:	891a      	ldrh	r2, [r3, #8]
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f084:	429a      	cmp	r2, r3
 800f086:	d209      	bcs.n	800f09c <tcp_output+0x1d0>
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d004      	beq.n	800f09c <tcp_output+0x1d0>
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f098:	2b08      	cmp	r3, #8
 800f09a:	d901      	bls.n	800f0a0 <tcp_output+0x1d4>
 800f09c:	2301      	movs	r3, #1
 800f09e:	e000      	b.n	800f0a2 <tcp_output+0x1d6>
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d106      	bne.n	800f0b4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	8b5b      	ldrh	r3, [r3, #26]
 800f0aa:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	f000 80e4 	beq.w	800f27c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	7d1b      	ldrb	r3, [r3, #20]
 800f0b8:	2b02      	cmp	r3, #2
 800f0ba:	d00d      	beq.n	800f0d8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0be:	68db      	ldr	r3, [r3, #12]
 800f0c0:	899b      	ldrh	r3, [r3, #12]
 800f0c2:	b29c      	uxth	r4, r3
 800f0c4:	2010      	movs	r0, #16
 800f0c6:	f7f9 fe61 	bl	8008d8c <lwip_htons>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	461a      	mov	r2, r3
 800f0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0d0:	68db      	ldr	r3, [r3, #12]
 800f0d2:	4322      	orrs	r2, r4
 800f0d4:	b292      	uxth	r2, r2
 800f0d6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f0d8:	697a      	ldr	r2, [r7, #20]
 800f0da:	6879      	ldr	r1, [r7, #4]
 800f0dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f0de:	f000 f909 	bl	800f2f4 <tcp_output_segment>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f0e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d016      	beq.n	800f11c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	8b5b      	ldrh	r3, [r3, #26]
 800f0f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f0f6:	b29a      	uxth	r2, r3
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	835a      	strh	r2, [r3, #26]
      return err;
 800f0fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f100:	e0d3      	b.n	800f2aa <tcp_output+0x3de>
 800f102:	bf00      	nop
 800f104:	08016a70 	.word	0x08016a70
 800f108:	08016fb4 	.word	0x08016fb4
 800f10c:	08016ac4 	.word	0x08016ac4
 800f110:	08016fcc 	.word	0x08016fcc
 800f114:	2000e02c 	.word	0x2000e02c
 800f118:	08016ff4 	.word	0x08016ff4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f11e:	681a      	ldr	r2, [r3, #0]
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	7d1b      	ldrb	r3, [r3, #20]
 800f128:	2b02      	cmp	r3, #2
 800f12a:	d006      	beq.n	800f13a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	8b5b      	ldrh	r3, [r3, #26]
 800f130:	f023 0303 	bic.w	r3, r3, #3
 800f134:	b29a      	uxth	r2, r3
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f13c:	68db      	ldr	r3, [r3, #12]
 800f13e:	685b      	ldr	r3, [r3, #4]
 800f140:	4618      	mov	r0, r3
 800f142:	f7f9 fe38 	bl	8008db6 <lwip_htonl>
 800f146:	4604      	mov	r4, r0
 800f148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f14a:	891b      	ldrh	r3, [r3, #8]
 800f14c:	461d      	mov	r5, r3
 800f14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f150:	68db      	ldr	r3, [r3, #12]
 800f152:	899b      	ldrh	r3, [r3, #12]
 800f154:	b29b      	uxth	r3, r3
 800f156:	4618      	mov	r0, r3
 800f158:	f7f9 fe18 	bl	8008d8c <lwip_htons>
 800f15c:	4603      	mov	r3, r0
 800f15e:	b2db      	uxtb	r3, r3
 800f160:	f003 0303 	and.w	r3, r3, #3
 800f164:	2b00      	cmp	r3, #0
 800f166:	d001      	beq.n	800f16c <tcp_output+0x2a0>
 800f168:	2301      	movs	r3, #1
 800f16a:	e000      	b.n	800f16e <tcp_output+0x2a2>
 800f16c:	2300      	movs	r3, #0
 800f16e:	442b      	add	r3, r5
 800f170:	4423      	add	r3, r4
 800f172:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f178:	68bb      	ldr	r3, [r7, #8]
 800f17a:	1ad3      	subs	r3, r2, r3
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	da02      	bge.n	800f186 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	68ba      	ldr	r2, [r7, #8]
 800f184:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f188:	891b      	ldrh	r3, [r3, #8]
 800f18a:	461c      	mov	r4, r3
 800f18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f18e:	68db      	ldr	r3, [r3, #12]
 800f190:	899b      	ldrh	r3, [r3, #12]
 800f192:	b29b      	uxth	r3, r3
 800f194:	4618      	mov	r0, r3
 800f196:	f7f9 fdf9 	bl	8008d8c <lwip_htons>
 800f19a:	4603      	mov	r3, r0
 800f19c:	b2db      	uxtb	r3, r3
 800f19e:	f003 0303 	and.w	r3, r3, #3
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d001      	beq.n	800f1aa <tcp_output+0x2de>
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	e000      	b.n	800f1ac <tcp_output+0x2e0>
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	4423      	add	r3, r4
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d049      	beq.n	800f246 <tcp_output+0x37a>
      seg->next = NULL;
 800f1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d105      	bne.n	800f1cc <tcp_output+0x300>
        pcb->unacked = seg;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f1c4:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800f1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1c8:	623b      	str	r3, [r7, #32]
 800f1ca:	e03f      	b.n	800f24c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1ce:	68db      	ldr	r3, [r3, #12]
 800f1d0:	685b      	ldr	r3, [r3, #4]
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7f9 fdef 	bl	8008db6 <lwip_htonl>
 800f1d8:	4604      	mov	r4, r0
 800f1da:	6a3b      	ldr	r3, [r7, #32]
 800f1dc:	68db      	ldr	r3, [r3, #12]
 800f1de:	685b      	ldr	r3, [r3, #4]
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f7f9 fde8 	bl	8008db6 <lwip_htonl>
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	1ae3      	subs	r3, r4, r3
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	da24      	bge.n	800f238 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	3370      	adds	r3, #112	@ 0x70
 800f1f2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f1f4:	e002      	b.n	800f1fc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800f1f6:	69fb      	ldr	r3, [r7, #28]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f1fc:	69fb      	ldr	r3, [r7, #28]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d011      	beq.n	800f228 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f204:	69fb      	ldr	r3, [r7, #28]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	68db      	ldr	r3, [r3, #12]
 800f20a:	685b      	ldr	r3, [r3, #4]
 800f20c:	4618      	mov	r0, r3
 800f20e:	f7f9 fdd2 	bl	8008db6 <lwip_htonl>
 800f212:	4604      	mov	r4, r0
 800f214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f216:	68db      	ldr	r3, [r3, #12]
 800f218:	685b      	ldr	r3, [r3, #4]
 800f21a:	4618      	mov	r0, r3
 800f21c:	f7f9 fdcb 	bl	8008db6 <lwip_htonl>
 800f220:	4603      	mov	r3, r0
 800f222:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f224:	2b00      	cmp	r3, #0
 800f226:	dbe6      	blt.n	800f1f6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800f228:	69fb      	ldr	r3, [r7, #28]
 800f22a:	681a      	ldr	r2, [r3, #0]
 800f22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f22e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f230:	69fb      	ldr	r3, [r7, #28]
 800f232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f234:	601a      	str	r2, [r3, #0]
 800f236:	e009      	b.n	800f24c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f238:	6a3b      	ldr	r3, [r7, #32]
 800f23a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f23c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f23e:	6a3b      	ldr	r3, [r7, #32]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	623b      	str	r3, [r7, #32]
 800f244:	e002      	b.n	800f24c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f246:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f248:	f7fc fc45 	bl	800bad6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f250:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800f252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f254:	2b00      	cmp	r3, #0
 800f256:	d012      	beq.n	800f27e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f25a:	68db      	ldr	r3, [r3, #12]
 800f25c:	685b      	ldr	r3, [r3, #4]
 800f25e:	4618      	mov	r0, r3
 800f260:	f7f9 fda9 	bl	8008db6 <lwip_htonl>
 800f264:	4602      	mov	r2, r0
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f26a:	1ad3      	subs	r3, r2, r3
 800f26c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f26e:	8912      	ldrh	r2, [r2, #8]
 800f270:	4413      	add	r3, r2
  while (seg != NULL &&
 800f272:	69ba      	ldr	r2, [r7, #24]
 800f274:	429a      	cmp	r2, r3
 800f276:	f4bf aed9 	bcs.w	800f02c <tcp_output+0x160>
 800f27a:	e000      	b.n	800f27e <tcp_output+0x3b2>
      break;
 800f27c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f282:	2b00      	cmp	r3, #0
 800f284:	d108      	bne.n	800f298 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	2200      	movs	r2, #0
 800f28a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800f28e:	e004      	b.n	800f29a <tcp_output+0x3ce>
    goto output_done;
 800f290:	bf00      	nop
 800f292:	e002      	b.n	800f29a <tcp_output+0x3ce>
    goto output_done;
 800f294:	bf00      	nop
 800f296:	e000      	b.n	800f29a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800f298:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	8b5b      	ldrh	r3, [r3, #26]
 800f29e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f2a2:	b29a      	uxth	r2, r3
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f2a8:	2300      	movs	r3, #0
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	3728      	adds	r7, #40	@ 0x28
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bdb0      	pop	{r4, r5, r7, pc}
 800f2b2:	bf00      	nop

0800f2b4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b082      	sub	sp, #8
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d106      	bne.n	800f2d0 <tcp_output_segment_busy+0x1c>
 800f2c2:	4b09      	ldr	r3, [pc, #36]	@ (800f2e8 <tcp_output_segment_busy+0x34>)
 800f2c4:	f240 529a 	movw	r2, #1434	@ 0x59a
 800f2c8:	4908      	ldr	r1, [pc, #32]	@ (800f2ec <tcp_output_segment_busy+0x38>)
 800f2ca:	4809      	ldr	r0, [pc, #36]	@ (800f2f0 <tcp_output_segment_busy+0x3c>)
 800f2cc:	f005 f972 	bl	80145b4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	685b      	ldr	r3, [r3, #4]
 800f2d4:	7b9b      	ldrb	r3, [r3, #14]
 800f2d6:	2b01      	cmp	r3, #1
 800f2d8:	d001      	beq.n	800f2de <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f2da:	2301      	movs	r3, #1
 800f2dc:	e000      	b.n	800f2e0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f2de:	2300      	movs	r3, #0
}
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	3708      	adds	r7, #8
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}
 800f2e8:	08016a70 	.word	0x08016a70
 800f2ec:	0801700c 	.word	0x0801700c
 800f2f0:	08016ac4 	.word	0x08016ac4

0800f2f4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f2f4:	b5b0      	push	{r4, r5, r7, lr}
 800f2f6:	b08c      	sub	sp, #48	@ 0x30
 800f2f8:	af04      	add	r7, sp, #16
 800f2fa:	60f8      	str	r0, [r7, #12]
 800f2fc:	60b9      	str	r1, [r7, #8]
 800f2fe:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d106      	bne.n	800f314 <tcp_output_segment+0x20>
 800f306:	4b64      	ldr	r3, [pc, #400]	@ (800f498 <tcp_output_segment+0x1a4>)
 800f308:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800f30c:	4963      	ldr	r1, [pc, #396]	@ (800f49c <tcp_output_segment+0x1a8>)
 800f30e:	4864      	ldr	r0, [pc, #400]	@ (800f4a0 <tcp_output_segment+0x1ac>)
 800f310:	f005 f950 	bl	80145b4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d106      	bne.n	800f328 <tcp_output_segment+0x34>
 800f31a:	4b5f      	ldr	r3, [pc, #380]	@ (800f498 <tcp_output_segment+0x1a4>)
 800f31c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800f320:	4960      	ldr	r1, [pc, #384]	@ (800f4a4 <tcp_output_segment+0x1b0>)
 800f322:	485f      	ldr	r0, [pc, #380]	@ (800f4a0 <tcp_output_segment+0x1ac>)
 800f324:	f005 f946 	bl	80145b4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d106      	bne.n	800f33c <tcp_output_segment+0x48>
 800f32e:	4b5a      	ldr	r3, [pc, #360]	@ (800f498 <tcp_output_segment+0x1a4>)
 800f330:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800f334:	495c      	ldr	r1, [pc, #368]	@ (800f4a8 <tcp_output_segment+0x1b4>)
 800f336:	485a      	ldr	r0, [pc, #360]	@ (800f4a0 <tcp_output_segment+0x1ac>)
 800f338:	f005 f93c 	bl	80145b4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f33c:	68f8      	ldr	r0, [r7, #12]
 800f33e:	f7ff ffb9 	bl	800f2b4 <tcp_output_segment_busy>
 800f342:	4603      	mov	r3, r0
 800f344:	2b00      	cmp	r3, #0
 800f346:	d001      	beq.n	800f34c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f348:	2300      	movs	r3, #0
 800f34a:	e0a1      	b.n	800f490 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	68dc      	ldr	r4, [r3, #12]
 800f354:	4610      	mov	r0, r2
 800f356:	f7f9 fd2e 	bl	8008db6 <lwip_htonl>
 800f35a:	4603      	mov	r3, r0
 800f35c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	68dc      	ldr	r4, [r3, #12]
 800f366:	4610      	mov	r0, r2
 800f368:	f7f9 fd10 	bl	8008d8c <lwip_htons>
 800f36c:	4603      	mov	r3, r0
 800f36e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f374:	68ba      	ldr	r2, [r7, #8]
 800f376:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800f378:	441a      	add	r2, r3
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	68db      	ldr	r3, [r3, #12]
 800f382:	3314      	adds	r3, #20
 800f384:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	7a9b      	ldrb	r3, [r3, #10]
 800f38a:	f003 0301 	and.w	r3, r3, #1
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d015      	beq.n	800f3be <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	3304      	adds	r3, #4
 800f396:	461a      	mov	r2, r3
 800f398:	6879      	ldr	r1, [r7, #4]
 800f39a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800f39e:	f7fc fe91 	bl	800c0c4 <tcp_eff_send_mss_netif>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f3a6:	8b7b      	ldrh	r3, [r7, #26]
 800f3a8:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f7f9 fd02 	bl	8008db6 <lwip_htonl>
 800f3b2:	4602      	mov	r2, r0
 800f3b4:	69fb      	ldr	r3, [r7, #28]
 800f3b6:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f3b8:	69fb      	ldr	r3, [r7, #28]
 800f3ba:	3304      	adds	r3, #4
 800f3bc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	da02      	bge.n	800f3ce <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800f3ce:	68bb      	ldr	r3, [r7, #8]
 800f3d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d10c      	bne.n	800f3f0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800f3d6:	4b35      	ldr	r3, [pc, #212]	@ (800f4ac <tcp_output_segment+0x1b8>)
 800f3d8:	681a      	ldr	r2, [r3, #0]
 800f3da:	68bb      	ldr	r3, [r7, #8]
 800f3dc:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	68db      	ldr	r3, [r3, #12]
 800f3e2:	685b      	ldr	r3, [r3, #4]
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f7f9 fce6 	bl	8008db6 <lwip_htonl>
 800f3ea:	4602      	mov	r2, r0
 800f3ec:	68bb      	ldr	r3, [r7, #8]
 800f3ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	68da      	ldr	r2, [r3, #12]
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	685b      	ldr	r3, [r3, #4]
 800f3f8:	685b      	ldr	r3, [r3, #4]
 800f3fa:	1ad3      	subs	r3, r2, r3
 800f3fc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	685b      	ldr	r3, [r3, #4]
 800f402:	8959      	ldrh	r1, [r3, #10]
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	685b      	ldr	r3, [r3, #4]
 800f408:	8b3a      	ldrh	r2, [r7, #24]
 800f40a:	1a8a      	subs	r2, r1, r2
 800f40c:	b292      	uxth	r2, r2
 800f40e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	685b      	ldr	r3, [r3, #4]
 800f414:	8919      	ldrh	r1, [r3, #8]
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	685b      	ldr	r3, [r3, #4]
 800f41a:	8b3a      	ldrh	r2, [r7, #24]
 800f41c:	1a8a      	subs	r2, r1, r2
 800f41e:	b292      	uxth	r2, r2
 800f420:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	685b      	ldr	r3, [r3, #4]
 800f426:	68fa      	ldr	r2, [r7, #12]
 800f428:	68d2      	ldr	r2, [r2, #12]
 800f42a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	68db      	ldr	r3, [r3, #12]
 800f430:	2200      	movs	r2, #0
 800f432:	741a      	strb	r2, [r3, #16]
 800f434:	2200      	movs	r2, #0
 800f436:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	68da      	ldr	r2, [r3, #12]
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	7a9b      	ldrb	r3, [r3, #10]
 800f440:	f003 0301 	and.w	r3, r3, #1
 800f444:	2b00      	cmp	r3, #0
 800f446:	d001      	beq.n	800f44c <tcp_output_segment+0x158>
 800f448:	2318      	movs	r3, #24
 800f44a:	e000      	b.n	800f44e <tcp_output_segment+0x15a>
 800f44c:	2314      	movs	r3, #20
 800f44e:	4413      	add	r3, r2
 800f450:	69fa      	ldr	r2, [r7, #28]
 800f452:	429a      	cmp	r2, r3
 800f454:	d006      	beq.n	800f464 <tcp_output_segment+0x170>
 800f456:	4b10      	ldr	r3, [pc, #64]	@ (800f498 <tcp_output_segment+0x1a4>)
 800f458:	f240 621c 	movw	r2, #1564	@ 0x61c
 800f45c:	4914      	ldr	r1, [pc, #80]	@ (800f4b0 <tcp_output_segment+0x1bc>)
 800f45e:	4810      	ldr	r0, [pc, #64]	@ (800f4a0 <tcp_output_segment+0x1ac>)
 800f460:	f005 f8a8 	bl	80145b4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	6858      	ldr	r0, [r3, #4]
 800f468:	68b9      	ldr	r1, [r7, #8]
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	1d1c      	adds	r4, r3, #4
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	7add      	ldrb	r5, [r3, #11]
 800f472:	68bb      	ldr	r3, [r7, #8]
 800f474:	7a9b      	ldrb	r3, [r3, #10]
 800f476:	687a      	ldr	r2, [r7, #4]
 800f478:	9202      	str	r2, [sp, #8]
 800f47a:	2206      	movs	r2, #6
 800f47c:	9201      	str	r2, [sp, #4]
 800f47e:	9300      	str	r3, [sp, #0]
 800f480:	462b      	mov	r3, r5
 800f482:	4622      	mov	r2, r4
 800f484:	f002 f8a0 	bl	80115c8 <ip4_output_if>
 800f488:	4603      	mov	r3, r0
 800f48a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800f48c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f490:	4618      	mov	r0, r3
 800f492:	3720      	adds	r7, #32
 800f494:	46bd      	mov	sp, r7
 800f496:	bdb0      	pop	{r4, r5, r7, pc}
 800f498:	08016a70 	.word	0x08016a70
 800f49c:	08017034 	.word	0x08017034
 800f4a0:	08016ac4 	.word	0x08016ac4
 800f4a4:	08017054 	.word	0x08017054
 800f4a8:	08017074 	.word	0x08017074
 800f4ac:	2000dfe0 	.word	0x2000dfe0
 800f4b0:	08017098 	.word	0x08017098

0800f4b4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800f4b4:	b5b0      	push	{r4, r5, r7, lr}
 800f4b6:	b084      	sub	sp, #16
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d106      	bne.n	800f4d0 <tcp_rexmit_rto_prepare+0x1c>
 800f4c2:	4b31      	ldr	r3, [pc, #196]	@ (800f588 <tcp_rexmit_rto_prepare+0xd4>)
 800f4c4:	f240 6263 	movw	r2, #1635	@ 0x663
 800f4c8:	4930      	ldr	r1, [pc, #192]	@ (800f58c <tcp_rexmit_rto_prepare+0xd8>)
 800f4ca:	4831      	ldr	r0, [pc, #196]	@ (800f590 <tcp_rexmit_rto_prepare+0xdc>)
 800f4cc:	f005 f872 	bl	80145b4 <iprintf>

  if (pcb->unacked == NULL) {
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d102      	bne.n	800f4de <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800f4d8:	f06f 0305 	mvn.w	r3, #5
 800f4dc:	e050      	b.n	800f580 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f4e2:	60fb      	str	r3, [r7, #12]
 800f4e4:	e00b      	b.n	800f4fe <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800f4e6:	68f8      	ldr	r0, [r7, #12]
 800f4e8:	f7ff fee4 	bl	800f2b4 <tcp_output_segment_busy>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d002      	beq.n	800f4f8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800f4f2:	f06f 0305 	mvn.w	r3, #5
 800f4f6:	e043      	b.n	800f580 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	60fb      	str	r3, [r7, #12]
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d1ef      	bne.n	800f4e6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800f506:	68f8      	ldr	r0, [r7, #12]
 800f508:	f7ff fed4 	bl	800f2b4 <tcp_output_segment_busy>
 800f50c:	4603      	mov	r3, r0
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d002      	beq.n	800f518 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800f512:	f06f 0305 	mvn.w	r3, #5
 800f516:	e033      	b.n	800f580 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	2200      	movs	r2, #0
 800f52c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	8b5b      	ldrh	r3, [r3, #26]
 800f532:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800f536:	b29a      	uxth	r2, r3
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	68db      	ldr	r3, [r3, #12]
 800f540:	685b      	ldr	r3, [r3, #4]
 800f542:	4618      	mov	r0, r3
 800f544:	f7f9 fc37 	bl	8008db6 <lwip_htonl>
 800f548:	4604      	mov	r4, r0
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	891b      	ldrh	r3, [r3, #8]
 800f54e:	461d      	mov	r5, r3
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	68db      	ldr	r3, [r3, #12]
 800f554:	899b      	ldrh	r3, [r3, #12]
 800f556:	b29b      	uxth	r3, r3
 800f558:	4618      	mov	r0, r3
 800f55a:	f7f9 fc17 	bl	8008d8c <lwip_htons>
 800f55e:	4603      	mov	r3, r0
 800f560:	b2db      	uxtb	r3, r3
 800f562:	f003 0303 	and.w	r3, r3, #3
 800f566:	2b00      	cmp	r3, #0
 800f568:	d001      	beq.n	800f56e <tcp_rexmit_rto_prepare+0xba>
 800f56a:	2301      	movs	r3, #1
 800f56c:	e000      	b.n	800f570 <tcp_rexmit_rto_prepare+0xbc>
 800f56e:	2300      	movs	r3, #0
 800f570:	442b      	add	r3, r5
 800f572:	18e2      	adds	r2, r4, r3
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2200      	movs	r2, #0
 800f57c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800f57e:	2300      	movs	r3, #0
}
 800f580:	4618      	mov	r0, r3
 800f582:	3710      	adds	r7, #16
 800f584:	46bd      	mov	sp, r7
 800f586:	bdb0      	pop	{r4, r5, r7, pc}
 800f588:	08016a70 	.word	0x08016a70
 800f58c:	080170ac 	.word	0x080170ac
 800f590:	08016ac4 	.word	0x08016ac4

0800f594 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b082      	sub	sp, #8
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d106      	bne.n	800f5b0 <tcp_rexmit_rto_commit+0x1c>
 800f5a2:	4b0d      	ldr	r3, [pc, #52]	@ (800f5d8 <tcp_rexmit_rto_commit+0x44>)
 800f5a4:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800f5a8:	490c      	ldr	r1, [pc, #48]	@ (800f5dc <tcp_rexmit_rto_commit+0x48>)
 800f5aa:	480d      	ldr	r0, [pc, #52]	@ (800f5e0 <tcp_rexmit_rto_commit+0x4c>)
 800f5ac:	f005 f802 	bl	80145b4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f5b6:	2bff      	cmp	r3, #255	@ 0xff
 800f5b8:	d007      	beq.n	800f5ca <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f5c0:	3301      	adds	r3, #1
 800f5c2:	b2da      	uxtb	r2, r3
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f7ff fc7e 	bl	800eecc <tcp_output>
}
 800f5d0:	bf00      	nop
 800f5d2:	3708      	adds	r7, #8
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}
 800f5d8:	08016a70 	.word	0x08016a70
 800f5dc:	080170d0 	.word	0x080170d0
 800f5e0:	08016ac4 	.word	0x08016ac4

0800f5e4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b082      	sub	sp, #8
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d106      	bne.n	800f600 <tcp_rexmit_rto+0x1c>
 800f5f2:	4b0a      	ldr	r3, [pc, #40]	@ (800f61c <tcp_rexmit_rto+0x38>)
 800f5f4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800f5f8:	4909      	ldr	r1, [pc, #36]	@ (800f620 <tcp_rexmit_rto+0x3c>)
 800f5fa:	480a      	ldr	r0, [pc, #40]	@ (800f624 <tcp_rexmit_rto+0x40>)
 800f5fc:	f004 ffda 	bl	80145b4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800f600:	6878      	ldr	r0, [r7, #4]
 800f602:	f7ff ff57 	bl	800f4b4 <tcp_rexmit_rto_prepare>
 800f606:	4603      	mov	r3, r0
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d102      	bne.n	800f612 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800f60c:	6878      	ldr	r0, [r7, #4]
 800f60e:	f7ff ffc1 	bl	800f594 <tcp_rexmit_rto_commit>
  }
}
 800f612:	bf00      	nop
 800f614:	3708      	adds	r7, #8
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}
 800f61a:	bf00      	nop
 800f61c:	08016a70 	.word	0x08016a70
 800f620:	080170f4 	.word	0x080170f4
 800f624:	08016ac4 	.word	0x08016ac4

0800f628 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f628:	b590      	push	{r4, r7, lr}
 800f62a:	b085      	sub	sp, #20
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d106      	bne.n	800f644 <tcp_rexmit+0x1c>
 800f636:	4b2f      	ldr	r3, [pc, #188]	@ (800f6f4 <tcp_rexmit+0xcc>)
 800f638:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800f63c:	492e      	ldr	r1, [pc, #184]	@ (800f6f8 <tcp_rexmit+0xd0>)
 800f63e:	482f      	ldr	r0, [pc, #188]	@ (800f6fc <tcp_rexmit+0xd4>)
 800f640:	f004 ffb8 	bl	80145b4 <iprintf>

  if (pcb->unacked == NULL) {
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d102      	bne.n	800f652 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800f64c:	f06f 0305 	mvn.w	r3, #5
 800f650:	e04c      	b.n	800f6ec <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f656:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800f658:	68b8      	ldr	r0, [r7, #8]
 800f65a:	f7ff fe2b 	bl	800f2b4 <tcp_output_segment_busy>
 800f65e:	4603      	mov	r3, r0
 800f660:	2b00      	cmp	r3, #0
 800f662:	d002      	beq.n	800f66a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800f664:	f06f 0305 	mvn.w	r3, #5
 800f668:	e040      	b.n	800f6ec <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800f66a:	68bb      	ldr	r3, [r7, #8]
 800f66c:	681a      	ldr	r2, [r3, #0]
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	336c      	adds	r3, #108	@ 0x6c
 800f676:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f678:	e002      	b.n	800f680 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d011      	beq.n	800f6ac <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	68db      	ldr	r3, [r3, #12]
 800f68e:	685b      	ldr	r3, [r3, #4]
 800f690:	4618      	mov	r0, r3
 800f692:	f7f9 fb90 	bl	8008db6 <lwip_htonl>
 800f696:	4604      	mov	r4, r0
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	68db      	ldr	r3, [r3, #12]
 800f69c:	685b      	ldr	r3, [r3, #4]
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f7f9 fb89 	bl	8008db6 <lwip_htonl>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	dbe6      	blt.n	800f67a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	681a      	ldr	r2, [r3, #0]
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	68ba      	ldr	r2, [r7, #8]
 800f6b8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d103      	bne.n	800f6ca <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f6d0:	2bff      	cmp	r3, #255	@ 0xff
 800f6d2:	d007      	beq.n	800f6e4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f6da:	3301      	adds	r3, #1
 800f6dc:	b2da      	uxtb	r2, r3
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800f6ea:	2300      	movs	r3, #0
}
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	3714      	adds	r7, #20
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bd90      	pop	{r4, r7, pc}
 800f6f4:	08016a70 	.word	0x08016a70
 800f6f8:	08017110 	.word	0x08017110
 800f6fc:	08016ac4 	.word	0x08016ac4

0800f700 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b082      	sub	sp, #8
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d106      	bne.n	800f71c <tcp_rexmit_fast+0x1c>
 800f70e:	4b2a      	ldr	r3, [pc, #168]	@ (800f7b8 <tcp_rexmit_fast+0xb8>)
 800f710:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800f714:	4929      	ldr	r1, [pc, #164]	@ (800f7bc <tcp_rexmit_fast+0xbc>)
 800f716:	482a      	ldr	r0, [pc, #168]	@ (800f7c0 <tcp_rexmit_fast+0xc0>)
 800f718:	f004 ff4c 	bl	80145b4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f720:	2b00      	cmp	r3, #0
 800f722:	d044      	beq.n	800f7ae <tcp_rexmit_fast+0xae>
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	8b5b      	ldrh	r3, [r3, #26]
 800f728:	f003 0304 	and.w	r3, r3, #4
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d13e      	bne.n	800f7ae <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f7ff ff79 	bl	800f628 <tcp_rexmit>
 800f736:	4603      	mov	r3, r0
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d138      	bne.n	800f7ae <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f748:	4293      	cmp	r3, r2
 800f74a:	bf28      	it	cs
 800f74c:	4613      	movcs	r3, r2
 800f74e:	b29b      	uxth	r3, r3
 800f750:	0fda      	lsrs	r2, r3, #31
 800f752:	4413      	add	r3, r2
 800f754:	105b      	asrs	r3, r3, #1
 800f756:	b29a      	uxth	r2, r3
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800f764:	461a      	mov	r2, r3
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f76a:	005b      	lsls	r3, r3, #1
 800f76c:	429a      	cmp	r2, r3
 800f76e:	d206      	bcs.n	800f77e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f774:	005b      	lsls	r3, r3, #1
 800f776:	b29a      	uxth	r2, r3
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f788:	4619      	mov	r1, r3
 800f78a:	0049      	lsls	r1, r1, #1
 800f78c:	440b      	add	r3, r1
 800f78e:	b29b      	uxth	r3, r3
 800f790:	4413      	add	r3, r2
 800f792:	b29a      	uxth	r2, r3
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	8b5b      	ldrh	r3, [r3, #26]
 800f79e:	f043 0304 	orr.w	r3, r3, #4
 800f7a2:	b29a      	uxth	r2, r3
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800f7ae:	bf00      	nop
 800f7b0:	3708      	adds	r7, #8
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd80      	pop	{r7, pc}
 800f7b6:	bf00      	nop
 800f7b8:	08016a70 	.word	0x08016a70
 800f7bc:	08017128 	.word	0x08017128
 800f7c0:	08016ac4 	.word	0x08016ac4

0800f7c4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b086      	sub	sp, #24
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	60f8      	str	r0, [r7, #12]
 800f7cc:	607b      	str	r3, [r7, #4]
 800f7ce:	460b      	mov	r3, r1
 800f7d0:	817b      	strh	r3, [r7, #10]
 800f7d2:	4613      	mov	r3, r2
 800f7d4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f7d6:	897a      	ldrh	r2, [r7, #10]
 800f7d8:	893b      	ldrh	r3, [r7, #8]
 800f7da:	4413      	add	r3, r2
 800f7dc:	b29b      	uxth	r3, r3
 800f7de:	3314      	adds	r3, #20
 800f7e0:	b29b      	uxth	r3, r3
 800f7e2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f7e6:	4619      	mov	r1, r3
 800f7e8:	2022      	movs	r0, #34	@ 0x22
 800f7ea:	f7fa fc0f 	bl	800a00c <pbuf_alloc>
 800f7ee:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800f7f0:	697b      	ldr	r3, [r7, #20]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d04d      	beq.n	800f892 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f7f6:	897b      	ldrh	r3, [r7, #10]
 800f7f8:	3313      	adds	r3, #19
 800f7fa:	697a      	ldr	r2, [r7, #20]
 800f7fc:	8952      	ldrh	r2, [r2, #10]
 800f7fe:	4293      	cmp	r3, r2
 800f800:	db06      	blt.n	800f810 <tcp_output_alloc_header_common+0x4c>
 800f802:	4b26      	ldr	r3, [pc, #152]	@ (800f89c <tcp_output_alloc_header_common+0xd8>)
 800f804:	f240 7223 	movw	r2, #1827	@ 0x723
 800f808:	4925      	ldr	r1, [pc, #148]	@ (800f8a0 <tcp_output_alloc_header_common+0xdc>)
 800f80a:	4826      	ldr	r0, [pc, #152]	@ (800f8a4 <tcp_output_alloc_header_common+0xe0>)
 800f80c:	f004 fed2 	bl	80145b4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	685b      	ldr	r3, [r3, #4]
 800f814:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800f816:	8c3b      	ldrh	r3, [r7, #32]
 800f818:	4618      	mov	r0, r3
 800f81a:	f7f9 fab7 	bl	8008d8c <lwip_htons>
 800f81e:	4603      	mov	r3, r0
 800f820:	461a      	mov	r2, r3
 800f822:	693b      	ldr	r3, [r7, #16]
 800f824:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800f826:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f828:	4618      	mov	r0, r3
 800f82a:	f7f9 faaf 	bl	8008d8c <lwip_htons>
 800f82e:	4603      	mov	r3, r0
 800f830:	461a      	mov	r2, r3
 800f832:	693b      	ldr	r3, [r7, #16]
 800f834:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800f836:	693b      	ldr	r3, [r7, #16]
 800f838:	687a      	ldr	r2, [r7, #4]
 800f83a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800f83c:	68f8      	ldr	r0, [r7, #12]
 800f83e:	f7f9 faba 	bl	8008db6 <lwip_htonl>
 800f842:	4602      	mov	r2, r0
 800f844:	693b      	ldr	r3, [r7, #16]
 800f846:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f848:	897b      	ldrh	r3, [r7, #10]
 800f84a:	089b      	lsrs	r3, r3, #2
 800f84c:	b29b      	uxth	r3, r3
 800f84e:	3305      	adds	r3, #5
 800f850:	b29b      	uxth	r3, r3
 800f852:	031b      	lsls	r3, r3, #12
 800f854:	b29a      	uxth	r2, r3
 800f856:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f85a:	b29b      	uxth	r3, r3
 800f85c:	4313      	orrs	r3, r2
 800f85e:	b29b      	uxth	r3, r3
 800f860:	4618      	mov	r0, r3
 800f862:	f7f9 fa93 	bl	8008d8c <lwip_htons>
 800f866:	4603      	mov	r3, r0
 800f868:	461a      	mov	r2, r3
 800f86a:	693b      	ldr	r3, [r7, #16]
 800f86c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800f86e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f870:	4618      	mov	r0, r3
 800f872:	f7f9 fa8b 	bl	8008d8c <lwip_htons>
 800f876:	4603      	mov	r3, r0
 800f878:	461a      	mov	r2, r3
 800f87a:	693b      	ldr	r3, [r7, #16]
 800f87c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800f87e:	693b      	ldr	r3, [r7, #16]
 800f880:	2200      	movs	r2, #0
 800f882:	741a      	strb	r2, [r3, #16]
 800f884:	2200      	movs	r2, #0
 800f886:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800f888:	693b      	ldr	r3, [r7, #16]
 800f88a:	2200      	movs	r2, #0
 800f88c:	749a      	strb	r2, [r3, #18]
 800f88e:	2200      	movs	r2, #0
 800f890:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800f892:	697b      	ldr	r3, [r7, #20]
}
 800f894:	4618      	mov	r0, r3
 800f896:	3718      	adds	r7, #24
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}
 800f89c:	08016a70 	.word	0x08016a70
 800f8a0:	08017148 	.word	0x08017148
 800f8a4:	08016ac4 	.word	0x08016ac4

0800f8a8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800f8a8:	b5b0      	push	{r4, r5, r7, lr}
 800f8aa:	b08a      	sub	sp, #40	@ 0x28
 800f8ac:	af04      	add	r7, sp, #16
 800f8ae:	60f8      	str	r0, [r7, #12]
 800f8b0:	607b      	str	r3, [r7, #4]
 800f8b2:	460b      	mov	r3, r1
 800f8b4:	817b      	strh	r3, [r7, #10]
 800f8b6:	4613      	mov	r3, r2
 800f8b8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d106      	bne.n	800f8ce <tcp_output_alloc_header+0x26>
 800f8c0:	4b15      	ldr	r3, [pc, #84]	@ (800f918 <tcp_output_alloc_header+0x70>)
 800f8c2:	f240 7242 	movw	r2, #1858	@ 0x742
 800f8c6:	4915      	ldr	r1, [pc, #84]	@ (800f91c <tcp_output_alloc_header+0x74>)
 800f8c8:	4815      	ldr	r0, [pc, #84]	@ (800f920 <tcp_output_alloc_header+0x78>)
 800f8ca:	f004 fe73 	bl	80145b4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	8adb      	ldrh	r3, [r3, #22]
 800f8d6:	68fa      	ldr	r2, [r7, #12]
 800f8d8:	8b12      	ldrh	r2, [r2, #24]
 800f8da:	68f9      	ldr	r1, [r7, #12]
 800f8dc:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800f8de:	893d      	ldrh	r5, [r7, #8]
 800f8e0:	897c      	ldrh	r4, [r7, #10]
 800f8e2:	9103      	str	r1, [sp, #12]
 800f8e4:	2110      	movs	r1, #16
 800f8e6:	9102      	str	r1, [sp, #8]
 800f8e8:	9201      	str	r2, [sp, #4]
 800f8ea:	9300      	str	r3, [sp, #0]
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	462a      	mov	r2, r5
 800f8f0:	4621      	mov	r1, r4
 800f8f2:	f7ff ff67 	bl	800f7c4 <tcp_output_alloc_header_common>
 800f8f6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800f8f8:	697b      	ldr	r3, [r7, #20]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d006      	beq.n	800f90c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f902:	68fa      	ldr	r2, [r7, #12]
 800f904:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800f906:	441a      	add	r2, r3
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800f90c:	697b      	ldr	r3, [r7, #20]
}
 800f90e:	4618      	mov	r0, r3
 800f910:	3718      	adds	r7, #24
 800f912:	46bd      	mov	sp, r7
 800f914:	bdb0      	pop	{r4, r5, r7, pc}
 800f916:	bf00      	nop
 800f918:	08016a70 	.word	0x08016a70
 800f91c:	08017178 	.word	0x08017178
 800f920:	08016ac4 	.word	0x08016ac4

0800f924 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b088      	sub	sp, #32
 800f928:	af00      	add	r7, sp, #0
 800f92a:	60f8      	str	r0, [r7, #12]
 800f92c:	60b9      	str	r1, [r7, #8]
 800f92e:	4611      	mov	r1, r2
 800f930:	461a      	mov	r2, r3
 800f932:	460b      	mov	r3, r1
 800f934:	71fb      	strb	r3, [r7, #7]
 800f936:	4613      	mov	r3, r2
 800f938:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800f93a:	2300      	movs	r3, #0
 800f93c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800f93e:	68bb      	ldr	r3, [r7, #8]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d106      	bne.n	800f952 <tcp_output_fill_options+0x2e>
 800f944:	4b12      	ldr	r3, [pc, #72]	@ (800f990 <tcp_output_fill_options+0x6c>)
 800f946:	f240 7256 	movw	r2, #1878	@ 0x756
 800f94a:	4912      	ldr	r1, [pc, #72]	@ (800f994 <tcp_output_fill_options+0x70>)
 800f94c:	4812      	ldr	r0, [pc, #72]	@ (800f998 <tcp_output_fill_options+0x74>)
 800f94e:	f004 fe31 	bl	80145b4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	685b      	ldr	r3, [r3, #4]
 800f956:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800f958:	69bb      	ldr	r3, [r7, #24]
 800f95a:	3314      	adds	r3, #20
 800f95c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800f95e:	8bfb      	ldrh	r3, [r7, #30]
 800f960:	009b      	lsls	r3, r3, #2
 800f962:	461a      	mov	r2, r3
 800f964:	79fb      	ldrb	r3, [r7, #7]
 800f966:	009b      	lsls	r3, r3, #2
 800f968:	f003 0304 	and.w	r3, r3, #4
 800f96c:	4413      	add	r3, r2
 800f96e:	3314      	adds	r3, #20
 800f970:	69ba      	ldr	r2, [r7, #24]
 800f972:	4413      	add	r3, r2
 800f974:	697a      	ldr	r2, [r7, #20]
 800f976:	429a      	cmp	r2, r3
 800f978:	d006      	beq.n	800f988 <tcp_output_fill_options+0x64>
 800f97a:	4b05      	ldr	r3, [pc, #20]	@ (800f990 <tcp_output_fill_options+0x6c>)
 800f97c:	f240 7275 	movw	r2, #1909	@ 0x775
 800f980:	4906      	ldr	r1, [pc, #24]	@ (800f99c <tcp_output_fill_options+0x78>)
 800f982:	4805      	ldr	r0, [pc, #20]	@ (800f998 <tcp_output_fill_options+0x74>)
 800f984:	f004 fe16 	bl	80145b4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f988:	bf00      	nop
 800f98a:	3720      	adds	r7, #32
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bd80      	pop	{r7, pc}
 800f990:	08016a70 	.word	0x08016a70
 800f994:	080171a0 	.word	0x080171a0
 800f998:	08016ac4 	.word	0x08016ac4
 800f99c:	08017098 	.word	0x08017098

0800f9a0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b08a      	sub	sp, #40	@ 0x28
 800f9a4:	af04      	add	r7, sp, #16
 800f9a6:	60f8      	str	r0, [r7, #12]
 800f9a8:	60b9      	str	r1, [r7, #8]
 800f9aa:	607a      	str	r2, [r7, #4]
 800f9ac:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d106      	bne.n	800f9c2 <tcp_output_control_segment+0x22>
 800f9b4:	4b1c      	ldr	r3, [pc, #112]	@ (800fa28 <tcp_output_control_segment+0x88>)
 800f9b6:	f240 7287 	movw	r2, #1927	@ 0x787
 800f9ba:	491c      	ldr	r1, [pc, #112]	@ (800fa2c <tcp_output_control_segment+0x8c>)
 800f9bc:	481c      	ldr	r0, [pc, #112]	@ (800fa30 <tcp_output_control_segment+0x90>)
 800f9be:	f004 fdf9 	bl	80145b4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800f9c2:	683a      	ldr	r2, [r7, #0]
 800f9c4:	6879      	ldr	r1, [r7, #4]
 800f9c6:	68f8      	ldr	r0, [r7, #12]
 800f9c8:	f7fe ff42 	bl	800e850 <tcp_route>
 800f9cc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800f9ce:	693b      	ldr	r3, [r7, #16]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d102      	bne.n	800f9da <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800f9d4:	23fc      	movs	r3, #252	@ 0xfc
 800f9d6:	75fb      	strb	r3, [r7, #23]
 800f9d8:	e01c      	b.n	800fa14 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d006      	beq.n	800f9ee <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	7adb      	ldrb	r3, [r3, #11]
 800f9e4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	7a9b      	ldrb	r3, [r3, #10]
 800f9ea:	757b      	strb	r3, [r7, #21]
 800f9ec:	e003      	b.n	800f9f6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f9ee:	23ff      	movs	r3, #255	@ 0xff
 800f9f0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f9f6:	7dba      	ldrb	r2, [r7, #22]
 800f9f8:	693b      	ldr	r3, [r7, #16]
 800f9fa:	9302      	str	r3, [sp, #8]
 800f9fc:	2306      	movs	r3, #6
 800f9fe:	9301      	str	r3, [sp, #4]
 800fa00:	7d7b      	ldrb	r3, [r7, #21]
 800fa02:	9300      	str	r3, [sp, #0]
 800fa04:	4613      	mov	r3, r2
 800fa06:	683a      	ldr	r2, [r7, #0]
 800fa08:	6879      	ldr	r1, [r7, #4]
 800fa0a:	68b8      	ldr	r0, [r7, #8]
 800fa0c:	f001 fddc 	bl	80115c8 <ip4_output_if>
 800fa10:	4603      	mov	r3, r0
 800fa12:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800fa14:	68b8      	ldr	r0, [r7, #8]
 800fa16:	f7fa fddd 	bl	800a5d4 <pbuf_free>
  return err;
 800fa1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3718      	adds	r7, #24
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}
 800fa26:	bf00      	nop
 800fa28:	08016a70 	.word	0x08016a70
 800fa2c:	080171c8 	.word	0x080171c8
 800fa30:	08016ac4 	.word	0x08016ac4

0800fa34 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800fa34:	b590      	push	{r4, r7, lr}
 800fa36:	b08b      	sub	sp, #44	@ 0x2c
 800fa38:	af04      	add	r7, sp, #16
 800fa3a:	60f8      	str	r0, [r7, #12]
 800fa3c:	60b9      	str	r1, [r7, #8]
 800fa3e:	607a      	str	r2, [r7, #4]
 800fa40:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d106      	bne.n	800fa56 <tcp_rst+0x22>
 800fa48:	4b1f      	ldr	r3, [pc, #124]	@ (800fac8 <tcp_rst+0x94>)
 800fa4a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800fa4e:	491f      	ldr	r1, [pc, #124]	@ (800facc <tcp_rst+0x98>)
 800fa50:	481f      	ldr	r0, [pc, #124]	@ (800fad0 <tcp_rst+0x9c>)
 800fa52:	f004 fdaf 	bl	80145b4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800fa56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d106      	bne.n	800fa6a <tcp_rst+0x36>
 800fa5c:	4b1a      	ldr	r3, [pc, #104]	@ (800fac8 <tcp_rst+0x94>)
 800fa5e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800fa62:	491c      	ldr	r1, [pc, #112]	@ (800fad4 <tcp_rst+0xa0>)
 800fa64:	481a      	ldr	r0, [pc, #104]	@ (800fad0 <tcp_rst+0x9c>)
 800fa66:	f004 fda5 	bl	80145b4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800fa6e:	f246 0308 	movw	r3, #24584	@ 0x6008
 800fa72:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800fa74:	7dfb      	ldrb	r3, [r7, #23]
 800fa76:	b29c      	uxth	r4, r3
 800fa78:	68b8      	ldr	r0, [r7, #8]
 800fa7a:	f7f9 f99c 	bl	8008db6 <lwip_htonl>
 800fa7e:	4602      	mov	r2, r0
 800fa80:	8abb      	ldrh	r3, [r7, #20]
 800fa82:	9303      	str	r3, [sp, #12]
 800fa84:	2314      	movs	r3, #20
 800fa86:	9302      	str	r3, [sp, #8]
 800fa88:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800fa8a:	9301      	str	r3, [sp, #4]
 800fa8c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800fa8e:	9300      	str	r3, [sp, #0]
 800fa90:	4613      	mov	r3, r2
 800fa92:	2200      	movs	r2, #0
 800fa94:	4621      	mov	r1, r4
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f7ff fe94 	bl	800f7c4 <tcp_output_alloc_header_common>
 800fa9c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800fa9e:	693b      	ldr	r3, [r7, #16]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d00c      	beq.n	800fabe <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800faa4:	7dfb      	ldrb	r3, [r7, #23]
 800faa6:	2200      	movs	r2, #0
 800faa8:	6939      	ldr	r1, [r7, #16]
 800faaa:	68f8      	ldr	r0, [r7, #12]
 800faac:	f7ff ff3a 	bl	800f924 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800fab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fab2:	683a      	ldr	r2, [r7, #0]
 800fab4:	6939      	ldr	r1, [r7, #16]
 800fab6:	68f8      	ldr	r0, [r7, #12]
 800fab8:	f7ff ff72 	bl	800f9a0 <tcp_output_control_segment>
 800fabc:	e000      	b.n	800fac0 <tcp_rst+0x8c>
    return;
 800fabe:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800fac0:	371c      	adds	r7, #28
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd90      	pop	{r4, r7, pc}
 800fac6:	bf00      	nop
 800fac8:	08016a70 	.word	0x08016a70
 800facc:	080171f4 	.word	0x080171f4
 800fad0:	08016ac4 	.word	0x08016ac4
 800fad4:	08017210 	.word	0x08017210

0800fad8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800fad8:	b590      	push	{r4, r7, lr}
 800fada:	b087      	sub	sp, #28
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800fae0:	2300      	movs	r3, #0
 800fae2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800fae4:	2300      	movs	r3, #0
 800fae6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d106      	bne.n	800fafc <tcp_send_empty_ack+0x24>
 800faee:	4b28      	ldr	r3, [pc, #160]	@ (800fb90 <tcp_send_empty_ack+0xb8>)
 800faf0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800faf4:	4927      	ldr	r1, [pc, #156]	@ (800fb94 <tcp_send_empty_ack+0xbc>)
 800faf6:	4828      	ldr	r0, [pc, #160]	@ (800fb98 <tcp_send_empty_ack+0xc0>)
 800faf8:	f004 fd5c 	bl	80145b4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fafc:	7dfb      	ldrb	r3, [r7, #23]
 800fafe:	009b      	lsls	r3, r3, #2
 800fb00:	b2db      	uxtb	r3, r3
 800fb02:	f003 0304 	and.w	r3, r3, #4
 800fb06:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800fb08:	7d7b      	ldrb	r3, [r7, #21]
 800fb0a:	b29c      	uxth	r4, r3
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb10:	4618      	mov	r0, r3
 800fb12:	f7f9 f950 	bl	8008db6 <lwip_htonl>
 800fb16:	4603      	mov	r3, r0
 800fb18:	2200      	movs	r2, #0
 800fb1a:	4621      	mov	r1, r4
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f7ff fec3 	bl	800f8a8 <tcp_output_alloc_header>
 800fb22:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fb24:	693b      	ldr	r3, [r7, #16]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d109      	bne.n	800fb3e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	8b5b      	ldrh	r3, [r3, #26]
 800fb2e:	f043 0303 	orr.w	r3, r3, #3
 800fb32:	b29a      	uxth	r2, r3
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800fb38:	f06f 0301 	mvn.w	r3, #1
 800fb3c:	e023      	b.n	800fb86 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800fb3e:	7dbb      	ldrb	r3, [r7, #22]
 800fb40:	7dfa      	ldrb	r2, [r7, #23]
 800fb42:	6939      	ldr	r1, [r7, #16]
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	f7ff feed 	bl	800f924 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fb4a:	687a      	ldr	r2, [r7, #4]
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	3304      	adds	r3, #4
 800fb50:	6939      	ldr	r1, [r7, #16]
 800fb52:	6878      	ldr	r0, [r7, #4]
 800fb54:	f7ff ff24 	bl	800f9a0 <tcp_output_control_segment>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800fb5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d007      	beq.n	800fb74 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	8b5b      	ldrh	r3, [r3, #26]
 800fb68:	f043 0303 	orr.w	r3, r3, #3
 800fb6c:	b29a      	uxth	r2, r3
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	835a      	strh	r2, [r3, #26]
 800fb72:	e006      	b.n	800fb82 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	8b5b      	ldrh	r3, [r3, #26]
 800fb78:	f023 0303 	bic.w	r3, r3, #3
 800fb7c:	b29a      	uxth	r2, r3
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800fb82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	371c      	adds	r7, #28
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd90      	pop	{r4, r7, pc}
 800fb8e:	bf00      	nop
 800fb90:	08016a70 	.word	0x08016a70
 800fb94:	0801722c 	.word	0x0801722c
 800fb98:	08016ac4 	.word	0x08016ac4

0800fb9c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800fb9c:	b590      	push	{r4, r7, lr}
 800fb9e:	b087      	sub	sp, #28
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fba4:	2300      	movs	r3, #0
 800fba6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d106      	bne.n	800fbbc <tcp_keepalive+0x20>
 800fbae:	4b18      	ldr	r3, [pc, #96]	@ (800fc10 <tcp_keepalive+0x74>)
 800fbb0:	f640 0224 	movw	r2, #2084	@ 0x824
 800fbb4:	4917      	ldr	r1, [pc, #92]	@ (800fc14 <tcp_keepalive+0x78>)
 800fbb6:	4818      	ldr	r0, [pc, #96]	@ (800fc18 <tcp_keepalive+0x7c>)
 800fbb8:	f004 fcfc 	bl	80145b4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800fbbc:	7dfb      	ldrb	r3, [r7, #23]
 800fbbe:	b29c      	uxth	r4, r3
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fbc4:	3b01      	subs	r3, #1
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f7f9 f8f5 	bl	8008db6 <lwip_htonl>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	2200      	movs	r2, #0
 800fbd0:	4621      	mov	r1, r4
 800fbd2:	6878      	ldr	r0, [r7, #4]
 800fbd4:	f7ff fe68 	bl	800f8a8 <tcp_output_alloc_header>
 800fbd8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fbda:	693b      	ldr	r3, [r7, #16]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d102      	bne.n	800fbe6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800fbe0:	f04f 33ff 	mov.w	r3, #4294967295
 800fbe4:	e010      	b.n	800fc08 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fbe6:	7dfb      	ldrb	r3, [r7, #23]
 800fbe8:	2200      	movs	r2, #0
 800fbea:	6939      	ldr	r1, [r7, #16]
 800fbec:	6878      	ldr	r0, [r7, #4]
 800fbee:	f7ff fe99 	bl	800f924 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fbf2:	687a      	ldr	r2, [r7, #4]
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	3304      	adds	r3, #4
 800fbf8:	6939      	ldr	r1, [r7, #16]
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f7ff fed0 	bl	800f9a0 <tcp_output_control_segment>
 800fc00:	4603      	mov	r3, r0
 800fc02:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fc04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	371c      	adds	r7, #28
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd90      	pop	{r4, r7, pc}
 800fc10:	08016a70 	.word	0x08016a70
 800fc14:	0801724c 	.word	0x0801724c
 800fc18:	08016ac4 	.word	0x08016ac4

0800fc1c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800fc1c:	b590      	push	{r4, r7, lr}
 800fc1e:	b08b      	sub	sp, #44	@ 0x2c
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fc24:	2300      	movs	r3, #0
 800fc26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d106      	bne.n	800fc3e <tcp_zero_window_probe+0x22>
 800fc30:	4b4c      	ldr	r3, [pc, #304]	@ (800fd64 <tcp_zero_window_probe+0x148>)
 800fc32:	f640 024f 	movw	r2, #2127	@ 0x84f
 800fc36:	494c      	ldr	r1, [pc, #304]	@ (800fd68 <tcp_zero_window_probe+0x14c>)
 800fc38:	484c      	ldr	r0, [pc, #304]	@ (800fd6c <tcp_zero_window_probe+0x150>)
 800fc3a:	f004 fcbb 	bl	80145b4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fc42:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800fc44:	6a3b      	ldr	r3, [r7, #32]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d101      	bne.n	800fc4e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	e086      	b.n	800fd5c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800fc54:	2bff      	cmp	r3, #255	@ 0xff
 800fc56:	d007      	beq.n	800fc68 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800fc5e:	3301      	adds	r3, #1
 800fc60:	b2da      	uxtb	r2, r3
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800fc68:	6a3b      	ldr	r3, [r7, #32]
 800fc6a:	68db      	ldr	r3, [r3, #12]
 800fc6c:	899b      	ldrh	r3, [r3, #12]
 800fc6e:	b29b      	uxth	r3, r3
 800fc70:	4618      	mov	r0, r3
 800fc72:	f7f9 f88b 	bl	8008d8c <lwip_htons>
 800fc76:	4603      	mov	r3, r0
 800fc78:	b2db      	uxtb	r3, r3
 800fc7a:	f003 0301 	and.w	r3, r3, #1
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d005      	beq.n	800fc8e <tcp_zero_window_probe+0x72>
 800fc82:	6a3b      	ldr	r3, [r7, #32]
 800fc84:	891b      	ldrh	r3, [r3, #8]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d101      	bne.n	800fc8e <tcp_zero_window_probe+0x72>
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	e000      	b.n	800fc90 <tcp_zero_window_probe+0x74>
 800fc8e:	2300      	movs	r3, #0
 800fc90:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800fc92:	7ffb      	ldrb	r3, [r7, #31]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	bf0c      	ite	eq
 800fc98:	2301      	moveq	r3, #1
 800fc9a:	2300      	movne	r3, #0
 800fc9c:	b2db      	uxtb	r3, r3
 800fc9e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800fca0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fca4:	b299      	uxth	r1, r3
 800fca6:	6a3b      	ldr	r3, [r7, #32]
 800fca8:	68db      	ldr	r3, [r3, #12]
 800fcaa:	685b      	ldr	r3, [r3, #4]
 800fcac:	8bba      	ldrh	r2, [r7, #28]
 800fcae:	6878      	ldr	r0, [r7, #4]
 800fcb0:	f7ff fdfa 	bl	800f8a8 <tcp_output_alloc_header>
 800fcb4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800fcb6:	69bb      	ldr	r3, [r7, #24]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d102      	bne.n	800fcc2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800fcbc:	f04f 33ff 	mov.w	r3, #4294967295
 800fcc0:	e04c      	b.n	800fd5c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800fcc2:	69bb      	ldr	r3, [r7, #24]
 800fcc4:	685b      	ldr	r3, [r3, #4]
 800fcc6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800fcc8:	7ffb      	ldrb	r3, [r7, #31]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d011      	beq.n	800fcf2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800fcce:	697b      	ldr	r3, [r7, #20]
 800fcd0:	899b      	ldrh	r3, [r3, #12]
 800fcd2:	b29b      	uxth	r3, r3
 800fcd4:	b21b      	sxth	r3, r3
 800fcd6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800fcda:	b21c      	sxth	r4, r3
 800fcdc:	2011      	movs	r0, #17
 800fcde:	f7f9 f855 	bl	8008d8c <lwip_htons>
 800fce2:	4603      	mov	r3, r0
 800fce4:	b21b      	sxth	r3, r3
 800fce6:	4323      	orrs	r3, r4
 800fce8:	b21b      	sxth	r3, r3
 800fcea:	b29a      	uxth	r2, r3
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	819a      	strh	r2, [r3, #12]
 800fcf0:	e010      	b.n	800fd14 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800fcf2:	69bb      	ldr	r3, [r7, #24]
 800fcf4:	685b      	ldr	r3, [r3, #4]
 800fcf6:	3314      	adds	r3, #20
 800fcf8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800fcfa:	6a3b      	ldr	r3, [r7, #32]
 800fcfc:	6858      	ldr	r0, [r3, #4]
 800fcfe:	6a3b      	ldr	r3, [r7, #32]
 800fd00:	685b      	ldr	r3, [r3, #4]
 800fd02:	891a      	ldrh	r2, [r3, #8]
 800fd04:	6a3b      	ldr	r3, [r7, #32]
 800fd06:	891b      	ldrh	r3, [r3, #8]
 800fd08:	1ad3      	subs	r3, r2, r3
 800fd0a:	b29b      	uxth	r3, r3
 800fd0c:	2201      	movs	r2, #1
 800fd0e:	6939      	ldr	r1, [r7, #16]
 800fd10:	f7fa fe56 	bl	800a9c0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800fd14:	6a3b      	ldr	r3, [r7, #32]
 800fd16:	68db      	ldr	r3, [r3, #12]
 800fd18:	685b      	ldr	r3, [r3, #4]
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f7f9 f84b 	bl	8008db6 <lwip_htonl>
 800fd20:	4603      	mov	r3, r0
 800fd22:	3301      	adds	r3, #1
 800fd24:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	1ad3      	subs	r3, r2, r3
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	da02      	bge.n	800fd38 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	68fa      	ldr	r2, [r7, #12]
 800fd36:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fd38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	69b9      	ldr	r1, [r7, #24]
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f7ff fdef 	bl	800f924 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fd46:	687a      	ldr	r2, [r7, #4]
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	3304      	adds	r3, #4
 800fd4c:	69b9      	ldr	r1, [r7, #24]
 800fd4e:	6878      	ldr	r0, [r7, #4]
 800fd50:	f7ff fe26 	bl	800f9a0 <tcp_output_control_segment>
 800fd54:	4603      	mov	r3, r0
 800fd56:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fd58:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	372c      	adds	r7, #44	@ 0x2c
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd90      	pop	{r4, r7, pc}
 800fd64:	08016a70 	.word	0x08016a70
 800fd68:	08017268 	.word	0x08017268
 800fd6c:	08016ac4 	.word	0x08016ac4

0800fd70 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b082      	sub	sp, #8
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800fd78:	f7fa ff10 	bl	800ab9c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800fd7c:	4b0a      	ldr	r3, [pc, #40]	@ (800fda8 <tcpip_tcp_timer+0x38>)
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d103      	bne.n	800fd8c <tcpip_tcp_timer+0x1c>
 800fd84:	4b09      	ldr	r3, [pc, #36]	@ (800fdac <tcpip_tcp_timer+0x3c>)
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d005      	beq.n	800fd98 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	4908      	ldr	r1, [pc, #32]	@ (800fdb0 <tcpip_tcp_timer+0x40>)
 800fd90:	20fa      	movs	r0, #250	@ 0xfa
 800fd92:	f000 f8f3 	bl	800ff7c <sys_timeout>
 800fd96:	e003      	b.n	800fda0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800fd98:	4b06      	ldr	r3, [pc, #24]	@ (800fdb4 <tcpip_tcp_timer+0x44>)
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	601a      	str	r2, [r3, #0]
  }
}
 800fd9e:	bf00      	nop
 800fda0:	bf00      	nop
 800fda2:	3708      	adds	r7, #8
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}
 800fda8:	2000dfec 	.word	0x2000dfec
 800fdac:	2000dff0 	.word	0x2000dff0
 800fdb0:	0800fd71 	.word	0x0800fd71
 800fdb4:	2000e038 	.word	0x2000e038

0800fdb8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800fdbc:	4b0a      	ldr	r3, [pc, #40]	@ (800fde8 <tcp_timer_needed+0x30>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d10f      	bne.n	800fde4 <tcp_timer_needed+0x2c>
 800fdc4:	4b09      	ldr	r3, [pc, #36]	@ (800fdec <tcp_timer_needed+0x34>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d103      	bne.n	800fdd4 <tcp_timer_needed+0x1c>
 800fdcc:	4b08      	ldr	r3, [pc, #32]	@ (800fdf0 <tcp_timer_needed+0x38>)
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d007      	beq.n	800fde4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800fdd4:	4b04      	ldr	r3, [pc, #16]	@ (800fde8 <tcp_timer_needed+0x30>)
 800fdd6:	2201      	movs	r2, #1
 800fdd8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fdda:	2200      	movs	r2, #0
 800fddc:	4905      	ldr	r1, [pc, #20]	@ (800fdf4 <tcp_timer_needed+0x3c>)
 800fdde:	20fa      	movs	r0, #250	@ 0xfa
 800fde0:	f000 f8cc 	bl	800ff7c <sys_timeout>
  }
}
 800fde4:	bf00      	nop
 800fde6:	bd80      	pop	{r7, pc}
 800fde8:	2000e038 	.word	0x2000e038
 800fdec:	2000dfec 	.word	0x2000dfec
 800fdf0:	2000dff0 	.word	0x2000dff0
 800fdf4:	0800fd71 	.word	0x0800fd71

0800fdf8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b086      	sub	sp, #24
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	60f8      	str	r0, [r7, #12]
 800fe00:	60b9      	str	r1, [r7, #8]
 800fe02:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800fe04:	2009      	movs	r0, #9
 800fe06:	f7f9 fc97 	bl	8009738 <memp_malloc>
 800fe0a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800fe0c:	693b      	ldr	r3, [r7, #16]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d109      	bne.n	800fe26 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d151      	bne.n	800febc <sys_timeout_abs+0xc4>
 800fe18:	4b2a      	ldr	r3, [pc, #168]	@ (800fec4 <sys_timeout_abs+0xcc>)
 800fe1a:	22be      	movs	r2, #190	@ 0xbe
 800fe1c:	492a      	ldr	r1, [pc, #168]	@ (800fec8 <sys_timeout_abs+0xd0>)
 800fe1e:	482b      	ldr	r0, [pc, #172]	@ (800fecc <sys_timeout_abs+0xd4>)
 800fe20:	f004 fbc8 	bl	80145b4 <iprintf>
    return;
 800fe24:	e04a      	b.n	800febc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800fe26:	693b      	ldr	r3, [r7, #16]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800fe2c:	693b      	ldr	r3, [r7, #16]
 800fe2e:	68ba      	ldr	r2, [r7, #8]
 800fe30:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800fe32:	693b      	ldr	r3, [r7, #16]
 800fe34:	687a      	ldr	r2, [r7, #4]
 800fe36:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	68fa      	ldr	r2, [r7, #12]
 800fe3c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800fe3e:	4b24      	ldr	r3, [pc, #144]	@ (800fed0 <sys_timeout_abs+0xd8>)
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d103      	bne.n	800fe4e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800fe46:	4a22      	ldr	r2, [pc, #136]	@ (800fed0 <sys_timeout_abs+0xd8>)
 800fe48:	693b      	ldr	r3, [r7, #16]
 800fe4a:	6013      	str	r3, [r2, #0]
    return;
 800fe4c:	e037      	b.n	800febe <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800fe4e:	693b      	ldr	r3, [r7, #16]
 800fe50:	685a      	ldr	r2, [r3, #4]
 800fe52:	4b1f      	ldr	r3, [pc, #124]	@ (800fed0 <sys_timeout_abs+0xd8>)
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	685b      	ldr	r3, [r3, #4]
 800fe58:	1ad3      	subs	r3, r2, r3
 800fe5a:	0fdb      	lsrs	r3, r3, #31
 800fe5c:	f003 0301 	and.w	r3, r3, #1
 800fe60:	b2db      	uxtb	r3, r3
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d007      	beq.n	800fe76 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800fe66:	4b1a      	ldr	r3, [pc, #104]	@ (800fed0 <sys_timeout_abs+0xd8>)
 800fe68:	681a      	ldr	r2, [r3, #0]
 800fe6a:	693b      	ldr	r3, [r7, #16]
 800fe6c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800fe6e:	4a18      	ldr	r2, [pc, #96]	@ (800fed0 <sys_timeout_abs+0xd8>)
 800fe70:	693b      	ldr	r3, [r7, #16]
 800fe72:	6013      	str	r3, [r2, #0]
 800fe74:	e023      	b.n	800febe <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800fe76:	4b16      	ldr	r3, [pc, #88]	@ (800fed0 <sys_timeout_abs+0xd8>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	617b      	str	r3, [r7, #20]
 800fe7c:	e01a      	b.n	800feb4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800fe7e:	697b      	ldr	r3, [r7, #20]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d00b      	beq.n	800fe9e <sys_timeout_abs+0xa6>
 800fe86:	693b      	ldr	r3, [r7, #16]
 800fe88:	685a      	ldr	r2, [r3, #4]
 800fe8a:	697b      	ldr	r3, [r7, #20]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	685b      	ldr	r3, [r3, #4]
 800fe90:	1ad3      	subs	r3, r2, r3
 800fe92:	0fdb      	lsrs	r3, r3, #31
 800fe94:	f003 0301 	and.w	r3, r3, #1
 800fe98:	b2db      	uxtb	r3, r3
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d007      	beq.n	800feae <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800fe9e:	697b      	ldr	r3, [r7, #20]
 800fea0:	681a      	ldr	r2, [r3, #0]
 800fea2:	693b      	ldr	r3, [r7, #16]
 800fea4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800fea6:	697b      	ldr	r3, [r7, #20]
 800fea8:	693a      	ldr	r2, [r7, #16]
 800feaa:	601a      	str	r2, [r3, #0]
        break;
 800feac:	e007      	b.n	800febe <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800feae:	697b      	ldr	r3, [r7, #20]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	617b      	str	r3, [r7, #20]
 800feb4:	697b      	ldr	r3, [r7, #20]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d1e1      	bne.n	800fe7e <sys_timeout_abs+0x86>
 800feba:	e000      	b.n	800febe <sys_timeout_abs+0xc6>
    return;
 800febc:	bf00      	nop
      }
    }
  }
}
 800febe:	3718      	adds	r7, #24
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}
 800fec4:	0801728c 	.word	0x0801728c
 800fec8:	080172c0 	.word	0x080172c0
 800fecc:	08017300 	.word	0x08017300
 800fed0:	2000e030 	.word	0x2000e030

0800fed4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b086      	sub	sp, #24
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800fee0:	697b      	ldr	r3, [r7, #20]
 800fee2:	685b      	ldr	r3, [r3, #4]
 800fee4:	4798      	blx	r3

  now = sys_now();
 800fee6:	f7f4 fd5f 	bl	80049a8 <sys_now>
 800feea:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800feec:	697b      	ldr	r3, [r7, #20]
 800feee:	681a      	ldr	r2, [r3, #0]
 800fef0:	4b0f      	ldr	r3, [pc, #60]	@ (800ff30 <lwip_cyclic_timer+0x5c>)
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	4413      	add	r3, r2
 800fef6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800fef8:	68fa      	ldr	r2, [r7, #12]
 800fefa:	693b      	ldr	r3, [r7, #16]
 800fefc:	1ad3      	subs	r3, r2, r3
 800fefe:	0fdb      	lsrs	r3, r3, #31
 800ff00:	f003 0301 	and.w	r3, r3, #1
 800ff04:	b2db      	uxtb	r3, r3
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d009      	beq.n	800ff1e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ff0a:	697b      	ldr	r3, [r7, #20]
 800ff0c:	681a      	ldr	r2, [r3, #0]
 800ff0e:	693b      	ldr	r3, [r7, #16]
 800ff10:	4413      	add	r3, r2
 800ff12:	687a      	ldr	r2, [r7, #4]
 800ff14:	4907      	ldr	r1, [pc, #28]	@ (800ff34 <lwip_cyclic_timer+0x60>)
 800ff16:	4618      	mov	r0, r3
 800ff18:	f7ff ff6e 	bl	800fdf8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ff1c:	e004      	b.n	800ff28 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ff1e:	687a      	ldr	r2, [r7, #4]
 800ff20:	4904      	ldr	r1, [pc, #16]	@ (800ff34 <lwip_cyclic_timer+0x60>)
 800ff22:	68f8      	ldr	r0, [r7, #12]
 800ff24:	f7ff ff68 	bl	800fdf8 <sys_timeout_abs>
}
 800ff28:	bf00      	nop
 800ff2a:	3718      	adds	r7, #24
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bd80      	pop	{r7, pc}
 800ff30:	2000e034 	.word	0x2000e034
 800ff34:	0800fed5 	.word	0x0800fed5

0800ff38 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b082      	sub	sp, #8
 800ff3c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ff3e:	2301      	movs	r3, #1
 800ff40:	607b      	str	r3, [r7, #4]
 800ff42:	e00e      	b.n	800ff62 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ff44:	4a0b      	ldr	r2, [pc, #44]	@ (800ff74 <sys_timeouts_init+0x3c>)
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	00db      	lsls	r3, r3, #3
 800ff50:	4a08      	ldr	r2, [pc, #32]	@ (800ff74 <sys_timeouts_init+0x3c>)
 800ff52:	4413      	add	r3, r2
 800ff54:	461a      	mov	r2, r3
 800ff56:	4908      	ldr	r1, [pc, #32]	@ (800ff78 <sys_timeouts_init+0x40>)
 800ff58:	f000 f810 	bl	800ff7c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	3301      	adds	r3, #1
 800ff60:	607b      	str	r3, [r7, #4]
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	2b02      	cmp	r3, #2
 800ff66:	d9ed      	bls.n	800ff44 <sys_timeouts_init+0xc>
  }
}
 800ff68:	bf00      	nop
 800ff6a:	bf00      	nop
 800ff6c:	3708      	adds	r7, #8
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bd80      	pop	{r7, pc}
 800ff72:	bf00      	nop
 800ff74:	08017bb8 	.word	0x08017bb8
 800ff78:	0800fed5 	.word	0x0800fed5

0800ff7c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b086      	sub	sp, #24
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	60f8      	str	r0, [r7, #12]
 800ff84:	60b9      	str	r1, [r7, #8]
 800ff86:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ff8e:	d306      	bcc.n	800ff9e <sys_timeout+0x22>
 800ff90:	4b0a      	ldr	r3, [pc, #40]	@ (800ffbc <sys_timeout+0x40>)
 800ff92:	f240 1229 	movw	r2, #297	@ 0x129
 800ff96:	490a      	ldr	r1, [pc, #40]	@ (800ffc0 <sys_timeout+0x44>)
 800ff98:	480a      	ldr	r0, [pc, #40]	@ (800ffc4 <sys_timeout+0x48>)
 800ff9a:	f004 fb0b 	bl	80145b4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ff9e:	f7f4 fd03 	bl	80049a8 <sys_now>
 800ffa2:	4602      	mov	r2, r0
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	4413      	add	r3, r2
 800ffa8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ffaa:	687a      	ldr	r2, [r7, #4]
 800ffac:	68b9      	ldr	r1, [r7, #8]
 800ffae:	6978      	ldr	r0, [r7, #20]
 800ffb0:	f7ff ff22 	bl	800fdf8 <sys_timeout_abs>
#endif
}
 800ffb4:	bf00      	nop
 800ffb6:	3718      	adds	r7, #24
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd80      	pop	{r7, pc}
 800ffbc:	0801728c 	.word	0x0801728c
 800ffc0:	08017328 	.word	0x08017328
 800ffc4:	08017300 	.word	0x08017300

0800ffc8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b084      	sub	sp, #16
 800ffcc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ffce:	f7f4 fceb 	bl	80049a8 <sys_now>
 800ffd2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800ffd4:	4b17      	ldr	r3, [pc, #92]	@ (8010034 <sys_check_timeouts+0x6c>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800ffda:	68bb      	ldr	r3, [r7, #8]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d022      	beq.n	8010026 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	685b      	ldr	r3, [r3, #4]
 800ffe4:	68fa      	ldr	r2, [r7, #12]
 800ffe6:	1ad3      	subs	r3, r2, r3
 800ffe8:	0fdb      	lsrs	r3, r3, #31
 800ffea:	f003 0301 	and.w	r3, r3, #1
 800ffee:	b2db      	uxtb	r3, r3
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d11a      	bne.n	801002a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800fff4:	68bb      	ldr	r3, [r7, #8]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	4a0e      	ldr	r2, [pc, #56]	@ (8010034 <sys_check_timeouts+0x6c>)
 800fffa:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800fffc:	68bb      	ldr	r3, [r7, #8]
 800fffe:	689b      	ldr	r3, [r3, #8]
 8010000:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8010002:	68bb      	ldr	r3, [r7, #8]
 8010004:	68db      	ldr	r3, [r3, #12]
 8010006:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8010008:	68bb      	ldr	r3, [r7, #8]
 801000a:	685b      	ldr	r3, [r3, #4]
 801000c:	4a0a      	ldr	r2, [pc, #40]	@ (8010038 <sys_check_timeouts+0x70>)
 801000e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010010:	68b9      	ldr	r1, [r7, #8]
 8010012:	2009      	movs	r0, #9
 8010014:	f7f9 fc06 	bl	8009824 <memp_free>
    if (handler != NULL) {
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d0da      	beq.n	800ffd4 <sys_check_timeouts+0xc>
      handler(arg);
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	6838      	ldr	r0, [r7, #0]
 8010022:	4798      	blx	r3
  do {
 8010024:	e7d6      	b.n	800ffd4 <sys_check_timeouts+0xc>
      return;
 8010026:	bf00      	nop
 8010028:	e000      	b.n	801002c <sys_check_timeouts+0x64>
      return;
 801002a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801002c:	3710      	adds	r7, #16
 801002e:	46bd      	mov	sp, r7
 8010030:	bd80      	pop	{r7, pc}
 8010032:	bf00      	nop
 8010034:	2000e030 	.word	0x2000e030
 8010038:	2000e034 	.word	0x2000e034

0801003c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b082      	sub	sp, #8
 8010040:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8010042:	4b16      	ldr	r3, [pc, #88]	@ (801009c <sys_timeouts_sleeptime+0x60>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d102      	bne.n	8010050 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801004a:	f04f 33ff 	mov.w	r3, #4294967295
 801004e:	e020      	b.n	8010092 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8010050:	f7f4 fcaa 	bl	80049a8 <sys_now>
 8010054:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8010056:	4b11      	ldr	r3, [pc, #68]	@ (801009c <sys_timeouts_sleeptime+0x60>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	685a      	ldr	r2, [r3, #4]
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	1ad3      	subs	r3, r2, r3
 8010060:	0fdb      	lsrs	r3, r3, #31
 8010062:	f003 0301 	and.w	r3, r3, #1
 8010066:	b2db      	uxtb	r3, r3
 8010068:	2b00      	cmp	r3, #0
 801006a:	d001      	beq.n	8010070 <sys_timeouts_sleeptime+0x34>
    return 0;
 801006c:	2300      	movs	r3, #0
 801006e:	e010      	b.n	8010092 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8010070:	4b0a      	ldr	r3, [pc, #40]	@ (801009c <sys_timeouts_sleeptime+0x60>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	685a      	ldr	r2, [r3, #4]
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	1ad3      	subs	r3, r2, r3
 801007a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	2b00      	cmp	r3, #0
 8010080:	da06      	bge.n	8010090 <sys_timeouts_sleeptime+0x54>
 8010082:	4b07      	ldr	r3, [pc, #28]	@ (80100a0 <sys_timeouts_sleeptime+0x64>)
 8010084:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8010088:	4906      	ldr	r1, [pc, #24]	@ (80100a4 <sys_timeouts_sleeptime+0x68>)
 801008a:	4807      	ldr	r0, [pc, #28]	@ (80100a8 <sys_timeouts_sleeptime+0x6c>)
 801008c:	f004 fa92 	bl	80145b4 <iprintf>
    return ret;
 8010090:	683b      	ldr	r3, [r7, #0]
  }
}
 8010092:	4618      	mov	r0, r3
 8010094:	3708      	adds	r7, #8
 8010096:	46bd      	mov	sp, r7
 8010098:	bd80      	pop	{r7, pc}
 801009a:	bf00      	nop
 801009c:	2000e030 	.word	0x2000e030
 80100a0:	0801728c 	.word	0x0801728c
 80100a4:	08017360 	.word	0x08017360
 80100a8:	08017300 	.word	0x08017300

080100ac <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b082      	sub	sp, #8
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80100b4:	4915      	ldr	r1, [pc, #84]	@ (801010c <etharp_free_entry+0x60>)
 80100b6:	687a      	ldr	r2, [r7, #4]
 80100b8:	4613      	mov	r3, r2
 80100ba:	005b      	lsls	r3, r3, #1
 80100bc:	4413      	add	r3, r2
 80100be:	00db      	lsls	r3, r3, #3
 80100c0:	440b      	add	r3, r1
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d013      	beq.n	80100f0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80100c8:	4910      	ldr	r1, [pc, #64]	@ (801010c <etharp_free_entry+0x60>)
 80100ca:	687a      	ldr	r2, [r7, #4]
 80100cc:	4613      	mov	r3, r2
 80100ce:	005b      	lsls	r3, r3, #1
 80100d0:	4413      	add	r3, r2
 80100d2:	00db      	lsls	r3, r3, #3
 80100d4:	440b      	add	r3, r1
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	4618      	mov	r0, r3
 80100da:	f7fa fa7b 	bl	800a5d4 <pbuf_free>
    arp_table[i].q = NULL;
 80100de:	490b      	ldr	r1, [pc, #44]	@ (801010c <etharp_free_entry+0x60>)
 80100e0:	687a      	ldr	r2, [r7, #4]
 80100e2:	4613      	mov	r3, r2
 80100e4:	005b      	lsls	r3, r3, #1
 80100e6:	4413      	add	r3, r2
 80100e8:	00db      	lsls	r3, r3, #3
 80100ea:	440b      	add	r3, r1
 80100ec:	2200      	movs	r2, #0
 80100ee:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80100f0:	4906      	ldr	r1, [pc, #24]	@ (801010c <etharp_free_entry+0x60>)
 80100f2:	687a      	ldr	r2, [r7, #4]
 80100f4:	4613      	mov	r3, r2
 80100f6:	005b      	lsls	r3, r3, #1
 80100f8:	4413      	add	r3, r2
 80100fa:	00db      	lsls	r3, r3, #3
 80100fc:	440b      	add	r3, r1
 80100fe:	3314      	adds	r3, #20
 8010100:	2200      	movs	r2, #0
 8010102:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010104:	bf00      	nop
 8010106:	3708      	adds	r7, #8
 8010108:	46bd      	mov	sp, r7
 801010a:	bd80      	pop	{r7, pc}
 801010c:	2000e03c 	.word	0x2000e03c

08010110 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b082      	sub	sp, #8
 8010114:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010116:	2300      	movs	r3, #0
 8010118:	607b      	str	r3, [r7, #4]
 801011a:	e096      	b.n	801024a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801011c:	494f      	ldr	r1, [pc, #316]	@ (801025c <etharp_tmr+0x14c>)
 801011e:	687a      	ldr	r2, [r7, #4]
 8010120:	4613      	mov	r3, r2
 8010122:	005b      	lsls	r3, r3, #1
 8010124:	4413      	add	r3, r2
 8010126:	00db      	lsls	r3, r3, #3
 8010128:	440b      	add	r3, r1
 801012a:	3314      	adds	r3, #20
 801012c:	781b      	ldrb	r3, [r3, #0]
 801012e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010130:	78fb      	ldrb	r3, [r7, #3]
 8010132:	2b00      	cmp	r3, #0
 8010134:	f000 8086 	beq.w	8010244 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010138:	4948      	ldr	r1, [pc, #288]	@ (801025c <etharp_tmr+0x14c>)
 801013a:	687a      	ldr	r2, [r7, #4]
 801013c:	4613      	mov	r3, r2
 801013e:	005b      	lsls	r3, r3, #1
 8010140:	4413      	add	r3, r2
 8010142:	00db      	lsls	r3, r3, #3
 8010144:	440b      	add	r3, r1
 8010146:	3312      	adds	r3, #18
 8010148:	881b      	ldrh	r3, [r3, #0]
 801014a:	3301      	adds	r3, #1
 801014c:	b298      	uxth	r0, r3
 801014e:	4943      	ldr	r1, [pc, #268]	@ (801025c <etharp_tmr+0x14c>)
 8010150:	687a      	ldr	r2, [r7, #4]
 8010152:	4613      	mov	r3, r2
 8010154:	005b      	lsls	r3, r3, #1
 8010156:	4413      	add	r3, r2
 8010158:	00db      	lsls	r3, r3, #3
 801015a:	440b      	add	r3, r1
 801015c:	3312      	adds	r3, #18
 801015e:	4602      	mov	r2, r0
 8010160:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010162:	493e      	ldr	r1, [pc, #248]	@ (801025c <etharp_tmr+0x14c>)
 8010164:	687a      	ldr	r2, [r7, #4]
 8010166:	4613      	mov	r3, r2
 8010168:	005b      	lsls	r3, r3, #1
 801016a:	4413      	add	r3, r2
 801016c:	00db      	lsls	r3, r3, #3
 801016e:	440b      	add	r3, r1
 8010170:	3312      	adds	r3, #18
 8010172:	881b      	ldrh	r3, [r3, #0]
 8010174:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8010178:	d215      	bcs.n	80101a6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801017a:	4938      	ldr	r1, [pc, #224]	@ (801025c <etharp_tmr+0x14c>)
 801017c:	687a      	ldr	r2, [r7, #4]
 801017e:	4613      	mov	r3, r2
 8010180:	005b      	lsls	r3, r3, #1
 8010182:	4413      	add	r3, r2
 8010184:	00db      	lsls	r3, r3, #3
 8010186:	440b      	add	r3, r1
 8010188:	3314      	adds	r3, #20
 801018a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801018c:	2b01      	cmp	r3, #1
 801018e:	d10e      	bne.n	80101ae <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010190:	4932      	ldr	r1, [pc, #200]	@ (801025c <etharp_tmr+0x14c>)
 8010192:	687a      	ldr	r2, [r7, #4]
 8010194:	4613      	mov	r3, r2
 8010196:	005b      	lsls	r3, r3, #1
 8010198:	4413      	add	r3, r2
 801019a:	00db      	lsls	r3, r3, #3
 801019c:	440b      	add	r3, r1
 801019e:	3312      	adds	r3, #18
 80101a0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80101a2:	2b04      	cmp	r3, #4
 80101a4:	d903      	bls.n	80101ae <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80101a6:	6878      	ldr	r0, [r7, #4]
 80101a8:	f7ff ff80 	bl	80100ac <etharp_free_entry>
 80101ac:	e04a      	b.n	8010244 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80101ae:	492b      	ldr	r1, [pc, #172]	@ (801025c <etharp_tmr+0x14c>)
 80101b0:	687a      	ldr	r2, [r7, #4]
 80101b2:	4613      	mov	r3, r2
 80101b4:	005b      	lsls	r3, r3, #1
 80101b6:	4413      	add	r3, r2
 80101b8:	00db      	lsls	r3, r3, #3
 80101ba:	440b      	add	r3, r1
 80101bc:	3314      	adds	r3, #20
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	2b03      	cmp	r3, #3
 80101c2:	d10a      	bne.n	80101da <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80101c4:	4925      	ldr	r1, [pc, #148]	@ (801025c <etharp_tmr+0x14c>)
 80101c6:	687a      	ldr	r2, [r7, #4]
 80101c8:	4613      	mov	r3, r2
 80101ca:	005b      	lsls	r3, r3, #1
 80101cc:	4413      	add	r3, r2
 80101ce:	00db      	lsls	r3, r3, #3
 80101d0:	440b      	add	r3, r1
 80101d2:	3314      	adds	r3, #20
 80101d4:	2204      	movs	r2, #4
 80101d6:	701a      	strb	r2, [r3, #0]
 80101d8:	e034      	b.n	8010244 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80101da:	4920      	ldr	r1, [pc, #128]	@ (801025c <etharp_tmr+0x14c>)
 80101dc:	687a      	ldr	r2, [r7, #4]
 80101de:	4613      	mov	r3, r2
 80101e0:	005b      	lsls	r3, r3, #1
 80101e2:	4413      	add	r3, r2
 80101e4:	00db      	lsls	r3, r3, #3
 80101e6:	440b      	add	r3, r1
 80101e8:	3314      	adds	r3, #20
 80101ea:	781b      	ldrb	r3, [r3, #0]
 80101ec:	2b04      	cmp	r3, #4
 80101ee:	d10a      	bne.n	8010206 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80101f0:	491a      	ldr	r1, [pc, #104]	@ (801025c <etharp_tmr+0x14c>)
 80101f2:	687a      	ldr	r2, [r7, #4]
 80101f4:	4613      	mov	r3, r2
 80101f6:	005b      	lsls	r3, r3, #1
 80101f8:	4413      	add	r3, r2
 80101fa:	00db      	lsls	r3, r3, #3
 80101fc:	440b      	add	r3, r1
 80101fe:	3314      	adds	r3, #20
 8010200:	2202      	movs	r2, #2
 8010202:	701a      	strb	r2, [r3, #0]
 8010204:	e01e      	b.n	8010244 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010206:	4915      	ldr	r1, [pc, #84]	@ (801025c <etharp_tmr+0x14c>)
 8010208:	687a      	ldr	r2, [r7, #4]
 801020a:	4613      	mov	r3, r2
 801020c:	005b      	lsls	r3, r3, #1
 801020e:	4413      	add	r3, r2
 8010210:	00db      	lsls	r3, r3, #3
 8010212:	440b      	add	r3, r1
 8010214:	3314      	adds	r3, #20
 8010216:	781b      	ldrb	r3, [r3, #0]
 8010218:	2b01      	cmp	r3, #1
 801021a:	d113      	bne.n	8010244 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801021c:	490f      	ldr	r1, [pc, #60]	@ (801025c <etharp_tmr+0x14c>)
 801021e:	687a      	ldr	r2, [r7, #4]
 8010220:	4613      	mov	r3, r2
 8010222:	005b      	lsls	r3, r3, #1
 8010224:	4413      	add	r3, r2
 8010226:	00db      	lsls	r3, r3, #3
 8010228:	440b      	add	r3, r1
 801022a:	3308      	adds	r3, #8
 801022c:	6818      	ldr	r0, [r3, #0]
 801022e:	687a      	ldr	r2, [r7, #4]
 8010230:	4613      	mov	r3, r2
 8010232:	005b      	lsls	r3, r3, #1
 8010234:	4413      	add	r3, r2
 8010236:	00db      	lsls	r3, r3, #3
 8010238:	4a08      	ldr	r2, [pc, #32]	@ (801025c <etharp_tmr+0x14c>)
 801023a:	4413      	add	r3, r2
 801023c:	3304      	adds	r3, #4
 801023e:	4619      	mov	r1, r3
 8010240:	f000 fe6e 	bl	8010f20 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	3301      	adds	r3, #1
 8010248:	607b      	str	r3, [r7, #4]
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	2b09      	cmp	r3, #9
 801024e:	f77f af65 	ble.w	801011c <etharp_tmr+0xc>
      }
    }
  }
}
 8010252:	bf00      	nop
 8010254:	bf00      	nop
 8010256:	3708      	adds	r7, #8
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}
 801025c:	2000e03c 	.word	0x2000e03c

08010260 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b08a      	sub	sp, #40	@ 0x28
 8010264:	af00      	add	r7, sp, #0
 8010266:	60f8      	str	r0, [r7, #12]
 8010268:	460b      	mov	r3, r1
 801026a:	607a      	str	r2, [r7, #4]
 801026c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801026e:	230a      	movs	r3, #10
 8010270:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010272:	230a      	movs	r3, #10
 8010274:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010276:	230a      	movs	r3, #10
 8010278:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801027a:	2300      	movs	r3, #0
 801027c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801027e:	230a      	movs	r3, #10
 8010280:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010282:	2300      	movs	r3, #0
 8010284:	83bb      	strh	r3, [r7, #28]
 8010286:	2300      	movs	r3, #0
 8010288:	837b      	strh	r3, [r7, #26]
 801028a:	2300      	movs	r3, #0
 801028c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801028e:	2300      	movs	r3, #0
 8010290:	843b      	strh	r3, [r7, #32]
 8010292:	e0ae      	b.n	80103f2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010294:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010298:	49a6      	ldr	r1, [pc, #664]	@ (8010534 <etharp_find_entry+0x2d4>)
 801029a:	4613      	mov	r3, r2
 801029c:	005b      	lsls	r3, r3, #1
 801029e:	4413      	add	r3, r2
 80102a0:	00db      	lsls	r3, r3, #3
 80102a2:	440b      	add	r3, r1
 80102a4:	3314      	adds	r3, #20
 80102a6:	781b      	ldrb	r3, [r3, #0]
 80102a8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80102aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80102ae:	2b0a      	cmp	r3, #10
 80102b0:	d105      	bne.n	80102be <etharp_find_entry+0x5e>
 80102b2:	7dfb      	ldrb	r3, [r7, #23]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d102      	bne.n	80102be <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80102b8:	8c3b      	ldrh	r3, [r7, #32]
 80102ba:	847b      	strh	r3, [r7, #34]	@ 0x22
 80102bc:	e095      	b.n	80103ea <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80102be:	7dfb      	ldrb	r3, [r7, #23]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	f000 8092 	beq.w	80103ea <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80102c6:	7dfb      	ldrb	r3, [r7, #23]
 80102c8:	2b01      	cmp	r3, #1
 80102ca:	d009      	beq.n	80102e0 <etharp_find_entry+0x80>
 80102cc:	7dfb      	ldrb	r3, [r7, #23]
 80102ce:	2b01      	cmp	r3, #1
 80102d0:	d806      	bhi.n	80102e0 <etharp_find_entry+0x80>
 80102d2:	4b99      	ldr	r3, [pc, #612]	@ (8010538 <etharp_find_entry+0x2d8>)
 80102d4:	f240 1223 	movw	r2, #291	@ 0x123
 80102d8:	4998      	ldr	r1, [pc, #608]	@ (801053c <etharp_find_entry+0x2dc>)
 80102da:	4899      	ldr	r0, [pc, #612]	@ (8010540 <etharp_find_entry+0x2e0>)
 80102dc:	f004 f96a 	bl	80145b4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d020      	beq.n	8010328 <etharp_find_entry+0xc8>
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	6819      	ldr	r1, [r3, #0]
 80102ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80102ee:	4891      	ldr	r0, [pc, #580]	@ (8010534 <etharp_find_entry+0x2d4>)
 80102f0:	4613      	mov	r3, r2
 80102f2:	005b      	lsls	r3, r3, #1
 80102f4:	4413      	add	r3, r2
 80102f6:	00db      	lsls	r3, r3, #3
 80102f8:	4403      	add	r3, r0
 80102fa:	3304      	adds	r3, #4
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	4299      	cmp	r1, r3
 8010300:	d112      	bne.n	8010328 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d00c      	beq.n	8010322 <etharp_find_entry+0xc2>
 8010308:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801030c:	4989      	ldr	r1, [pc, #548]	@ (8010534 <etharp_find_entry+0x2d4>)
 801030e:	4613      	mov	r3, r2
 8010310:	005b      	lsls	r3, r3, #1
 8010312:	4413      	add	r3, r2
 8010314:	00db      	lsls	r3, r3, #3
 8010316:	440b      	add	r3, r1
 8010318:	3308      	adds	r3, #8
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	687a      	ldr	r2, [r7, #4]
 801031e:	429a      	cmp	r2, r3
 8010320:	d102      	bne.n	8010328 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010322:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010326:	e100      	b.n	801052a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010328:	7dfb      	ldrb	r3, [r7, #23]
 801032a:	2b01      	cmp	r3, #1
 801032c:	d140      	bne.n	80103b0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801032e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010332:	4980      	ldr	r1, [pc, #512]	@ (8010534 <etharp_find_entry+0x2d4>)
 8010334:	4613      	mov	r3, r2
 8010336:	005b      	lsls	r3, r3, #1
 8010338:	4413      	add	r3, r2
 801033a:	00db      	lsls	r3, r3, #3
 801033c:	440b      	add	r3, r1
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d01a      	beq.n	801037a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010344:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010348:	497a      	ldr	r1, [pc, #488]	@ (8010534 <etharp_find_entry+0x2d4>)
 801034a:	4613      	mov	r3, r2
 801034c:	005b      	lsls	r3, r3, #1
 801034e:	4413      	add	r3, r2
 8010350:	00db      	lsls	r3, r3, #3
 8010352:	440b      	add	r3, r1
 8010354:	3312      	adds	r3, #18
 8010356:	881b      	ldrh	r3, [r3, #0]
 8010358:	8bba      	ldrh	r2, [r7, #28]
 801035a:	429a      	cmp	r2, r3
 801035c:	d845      	bhi.n	80103ea <etharp_find_entry+0x18a>
            old_queue = i;
 801035e:	8c3b      	ldrh	r3, [r7, #32]
 8010360:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010362:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010366:	4973      	ldr	r1, [pc, #460]	@ (8010534 <etharp_find_entry+0x2d4>)
 8010368:	4613      	mov	r3, r2
 801036a:	005b      	lsls	r3, r3, #1
 801036c:	4413      	add	r3, r2
 801036e:	00db      	lsls	r3, r3, #3
 8010370:	440b      	add	r3, r1
 8010372:	3312      	adds	r3, #18
 8010374:	881b      	ldrh	r3, [r3, #0]
 8010376:	83bb      	strh	r3, [r7, #28]
 8010378:	e037      	b.n	80103ea <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801037a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801037e:	496d      	ldr	r1, [pc, #436]	@ (8010534 <etharp_find_entry+0x2d4>)
 8010380:	4613      	mov	r3, r2
 8010382:	005b      	lsls	r3, r3, #1
 8010384:	4413      	add	r3, r2
 8010386:	00db      	lsls	r3, r3, #3
 8010388:	440b      	add	r3, r1
 801038a:	3312      	adds	r3, #18
 801038c:	881b      	ldrh	r3, [r3, #0]
 801038e:	8b7a      	ldrh	r2, [r7, #26]
 8010390:	429a      	cmp	r2, r3
 8010392:	d82a      	bhi.n	80103ea <etharp_find_entry+0x18a>
            old_pending = i;
 8010394:	8c3b      	ldrh	r3, [r7, #32]
 8010396:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8010398:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801039c:	4965      	ldr	r1, [pc, #404]	@ (8010534 <etharp_find_entry+0x2d4>)
 801039e:	4613      	mov	r3, r2
 80103a0:	005b      	lsls	r3, r3, #1
 80103a2:	4413      	add	r3, r2
 80103a4:	00db      	lsls	r3, r3, #3
 80103a6:	440b      	add	r3, r1
 80103a8:	3312      	adds	r3, #18
 80103aa:	881b      	ldrh	r3, [r3, #0]
 80103ac:	837b      	strh	r3, [r7, #26]
 80103ae:	e01c      	b.n	80103ea <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80103b0:	7dfb      	ldrb	r3, [r7, #23]
 80103b2:	2b01      	cmp	r3, #1
 80103b4:	d919      	bls.n	80103ea <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80103b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80103ba:	495e      	ldr	r1, [pc, #376]	@ (8010534 <etharp_find_entry+0x2d4>)
 80103bc:	4613      	mov	r3, r2
 80103be:	005b      	lsls	r3, r3, #1
 80103c0:	4413      	add	r3, r2
 80103c2:	00db      	lsls	r3, r3, #3
 80103c4:	440b      	add	r3, r1
 80103c6:	3312      	adds	r3, #18
 80103c8:	881b      	ldrh	r3, [r3, #0]
 80103ca:	8b3a      	ldrh	r2, [r7, #24]
 80103cc:	429a      	cmp	r2, r3
 80103ce:	d80c      	bhi.n	80103ea <etharp_find_entry+0x18a>
            old_stable = i;
 80103d0:	8c3b      	ldrh	r3, [r7, #32]
 80103d2:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80103d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80103d8:	4956      	ldr	r1, [pc, #344]	@ (8010534 <etharp_find_entry+0x2d4>)
 80103da:	4613      	mov	r3, r2
 80103dc:	005b      	lsls	r3, r3, #1
 80103de:	4413      	add	r3, r2
 80103e0:	00db      	lsls	r3, r3, #3
 80103e2:	440b      	add	r3, r1
 80103e4:	3312      	adds	r3, #18
 80103e6:	881b      	ldrh	r3, [r3, #0]
 80103e8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80103ea:	8c3b      	ldrh	r3, [r7, #32]
 80103ec:	3301      	adds	r3, #1
 80103ee:	b29b      	uxth	r3, r3
 80103f0:	843b      	strh	r3, [r7, #32]
 80103f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80103f6:	2b09      	cmp	r3, #9
 80103f8:	f77f af4c 	ble.w	8010294 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80103fc:	7afb      	ldrb	r3, [r7, #11]
 80103fe:	f003 0302 	and.w	r3, r3, #2
 8010402:	2b00      	cmp	r3, #0
 8010404:	d108      	bne.n	8010418 <etharp_find_entry+0x1b8>
 8010406:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801040a:	2b0a      	cmp	r3, #10
 801040c:	d107      	bne.n	801041e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801040e:	7afb      	ldrb	r3, [r7, #11]
 8010410:	f003 0301 	and.w	r3, r3, #1
 8010414:	2b00      	cmp	r3, #0
 8010416:	d102      	bne.n	801041e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010418:	f04f 33ff 	mov.w	r3, #4294967295
 801041c:	e085      	b.n	801052a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801041e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8010422:	2b09      	cmp	r3, #9
 8010424:	dc02      	bgt.n	801042c <etharp_find_entry+0x1cc>
    i = empty;
 8010426:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010428:	843b      	strh	r3, [r7, #32]
 801042a:	e039      	b.n	80104a0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801042c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8010430:	2b09      	cmp	r3, #9
 8010432:	dc14      	bgt.n	801045e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010434:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010436:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010438:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801043c:	493d      	ldr	r1, [pc, #244]	@ (8010534 <etharp_find_entry+0x2d4>)
 801043e:	4613      	mov	r3, r2
 8010440:	005b      	lsls	r3, r3, #1
 8010442:	4413      	add	r3, r2
 8010444:	00db      	lsls	r3, r3, #3
 8010446:	440b      	add	r3, r1
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d018      	beq.n	8010480 <etharp_find_entry+0x220>
 801044e:	4b3a      	ldr	r3, [pc, #232]	@ (8010538 <etharp_find_entry+0x2d8>)
 8010450:	f240 126d 	movw	r2, #365	@ 0x16d
 8010454:	493b      	ldr	r1, [pc, #236]	@ (8010544 <etharp_find_entry+0x2e4>)
 8010456:	483a      	ldr	r0, [pc, #232]	@ (8010540 <etharp_find_entry+0x2e0>)
 8010458:	f004 f8ac 	bl	80145b4 <iprintf>
 801045c:	e010      	b.n	8010480 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801045e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8010462:	2b09      	cmp	r3, #9
 8010464:	dc02      	bgt.n	801046c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010466:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010468:	843b      	strh	r3, [r7, #32]
 801046a:	e009      	b.n	8010480 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801046c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010470:	2b09      	cmp	r3, #9
 8010472:	dc02      	bgt.n	801047a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010474:	8bfb      	ldrh	r3, [r7, #30]
 8010476:	843b      	strh	r3, [r7, #32]
 8010478:	e002      	b.n	8010480 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801047a:	f04f 33ff 	mov.w	r3, #4294967295
 801047e:	e054      	b.n	801052a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010480:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010484:	2b09      	cmp	r3, #9
 8010486:	dd06      	ble.n	8010496 <etharp_find_entry+0x236>
 8010488:	4b2b      	ldr	r3, [pc, #172]	@ (8010538 <etharp_find_entry+0x2d8>)
 801048a:	f240 127f 	movw	r2, #383	@ 0x17f
 801048e:	492e      	ldr	r1, [pc, #184]	@ (8010548 <etharp_find_entry+0x2e8>)
 8010490:	482b      	ldr	r0, [pc, #172]	@ (8010540 <etharp_find_entry+0x2e0>)
 8010492:	f004 f88f 	bl	80145b4 <iprintf>
    etharp_free_entry(i);
 8010496:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801049a:	4618      	mov	r0, r3
 801049c:	f7ff fe06 	bl	80100ac <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80104a0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80104a4:	2b09      	cmp	r3, #9
 80104a6:	dd06      	ble.n	80104b6 <etharp_find_entry+0x256>
 80104a8:	4b23      	ldr	r3, [pc, #140]	@ (8010538 <etharp_find_entry+0x2d8>)
 80104aa:	f240 1283 	movw	r2, #387	@ 0x183
 80104ae:	4926      	ldr	r1, [pc, #152]	@ (8010548 <etharp_find_entry+0x2e8>)
 80104b0:	4823      	ldr	r0, [pc, #140]	@ (8010540 <etharp_find_entry+0x2e0>)
 80104b2:	f004 f87f 	bl	80145b4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80104b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80104ba:	491e      	ldr	r1, [pc, #120]	@ (8010534 <etharp_find_entry+0x2d4>)
 80104bc:	4613      	mov	r3, r2
 80104be:	005b      	lsls	r3, r3, #1
 80104c0:	4413      	add	r3, r2
 80104c2:	00db      	lsls	r3, r3, #3
 80104c4:	440b      	add	r3, r1
 80104c6:	3314      	adds	r3, #20
 80104c8:	781b      	ldrb	r3, [r3, #0]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d006      	beq.n	80104dc <etharp_find_entry+0x27c>
 80104ce:	4b1a      	ldr	r3, [pc, #104]	@ (8010538 <etharp_find_entry+0x2d8>)
 80104d0:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80104d4:	491d      	ldr	r1, [pc, #116]	@ (801054c <etharp_find_entry+0x2ec>)
 80104d6:	481a      	ldr	r0, [pc, #104]	@ (8010540 <etharp_find_entry+0x2e0>)
 80104d8:	f004 f86c 	bl	80145b4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d00b      	beq.n	80104fa <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80104e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	6819      	ldr	r1, [r3, #0]
 80104ea:	4812      	ldr	r0, [pc, #72]	@ (8010534 <etharp_find_entry+0x2d4>)
 80104ec:	4613      	mov	r3, r2
 80104ee:	005b      	lsls	r3, r3, #1
 80104f0:	4413      	add	r3, r2
 80104f2:	00db      	lsls	r3, r3, #3
 80104f4:	4403      	add	r3, r0
 80104f6:	3304      	adds	r3, #4
 80104f8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80104fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80104fe:	490d      	ldr	r1, [pc, #52]	@ (8010534 <etharp_find_entry+0x2d4>)
 8010500:	4613      	mov	r3, r2
 8010502:	005b      	lsls	r3, r3, #1
 8010504:	4413      	add	r3, r2
 8010506:	00db      	lsls	r3, r3, #3
 8010508:	440b      	add	r3, r1
 801050a:	3312      	adds	r3, #18
 801050c:	2200      	movs	r2, #0
 801050e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010510:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010514:	4907      	ldr	r1, [pc, #28]	@ (8010534 <etharp_find_entry+0x2d4>)
 8010516:	4613      	mov	r3, r2
 8010518:	005b      	lsls	r3, r3, #1
 801051a:	4413      	add	r3, r2
 801051c:	00db      	lsls	r3, r3, #3
 801051e:	440b      	add	r3, r1
 8010520:	3308      	adds	r3, #8
 8010522:	687a      	ldr	r2, [r7, #4]
 8010524:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010526:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801052a:	4618      	mov	r0, r3
 801052c:	3728      	adds	r7, #40	@ 0x28
 801052e:	46bd      	mov	sp, r7
 8010530:	bd80      	pop	{r7, pc}
 8010532:	bf00      	nop
 8010534:	2000e03c 	.word	0x2000e03c
 8010538:	08017374 	.word	0x08017374
 801053c:	080173ac 	.word	0x080173ac
 8010540:	080173ec 	.word	0x080173ec
 8010544:	08017414 	.word	0x08017414
 8010548:	0801742c 	.word	0x0801742c
 801054c:	08017440 	.word	0x08017440

08010550 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b088      	sub	sp, #32
 8010554:	af02      	add	r7, sp, #8
 8010556:	60f8      	str	r0, [r7, #12]
 8010558:	60b9      	str	r1, [r7, #8]
 801055a:	607a      	str	r2, [r7, #4]
 801055c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8010564:	2b06      	cmp	r3, #6
 8010566:	d006      	beq.n	8010576 <etharp_update_arp_entry+0x26>
 8010568:	4b48      	ldr	r3, [pc, #288]	@ (801068c <etharp_update_arp_entry+0x13c>)
 801056a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801056e:	4948      	ldr	r1, [pc, #288]	@ (8010690 <etharp_update_arp_entry+0x140>)
 8010570:	4848      	ldr	r0, [pc, #288]	@ (8010694 <etharp_update_arp_entry+0x144>)
 8010572:	f004 f81f 	bl	80145b4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010576:	68bb      	ldr	r3, [r7, #8]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d012      	beq.n	80105a2 <etharp_update_arp_entry+0x52>
 801057c:	68bb      	ldr	r3, [r7, #8]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d00e      	beq.n	80105a2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010584:	68bb      	ldr	r3, [r7, #8]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	68f9      	ldr	r1, [r7, #12]
 801058a:	4618      	mov	r0, r3
 801058c:	f001 f8f4 	bl	8011778 <ip4_addr_isbroadcast_u32>
 8010590:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010592:	2b00      	cmp	r3, #0
 8010594:	d105      	bne.n	80105a2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010596:	68bb      	ldr	r3, [r7, #8]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801059e:	2be0      	cmp	r3, #224	@ 0xe0
 80105a0:	d102      	bne.n	80105a8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80105a2:	f06f 030f 	mvn.w	r3, #15
 80105a6:	e06c      	b.n	8010682 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80105a8:	78fb      	ldrb	r3, [r7, #3]
 80105aa:	68fa      	ldr	r2, [r7, #12]
 80105ac:	4619      	mov	r1, r3
 80105ae:	68b8      	ldr	r0, [r7, #8]
 80105b0:	f7ff fe56 	bl	8010260 <etharp_find_entry>
 80105b4:	4603      	mov	r3, r0
 80105b6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80105b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	da02      	bge.n	80105c6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80105c0:	8afb      	ldrh	r3, [r7, #22]
 80105c2:	b25b      	sxtb	r3, r3
 80105c4:	e05d      	b.n	8010682 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80105c6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80105ca:	4933      	ldr	r1, [pc, #204]	@ (8010698 <etharp_update_arp_entry+0x148>)
 80105cc:	4613      	mov	r3, r2
 80105ce:	005b      	lsls	r3, r3, #1
 80105d0:	4413      	add	r3, r2
 80105d2:	00db      	lsls	r3, r3, #3
 80105d4:	440b      	add	r3, r1
 80105d6:	3314      	adds	r3, #20
 80105d8:	2202      	movs	r2, #2
 80105da:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80105dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80105e0:	492d      	ldr	r1, [pc, #180]	@ (8010698 <etharp_update_arp_entry+0x148>)
 80105e2:	4613      	mov	r3, r2
 80105e4:	005b      	lsls	r3, r3, #1
 80105e6:	4413      	add	r3, r2
 80105e8:	00db      	lsls	r3, r3, #3
 80105ea:	440b      	add	r3, r1
 80105ec:	3308      	adds	r3, #8
 80105ee:	68fa      	ldr	r2, [r7, #12]
 80105f0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80105f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80105f6:	4613      	mov	r3, r2
 80105f8:	005b      	lsls	r3, r3, #1
 80105fa:	4413      	add	r3, r2
 80105fc:	00db      	lsls	r3, r3, #3
 80105fe:	3308      	adds	r3, #8
 8010600:	4a25      	ldr	r2, [pc, #148]	@ (8010698 <etharp_update_arp_entry+0x148>)
 8010602:	4413      	add	r3, r2
 8010604:	3304      	adds	r3, #4
 8010606:	2206      	movs	r2, #6
 8010608:	6879      	ldr	r1, [r7, #4]
 801060a:	4618      	mov	r0, r3
 801060c:	f004 f8c3 	bl	8014796 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010610:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010614:	4920      	ldr	r1, [pc, #128]	@ (8010698 <etharp_update_arp_entry+0x148>)
 8010616:	4613      	mov	r3, r2
 8010618:	005b      	lsls	r3, r3, #1
 801061a:	4413      	add	r3, r2
 801061c:	00db      	lsls	r3, r3, #3
 801061e:	440b      	add	r3, r1
 8010620:	3312      	adds	r3, #18
 8010622:	2200      	movs	r2, #0
 8010624:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010626:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801062a:	491b      	ldr	r1, [pc, #108]	@ (8010698 <etharp_update_arp_entry+0x148>)
 801062c:	4613      	mov	r3, r2
 801062e:	005b      	lsls	r3, r3, #1
 8010630:	4413      	add	r3, r2
 8010632:	00db      	lsls	r3, r3, #3
 8010634:	440b      	add	r3, r1
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d021      	beq.n	8010680 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801063c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010640:	4915      	ldr	r1, [pc, #84]	@ (8010698 <etharp_update_arp_entry+0x148>)
 8010642:	4613      	mov	r3, r2
 8010644:	005b      	lsls	r3, r3, #1
 8010646:	4413      	add	r3, r2
 8010648:	00db      	lsls	r3, r3, #3
 801064a:	440b      	add	r3, r1
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010650:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010654:	4910      	ldr	r1, [pc, #64]	@ (8010698 <etharp_update_arp_entry+0x148>)
 8010656:	4613      	mov	r3, r2
 8010658:	005b      	lsls	r3, r3, #1
 801065a:	4413      	add	r3, r2
 801065c:	00db      	lsls	r3, r3, #3
 801065e:	440b      	add	r3, r1
 8010660:	2200      	movs	r2, #0
 8010662:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801066a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801066e:	9300      	str	r3, [sp, #0]
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6939      	ldr	r1, [r7, #16]
 8010674:	68f8      	ldr	r0, [r7, #12]
 8010676:	f001 ff8d 	bl	8012594 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801067a:	6938      	ldr	r0, [r7, #16]
 801067c:	f7f9 ffaa 	bl	800a5d4 <pbuf_free>
  }
  return ERR_OK;
 8010680:	2300      	movs	r3, #0
}
 8010682:	4618      	mov	r0, r3
 8010684:	3718      	adds	r7, #24
 8010686:	46bd      	mov	sp, r7
 8010688:	bd80      	pop	{r7, pc}
 801068a:	bf00      	nop
 801068c:	08017374 	.word	0x08017374
 8010690:	0801746c 	.word	0x0801746c
 8010694:	080173ec 	.word	0x080173ec
 8010698:	2000e03c 	.word	0x2000e03c

0801069c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b084      	sub	sp, #16
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80106a4:	2300      	movs	r3, #0
 80106a6:	60fb      	str	r3, [r7, #12]
 80106a8:	e01e      	b.n	80106e8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80106aa:	4913      	ldr	r1, [pc, #76]	@ (80106f8 <etharp_cleanup_netif+0x5c>)
 80106ac:	68fa      	ldr	r2, [r7, #12]
 80106ae:	4613      	mov	r3, r2
 80106b0:	005b      	lsls	r3, r3, #1
 80106b2:	4413      	add	r3, r2
 80106b4:	00db      	lsls	r3, r3, #3
 80106b6:	440b      	add	r3, r1
 80106b8:	3314      	adds	r3, #20
 80106ba:	781b      	ldrb	r3, [r3, #0]
 80106bc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80106be:	7afb      	ldrb	r3, [r7, #11]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d00e      	beq.n	80106e2 <etharp_cleanup_netif+0x46>
 80106c4:	490c      	ldr	r1, [pc, #48]	@ (80106f8 <etharp_cleanup_netif+0x5c>)
 80106c6:	68fa      	ldr	r2, [r7, #12]
 80106c8:	4613      	mov	r3, r2
 80106ca:	005b      	lsls	r3, r3, #1
 80106cc:	4413      	add	r3, r2
 80106ce:	00db      	lsls	r3, r3, #3
 80106d0:	440b      	add	r3, r1
 80106d2:	3308      	adds	r3, #8
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	687a      	ldr	r2, [r7, #4]
 80106d8:	429a      	cmp	r2, r3
 80106da:	d102      	bne.n	80106e2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80106dc:	68f8      	ldr	r0, [r7, #12]
 80106de:	f7ff fce5 	bl	80100ac <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	3301      	adds	r3, #1
 80106e6:	60fb      	str	r3, [r7, #12]
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	2b09      	cmp	r3, #9
 80106ec:	dddd      	ble.n	80106aa <etharp_cleanup_netif+0xe>
    }
  }
}
 80106ee:	bf00      	nop
 80106f0:	bf00      	nop
 80106f2:	3710      	adds	r7, #16
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd80      	pop	{r7, pc}
 80106f8:	2000e03c 	.word	0x2000e03c

080106fc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80106fc:	b5b0      	push	{r4, r5, r7, lr}
 80106fe:	b08a      	sub	sp, #40	@ 0x28
 8010700:	af04      	add	r7, sp, #16
 8010702:	6078      	str	r0, [r7, #4]
 8010704:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010706:	683b      	ldr	r3, [r7, #0]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d107      	bne.n	801071c <etharp_input+0x20>
 801070c:	4b3d      	ldr	r3, [pc, #244]	@ (8010804 <etharp_input+0x108>)
 801070e:	f240 228a 	movw	r2, #650	@ 0x28a
 8010712:	493d      	ldr	r1, [pc, #244]	@ (8010808 <etharp_input+0x10c>)
 8010714:	483d      	ldr	r0, [pc, #244]	@ (801080c <etharp_input+0x110>)
 8010716:	f003 ff4d 	bl	80145b4 <iprintf>
 801071a:	e06f      	b.n	80107fc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	685b      	ldr	r3, [r3, #4]
 8010720:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010722:	693b      	ldr	r3, [r7, #16]
 8010724:	881b      	ldrh	r3, [r3, #0]
 8010726:	b29b      	uxth	r3, r3
 8010728:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801072c:	d10c      	bne.n	8010748 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801072e:	693b      	ldr	r3, [r7, #16]
 8010730:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010732:	2b06      	cmp	r3, #6
 8010734:	d108      	bne.n	8010748 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010736:	693b      	ldr	r3, [r7, #16]
 8010738:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801073a:	2b04      	cmp	r3, #4
 801073c:	d104      	bne.n	8010748 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801073e:	693b      	ldr	r3, [r7, #16]
 8010740:	885b      	ldrh	r3, [r3, #2]
 8010742:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010744:	2b08      	cmp	r3, #8
 8010746:	d003      	beq.n	8010750 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010748:	6878      	ldr	r0, [r7, #4]
 801074a:	f7f9 ff43 	bl	800a5d4 <pbuf_free>
    return;
 801074e:	e055      	b.n	80107fc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010750:	693b      	ldr	r3, [r7, #16]
 8010752:	330e      	adds	r3, #14
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010758:	693b      	ldr	r3, [r7, #16]
 801075a:	3318      	adds	r3, #24
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	3304      	adds	r3, #4
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d102      	bne.n	8010770 <etharp_input+0x74>
    for_us = 0;
 801076a:	2300      	movs	r3, #0
 801076c:	75fb      	strb	r3, [r7, #23]
 801076e:	e009      	b.n	8010784 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010770:	68ba      	ldr	r2, [r7, #8]
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	3304      	adds	r3, #4
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	429a      	cmp	r2, r3
 801077a:	bf0c      	ite	eq
 801077c:	2301      	moveq	r3, #1
 801077e:	2300      	movne	r3, #0
 8010780:	b2db      	uxtb	r3, r3
 8010782:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010784:	693b      	ldr	r3, [r7, #16]
 8010786:	f103 0208 	add.w	r2, r3, #8
 801078a:	7dfb      	ldrb	r3, [r7, #23]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d001      	beq.n	8010794 <etharp_input+0x98>
 8010790:	2301      	movs	r3, #1
 8010792:	e000      	b.n	8010796 <etharp_input+0x9a>
 8010794:	2302      	movs	r3, #2
 8010796:	f107 010c 	add.w	r1, r7, #12
 801079a:	6838      	ldr	r0, [r7, #0]
 801079c:	f7ff fed8 	bl	8010550 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80107a0:	693b      	ldr	r3, [r7, #16]
 80107a2:	88db      	ldrh	r3, [r3, #6]
 80107a4:	b29b      	uxth	r3, r3
 80107a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80107aa:	d003      	beq.n	80107b4 <etharp_input+0xb8>
 80107ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80107b0:	d01e      	beq.n	80107f0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80107b2:	e020      	b.n	80107f6 <etharp_input+0xfa>
      if (for_us) {
 80107b4:	7dfb      	ldrb	r3, [r7, #23]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d01c      	beq.n	80107f4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80107ba:	683b      	ldr	r3, [r7, #0]
 80107bc:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80107c0:	693b      	ldr	r3, [r7, #16]
 80107c2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80107c6:	683b      	ldr	r3, [r7, #0]
 80107c8:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 80107cc:	683b      	ldr	r3, [r7, #0]
 80107ce:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80107d0:	693a      	ldr	r2, [r7, #16]
 80107d2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80107d4:	2102      	movs	r1, #2
 80107d6:	9103      	str	r1, [sp, #12]
 80107d8:	f107 010c 	add.w	r1, r7, #12
 80107dc:	9102      	str	r1, [sp, #8]
 80107de:	9201      	str	r2, [sp, #4]
 80107e0:	9300      	str	r3, [sp, #0]
 80107e2:	462b      	mov	r3, r5
 80107e4:	4622      	mov	r2, r4
 80107e6:	4601      	mov	r1, r0
 80107e8:	6838      	ldr	r0, [r7, #0]
 80107ea:	f000 faeb 	bl	8010dc4 <etharp_raw>
      break;
 80107ee:	e001      	b.n	80107f4 <etharp_input+0xf8>
      break;
 80107f0:	bf00      	nop
 80107f2:	e000      	b.n	80107f6 <etharp_input+0xfa>
      break;
 80107f4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80107f6:	6878      	ldr	r0, [r7, #4]
 80107f8:	f7f9 feec 	bl	800a5d4 <pbuf_free>
}
 80107fc:	3718      	adds	r7, #24
 80107fe:	46bd      	mov	sp, r7
 8010800:	bdb0      	pop	{r4, r5, r7, pc}
 8010802:	bf00      	nop
 8010804:	08017374 	.word	0x08017374
 8010808:	080174c4 	.word	0x080174c4
 801080c:	080173ec 	.word	0x080173ec

08010810 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b086      	sub	sp, #24
 8010814:	af02      	add	r7, sp, #8
 8010816:	60f8      	str	r0, [r7, #12]
 8010818:	60b9      	str	r1, [r7, #8]
 801081a:	4613      	mov	r3, r2
 801081c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801081e:	79fa      	ldrb	r2, [r7, #7]
 8010820:	4944      	ldr	r1, [pc, #272]	@ (8010934 <etharp_output_to_arp_index+0x124>)
 8010822:	4613      	mov	r3, r2
 8010824:	005b      	lsls	r3, r3, #1
 8010826:	4413      	add	r3, r2
 8010828:	00db      	lsls	r3, r3, #3
 801082a:	440b      	add	r3, r1
 801082c:	3314      	adds	r3, #20
 801082e:	781b      	ldrb	r3, [r3, #0]
 8010830:	2b01      	cmp	r3, #1
 8010832:	d806      	bhi.n	8010842 <etharp_output_to_arp_index+0x32>
 8010834:	4b40      	ldr	r3, [pc, #256]	@ (8010938 <etharp_output_to_arp_index+0x128>)
 8010836:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801083a:	4940      	ldr	r1, [pc, #256]	@ (801093c <etharp_output_to_arp_index+0x12c>)
 801083c:	4840      	ldr	r0, [pc, #256]	@ (8010940 <etharp_output_to_arp_index+0x130>)
 801083e:	f003 feb9 	bl	80145b4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010842:	79fa      	ldrb	r2, [r7, #7]
 8010844:	493b      	ldr	r1, [pc, #236]	@ (8010934 <etharp_output_to_arp_index+0x124>)
 8010846:	4613      	mov	r3, r2
 8010848:	005b      	lsls	r3, r3, #1
 801084a:	4413      	add	r3, r2
 801084c:	00db      	lsls	r3, r3, #3
 801084e:	440b      	add	r3, r1
 8010850:	3314      	adds	r3, #20
 8010852:	781b      	ldrb	r3, [r3, #0]
 8010854:	2b02      	cmp	r3, #2
 8010856:	d153      	bne.n	8010900 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010858:	79fa      	ldrb	r2, [r7, #7]
 801085a:	4936      	ldr	r1, [pc, #216]	@ (8010934 <etharp_output_to_arp_index+0x124>)
 801085c:	4613      	mov	r3, r2
 801085e:	005b      	lsls	r3, r3, #1
 8010860:	4413      	add	r3, r2
 8010862:	00db      	lsls	r3, r3, #3
 8010864:	440b      	add	r3, r1
 8010866:	3312      	adds	r3, #18
 8010868:	881b      	ldrh	r3, [r3, #0]
 801086a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801086e:	d919      	bls.n	80108a4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010870:	79fa      	ldrb	r2, [r7, #7]
 8010872:	4613      	mov	r3, r2
 8010874:	005b      	lsls	r3, r3, #1
 8010876:	4413      	add	r3, r2
 8010878:	00db      	lsls	r3, r3, #3
 801087a:	4a2e      	ldr	r2, [pc, #184]	@ (8010934 <etharp_output_to_arp_index+0x124>)
 801087c:	4413      	add	r3, r2
 801087e:	3304      	adds	r3, #4
 8010880:	4619      	mov	r1, r3
 8010882:	68f8      	ldr	r0, [r7, #12]
 8010884:	f000 fb4c 	bl	8010f20 <etharp_request>
 8010888:	4603      	mov	r3, r0
 801088a:	2b00      	cmp	r3, #0
 801088c:	d138      	bne.n	8010900 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801088e:	79fa      	ldrb	r2, [r7, #7]
 8010890:	4928      	ldr	r1, [pc, #160]	@ (8010934 <etharp_output_to_arp_index+0x124>)
 8010892:	4613      	mov	r3, r2
 8010894:	005b      	lsls	r3, r3, #1
 8010896:	4413      	add	r3, r2
 8010898:	00db      	lsls	r3, r3, #3
 801089a:	440b      	add	r3, r1
 801089c:	3314      	adds	r3, #20
 801089e:	2203      	movs	r2, #3
 80108a0:	701a      	strb	r2, [r3, #0]
 80108a2:	e02d      	b.n	8010900 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80108a4:	79fa      	ldrb	r2, [r7, #7]
 80108a6:	4923      	ldr	r1, [pc, #140]	@ (8010934 <etharp_output_to_arp_index+0x124>)
 80108a8:	4613      	mov	r3, r2
 80108aa:	005b      	lsls	r3, r3, #1
 80108ac:	4413      	add	r3, r2
 80108ae:	00db      	lsls	r3, r3, #3
 80108b0:	440b      	add	r3, r1
 80108b2:	3312      	adds	r3, #18
 80108b4:	881b      	ldrh	r3, [r3, #0]
 80108b6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80108ba:	d321      	bcc.n	8010900 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80108bc:	79fa      	ldrb	r2, [r7, #7]
 80108be:	4613      	mov	r3, r2
 80108c0:	005b      	lsls	r3, r3, #1
 80108c2:	4413      	add	r3, r2
 80108c4:	00db      	lsls	r3, r3, #3
 80108c6:	4a1b      	ldr	r2, [pc, #108]	@ (8010934 <etharp_output_to_arp_index+0x124>)
 80108c8:	4413      	add	r3, r2
 80108ca:	1d19      	adds	r1, r3, #4
 80108cc:	79fa      	ldrb	r2, [r7, #7]
 80108ce:	4613      	mov	r3, r2
 80108d0:	005b      	lsls	r3, r3, #1
 80108d2:	4413      	add	r3, r2
 80108d4:	00db      	lsls	r3, r3, #3
 80108d6:	3308      	adds	r3, #8
 80108d8:	4a16      	ldr	r2, [pc, #88]	@ (8010934 <etharp_output_to_arp_index+0x124>)
 80108da:	4413      	add	r3, r2
 80108dc:	3304      	adds	r3, #4
 80108de:	461a      	mov	r2, r3
 80108e0:	68f8      	ldr	r0, [r7, #12]
 80108e2:	f000 fafb 	bl	8010edc <etharp_request_dst>
 80108e6:	4603      	mov	r3, r0
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d109      	bne.n	8010900 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80108ec:	79fa      	ldrb	r2, [r7, #7]
 80108ee:	4911      	ldr	r1, [pc, #68]	@ (8010934 <etharp_output_to_arp_index+0x124>)
 80108f0:	4613      	mov	r3, r2
 80108f2:	005b      	lsls	r3, r3, #1
 80108f4:	4413      	add	r3, r2
 80108f6:	00db      	lsls	r3, r3, #3
 80108f8:	440b      	add	r3, r1
 80108fa:	3314      	adds	r3, #20
 80108fc:	2203      	movs	r2, #3
 80108fe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8010906:	79fa      	ldrb	r2, [r7, #7]
 8010908:	4613      	mov	r3, r2
 801090a:	005b      	lsls	r3, r3, #1
 801090c:	4413      	add	r3, r2
 801090e:	00db      	lsls	r3, r3, #3
 8010910:	3308      	adds	r3, #8
 8010912:	4a08      	ldr	r2, [pc, #32]	@ (8010934 <etharp_output_to_arp_index+0x124>)
 8010914:	4413      	add	r3, r2
 8010916:	3304      	adds	r3, #4
 8010918:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801091c:	9200      	str	r2, [sp, #0]
 801091e:	460a      	mov	r2, r1
 8010920:	68b9      	ldr	r1, [r7, #8]
 8010922:	68f8      	ldr	r0, [r7, #12]
 8010924:	f001 fe36 	bl	8012594 <ethernet_output>
 8010928:	4603      	mov	r3, r0
}
 801092a:	4618      	mov	r0, r3
 801092c:	3710      	adds	r7, #16
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}
 8010932:	bf00      	nop
 8010934:	2000e03c 	.word	0x2000e03c
 8010938:	08017374 	.word	0x08017374
 801093c:	080174e4 	.word	0x080174e4
 8010940:	080173ec 	.word	0x080173ec

08010944 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b08a      	sub	sp, #40	@ 0x28
 8010948:	af02      	add	r7, sp, #8
 801094a:	60f8      	str	r0, [r7, #12]
 801094c:	60b9      	str	r1, [r7, #8]
 801094e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d106      	bne.n	8010968 <etharp_output+0x24>
 801095a:	4b73      	ldr	r3, [pc, #460]	@ (8010b28 <etharp_output+0x1e4>)
 801095c:	f240 321e 	movw	r2, #798	@ 0x31e
 8010960:	4972      	ldr	r1, [pc, #456]	@ (8010b2c <etharp_output+0x1e8>)
 8010962:	4873      	ldr	r0, [pc, #460]	@ (8010b30 <etharp_output+0x1ec>)
 8010964:	f003 fe26 	bl	80145b4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010968:	68bb      	ldr	r3, [r7, #8]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d106      	bne.n	801097c <etharp_output+0x38>
 801096e:	4b6e      	ldr	r3, [pc, #440]	@ (8010b28 <etharp_output+0x1e4>)
 8010970:	f240 321f 	movw	r2, #799	@ 0x31f
 8010974:	496f      	ldr	r1, [pc, #444]	@ (8010b34 <etharp_output+0x1f0>)
 8010976:	486e      	ldr	r0, [pc, #440]	@ (8010b30 <etharp_output+0x1ec>)
 8010978:	f003 fe1c 	bl	80145b4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d106      	bne.n	8010990 <etharp_output+0x4c>
 8010982:	4b69      	ldr	r3, [pc, #420]	@ (8010b28 <etharp_output+0x1e4>)
 8010984:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8010988:	496b      	ldr	r1, [pc, #428]	@ (8010b38 <etharp_output+0x1f4>)
 801098a:	4869      	ldr	r0, [pc, #420]	@ (8010b30 <etharp_output+0x1ec>)
 801098c:	f003 fe12 	bl	80145b4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	68f9      	ldr	r1, [r7, #12]
 8010996:	4618      	mov	r0, r3
 8010998:	f000 feee 	bl	8011778 <ip4_addr_isbroadcast_u32>
 801099c:	4603      	mov	r3, r0
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d002      	beq.n	80109a8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80109a2:	4b66      	ldr	r3, [pc, #408]	@ (8010b3c <etharp_output+0x1f8>)
 80109a4:	61fb      	str	r3, [r7, #28]
 80109a6:	e0af      	b.n	8010b08 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80109b0:	2be0      	cmp	r3, #224	@ 0xe0
 80109b2:	d118      	bne.n	80109e6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80109b4:	2301      	movs	r3, #1
 80109b6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80109b8:	2300      	movs	r3, #0
 80109ba:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80109bc:	235e      	movs	r3, #94	@ 0x5e
 80109be:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	3301      	adds	r3, #1
 80109c4:	781b      	ldrb	r3, [r3, #0]
 80109c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80109ca:	b2db      	uxtb	r3, r3
 80109cc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	3302      	adds	r3, #2
 80109d2:	781b      	ldrb	r3, [r3, #0]
 80109d4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	3303      	adds	r3, #3
 80109da:	781b      	ldrb	r3, [r3, #0]
 80109dc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80109de:	f107 0310 	add.w	r3, r7, #16
 80109e2:	61fb      	str	r3, [r7, #28]
 80109e4:	e090      	b.n	8010b08 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	681a      	ldr	r2, [r3, #0]
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	3304      	adds	r3, #4
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	405a      	eors	r2, r3
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	3308      	adds	r3, #8
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	4013      	ands	r3, r2
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d012      	beq.n	8010a24 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010a04:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8010a08:	4293      	cmp	r3, r2
 8010a0a:	d00b      	beq.n	8010a24 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	330c      	adds	r3, #12
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d003      	beq.n	8010a1e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	330c      	adds	r3, #12
 8010a1a:	61bb      	str	r3, [r7, #24]
 8010a1c:	e002      	b.n	8010a24 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010a1e:	f06f 0303 	mvn.w	r3, #3
 8010a22:	e07d      	b.n	8010b20 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010a24:	4b46      	ldr	r3, [pc, #280]	@ (8010b40 <etharp_output+0x1fc>)
 8010a26:	781b      	ldrb	r3, [r3, #0]
 8010a28:	4619      	mov	r1, r3
 8010a2a:	4a46      	ldr	r2, [pc, #280]	@ (8010b44 <etharp_output+0x200>)
 8010a2c:	460b      	mov	r3, r1
 8010a2e:	005b      	lsls	r3, r3, #1
 8010a30:	440b      	add	r3, r1
 8010a32:	00db      	lsls	r3, r3, #3
 8010a34:	4413      	add	r3, r2
 8010a36:	3314      	adds	r3, #20
 8010a38:	781b      	ldrb	r3, [r3, #0]
 8010a3a:	2b01      	cmp	r3, #1
 8010a3c:	d925      	bls.n	8010a8a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010a3e:	4b40      	ldr	r3, [pc, #256]	@ (8010b40 <etharp_output+0x1fc>)
 8010a40:	781b      	ldrb	r3, [r3, #0]
 8010a42:	4619      	mov	r1, r3
 8010a44:	4a3f      	ldr	r2, [pc, #252]	@ (8010b44 <etharp_output+0x200>)
 8010a46:	460b      	mov	r3, r1
 8010a48:	005b      	lsls	r3, r3, #1
 8010a4a:	440b      	add	r3, r1
 8010a4c:	00db      	lsls	r3, r3, #3
 8010a4e:	4413      	add	r3, r2
 8010a50:	3308      	adds	r3, #8
 8010a52:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010a54:	68fa      	ldr	r2, [r7, #12]
 8010a56:	429a      	cmp	r2, r3
 8010a58:	d117      	bne.n	8010a8a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010a5a:	69bb      	ldr	r3, [r7, #24]
 8010a5c:	681a      	ldr	r2, [r3, #0]
 8010a5e:	4b38      	ldr	r3, [pc, #224]	@ (8010b40 <etharp_output+0x1fc>)
 8010a60:	781b      	ldrb	r3, [r3, #0]
 8010a62:	4618      	mov	r0, r3
 8010a64:	4937      	ldr	r1, [pc, #220]	@ (8010b44 <etharp_output+0x200>)
 8010a66:	4603      	mov	r3, r0
 8010a68:	005b      	lsls	r3, r3, #1
 8010a6a:	4403      	add	r3, r0
 8010a6c:	00db      	lsls	r3, r3, #3
 8010a6e:	440b      	add	r3, r1
 8010a70:	3304      	adds	r3, #4
 8010a72:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010a74:	429a      	cmp	r2, r3
 8010a76:	d108      	bne.n	8010a8a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010a78:	4b31      	ldr	r3, [pc, #196]	@ (8010b40 <etharp_output+0x1fc>)
 8010a7a:	781b      	ldrb	r3, [r3, #0]
 8010a7c:	461a      	mov	r2, r3
 8010a7e:	68b9      	ldr	r1, [r7, #8]
 8010a80:	68f8      	ldr	r0, [r7, #12]
 8010a82:	f7ff fec5 	bl	8010810 <etharp_output_to_arp_index>
 8010a86:	4603      	mov	r3, r0
 8010a88:	e04a      	b.n	8010b20 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	75fb      	strb	r3, [r7, #23]
 8010a8e:	e031      	b.n	8010af4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010a90:	7dfa      	ldrb	r2, [r7, #23]
 8010a92:	492c      	ldr	r1, [pc, #176]	@ (8010b44 <etharp_output+0x200>)
 8010a94:	4613      	mov	r3, r2
 8010a96:	005b      	lsls	r3, r3, #1
 8010a98:	4413      	add	r3, r2
 8010a9a:	00db      	lsls	r3, r3, #3
 8010a9c:	440b      	add	r3, r1
 8010a9e:	3314      	adds	r3, #20
 8010aa0:	781b      	ldrb	r3, [r3, #0]
 8010aa2:	2b01      	cmp	r3, #1
 8010aa4:	d923      	bls.n	8010aee <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8010aa6:	7dfa      	ldrb	r2, [r7, #23]
 8010aa8:	4926      	ldr	r1, [pc, #152]	@ (8010b44 <etharp_output+0x200>)
 8010aaa:	4613      	mov	r3, r2
 8010aac:	005b      	lsls	r3, r3, #1
 8010aae:	4413      	add	r3, r2
 8010ab0:	00db      	lsls	r3, r3, #3
 8010ab2:	440b      	add	r3, r1
 8010ab4:	3308      	adds	r3, #8
 8010ab6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010ab8:	68fa      	ldr	r2, [r7, #12]
 8010aba:	429a      	cmp	r2, r3
 8010abc:	d117      	bne.n	8010aee <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010abe:	69bb      	ldr	r3, [r7, #24]
 8010ac0:	6819      	ldr	r1, [r3, #0]
 8010ac2:	7dfa      	ldrb	r2, [r7, #23]
 8010ac4:	481f      	ldr	r0, [pc, #124]	@ (8010b44 <etharp_output+0x200>)
 8010ac6:	4613      	mov	r3, r2
 8010ac8:	005b      	lsls	r3, r3, #1
 8010aca:	4413      	add	r3, r2
 8010acc:	00db      	lsls	r3, r3, #3
 8010ace:	4403      	add	r3, r0
 8010ad0:	3304      	adds	r3, #4
 8010ad2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8010ad4:	4299      	cmp	r1, r3
 8010ad6:	d10a      	bne.n	8010aee <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8010ad8:	4a19      	ldr	r2, [pc, #100]	@ (8010b40 <etharp_output+0x1fc>)
 8010ada:	7dfb      	ldrb	r3, [r7, #23]
 8010adc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010ade:	7dfb      	ldrb	r3, [r7, #23]
 8010ae0:	461a      	mov	r2, r3
 8010ae2:	68b9      	ldr	r1, [r7, #8]
 8010ae4:	68f8      	ldr	r0, [r7, #12]
 8010ae6:	f7ff fe93 	bl	8010810 <etharp_output_to_arp_index>
 8010aea:	4603      	mov	r3, r0
 8010aec:	e018      	b.n	8010b20 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010aee:	7dfb      	ldrb	r3, [r7, #23]
 8010af0:	3301      	adds	r3, #1
 8010af2:	75fb      	strb	r3, [r7, #23]
 8010af4:	7dfb      	ldrb	r3, [r7, #23]
 8010af6:	2b09      	cmp	r3, #9
 8010af8:	d9ca      	bls.n	8010a90 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010afa:	68ba      	ldr	r2, [r7, #8]
 8010afc:	69b9      	ldr	r1, [r7, #24]
 8010afe:	68f8      	ldr	r0, [r7, #12]
 8010b00:	f000 f822 	bl	8010b48 <etharp_query>
 8010b04:	4603      	mov	r3, r0
 8010b06:	e00b      	b.n	8010b20 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8010b0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010b12:	9300      	str	r3, [sp, #0]
 8010b14:	69fb      	ldr	r3, [r7, #28]
 8010b16:	68b9      	ldr	r1, [r7, #8]
 8010b18:	68f8      	ldr	r0, [r7, #12]
 8010b1a:	f001 fd3b 	bl	8012594 <ethernet_output>
 8010b1e:	4603      	mov	r3, r0
}
 8010b20:	4618      	mov	r0, r3
 8010b22:	3720      	adds	r7, #32
 8010b24:	46bd      	mov	sp, r7
 8010b26:	bd80      	pop	{r7, pc}
 8010b28:	08017374 	.word	0x08017374
 8010b2c:	080174c4 	.word	0x080174c4
 8010b30:	080173ec 	.word	0x080173ec
 8010b34:	08017514 	.word	0x08017514
 8010b38:	080174b4 	.word	0x080174b4
 8010b3c:	08017bd4 	.word	0x08017bd4
 8010b40:	2000e12c 	.word	0x2000e12c
 8010b44:	2000e03c 	.word	0x2000e03c

08010b48 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b08c      	sub	sp, #48	@ 0x30
 8010b4c:	af02      	add	r7, sp, #8
 8010b4e:	60f8      	str	r0, [r7, #12]
 8010b50:	60b9      	str	r1, [r7, #8]
 8010b52:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	3326      	adds	r3, #38	@ 0x26
 8010b58:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010b5a:	23ff      	movs	r3, #255	@ 0xff
 8010b5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8010b60:	2300      	movs	r3, #0
 8010b62:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010b64:	68bb      	ldr	r3, [r7, #8]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	68f9      	ldr	r1, [r7, #12]
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f000 fe04 	bl	8011778 <ip4_addr_isbroadcast_u32>
 8010b70:	4603      	mov	r3, r0
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d10c      	bne.n	8010b90 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010b76:	68bb      	ldr	r3, [r7, #8]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010b7e:	2be0      	cmp	r3, #224	@ 0xe0
 8010b80:	d006      	beq.n	8010b90 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010b82:	68bb      	ldr	r3, [r7, #8]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d003      	beq.n	8010b90 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010b88:	68bb      	ldr	r3, [r7, #8]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d102      	bne.n	8010b96 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010b90:	f06f 030f 	mvn.w	r3, #15
 8010b94:	e101      	b.n	8010d9a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010b96:	68fa      	ldr	r2, [r7, #12]
 8010b98:	2101      	movs	r1, #1
 8010b9a:	68b8      	ldr	r0, [r7, #8]
 8010b9c:	f7ff fb60 	bl	8010260 <etharp_find_entry>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8010ba4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	da02      	bge.n	8010bb2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8010bac:	8a7b      	ldrh	r3, [r7, #18]
 8010bae:	b25b      	sxtb	r3, r3
 8010bb0:	e0f3      	b.n	8010d9a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8010bb2:	8a7b      	ldrh	r3, [r7, #18]
 8010bb4:	2b7e      	cmp	r3, #126	@ 0x7e
 8010bb6:	d906      	bls.n	8010bc6 <etharp_query+0x7e>
 8010bb8:	4b7a      	ldr	r3, [pc, #488]	@ (8010da4 <etharp_query+0x25c>)
 8010bba:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8010bbe:	497a      	ldr	r1, [pc, #488]	@ (8010da8 <etharp_query+0x260>)
 8010bc0:	487a      	ldr	r0, [pc, #488]	@ (8010dac <etharp_query+0x264>)
 8010bc2:	f003 fcf7 	bl	80145b4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8010bc6:	8a7b      	ldrh	r3, [r7, #18]
 8010bc8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010bca:	7c7a      	ldrb	r2, [r7, #17]
 8010bcc:	4978      	ldr	r1, [pc, #480]	@ (8010db0 <etharp_query+0x268>)
 8010bce:	4613      	mov	r3, r2
 8010bd0:	005b      	lsls	r3, r3, #1
 8010bd2:	4413      	add	r3, r2
 8010bd4:	00db      	lsls	r3, r3, #3
 8010bd6:	440b      	add	r3, r1
 8010bd8:	3314      	adds	r3, #20
 8010bda:	781b      	ldrb	r3, [r3, #0]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d115      	bne.n	8010c0c <etharp_query+0xc4>
    is_new_entry = 1;
 8010be0:	2301      	movs	r3, #1
 8010be2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010be4:	7c7a      	ldrb	r2, [r7, #17]
 8010be6:	4972      	ldr	r1, [pc, #456]	@ (8010db0 <etharp_query+0x268>)
 8010be8:	4613      	mov	r3, r2
 8010bea:	005b      	lsls	r3, r3, #1
 8010bec:	4413      	add	r3, r2
 8010bee:	00db      	lsls	r3, r3, #3
 8010bf0:	440b      	add	r3, r1
 8010bf2:	3314      	adds	r3, #20
 8010bf4:	2201      	movs	r2, #1
 8010bf6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010bf8:	7c7a      	ldrb	r2, [r7, #17]
 8010bfa:	496d      	ldr	r1, [pc, #436]	@ (8010db0 <etharp_query+0x268>)
 8010bfc:	4613      	mov	r3, r2
 8010bfe:	005b      	lsls	r3, r3, #1
 8010c00:	4413      	add	r3, r2
 8010c02:	00db      	lsls	r3, r3, #3
 8010c04:	440b      	add	r3, r1
 8010c06:	3308      	adds	r3, #8
 8010c08:	68fa      	ldr	r2, [r7, #12]
 8010c0a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010c0c:	7c7a      	ldrb	r2, [r7, #17]
 8010c0e:	4968      	ldr	r1, [pc, #416]	@ (8010db0 <etharp_query+0x268>)
 8010c10:	4613      	mov	r3, r2
 8010c12:	005b      	lsls	r3, r3, #1
 8010c14:	4413      	add	r3, r2
 8010c16:	00db      	lsls	r3, r3, #3
 8010c18:	440b      	add	r3, r1
 8010c1a:	3314      	adds	r3, #20
 8010c1c:	781b      	ldrb	r3, [r3, #0]
 8010c1e:	2b01      	cmp	r3, #1
 8010c20:	d011      	beq.n	8010c46 <etharp_query+0xfe>
 8010c22:	7c7a      	ldrb	r2, [r7, #17]
 8010c24:	4962      	ldr	r1, [pc, #392]	@ (8010db0 <etharp_query+0x268>)
 8010c26:	4613      	mov	r3, r2
 8010c28:	005b      	lsls	r3, r3, #1
 8010c2a:	4413      	add	r3, r2
 8010c2c:	00db      	lsls	r3, r3, #3
 8010c2e:	440b      	add	r3, r1
 8010c30:	3314      	adds	r3, #20
 8010c32:	781b      	ldrb	r3, [r3, #0]
 8010c34:	2b01      	cmp	r3, #1
 8010c36:	d806      	bhi.n	8010c46 <etharp_query+0xfe>
 8010c38:	4b5a      	ldr	r3, [pc, #360]	@ (8010da4 <etharp_query+0x25c>)
 8010c3a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8010c3e:	495d      	ldr	r1, [pc, #372]	@ (8010db4 <etharp_query+0x26c>)
 8010c40:	485a      	ldr	r0, [pc, #360]	@ (8010dac <etharp_query+0x264>)
 8010c42:	f003 fcb7 	bl	80145b4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010c46:	6a3b      	ldr	r3, [r7, #32]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d102      	bne.n	8010c52 <etharp_query+0x10a>
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d10c      	bne.n	8010c6c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8010c52:	68b9      	ldr	r1, [r7, #8]
 8010c54:	68f8      	ldr	r0, [r7, #12]
 8010c56:	f000 f963 	bl	8010f20 <etharp_request>
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d102      	bne.n	8010c6c <etharp_query+0x124>
      return result;
 8010c66:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010c6a:	e096      	b.n	8010d9a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d106      	bne.n	8010c80 <etharp_query+0x138>
 8010c72:	4b4c      	ldr	r3, [pc, #304]	@ (8010da4 <etharp_query+0x25c>)
 8010c74:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8010c78:	494f      	ldr	r1, [pc, #316]	@ (8010db8 <etharp_query+0x270>)
 8010c7a:	484c      	ldr	r0, [pc, #304]	@ (8010dac <etharp_query+0x264>)
 8010c7c:	f003 fc9a 	bl	80145b4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010c80:	7c7a      	ldrb	r2, [r7, #17]
 8010c82:	494b      	ldr	r1, [pc, #300]	@ (8010db0 <etharp_query+0x268>)
 8010c84:	4613      	mov	r3, r2
 8010c86:	005b      	lsls	r3, r3, #1
 8010c88:	4413      	add	r3, r2
 8010c8a:	00db      	lsls	r3, r3, #3
 8010c8c:	440b      	add	r3, r1
 8010c8e:	3314      	adds	r3, #20
 8010c90:	781b      	ldrb	r3, [r3, #0]
 8010c92:	2b01      	cmp	r3, #1
 8010c94:	d917      	bls.n	8010cc6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8010c96:	4a49      	ldr	r2, [pc, #292]	@ (8010dbc <etharp_query+0x274>)
 8010c98:	7c7b      	ldrb	r3, [r7, #17]
 8010c9a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010c9c:	7c7a      	ldrb	r2, [r7, #17]
 8010c9e:	4613      	mov	r3, r2
 8010ca0:	005b      	lsls	r3, r3, #1
 8010ca2:	4413      	add	r3, r2
 8010ca4:	00db      	lsls	r3, r3, #3
 8010ca6:	3308      	adds	r3, #8
 8010ca8:	4a41      	ldr	r2, [pc, #260]	@ (8010db0 <etharp_query+0x268>)
 8010caa:	4413      	add	r3, r2
 8010cac:	3304      	adds	r3, #4
 8010cae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010cb2:	9200      	str	r2, [sp, #0]
 8010cb4:	697a      	ldr	r2, [r7, #20]
 8010cb6:	6879      	ldr	r1, [r7, #4]
 8010cb8:	68f8      	ldr	r0, [r7, #12]
 8010cba:	f001 fc6b 	bl	8012594 <ethernet_output>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010cc4:	e067      	b.n	8010d96 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010cc6:	7c7a      	ldrb	r2, [r7, #17]
 8010cc8:	4939      	ldr	r1, [pc, #228]	@ (8010db0 <etharp_query+0x268>)
 8010cca:	4613      	mov	r3, r2
 8010ccc:	005b      	lsls	r3, r3, #1
 8010cce:	4413      	add	r3, r2
 8010cd0:	00db      	lsls	r3, r3, #3
 8010cd2:	440b      	add	r3, r1
 8010cd4:	3314      	adds	r3, #20
 8010cd6:	781b      	ldrb	r3, [r3, #0]
 8010cd8:	2b01      	cmp	r3, #1
 8010cda:	d15c      	bne.n	8010d96 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010cdc:	2300      	movs	r3, #0
 8010cde:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010ce4:	e01c      	b.n	8010d20 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8010ce6:	69fb      	ldr	r3, [r7, #28]
 8010ce8:	895a      	ldrh	r2, [r3, #10]
 8010cea:	69fb      	ldr	r3, [r7, #28]
 8010cec:	891b      	ldrh	r3, [r3, #8]
 8010cee:	429a      	cmp	r2, r3
 8010cf0:	d10a      	bne.n	8010d08 <etharp_query+0x1c0>
 8010cf2:	69fb      	ldr	r3, [r7, #28]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d006      	beq.n	8010d08 <etharp_query+0x1c0>
 8010cfa:	4b2a      	ldr	r3, [pc, #168]	@ (8010da4 <etharp_query+0x25c>)
 8010cfc:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8010d00:	492f      	ldr	r1, [pc, #188]	@ (8010dc0 <etharp_query+0x278>)
 8010d02:	482a      	ldr	r0, [pc, #168]	@ (8010dac <etharp_query+0x264>)
 8010d04:	f003 fc56 	bl	80145b4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8010d08:	69fb      	ldr	r3, [r7, #28]
 8010d0a:	7b1b      	ldrb	r3, [r3, #12]
 8010d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d002      	beq.n	8010d1a <etharp_query+0x1d2>
        copy_needed = 1;
 8010d14:	2301      	movs	r3, #1
 8010d16:	61bb      	str	r3, [r7, #24]
        break;
 8010d18:	e005      	b.n	8010d26 <etharp_query+0x1de>
      }
      p = p->next;
 8010d1a:	69fb      	ldr	r3, [r7, #28]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010d20:	69fb      	ldr	r3, [r7, #28]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d1df      	bne.n	8010ce6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8010d26:	69bb      	ldr	r3, [r7, #24]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d007      	beq.n	8010d3c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010d2c:	687a      	ldr	r2, [r7, #4]
 8010d2e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8010d32:	200e      	movs	r0, #14
 8010d34:	f7f9 feb6 	bl	800aaa4 <pbuf_clone>
 8010d38:	61f8      	str	r0, [r7, #28]
 8010d3a:	e004      	b.n	8010d46 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010d40:	69f8      	ldr	r0, [r7, #28]
 8010d42:	f7f9 fced 	bl	800a720 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010d46:	69fb      	ldr	r3, [r7, #28]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d021      	beq.n	8010d90 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010d4c:	7c7a      	ldrb	r2, [r7, #17]
 8010d4e:	4918      	ldr	r1, [pc, #96]	@ (8010db0 <etharp_query+0x268>)
 8010d50:	4613      	mov	r3, r2
 8010d52:	005b      	lsls	r3, r3, #1
 8010d54:	4413      	add	r3, r2
 8010d56:	00db      	lsls	r3, r3, #3
 8010d58:	440b      	add	r3, r1
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d00a      	beq.n	8010d76 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8010d60:	7c7a      	ldrb	r2, [r7, #17]
 8010d62:	4913      	ldr	r1, [pc, #76]	@ (8010db0 <etharp_query+0x268>)
 8010d64:	4613      	mov	r3, r2
 8010d66:	005b      	lsls	r3, r3, #1
 8010d68:	4413      	add	r3, r2
 8010d6a:	00db      	lsls	r3, r3, #3
 8010d6c:	440b      	add	r3, r1
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	4618      	mov	r0, r3
 8010d72:	f7f9 fc2f 	bl	800a5d4 <pbuf_free>
      }
      arp_table[i].q = p;
 8010d76:	7c7a      	ldrb	r2, [r7, #17]
 8010d78:	490d      	ldr	r1, [pc, #52]	@ (8010db0 <etharp_query+0x268>)
 8010d7a:	4613      	mov	r3, r2
 8010d7c:	005b      	lsls	r3, r3, #1
 8010d7e:	4413      	add	r3, r2
 8010d80:	00db      	lsls	r3, r3, #3
 8010d82:	440b      	add	r3, r1
 8010d84:	69fa      	ldr	r2, [r7, #28]
 8010d86:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010d88:	2300      	movs	r3, #0
 8010d8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010d8e:	e002      	b.n	8010d96 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010d90:	23ff      	movs	r3, #255	@ 0xff
 8010d92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8010d96:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	3728      	adds	r7, #40	@ 0x28
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bd80      	pop	{r7, pc}
 8010da2:	bf00      	nop
 8010da4:	08017374 	.word	0x08017374
 8010da8:	08017520 	.word	0x08017520
 8010dac:	080173ec 	.word	0x080173ec
 8010db0:	2000e03c 	.word	0x2000e03c
 8010db4:	08017530 	.word	0x08017530
 8010db8:	08017514 	.word	0x08017514
 8010dbc:	2000e12c 	.word	0x2000e12c
 8010dc0:	08017558 	.word	0x08017558

08010dc4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b08a      	sub	sp, #40	@ 0x28
 8010dc8:	af02      	add	r7, sp, #8
 8010dca:	60f8      	str	r0, [r7, #12]
 8010dcc:	60b9      	str	r1, [r7, #8]
 8010dce:	607a      	str	r2, [r7, #4]
 8010dd0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d106      	bne.n	8010dea <etharp_raw+0x26>
 8010ddc:	4b3a      	ldr	r3, [pc, #232]	@ (8010ec8 <etharp_raw+0x104>)
 8010dde:	f240 4257 	movw	r2, #1111	@ 0x457
 8010de2:	493a      	ldr	r1, [pc, #232]	@ (8010ecc <etharp_raw+0x108>)
 8010de4:	483a      	ldr	r0, [pc, #232]	@ (8010ed0 <etharp_raw+0x10c>)
 8010de6:	f003 fbe5 	bl	80145b4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8010dea:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010dee:	211c      	movs	r1, #28
 8010df0:	200e      	movs	r0, #14
 8010df2:	f7f9 f90b 	bl	800a00c <pbuf_alloc>
 8010df6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010df8:	69bb      	ldr	r3, [r7, #24]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d102      	bne.n	8010e04 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8010e02:	e05d      	b.n	8010ec0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010e04:	69bb      	ldr	r3, [r7, #24]
 8010e06:	895b      	ldrh	r3, [r3, #10]
 8010e08:	2b1b      	cmp	r3, #27
 8010e0a:	d806      	bhi.n	8010e1a <etharp_raw+0x56>
 8010e0c:	4b2e      	ldr	r3, [pc, #184]	@ (8010ec8 <etharp_raw+0x104>)
 8010e0e:	f240 4262 	movw	r2, #1122	@ 0x462
 8010e12:	4930      	ldr	r1, [pc, #192]	@ (8010ed4 <etharp_raw+0x110>)
 8010e14:	482e      	ldr	r0, [pc, #184]	@ (8010ed0 <etharp_raw+0x10c>)
 8010e16:	f003 fbcd 	bl	80145b4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010e1a:	69bb      	ldr	r3, [r7, #24]
 8010e1c:	685b      	ldr	r3, [r3, #4]
 8010e1e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010e20:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8010e22:	4618      	mov	r0, r3
 8010e24:	f7f7 ffb2 	bl	8008d8c <lwip_htons>
 8010e28:	4603      	mov	r3, r0
 8010e2a:	461a      	mov	r2, r3
 8010e2c:	697b      	ldr	r3, [r7, #20]
 8010e2e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8010e36:	2b06      	cmp	r3, #6
 8010e38:	d006      	beq.n	8010e48 <etharp_raw+0x84>
 8010e3a:	4b23      	ldr	r3, [pc, #140]	@ (8010ec8 <etharp_raw+0x104>)
 8010e3c:	f240 4269 	movw	r2, #1129	@ 0x469
 8010e40:	4925      	ldr	r1, [pc, #148]	@ (8010ed8 <etharp_raw+0x114>)
 8010e42:	4823      	ldr	r0, [pc, #140]	@ (8010ed0 <etharp_raw+0x10c>)
 8010e44:	f003 fbb6 	bl	80145b4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010e48:	697b      	ldr	r3, [r7, #20]
 8010e4a:	3308      	adds	r3, #8
 8010e4c:	2206      	movs	r2, #6
 8010e4e:	6839      	ldr	r1, [r7, #0]
 8010e50:	4618      	mov	r0, r3
 8010e52:	f003 fca0 	bl	8014796 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8010e56:	697b      	ldr	r3, [r7, #20]
 8010e58:	3312      	adds	r3, #18
 8010e5a:	2206      	movs	r2, #6
 8010e5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f003 fc99 	bl	8014796 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8010e64:	697b      	ldr	r3, [r7, #20]
 8010e66:	330e      	adds	r3, #14
 8010e68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010e6a:	6812      	ldr	r2, [r2, #0]
 8010e6c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8010e6e:	697b      	ldr	r3, [r7, #20]
 8010e70:	3318      	adds	r3, #24
 8010e72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010e74:	6812      	ldr	r2, [r2, #0]
 8010e76:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010e78:	697b      	ldr	r3, [r7, #20]
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	701a      	strb	r2, [r3, #0]
 8010e7e:	2200      	movs	r2, #0
 8010e80:	f042 0201 	orr.w	r2, r2, #1
 8010e84:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010e86:	697b      	ldr	r3, [r7, #20]
 8010e88:	2200      	movs	r2, #0
 8010e8a:	f042 0208 	orr.w	r2, r2, #8
 8010e8e:	709a      	strb	r2, [r3, #2]
 8010e90:	2200      	movs	r2, #0
 8010e92:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010e94:	697b      	ldr	r3, [r7, #20]
 8010e96:	2206      	movs	r2, #6
 8010e98:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010e9a:	697b      	ldr	r3, [r7, #20]
 8010e9c:	2204      	movs	r2, #4
 8010e9e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010ea0:	f640 0306 	movw	r3, #2054	@ 0x806
 8010ea4:	9300      	str	r3, [sp, #0]
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	68ba      	ldr	r2, [r7, #8]
 8010eaa:	69b9      	ldr	r1, [r7, #24]
 8010eac:	68f8      	ldr	r0, [r7, #12]
 8010eae:	f001 fb71 	bl	8012594 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8010eb2:	69b8      	ldr	r0, [r7, #24]
 8010eb4:	f7f9 fb8e 	bl	800a5d4 <pbuf_free>
  p = NULL;
 8010eb8:	2300      	movs	r3, #0
 8010eba:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8010ebc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	3720      	adds	r7, #32
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	bd80      	pop	{r7, pc}
 8010ec8:	08017374 	.word	0x08017374
 8010ecc:	080174c4 	.word	0x080174c4
 8010ed0:	080173ec 	.word	0x080173ec
 8010ed4:	08017574 	.word	0x08017574
 8010ed8:	080175a8 	.word	0x080175a8

08010edc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b088      	sub	sp, #32
 8010ee0:	af04      	add	r7, sp, #16
 8010ee2:	60f8      	str	r0, [r7, #12]
 8010ee4:	60b9      	str	r1, [r7, #8]
 8010ee6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010ef8:	2201      	movs	r2, #1
 8010efa:	9203      	str	r2, [sp, #12]
 8010efc:	68ba      	ldr	r2, [r7, #8]
 8010efe:	9202      	str	r2, [sp, #8]
 8010f00:	4a06      	ldr	r2, [pc, #24]	@ (8010f1c <etharp_request_dst+0x40>)
 8010f02:	9201      	str	r2, [sp, #4]
 8010f04:	9300      	str	r3, [sp, #0]
 8010f06:	4603      	mov	r3, r0
 8010f08:	687a      	ldr	r2, [r7, #4]
 8010f0a:	68f8      	ldr	r0, [r7, #12]
 8010f0c:	f7ff ff5a 	bl	8010dc4 <etharp_raw>
 8010f10:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8010f12:	4618      	mov	r0, r3
 8010f14:	3710      	adds	r7, #16
 8010f16:	46bd      	mov	sp, r7
 8010f18:	bd80      	pop	{r7, pc}
 8010f1a:	bf00      	nop
 8010f1c:	08017bdc 	.word	0x08017bdc

08010f20 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b082      	sub	sp, #8
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
 8010f28:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8010f2a:	4a05      	ldr	r2, [pc, #20]	@ (8010f40 <etharp_request+0x20>)
 8010f2c:	6839      	ldr	r1, [r7, #0]
 8010f2e:	6878      	ldr	r0, [r7, #4]
 8010f30:	f7ff ffd4 	bl	8010edc <etharp_request_dst>
 8010f34:	4603      	mov	r3, r0
}
 8010f36:	4618      	mov	r0, r3
 8010f38:	3708      	adds	r7, #8
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	bd80      	pop	{r7, pc}
 8010f3e:	bf00      	nop
 8010f40:	08017bd4 	.word	0x08017bd4

08010f44 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b08e      	sub	sp, #56	@ 0x38
 8010f48:	af04      	add	r7, sp, #16
 8010f4a:	6078      	str	r0, [r7, #4]
 8010f4c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8010f4e:	4b79      	ldr	r3, [pc, #484]	@ (8011134 <icmp_input+0x1f0>)
 8010f50:	689b      	ldr	r3, [r3, #8]
 8010f52:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8010f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f56:	781b      	ldrb	r3, [r3, #0]
 8010f58:	f003 030f 	and.w	r3, r3, #15
 8010f5c:	b2db      	uxtb	r3, r3
 8010f5e:	009b      	lsls	r3, r3, #2
 8010f60:	b2db      	uxtb	r3, r3
 8010f62:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8010f64:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010f66:	2b13      	cmp	r3, #19
 8010f68:	f240 80cd 	bls.w	8011106 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	895b      	ldrh	r3, [r3, #10]
 8010f70:	2b03      	cmp	r3, #3
 8010f72:	f240 80ca 	bls.w	801110a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	685b      	ldr	r3, [r3, #4]
 8010f7a:	781b      	ldrb	r3, [r3, #0]
 8010f7c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010f80:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	f000 80b7 	beq.w	80110f8 <icmp_input+0x1b4>
 8010f8a:	2b08      	cmp	r3, #8
 8010f8c:	f040 80b7 	bne.w	80110fe <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8010f90:	4b69      	ldr	r3, [pc, #420]	@ (8011138 <icmp_input+0x1f4>)
 8010f92:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010f94:	4b67      	ldr	r3, [pc, #412]	@ (8011134 <icmp_input+0x1f0>)
 8010f96:	695b      	ldr	r3, [r3, #20]
 8010f98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010f9c:	2be0      	cmp	r3, #224	@ 0xe0
 8010f9e:	f000 80bb 	beq.w	8011118 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8010fa2:	4b64      	ldr	r3, [pc, #400]	@ (8011134 <icmp_input+0x1f0>)
 8010fa4:	695b      	ldr	r3, [r3, #20]
 8010fa6:	4a63      	ldr	r2, [pc, #396]	@ (8011134 <icmp_input+0x1f0>)
 8010fa8:	6812      	ldr	r2, [r2, #0]
 8010faa:	4611      	mov	r1, r2
 8010fac:	4618      	mov	r0, r3
 8010fae:	f000 fbe3 	bl	8011778 <ip4_addr_isbroadcast_u32>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	f040 80b1 	bne.w	801111c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	891b      	ldrh	r3, [r3, #8]
 8010fbe:	2b07      	cmp	r3, #7
 8010fc0:	f240 80a5 	bls.w	801110e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010fc4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010fc6:	330e      	adds	r3, #14
 8010fc8:	4619      	mov	r1, r3
 8010fca:	6878      	ldr	r0, [r7, #4]
 8010fcc:	f7f9 fa6c 	bl	800a4a8 <pbuf_add_header>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d04b      	beq.n	801106e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	891a      	ldrh	r2, [r3, #8]
 8010fda:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010fdc:	4413      	add	r3, r2
 8010fde:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	891b      	ldrh	r3, [r3, #8]
 8010fe4:	8b7a      	ldrh	r2, [r7, #26]
 8010fe6:	429a      	cmp	r2, r3
 8010fe8:	f0c0 809a 	bcc.w	8011120 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8010fec:	8b7b      	ldrh	r3, [r7, #26]
 8010fee:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010ff2:	4619      	mov	r1, r3
 8010ff4:	200e      	movs	r0, #14
 8010ff6:	f7f9 f809 	bl	800a00c <pbuf_alloc>
 8010ffa:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8010ffc:	697b      	ldr	r3, [r7, #20]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	f000 8090 	beq.w	8011124 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011004:	697b      	ldr	r3, [r7, #20]
 8011006:	895b      	ldrh	r3, [r3, #10]
 8011008:	461a      	mov	r2, r3
 801100a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801100c:	3308      	adds	r3, #8
 801100e:	429a      	cmp	r2, r3
 8011010:	d203      	bcs.n	801101a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011012:	6978      	ldr	r0, [r7, #20]
 8011014:	f7f9 fade 	bl	800a5d4 <pbuf_free>
          goto icmperr;
 8011018:	e085      	b.n	8011126 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801101a:	697b      	ldr	r3, [r7, #20]
 801101c:	685b      	ldr	r3, [r3, #4]
 801101e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8011020:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011022:	4618      	mov	r0, r3
 8011024:	f003 fbb7 	bl	8014796 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011028:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801102a:	4619      	mov	r1, r3
 801102c:	6978      	ldr	r0, [r7, #20]
 801102e:	f7f9 fa4b 	bl	800a4c8 <pbuf_remove_header>
 8011032:	4603      	mov	r3, r0
 8011034:	2b00      	cmp	r3, #0
 8011036:	d009      	beq.n	801104c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011038:	4b40      	ldr	r3, [pc, #256]	@ (801113c <icmp_input+0x1f8>)
 801103a:	22b6      	movs	r2, #182	@ 0xb6
 801103c:	4940      	ldr	r1, [pc, #256]	@ (8011140 <icmp_input+0x1fc>)
 801103e:	4841      	ldr	r0, [pc, #260]	@ (8011144 <icmp_input+0x200>)
 8011040:	f003 fab8 	bl	80145b4 <iprintf>
          pbuf_free(r);
 8011044:	6978      	ldr	r0, [r7, #20]
 8011046:	f7f9 fac5 	bl	800a5d4 <pbuf_free>
          goto icmperr;
 801104a:	e06c      	b.n	8011126 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801104c:	6879      	ldr	r1, [r7, #4]
 801104e:	6978      	ldr	r0, [r7, #20]
 8011050:	f7f9 fbe4 	bl	800a81c <pbuf_copy>
 8011054:	4603      	mov	r3, r0
 8011056:	2b00      	cmp	r3, #0
 8011058:	d003      	beq.n	8011062 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801105a:	6978      	ldr	r0, [r7, #20]
 801105c:	f7f9 faba 	bl	800a5d4 <pbuf_free>
          goto icmperr;
 8011060:	e061      	b.n	8011126 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8011062:	6878      	ldr	r0, [r7, #4]
 8011064:	f7f9 fab6 	bl	800a5d4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011068:	697b      	ldr	r3, [r7, #20]
 801106a:	607b      	str	r3, [r7, #4]
 801106c:	e00f      	b.n	801108e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801106e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011070:	330e      	adds	r3, #14
 8011072:	4619      	mov	r1, r3
 8011074:	6878      	ldr	r0, [r7, #4]
 8011076:	f7f9 fa27 	bl	800a4c8 <pbuf_remove_header>
 801107a:	4603      	mov	r3, r0
 801107c:	2b00      	cmp	r3, #0
 801107e:	d006      	beq.n	801108e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011080:	4b2e      	ldr	r3, [pc, #184]	@ (801113c <icmp_input+0x1f8>)
 8011082:	22c7      	movs	r2, #199	@ 0xc7
 8011084:	4930      	ldr	r1, [pc, #192]	@ (8011148 <icmp_input+0x204>)
 8011086:	482f      	ldr	r0, [pc, #188]	@ (8011144 <icmp_input+0x200>)
 8011088:	f003 fa94 	bl	80145b4 <iprintf>
          goto icmperr;
 801108c:	e04b      	b.n	8011126 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	685b      	ldr	r3, [r3, #4]
 8011092:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011094:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011096:	4619      	mov	r1, r3
 8011098:	6878      	ldr	r0, [r7, #4]
 801109a:	f7f9 fa05 	bl	800a4a8 <pbuf_add_header>
 801109e:	4603      	mov	r3, r0
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d12b      	bne.n	80110fc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	685b      	ldr	r3, [r3, #4]
 80110a8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80110aa:	69fb      	ldr	r3, [r7, #28]
 80110ac:	681a      	ldr	r2, [r3, #0]
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80110b2:	4b20      	ldr	r3, [pc, #128]	@ (8011134 <icmp_input+0x1f0>)
 80110b4:	691a      	ldr	r2, [r3, #16]
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80110ba:	693b      	ldr	r3, [r7, #16]
 80110bc:	2200      	movs	r2, #0
 80110be:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80110c0:	693b      	ldr	r3, [r7, #16]
 80110c2:	2200      	movs	r2, #0
 80110c4:	709a      	strb	r2, [r3, #2]
 80110c6:	2200      	movs	r2, #0
 80110c8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	22ff      	movs	r2, #255	@ 0xff
 80110ce:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	2200      	movs	r2, #0
 80110d4:	729a      	strb	r2, [r3, #10]
 80110d6:	2200      	movs	r2, #0
 80110d8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	9302      	str	r3, [sp, #8]
 80110de:	2301      	movs	r3, #1
 80110e0:	9301      	str	r3, [sp, #4]
 80110e2:	2300      	movs	r3, #0
 80110e4:	9300      	str	r3, [sp, #0]
 80110e6:	23ff      	movs	r3, #255	@ 0xff
 80110e8:	2200      	movs	r2, #0
 80110ea:	69f9      	ldr	r1, [r7, #28]
 80110ec:	6878      	ldr	r0, [r7, #4]
 80110ee:	f000 fa6b 	bl	80115c8 <ip4_output_if>
 80110f2:	4603      	mov	r3, r0
 80110f4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80110f6:	e001      	b.n	80110fc <icmp_input+0x1b8>
      break;
 80110f8:	bf00      	nop
 80110fa:	e000      	b.n	80110fe <icmp_input+0x1ba>
      break;
 80110fc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80110fe:	6878      	ldr	r0, [r7, #4]
 8011100:	f7f9 fa68 	bl	800a5d4 <pbuf_free>
  return;
 8011104:	e013      	b.n	801112e <icmp_input+0x1ea>
    goto lenerr;
 8011106:	bf00      	nop
 8011108:	e002      	b.n	8011110 <icmp_input+0x1cc>
    goto lenerr;
 801110a:	bf00      	nop
 801110c:	e000      	b.n	8011110 <icmp_input+0x1cc>
        goto lenerr;
 801110e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011110:	6878      	ldr	r0, [r7, #4]
 8011112:	f7f9 fa5f 	bl	800a5d4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011116:	e00a      	b.n	801112e <icmp_input+0x1ea>
        goto icmperr;
 8011118:	bf00      	nop
 801111a:	e004      	b.n	8011126 <icmp_input+0x1e2>
        goto icmperr;
 801111c:	bf00      	nop
 801111e:	e002      	b.n	8011126 <icmp_input+0x1e2>
          goto icmperr;
 8011120:	bf00      	nop
 8011122:	e000      	b.n	8011126 <icmp_input+0x1e2>
          goto icmperr;
 8011124:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011126:	6878      	ldr	r0, [r7, #4]
 8011128:	f7f9 fa54 	bl	800a5d4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801112c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801112e:	3728      	adds	r7, #40	@ 0x28
 8011130:	46bd      	mov	sp, r7
 8011132:	bd80      	pop	{r7, pc}
 8011134:	20009b54 	.word	0x20009b54
 8011138:	20009b68 	.word	0x20009b68
 801113c:	080175ec 	.word	0x080175ec
 8011140:	08017624 	.word	0x08017624
 8011144:	0801765c 	.word	0x0801765c
 8011148:	08017684 	.word	0x08017684

0801114c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b082      	sub	sp, #8
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
 8011154:	460b      	mov	r3, r1
 8011156:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011158:	78fb      	ldrb	r3, [r7, #3]
 801115a:	461a      	mov	r2, r3
 801115c:	2103      	movs	r1, #3
 801115e:	6878      	ldr	r0, [r7, #4]
 8011160:	f000 f814 	bl	801118c <icmp_send_response>
}
 8011164:	bf00      	nop
 8011166:	3708      	adds	r7, #8
 8011168:	46bd      	mov	sp, r7
 801116a:	bd80      	pop	{r7, pc}

0801116c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801116c:	b580      	push	{r7, lr}
 801116e:	b082      	sub	sp, #8
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
 8011174:	460b      	mov	r3, r1
 8011176:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011178:	78fb      	ldrb	r3, [r7, #3]
 801117a:	461a      	mov	r2, r3
 801117c:	210b      	movs	r1, #11
 801117e:	6878      	ldr	r0, [r7, #4]
 8011180:	f000 f804 	bl	801118c <icmp_send_response>
}
 8011184:	bf00      	nop
 8011186:	3708      	adds	r7, #8
 8011188:	46bd      	mov	sp, r7
 801118a:	bd80      	pop	{r7, pc}

0801118c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b08c      	sub	sp, #48	@ 0x30
 8011190:	af04      	add	r7, sp, #16
 8011192:	6078      	str	r0, [r7, #4]
 8011194:	460b      	mov	r3, r1
 8011196:	70fb      	strb	r3, [r7, #3]
 8011198:	4613      	mov	r3, r2
 801119a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801119c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80111a0:	2124      	movs	r1, #36	@ 0x24
 80111a2:	2022      	movs	r0, #34	@ 0x22
 80111a4:	f7f8 ff32 	bl	800a00c <pbuf_alloc>
 80111a8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80111aa:	69fb      	ldr	r3, [r7, #28]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d04c      	beq.n	801124a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80111b0:	69fb      	ldr	r3, [r7, #28]
 80111b2:	895b      	ldrh	r3, [r3, #10]
 80111b4:	2b23      	cmp	r3, #35	@ 0x23
 80111b6:	d806      	bhi.n	80111c6 <icmp_send_response+0x3a>
 80111b8:	4b26      	ldr	r3, [pc, #152]	@ (8011254 <icmp_send_response+0xc8>)
 80111ba:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80111be:	4926      	ldr	r1, [pc, #152]	@ (8011258 <icmp_send_response+0xcc>)
 80111c0:	4826      	ldr	r0, [pc, #152]	@ (801125c <icmp_send_response+0xd0>)
 80111c2:	f003 f9f7 	bl	80145b4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	685b      	ldr	r3, [r3, #4]
 80111ca:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80111cc:	69fb      	ldr	r3, [r7, #28]
 80111ce:	685b      	ldr	r3, [r3, #4]
 80111d0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80111d2:	697b      	ldr	r3, [r7, #20]
 80111d4:	78fa      	ldrb	r2, [r7, #3]
 80111d6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80111d8:	697b      	ldr	r3, [r7, #20]
 80111da:	78ba      	ldrb	r2, [r7, #2]
 80111dc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80111de:	697b      	ldr	r3, [r7, #20]
 80111e0:	2200      	movs	r2, #0
 80111e2:	711a      	strb	r2, [r3, #4]
 80111e4:	2200      	movs	r2, #0
 80111e6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80111e8:	697b      	ldr	r3, [r7, #20]
 80111ea:	2200      	movs	r2, #0
 80111ec:	719a      	strb	r2, [r3, #6]
 80111ee:	2200      	movs	r2, #0
 80111f0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80111f2:	69fb      	ldr	r3, [r7, #28]
 80111f4:	685b      	ldr	r3, [r3, #4]
 80111f6:	f103 0008 	add.w	r0, r3, #8
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	685b      	ldr	r3, [r3, #4]
 80111fe:	221c      	movs	r2, #28
 8011200:	4619      	mov	r1, r3
 8011202:	f003 fac8 	bl	8014796 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011206:	69bb      	ldr	r3, [r7, #24]
 8011208:	68db      	ldr	r3, [r3, #12]
 801120a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801120c:	f107 030c 	add.w	r3, r7, #12
 8011210:	4618      	mov	r0, r3
 8011212:	f000 f825 	bl	8011260 <ip4_route>
 8011216:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011218:	693b      	ldr	r3, [r7, #16]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d011      	beq.n	8011242 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801121e:	697b      	ldr	r3, [r7, #20]
 8011220:	2200      	movs	r2, #0
 8011222:	709a      	strb	r2, [r3, #2]
 8011224:	2200      	movs	r2, #0
 8011226:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011228:	f107 020c 	add.w	r2, r7, #12
 801122c:	693b      	ldr	r3, [r7, #16]
 801122e:	9302      	str	r3, [sp, #8]
 8011230:	2301      	movs	r3, #1
 8011232:	9301      	str	r3, [sp, #4]
 8011234:	2300      	movs	r3, #0
 8011236:	9300      	str	r3, [sp, #0]
 8011238:	23ff      	movs	r3, #255	@ 0xff
 801123a:	2100      	movs	r1, #0
 801123c:	69f8      	ldr	r0, [r7, #28]
 801123e:	f000 f9c3 	bl	80115c8 <ip4_output_if>
  }
  pbuf_free(q);
 8011242:	69f8      	ldr	r0, [r7, #28]
 8011244:	f7f9 f9c6 	bl	800a5d4 <pbuf_free>
 8011248:	e000      	b.n	801124c <icmp_send_response+0xc0>
    return;
 801124a:	bf00      	nop
}
 801124c:	3720      	adds	r7, #32
 801124e:	46bd      	mov	sp, r7
 8011250:	bd80      	pop	{r7, pc}
 8011252:	bf00      	nop
 8011254:	080175ec 	.word	0x080175ec
 8011258:	080176b8 	.word	0x080176b8
 801125c:	0801765c 	.word	0x0801765c

08011260 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011260:	b480      	push	{r7}
 8011262:	b085      	sub	sp, #20
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011268:	4b33      	ldr	r3, [pc, #204]	@ (8011338 <ip4_route+0xd8>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	60fb      	str	r3, [r7, #12]
 801126e:	e036      	b.n	80112de <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011276:	f003 0301 	and.w	r3, r3, #1
 801127a:	b2db      	uxtb	r3, r3
 801127c:	2b00      	cmp	r3, #0
 801127e:	d02b      	beq.n	80112d8 <ip4_route+0x78>
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011286:	089b      	lsrs	r3, r3, #2
 8011288:	f003 0301 	and.w	r3, r3, #1
 801128c:	b2db      	uxtb	r3, r3
 801128e:	2b00      	cmp	r3, #0
 8011290:	d022      	beq.n	80112d8 <ip4_route+0x78>
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	3304      	adds	r3, #4
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d01d      	beq.n	80112d8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	681a      	ldr	r2, [r3, #0]
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	3304      	adds	r3, #4
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	405a      	eors	r2, r3
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	3308      	adds	r3, #8
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	4013      	ands	r3, r2
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d101      	bne.n	80112b8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	e038      	b.n	801132a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80112be:	f003 0302 	and.w	r3, r3, #2
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d108      	bne.n	80112d8 <ip4_route+0x78>
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	681a      	ldr	r2, [r3, #0]
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	330c      	adds	r3, #12
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	429a      	cmp	r2, r3
 80112d2:	d101      	bne.n	80112d8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	e028      	b.n	801132a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	60fb      	str	r3, [r7, #12]
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d1c5      	bne.n	8011270 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80112e4:	4b15      	ldr	r3, [pc, #84]	@ (801133c <ip4_route+0xdc>)
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d01a      	beq.n	8011322 <ip4_route+0xc2>
 80112ec:	4b13      	ldr	r3, [pc, #76]	@ (801133c <ip4_route+0xdc>)
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80112f4:	f003 0301 	and.w	r3, r3, #1
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d012      	beq.n	8011322 <ip4_route+0xc2>
 80112fc:	4b0f      	ldr	r3, [pc, #60]	@ (801133c <ip4_route+0xdc>)
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011304:	f003 0304 	and.w	r3, r3, #4
 8011308:	2b00      	cmp	r3, #0
 801130a:	d00a      	beq.n	8011322 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801130c:	4b0b      	ldr	r3, [pc, #44]	@ (801133c <ip4_route+0xdc>)
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	3304      	adds	r3, #4
 8011312:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011314:	2b00      	cmp	r3, #0
 8011316:	d004      	beq.n	8011322 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	b2db      	uxtb	r3, r3
 801131e:	2b7f      	cmp	r3, #127	@ 0x7f
 8011320:	d101      	bne.n	8011326 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011322:	2300      	movs	r3, #0
 8011324:	e001      	b.n	801132a <ip4_route+0xca>
  }

  return netif_default;
 8011326:	4b05      	ldr	r3, [pc, #20]	@ (801133c <ip4_route+0xdc>)
 8011328:	681b      	ldr	r3, [r3, #0]
}
 801132a:	4618      	mov	r0, r3
 801132c:	3714      	adds	r7, #20
 801132e:	46bd      	mov	sp, r7
 8011330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011334:	4770      	bx	lr
 8011336:	bf00      	nop
 8011338:	2000dfd4 	.word	0x2000dfd4
 801133c:	2000dfd8 	.word	0x2000dfd8

08011340 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b082      	sub	sp, #8
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801134e:	f003 0301 	and.w	r3, r3, #1
 8011352:	b2db      	uxtb	r3, r3
 8011354:	2b00      	cmp	r3, #0
 8011356:	d016      	beq.n	8011386 <ip4_input_accept+0x46>
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	3304      	adds	r3, #4
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d011      	beq.n	8011386 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011362:	4b0b      	ldr	r3, [pc, #44]	@ (8011390 <ip4_input_accept+0x50>)
 8011364:	695a      	ldr	r2, [r3, #20]
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	3304      	adds	r3, #4
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	429a      	cmp	r2, r3
 801136e:	d008      	beq.n	8011382 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011370:	4b07      	ldr	r3, [pc, #28]	@ (8011390 <ip4_input_accept+0x50>)
 8011372:	695b      	ldr	r3, [r3, #20]
 8011374:	6879      	ldr	r1, [r7, #4]
 8011376:	4618      	mov	r0, r3
 8011378:	f000 f9fe 	bl	8011778 <ip4_addr_isbroadcast_u32>
 801137c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801137e:	2b00      	cmp	r3, #0
 8011380:	d001      	beq.n	8011386 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011382:	2301      	movs	r3, #1
 8011384:	e000      	b.n	8011388 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8011386:	2300      	movs	r3, #0
}
 8011388:	4618      	mov	r0, r3
 801138a:	3708      	adds	r7, #8
 801138c:	46bd      	mov	sp, r7
 801138e:	bd80      	pop	{r7, pc}
 8011390:	20009b54 	.word	0x20009b54

08011394 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b086      	sub	sp, #24
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
 801139c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	685b      	ldr	r3, [r3, #4]
 80113a2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	781b      	ldrb	r3, [r3, #0]
 80113a8:	091b      	lsrs	r3, r3, #4
 80113aa:	b2db      	uxtb	r3, r3
 80113ac:	2b04      	cmp	r3, #4
 80113ae:	d004      	beq.n	80113ba <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80113b0:	6878      	ldr	r0, [r7, #4]
 80113b2:	f7f9 f90f 	bl	800a5d4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80113b6:	2300      	movs	r3, #0
 80113b8:	e0fd      	b.n	80115b6 <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80113ba:	697b      	ldr	r3, [r7, #20]
 80113bc:	781b      	ldrb	r3, [r3, #0]
 80113be:	f003 030f 	and.w	r3, r3, #15
 80113c2:	b2db      	uxtb	r3, r3
 80113c4:	009b      	lsls	r3, r3, #2
 80113c6:	b2db      	uxtb	r3, r3
 80113c8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80113ca:	697b      	ldr	r3, [r7, #20]
 80113cc:	885b      	ldrh	r3, [r3, #2]
 80113ce:	b29b      	uxth	r3, r3
 80113d0:	4618      	mov	r0, r3
 80113d2:	f7f7 fcdb 	bl	8008d8c <lwip_htons>
 80113d6:	4603      	mov	r3, r0
 80113d8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	891b      	ldrh	r3, [r3, #8]
 80113de:	89ba      	ldrh	r2, [r7, #12]
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d204      	bcs.n	80113ee <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80113e4:	89bb      	ldrh	r3, [r7, #12]
 80113e6:	4619      	mov	r1, r3
 80113e8:	6878      	ldr	r0, [r7, #4]
 80113ea:	f7f8 ff6d 	bl	800a2c8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	895b      	ldrh	r3, [r3, #10]
 80113f2:	89fa      	ldrh	r2, [r7, #14]
 80113f4:	429a      	cmp	r2, r3
 80113f6:	d807      	bhi.n	8011408 <ip4_input+0x74>
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	891b      	ldrh	r3, [r3, #8]
 80113fc:	89ba      	ldrh	r2, [r7, #12]
 80113fe:	429a      	cmp	r2, r3
 8011400:	d802      	bhi.n	8011408 <ip4_input+0x74>
 8011402:	89fb      	ldrh	r3, [r7, #14]
 8011404:	2b13      	cmp	r3, #19
 8011406:	d804      	bhi.n	8011412 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011408:	6878      	ldr	r0, [r7, #4]
 801140a:	f7f9 f8e3 	bl	800a5d4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801140e:	2300      	movs	r3, #0
 8011410:	e0d1      	b.n	80115b6 <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011412:	697b      	ldr	r3, [r7, #20]
 8011414:	691b      	ldr	r3, [r3, #16]
 8011416:	4a6a      	ldr	r2, [pc, #424]	@ (80115c0 <ip4_input+0x22c>)
 8011418:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801141a:	697b      	ldr	r3, [r7, #20]
 801141c:	68db      	ldr	r3, [r3, #12]
 801141e:	4a68      	ldr	r2, [pc, #416]	@ (80115c0 <ip4_input+0x22c>)
 8011420:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011422:	4b67      	ldr	r3, [pc, #412]	@ (80115c0 <ip4_input+0x22c>)
 8011424:	695b      	ldr	r3, [r3, #20]
 8011426:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801142a:	2be0      	cmp	r3, #224	@ 0xe0
 801142c:	d112      	bne.n	8011454 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011434:	f003 0301 	and.w	r3, r3, #1
 8011438:	b2db      	uxtb	r3, r3
 801143a:	2b00      	cmp	r3, #0
 801143c:	d007      	beq.n	801144e <ip4_input+0xba>
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	3304      	adds	r3, #4
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d002      	beq.n	801144e <ip4_input+0xba>
      netif = inp;
 8011448:	683b      	ldr	r3, [r7, #0]
 801144a:	613b      	str	r3, [r7, #16]
 801144c:	e02a      	b.n	80114a4 <ip4_input+0x110>
    } else {
      netif = NULL;
 801144e:	2300      	movs	r3, #0
 8011450:	613b      	str	r3, [r7, #16]
 8011452:	e027      	b.n	80114a4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011454:	6838      	ldr	r0, [r7, #0]
 8011456:	f7ff ff73 	bl	8011340 <ip4_input_accept>
 801145a:	4603      	mov	r3, r0
 801145c:	2b00      	cmp	r3, #0
 801145e:	d002      	beq.n	8011466 <ip4_input+0xd2>
      netif = inp;
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	613b      	str	r3, [r7, #16]
 8011464:	e01e      	b.n	80114a4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8011466:	2300      	movs	r3, #0
 8011468:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801146a:	4b55      	ldr	r3, [pc, #340]	@ (80115c0 <ip4_input+0x22c>)
 801146c:	695b      	ldr	r3, [r3, #20]
 801146e:	b2db      	uxtb	r3, r3
 8011470:	2b7f      	cmp	r3, #127	@ 0x7f
 8011472:	d017      	beq.n	80114a4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011474:	4b53      	ldr	r3, [pc, #332]	@ (80115c4 <ip4_input+0x230>)
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	613b      	str	r3, [r7, #16]
 801147a:	e00e      	b.n	801149a <ip4_input+0x106>
          if (netif == inp) {
 801147c:	693a      	ldr	r2, [r7, #16]
 801147e:	683b      	ldr	r3, [r7, #0]
 8011480:	429a      	cmp	r2, r3
 8011482:	d006      	beq.n	8011492 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011484:	6938      	ldr	r0, [r7, #16]
 8011486:	f7ff ff5b 	bl	8011340 <ip4_input_accept>
 801148a:	4603      	mov	r3, r0
 801148c:	2b00      	cmp	r3, #0
 801148e:	d108      	bne.n	80114a2 <ip4_input+0x10e>
 8011490:	e000      	b.n	8011494 <ip4_input+0x100>
            continue;
 8011492:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011494:	693b      	ldr	r3, [r7, #16]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	613b      	str	r3, [r7, #16]
 801149a:	693b      	ldr	r3, [r7, #16]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d1ed      	bne.n	801147c <ip4_input+0xe8>
 80114a0:	e000      	b.n	80114a4 <ip4_input+0x110>
            break;
 80114a2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80114a4:	4b46      	ldr	r3, [pc, #280]	@ (80115c0 <ip4_input+0x22c>)
 80114a6:	691b      	ldr	r3, [r3, #16]
 80114a8:	6839      	ldr	r1, [r7, #0]
 80114aa:	4618      	mov	r0, r3
 80114ac:	f000 f964 	bl	8011778 <ip4_addr_isbroadcast_u32>
 80114b0:	4603      	mov	r3, r0
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d105      	bne.n	80114c2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80114b6:	4b42      	ldr	r3, [pc, #264]	@ (80115c0 <ip4_input+0x22c>)
 80114b8:	691b      	ldr	r3, [r3, #16]
 80114ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80114be:	2be0      	cmp	r3, #224	@ 0xe0
 80114c0:	d104      	bne.n	80114cc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80114c2:	6878      	ldr	r0, [r7, #4]
 80114c4:	f7f9 f886 	bl	800a5d4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80114c8:	2300      	movs	r3, #0
 80114ca:	e074      	b.n	80115b6 <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80114cc:	693b      	ldr	r3, [r7, #16]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d104      	bne.n	80114dc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80114d2:	6878      	ldr	r0, [r7, #4]
 80114d4:	f7f9 f87e 	bl	800a5d4 <pbuf_free>
    return ERR_OK;
 80114d8:	2300      	movs	r3, #0
 80114da:	e06c      	b.n	80115b6 <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80114dc:	697b      	ldr	r3, [r7, #20]
 80114de:	88db      	ldrh	r3, [r3, #6]
 80114e0:	b29b      	uxth	r3, r3
 80114e2:	461a      	mov	r2, r3
 80114e4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80114e8:	4013      	ands	r3, r2
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d00b      	beq.n	8011506 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80114ee:	6878      	ldr	r0, [r7, #4]
 80114f0:	f000 fc88 	bl	8011e04 <ip4_reass>
 80114f4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d101      	bne.n	8011500 <ip4_input+0x16c>
      return ERR_OK;
 80114fc:	2300      	movs	r3, #0
 80114fe:	e05a      	b.n	80115b6 <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	685b      	ldr	r3, [r3, #4]
 8011504:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011506:	4a2e      	ldr	r2, [pc, #184]	@ (80115c0 <ip4_input+0x22c>)
 8011508:	693b      	ldr	r3, [r7, #16]
 801150a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801150c:	4a2c      	ldr	r2, [pc, #176]	@ (80115c0 <ip4_input+0x22c>)
 801150e:	683b      	ldr	r3, [r7, #0]
 8011510:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011512:	4a2b      	ldr	r2, [pc, #172]	@ (80115c0 <ip4_input+0x22c>)
 8011514:	697b      	ldr	r3, [r7, #20]
 8011516:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8011518:	697b      	ldr	r3, [r7, #20]
 801151a:	781b      	ldrb	r3, [r3, #0]
 801151c:	f003 030f 	and.w	r3, r3, #15
 8011520:	b2db      	uxtb	r3, r3
 8011522:	009b      	lsls	r3, r3, #2
 8011524:	b2db      	uxtb	r3, r3
 8011526:	461a      	mov	r2, r3
 8011528:	4b25      	ldr	r3, [pc, #148]	@ (80115c0 <ip4_input+0x22c>)
 801152a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801152c:	89fb      	ldrh	r3, [r7, #14]
 801152e:	4619      	mov	r1, r3
 8011530:	6878      	ldr	r0, [r7, #4]
 8011532:	f7f8 ffc9 	bl	800a4c8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8011536:	697b      	ldr	r3, [r7, #20]
 8011538:	7a5b      	ldrb	r3, [r3, #9]
 801153a:	2b01      	cmp	r3, #1
 801153c:	d006      	beq.n	801154c <ip4_input+0x1b8>
 801153e:	2b06      	cmp	r3, #6
 8011540:	d109      	bne.n	8011556 <ip4_input+0x1c2>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8011542:	6839      	ldr	r1, [r7, #0]
 8011544:	6878      	ldr	r0, [r7, #4]
 8011546:	f7fa fe7b 	bl	800c240 <tcp_input>
        break;
 801154a:	e021      	b.n	8011590 <ip4_input+0x1fc>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801154c:	6839      	ldr	r1, [r7, #0]
 801154e:	6878      	ldr	r0, [r7, #4]
 8011550:	f7ff fcf8 	bl	8010f44 <icmp_input>
        break;
 8011554:	e01c      	b.n	8011590 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011556:	4b1a      	ldr	r3, [pc, #104]	@ (80115c0 <ip4_input+0x22c>)
 8011558:	695b      	ldr	r3, [r3, #20]
 801155a:	6939      	ldr	r1, [r7, #16]
 801155c:	4618      	mov	r0, r3
 801155e:	f000 f90b 	bl	8011778 <ip4_addr_isbroadcast_u32>
 8011562:	4603      	mov	r3, r0
 8011564:	2b00      	cmp	r3, #0
 8011566:	d10f      	bne.n	8011588 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011568:	4b15      	ldr	r3, [pc, #84]	@ (80115c0 <ip4_input+0x22c>)
 801156a:	695b      	ldr	r3, [r3, #20]
 801156c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011570:	2be0      	cmp	r3, #224	@ 0xe0
 8011572:	d009      	beq.n	8011588 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011574:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011578:	4619      	mov	r1, r3
 801157a:	6878      	ldr	r0, [r7, #4]
 801157c:	f7f9 f817 	bl	800a5ae <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011580:	2102      	movs	r1, #2
 8011582:	6878      	ldr	r0, [r7, #4]
 8011584:	f7ff fde2 	bl	801114c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011588:	6878      	ldr	r0, [r7, #4]
 801158a:	f7f9 f823 	bl	800a5d4 <pbuf_free>
        break;
 801158e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011590:	4b0b      	ldr	r3, [pc, #44]	@ (80115c0 <ip4_input+0x22c>)
 8011592:	2200      	movs	r2, #0
 8011594:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011596:	4b0a      	ldr	r3, [pc, #40]	@ (80115c0 <ip4_input+0x22c>)
 8011598:	2200      	movs	r2, #0
 801159a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801159c:	4b08      	ldr	r3, [pc, #32]	@ (80115c0 <ip4_input+0x22c>)
 801159e:	2200      	movs	r2, #0
 80115a0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80115a2:	4b07      	ldr	r3, [pc, #28]	@ (80115c0 <ip4_input+0x22c>)
 80115a4:	2200      	movs	r2, #0
 80115a6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80115a8:	4b05      	ldr	r3, [pc, #20]	@ (80115c0 <ip4_input+0x22c>)
 80115aa:	2200      	movs	r2, #0
 80115ac:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80115ae:	4b04      	ldr	r3, [pc, #16]	@ (80115c0 <ip4_input+0x22c>)
 80115b0:	2200      	movs	r2, #0
 80115b2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80115b4:	2300      	movs	r3, #0
}
 80115b6:	4618      	mov	r0, r3
 80115b8:	3718      	adds	r7, #24
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bd80      	pop	{r7, pc}
 80115be:	bf00      	nop
 80115c0:	20009b54 	.word	0x20009b54
 80115c4:	2000dfd4 	.word	0x2000dfd4

080115c8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b08a      	sub	sp, #40	@ 0x28
 80115cc:	af04      	add	r7, sp, #16
 80115ce:	60f8      	str	r0, [r7, #12]
 80115d0:	60b9      	str	r1, [r7, #8]
 80115d2:	607a      	str	r2, [r7, #4]
 80115d4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80115d6:	68bb      	ldr	r3, [r7, #8]
 80115d8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d009      	beq.n	80115f4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80115e0:	68bb      	ldr	r3, [r7, #8]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d003      	beq.n	80115ee <ip4_output_if+0x26>
 80115e6:	68bb      	ldr	r3, [r7, #8]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d102      	bne.n	80115f4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80115ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115f0:	3304      	adds	r3, #4
 80115f2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80115f4:	78fa      	ldrb	r2, [r7, #3]
 80115f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115f8:	9302      	str	r3, [sp, #8]
 80115fa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80115fe:	9301      	str	r3, [sp, #4]
 8011600:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011604:	9300      	str	r3, [sp, #0]
 8011606:	4613      	mov	r3, r2
 8011608:	687a      	ldr	r2, [r7, #4]
 801160a:	6979      	ldr	r1, [r7, #20]
 801160c:	68f8      	ldr	r0, [r7, #12]
 801160e:	f000 f805 	bl	801161c <ip4_output_if_src>
 8011612:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011614:	4618      	mov	r0, r3
 8011616:	3718      	adds	r7, #24
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}

0801161c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b088      	sub	sp, #32
 8011620:	af00      	add	r7, sp, #0
 8011622:	60f8      	str	r0, [r7, #12]
 8011624:	60b9      	str	r1, [r7, #8]
 8011626:	607a      	str	r2, [r7, #4]
 8011628:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	7b9b      	ldrb	r3, [r3, #14]
 801162e:	2b01      	cmp	r3, #1
 8011630:	d006      	beq.n	8011640 <ip4_output_if_src+0x24>
 8011632:	4b4b      	ldr	r3, [pc, #300]	@ (8011760 <ip4_output_if_src+0x144>)
 8011634:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8011638:	494a      	ldr	r1, [pc, #296]	@ (8011764 <ip4_output_if_src+0x148>)
 801163a:	484b      	ldr	r0, [pc, #300]	@ (8011768 <ip4_output_if_src+0x14c>)
 801163c:	f002 ffba 	bl	80145b4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d060      	beq.n	8011708 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011646:	2314      	movs	r3, #20
 8011648:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801164a:	2114      	movs	r1, #20
 801164c:	68f8      	ldr	r0, [r7, #12]
 801164e:	f7f8 ff2b 	bl	800a4a8 <pbuf_add_header>
 8011652:	4603      	mov	r3, r0
 8011654:	2b00      	cmp	r3, #0
 8011656:	d002      	beq.n	801165e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011658:	f06f 0301 	mvn.w	r3, #1
 801165c:	e07c      	b.n	8011758 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	685b      	ldr	r3, [r3, #4]
 8011662:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	895b      	ldrh	r3, [r3, #10]
 8011668:	2b13      	cmp	r3, #19
 801166a:	d806      	bhi.n	801167a <ip4_output_if_src+0x5e>
 801166c:	4b3c      	ldr	r3, [pc, #240]	@ (8011760 <ip4_output_if_src+0x144>)
 801166e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8011672:	493e      	ldr	r1, [pc, #248]	@ (801176c <ip4_output_if_src+0x150>)
 8011674:	483c      	ldr	r0, [pc, #240]	@ (8011768 <ip4_output_if_src+0x14c>)
 8011676:	f002 ff9d 	bl	80145b4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801167a:	69fb      	ldr	r3, [r7, #28]
 801167c:	78fa      	ldrb	r2, [r7, #3]
 801167e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011680:	69fb      	ldr	r3, [r7, #28]
 8011682:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8011686:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	681a      	ldr	r2, [r3, #0]
 801168c:	69fb      	ldr	r3, [r7, #28]
 801168e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011690:	8b7b      	ldrh	r3, [r7, #26]
 8011692:	089b      	lsrs	r3, r3, #2
 8011694:	b29b      	uxth	r3, r3
 8011696:	b2db      	uxtb	r3, r3
 8011698:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801169c:	b2da      	uxtb	r2, r3
 801169e:	69fb      	ldr	r3, [r7, #28]
 80116a0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80116a2:	69fb      	ldr	r3, [r7, #28]
 80116a4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80116a8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	891b      	ldrh	r3, [r3, #8]
 80116ae:	4618      	mov	r0, r3
 80116b0:	f7f7 fb6c 	bl	8008d8c <lwip_htons>
 80116b4:	4603      	mov	r3, r0
 80116b6:	461a      	mov	r2, r3
 80116b8:	69fb      	ldr	r3, [r7, #28]
 80116ba:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80116bc:	69fb      	ldr	r3, [r7, #28]
 80116be:	2200      	movs	r2, #0
 80116c0:	719a      	strb	r2, [r3, #6]
 80116c2:	2200      	movs	r2, #0
 80116c4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80116c6:	4b2a      	ldr	r3, [pc, #168]	@ (8011770 <ip4_output_if_src+0x154>)
 80116c8:	881b      	ldrh	r3, [r3, #0]
 80116ca:	4618      	mov	r0, r3
 80116cc:	f7f7 fb5e 	bl	8008d8c <lwip_htons>
 80116d0:	4603      	mov	r3, r0
 80116d2:	461a      	mov	r2, r3
 80116d4:	69fb      	ldr	r3, [r7, #28]
 80116d6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80116d8:	4b25      	ldr	r3, [pc, #148]	@ (8011770 <ip4_output_if_src+0x154>)
 80116da:	881b      	ldrh	r3, [r3, #0]
 80116dc:	3301      	adds	r3, #1
 80116de:	b29a      	uxth	r2, r3
 80116e0:	4b23      	ldr	r3, [pc, #140]	@ (8011770 <ip4_output_if_src+0x154>)
 80116e2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80116e4:	68bb      	ldr	r3, [r7, #8]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d104      	bne.n	80116f4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80116ea:	4b22      	ldr	r3, [pc, #136]	@ (8011774 <ip4_output_if_src+0x158>)
 80116ec:	681a      	ldr	r2, [r3, #0]
 80116ee:	69fb      	ldr	r3, [r7, #28]
 80116f0:	60da      	str	r2, [r3, #12]
 80116f2:	e003      	b.n	80116fc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80116f4:	68bb      	ldr	r3, [r7, #8]
 80116f6:	681a      	ldr	r2, [r3, #0]
 80116f8:	69fb      	ldr	r3, [r7, #28]
 80116fa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80116fc:	69fb      	ldr	r3, [r7, #28]
 80116fe:	2200      	movs	r2, #0
 8011700:	729a      	strb	r2, [r3, #10]
 8011702:	2200      	movs	r2, #0
 8011704:	72da      	strb	r2, [r3, #11]
 8011706:	e00f      	b.n	8011728 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	895b      	ldrh	r3, [r3, #10]
 801170c:	2b13      	cmp	r3, #19
 801170e:	d802      	bhi.n	8011716 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011710:	f06f 0301 	mvn.w	r3, #1
 8011714:	e020      	b.n	8011758 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	685b      	ldr	r3, [r3, #4]
 801171a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801171c:	69fb      	ldr	r3, [r7, #28]
 801171e:	691b      	ldr	r3, [r3, #16]
 8011720:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011722:	f107 0314 	add.w	r3, r7, #20
 8011726:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801172a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801172c:	2b00      	cmp	r3, #0
 801172e:	d00c      	beq.n	801174a <ip4_output_if_src+0x12e>
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	891a      	ldrh	r2, [r3, #8]
 8011734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011736:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011738:	429a      	cmp	r2, r3
 801173a:	d906      	bls.n	801174a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801173c:	687a      	ldr	r2, [r7, #4]
 801173e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011740:	68f8      	ldr	r0, [r7, #12]
 8011742:	f000 fd53 	bl	80121ec <ip4_frag>
 8011746:	4603      	mov	r3, r0
 8011748:	e006      	b.n	8011758 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801174a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801174c:	695b      	ldr	r3, [r3, #20]
 801174e:	687a      	ldr	r2, [r7, #4]
 8011750:	68f9      	ldr	r1, [r7, #12]
 8011752:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011754:	4798      	blx	r3
 8011756:	4603      	mov	r3, r0
}
 8011758:	4618      	mov	r0, r3
 801175a:	3720      	adds	r7, #32
 801175c:	46bd      	mov	sp, r7
 801175e:	bd80      	pop	{r7, pc}
 8011760:	080176e4 	.word	0x080176e4
 8011764:	08017718 	.word	0x08017718
 8011768:	08017724 	.word	0x08017724
 801176c:	0801774c 	.word	0x0801774c
 8011770:	2000e12e 	.word	0x2000e12e
 8011774:	08017bd0 	.word	0x08017bd0

08011778 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011778:	b480      	push	{r7}
 801177a:	b085      	sub	sp, #20
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
 8011780:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	f1b3 3fff 	cmp.w	r3, #4294967295
 801178c:	d002      	beq.n	8011794 <ip4_addr_isbroadcast_u32+0x1c>
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d101      	bne.n	8011798 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011794:	2301      	movs	r3, #1
 8011796:	e02a      	b.n	80117ee <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011798:	683b      	ldr	r3, [r7, #0]
 801179a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801179e:	f003 0302 	and.w	r3, r3, #2
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d101      	bne.n	80117aa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80117a6:	2300      	movs	r3, #0
 80117a8:	e021      	b.n	80117ee <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	3304      	adds	r3, #4
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	687a      	ldr	r2, [r7, #4]
 80117b2:	429a      	cmp	r2, r3
 80117b4:	d101      	bne.n	80117ba <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80117b6:	2300      	movs	r3, #0
 80117b8:	e019      	b.n	80117ee <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80117ba:	68fa      	ldr	r2, [r7, #12]
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	3304      	adds	r3, #4
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	405a      	eors	r2, r3
 80117c4:	683b      	ldr	r3, [r7, #0]
 80117c6:	3308      	adds	r3, #8
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	4013      	ands	r3, r2
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d10d      	bne.n	80117ec <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80117d0:	683b      	ldr	r3, [r7, #0]
 80117d2:	3308      	adds	r3, #8
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	43da      	mvns	r2, r3
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80117dc:	683b      	ldr	r3, [r7, #0]
 80117de:	3308      	adds	r3, #8
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80117e4:	429a      	cmp	r2, r3
 80117e6:	d101      	bne.n	80117ec <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80117e8:	2301      	movs	r3, #1
 80117ea:	e000      	b.n	80117ee <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80117ec:	2300      	movs	r3, #0
  }
}
 80117ee:	4618      	mov	r0, r3
 80117f0:	3714      	adds	r7, #20
 80117f2:	46bd      	mov	sp, r7
 80117f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f8:	4770      	bx	lr
	...

080117fc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80117fc:	b580      	push	{r7, lr}
 80117fe:	b084      	sub	sp, #16
 8011800:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011802:	2300      	movs	r3, #0
 8011804:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011806:	4b12      	ldr	r3, [pc, #72]	@ (8011850 <ip_reass_tmr+0x54>)
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801180c:	e018      	b.n	8011840 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	7fdb      	ldrb	r3, [r3, #31]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d00b      	beq.n	801182e <ip_reass_tmr+0x32>
      r->timer--;
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	7fdb      	ldrb	r3, [r3, #31]
 801181a:	3b01      	subs	r3, #1
 801181c:	b2da      	uxtb	r2, r3
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	60fb      	str	r3, [r7, #12]
 801182c:	e008      	b.n	8011840 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011838:	68b9      	ldr	r1, [r7, #8]
 801183a:	6878      	ldr	r0, [r7, #4]
 801183c:	f000 f80a 	bl	8011854 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d1e3      	bne.n	801180e <ip_reass_tmr+0x12>
    }
  }
}
 8011846:	bf00      	nop
 8011848:	bf00      	nop
 801184a:	3710      	adds	r7, #16
 801184c:	46bd      	mov	sp, r7
 801184e:	bd80      	pop	{r7, pc}
 8011850:	2000e130 	.word	0x2000e130

08011854 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b088      	sub	sp, #32
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
 801185c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801185e:	2300      	movs	r3, #0
 8011860:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011862:	683a      	ldr	r2, [r7, #0]
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	429a      	cmp	r2, r3
 8011868:	d105      	bne.n	8011876 <ip_reass_free_complete_datagram+0x22>
 801186a:	4b45      	ldr	r3, [pc, #276]	@ (8011980 <ip_reass_free_complete_datagram+0x12c>)
 801186c:	22ab      	movs	r2, #171	@ 0xab
 801186e:	4945      	ldr	r1, [pc, #276]	@ (8011984 <ip_reass_free_complete_datagram+0x130>)
 8011870:	4845      	ldr	r0, [pc, #276]	@ (8011988 <ip_reass_free_complete_datagram+0x134>)
 8011872:	f002 fe9f 	bl	80145b4 <iprintf>
  if (prev != NULL) {
 8011876:	683b      	ldr	r3, [r7, #0]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d00a      	beq.n	8011892 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801187c:	683b      	ldr	r3, [r7, #0]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	687a      	ldr	r2, [r7, #4]
 8011882:	429a      	cmp	r2, r3
 8011884:	d005      	beq.n	8011892 <ip_reass_free_complete_datagram+0x3e>
 8011886:	4b3e      	ldr	r3, [pc, #248]	@ (8011980 <ip_reass_free_complete_datagram+0x12c>)
 8011888:	22ad      	movs	r2, #173	@ 0xad
 801188a:	4940      	ldr	r1, [pc, #256]	@ (801198c <ip_reass_free_complete_datagram+0x138>)
 801188c:	483e      	ldr	r0, [pc, #248]	@ (8011988 <ip_reass_free_complete_datagram+0x134>)
 801188e:	f002 fe91 	bl	80145b4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	685b      	ldr	r3, [r3, #4]
 8011896:	685b      	ldr	r3, [r3, #4]
 8011898:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801189a:	697b      	ldr	r3, [r7, #20]
 801189c:	889b      	ldrh	r3, [r3, #4]
 801189e:	b29b      	uxth	r3, r3
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d12a      	bne.n	80118fa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	685b      	ldr	r3, [r3, #4]
 80118a8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80118aa:	697b      	ldr	r3, [r7, #20]
 80118ac:	681a      	ldr	r2, [r3, #0]
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80118b2:	69bb      	ldr	r3, [r7, #24]
 80118b4:	6858      	ldr	r0, [r3, #4]
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	3308      	adds	r3, #8
 80118ba:	2214      	movs	r2, #20
 80118bc:	4619      	mov	r1, r3
 80118be:	f002 ff6a 	bl	8014796 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80118c2:	2101      	movs	r1, #1
 80118c4:	69b8      	ldr	r0, [r7, #24]
 80118c6:	f7ff fc51 	bl	801116c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80118ca:	69b8      	ldr	r0, [r7, #24]
 80118cc:	f7f8 ff10 	bl	800a6f0 <pbuf_clen>
 80118d0:	4603      	mov	r3, r0
 80118d2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80118d4:	8bfa      	ldrh	r2, [r7, #30]
 80118d6:	8a7b      	ldrh	r3, [r7, #18]
 80118d8:	4413      	add	r3, r2
 80118da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80118de:	db05      	blt.n	80118ec <ip_reass_free_complete_datagram+0x98>
 80118e0:	4b27      	ldr	r3, [pc, #156]	@ (8011980 <ip_reass_free_complete_datagram+0x12c>)
 80118e2:	22bc      	movs	r2, #188	@ 0xbc
 80118e4:	492a      	ldr	r1, [pc, #168]	@ (8011990 <ip_reass_free_complete_datagram+0x13c>)
 80118e6:	4828      	ldr	r0, [pc, #160]	@ (8011988 <ip_reass_free_complete_datagram+0x134>)
 80118e8:	f002 fe64 	bl	80145b4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80118ec:	8bfa      	ldrh	r2, [r7, #30]
 80118ee:	8a7b      	ldrh	r3, [r7, #18]
 80118f0:	4413      	add	r3, r2
 80118f2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80118f4:	69b8      	ldr	r0, [r7, #24]
 80118f6:	f7f8 fe6d 	bl	800a5d4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	685b      	ldr	r3, [r3, #4]
 80118fe:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011900:	e01f      	b.n	8011942 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011902:	69bb      	ldr	r3, [r7, #24]
 8011904:	685b      	ldr	r3, [r3, #4]
 8011906:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011908:	69bb      	ldr	r3, [r7, #24]
 801190a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801190c:	697b      	ldr	r3, [r7, #20]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011912:	68f8      	ldr	r0, [r7, #12]
 8011914:	f7f8 feec 	bl	800a6f0 <pbuf_clen>
 8011918:	4603      	mov	r3, r0
 801191a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801191c:	8bfa      	ldrh	r2, [r7, #30]
 801191e:	8a7b      	ldrh	r3, [r7, #18]
 8011920:	4413      	add	r3, r2
 8011922:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011926:	db05      	blt.n	8011934 <ip_reass_free_complete_datagram+0xe0>
 8011928:	4b15      	ldr	r3, [pc, #84]	@ (8011980 <ip_reass_free_complete_datagram+0x12c>)
 801192a:	22cc      	movs	r2, #204	@ 0xcc
 801192c:	4918      	ldr	r1, [pc, #96]	@ (8011990 <ip_reass_free_complete_datagram+0x13c>)
 801192e:	4816      	ldr	r0, [pc, #88]	@ (8011988 <ip_reass_free_complete_datagram+0x134>)
 8011930:	f002 fe40 	bl	80145b4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011934:	8bfa      	ldrh	r2, [r7, #30]
 8011936:	8a7b      	ldrh	r3, [r7, #18]
 8011938:	4413      	add	r3, r2
 801193a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801193c:	68f8      	ldr	r0, [r7, #12]
 801193e:	f7f8 fe49 	bl	800a5d4 <pbuf_free>
  while (p != NULL) {
 8011942:	69bb      	ldr	r3, [r7, #24]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d1dc      	bne.n	8011902 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011948:	6839      	ldr	r1, [r7, #0]
 801194a:	6878      	ldr	r0, [r7, #4]
 801194c:	f000 f8c2 	bl	8011ad4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011950:	4b10      	ldr	r3, [pc, #64]	@ (8011994 <ip_reass_free_complete_datagram+0x140>)
 8011952:	881b      	ldrh	r3, [r3, #0]
 8011954:	8bfa      	ldrh	r2, [r7, #30]
 8011956:	429a      	cmp	r2, r3
 8011958:	d905      	bls.n	8011966 <ip_reass_free_complete_datagram+0x112>
 801195a:	4b09      	ldr	r3, [pc, #36]	@ (8011980 <ip_reass_free_complete_datagram+0x12c>)
 801195c:	22d2      	movs	r2, #210	@ 0xd2
 801195e:	490e      	ldr	r1, [pc, #56]	@ (8011998 <ip_reass_free_complete_datagram+0x144>)
 8011960:	4809      	ldr	r0, [pc, #36]	@ (8011988 <ip_reass_free_complete_datagram+0x134>)
 8011962:	f002 fe27 	bl	80145b4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011966:	4b0b      	ldr	r3, [pc, #44]	@ (8011994 <ip_reass_free_complete_datagram+0x140>)
 8011968:	881a      	ldrh	r2, [r3, #0]
 801196a:	8bfb      	ldrh	r3, [r7, #30]
 801196c:	1ad3      	subs	r3, r2, r3
 801196e:	b29a      	uxth	r2, r3
 8011970:	4b08      	ldr	r3, [pc, #32]	@ (8011994 <ip_reass_free_complete_datagram+0x140>)
 8011972:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011974:	8bfb      	ldrh	r3, [r7, #30]
}
 8011976:	4618      	mov	r0, r3
 8011978:	3720      	adds	r7, #32
 801197a:	46bd      	mov	sp, r7
 801197c:	bd80      	pop	{r7, pc}
 801197e:	bf00      	nop
 8011980:	0801777c 	.word	0x0801777c
 8011984:	080177b8 	.word	0x080177b8
 8011988:	080177c4 	.word	0x080177c4
 801198c:	080177ec 	.word	0x080177ec
 8011990:	08017800 	.word	0x08017800
 8011994:	2000e134 	.word	0x2000e134
 8011998:	08017820 	.word	0x08017820

0801199c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b08a      	sub	sp, #40	@ 0x28
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
 80119a4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80119a6:	2300      	movs	r3, #0
 80119a8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80119aa:	2300      	movs	r3, #0
 80119ac:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80119ae:	2300      	movs	r3, #0
 80119b0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80119b2:	2300      	movs	r3, #0
 80119b4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80119b6:	2300      	movs	r3, #0
 80119b8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80119ba:	4b28      	ldr	r3, [pc, #160]	@ (8011a5c <ip_reass_remove_oldest_datagram+0xc0>)
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80119c0:	e030      	b.n	8011a24 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80119c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119c4:	695a      	ldr	r2, [r3, #20]
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	68db      	ldr	r3, [r3, #12]
 80119ca:	429a      	cmp	r2, r3
 80119cc:	d10c      	bne.n	80119e8 <ip_reass_remove_oldest_datagram+0x4c>
 80119ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119d0:	699a      	ldr	r2, [r3, #24]
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	691b      	ldr	r3, [r3, #16]
 80119d6:	429a      	cmp	r2, r3
 80119d8:	d106      	bne.n	80119e8 <ip_reass_remove_oldest_datagram+0x4c>
 80119da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119dc:	899a      	ldrh	r2, [r3, #12]
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	889b      	ldrh	r3, [r3, #4]
 80119e2:	b29b      	uxth	r3, r3
 80119e4:	429a      	cmp	r2, r3
 80119e6:	d014      	beq.n	8011a12 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80119e8:	693b      	ldr	r3, [r7, #16]
 80119ea:	3301      	adds	r3, #1
 80119ec:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80119ee:	6a3b      	ldr	r3, [r7, #32]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d104      	bne.n	80119fe <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80119f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119f6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80119f8:	69fb      	ldr	r3, [r7, #28]
 80119fa:	61bb      	str	r3, [r7, #24]
 80119fc:	e009      	b.n	8011a12 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80119fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a00:	7fda      	ldrb	r2, [r3, #31]
 8011a02:	6a3b      	ldr	r3, [r7, #32]
 8011a04:	7fdb      	ldrb	r3, [r3, #31]
 8011a06:	429a      	cmp	r2, r3
 8011a08:	d803      	bhi.n	8011a12 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a0c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011a0e:	69fb      	ldr	r3, [r7, #28]
 8011a10:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d001      	beq.n	8011a1e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a1c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8011a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d1cb      	bne.n	80119c2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011a2a:	6a3b      	ldr	r3, [r7, #32]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d008      	beq.n	8011a42 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011a30:	69b9      	ldr	r1, [r7, #24]
 8011a32:	6a38      	ldr	r0, [r7, #32]
 8011a34:	f7ff ff0e 	bl	8011854 <ip_reass_free_complete_datagram>
 8011a38:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011a3a:	697a      	ldr	r2, [r7, #20]
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	4413      	add	r3, r2
 8011a40:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011a42:	697a      	ldr	r2, [r7, #20]
 8011a44:	683b      	ldr	r3, [r7, #0]
 8011a46:	429a      	cmp	r2, r3
 8011a48:	da02      	bge.n	8011a50 <ip_reass_remove_oldest_datagram+0xb4>
 8011a4a:	693b      	ldr	r3, [r7, #16]
 8011a4c:	2b01      	cmp	r3, #1
 8011a4e:	dcac      	bgt.n	80119aa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011a50:	697b      	ldr	r3, [r7, #20]
}
 8011a52:	4618      	mov	r0, r3
 8011a54:	3728      	adds	r7, #40	@ 0x28
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd80      	pop	{r7, pc}
 8011a5a:	bf00      	nop
 8011a5c:	2000e130 	.word	0x2000e130

08011a60 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b084      	sub	sp, #16
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
 8011a68:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011a6a:	2003      	movs	r0, #3
 8011a6c:	f7f7 fe64 	bl	8009738 <memp_malloc>
 8011a70:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d110      	bne.n	8011a9a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011a78:	6839      	ldr	r1, [r7, #0]
 8011a7a:	6878      	ldr	r0, [r7, #4]
 8011a7c:	f7ff ff8e 	bl	801199c <ip_reass_remove_oldest_datagram>
 8011a80:	4602      	mov	r2, r0
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	4293      	cmp	r3, r2
 8011a86:	dc03      	bgt.n	8011a90 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011a88:	2003      	movs	r0, #3
 8011a8a:	f7f7 fe55 	bl	8009738 <memp_malloc>
 8011a8e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d101      	bne.n	8011a9a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8011a96:	2300      	movs	r3, #0
 8011a98:	e016      	b.n	8011ac8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011a9a:	2220      	movs	r2, #32
 8011a9c:	2100      	movs	r1, #0
 8011a9e:	68f8      	ldr	r0, [r7, #12]
 8011aa0:	f002 fded 	bl	801467e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	220f      	movs	r2, #15
 8011aa8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011aaa:	4b09      	ldr	r3, [pc, #36]	@ (8011ad0 <ip_reass_enqueue_new_datagram+0x70>)
 8011aac:	681a      	ldr	r2, [r3, #0]
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011ab2:	4a07      	ldr	r2, [pc, #28]	@ (8011ad0 <ip_reass_enqueue_new_datagram+0x70>)
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	3308      	adds	r3, #8
 8011abc:	2214      	movs	r2, #20
 8011abe:	6879      	ldr	r1, [r7, #4]
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f002 fe68 	bl	8014796 <memcpy>
  return ipr;
 8011ac6:	68fb      	ldr	r3, [r7, #12]
}
 8011ac8:	4618      	mov	r0, r3
 8011aca:	3710      	adds	r7, #16
 8011acc:	46bd      	mov	sp, r7
 8011ace:	bd80      	pop	{r7, pc}
 8011ad0:	2000e130 	.word	0x2000e130

08011ad4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b082      	sub	sp, #8
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
 8011adc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011ade:	4b10      	ldr	r3, [pc, #64]	@ (8011b20 <ip_reass_dequeue_datagram+0x4c>)
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	687a      	ldr	r2, [r7, #4]
 8011ae4:	429a      	cmp	r2, r3
 8011ae6:	d104      	bne.n	8011af2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	4a0c      	ldr	r2, [pc, #48]	@ (8011b20 <ip_reass_dequeue_datagram+0x4c>)
 8011aee:	6013      	str	r3, [r2, #0]
 8011af0:	e00d      	b.n	8011b0e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011af2:	683b      	ldr	r3, [r7, #0]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d106      	bne.n	8011b06 <ip_reass_dequeue_datagram+0x32>
 8011af8:	4b0a      	ldr	r3, [pc, #40]	@ (8011b24 <ip_reass_dequeue_datagram+0x50>)
 8011afa:	f240 1245 	movw	r2, #325	@ 0x145
 8011afe:	490a      	ldr	r1, [pc, #40]	@ (8011b28 <ip_reass_dequeue_datagram+0x54>)
 8011b00:	480a      	ldr	r0, [pc, #40]	@ (8011b2c <ip_reass_dequeue_datagram+0x58>)
 8011b02:	f002 fd57 	bl	80145b4 <iprintf>
    prev->next = ipr->next;
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	681a      	ldr	r2, [r3, #0]
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011b0e:	6879      	ldr	r1, [r7, #4]
 8011b10:	2003      	movs	r0, #3
 8011b12:	f7f7 fe87 	bl	8009824 <memp_free>
}
 8011b16:	bf00      	nop
 8011b18:	3708      	adds	r7, #8
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}
 8011b1e:	bf00      	nop
 8011b20:	2000e130 	.word	0x2000e130
 8011b24:	0801777c 	.word	0x0801777c
 8011b28:	08017844 	.word	0x08017844
 8011b2c:	080177c4 	.word	0x080177c4

08011b30 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b08c      	sub	sp, #48	@ 0x30
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	60f8      	str	r0, [r7, #12]
 8011b38:	60b9      	str	r1, [r7, #8]
 8011b3a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011b40:	2301      	movs	r3, #1
 8011b42:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011b44:	68bb      	ldr	r3, [r7, #8]
 8011b46:	685b      	ldr	r3, [r3, #4]
 8011b48:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011b4a:	69fb      	ldr	r3, [r7, #28]
 8011b4c:	885b      	ldrh	r3, [r3, #2]
 8011b4e:	b29b      	uxth	r3, r3
 8011b50:	4618      	mov	r0, r3
 8011b52:	f7f7 f91b 	bl	8008d8c <lwip_htons>
 8011b56:	4603      	mov	r3, r0
 8011b58:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8011b5a:	69fb      	ldr	r3, [r7, #28]
 8011b5c:	781b      	ldrb	r3, [r3, #0]
 8011b5e:	f003 030f 	and.w	r3, r3, #15
 8011b62:	b2db      	uxtb	r3, r3
 8011b64:	009b      	lsls	r3, r3, #2
 8011b66:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8011b68:	7e7b      	ldrb	r3, [r7, #25]
 8011b6a:	b29b      	uxth	r3, r3
 8011b6c:	8b7a      	ldrh	r2, [r7, #26]
 8011b6e:	429a      	cmp	r2, r3
 8011b70:	d202      	bcs.n	8011b78 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011b72:	f04f 33ff 	mov.w	r3, #4294967295
 8011b76:	e135      	b.n	8011de4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8011b78:	7e7b      	ldrb	r3, [r7, #25]
 8011b7a:	b29b      	uxth	r3, r3
 8011b7c:	8b7a      	ldrh	r2, [r7, #26]
 8011b7e:	1ad3      	subs	r3, r2, r3
 8011b80:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011b82:	69fb      	ldr	r3, [r7, #28]
 8011b84:	88db      	ldrh	r3, [r3, #6]
 8011b86:	b29b      	uxth	r3, r3
 8011b88:	4618      	mov	r0, r3
 8011b8a:	f7f7 f8ff 	bl	8008d8c <lwip_htons>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011b94:	b29b      	uxth	r3, r3
 8011b96:	00db      	lsls	r3, r3, #3
 8011b98:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8011b9a:	68bb      	ldr	r3, [r7, #8]
 8011b9c:	685b      	ldr	r3, [r3, #4]
 8011b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8011ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	701a      	strb	r2, [r3, #0]
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	705a      	strb	r2, [r3, #1]
 8011baa:	2200      	movs	r2, #0
 8011bac:	709a      	strb	r2, [r3, #2]
 8011bae:	2200      	movs	r2, #0
 8011bb0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bb4:	8afa      	ldrh	r2, [r7, #22]
 8011bb6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8011bb8:	8afa      	ldrh	r2, [r7, #22]
 8011bba:	8b7b      	ldrh	r3, [r7, #26]
 8011bbc:	4413      	add	r3, r2
 8011bbe:	b29a      	uxth	r2, r3
 8011bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bc2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8011bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bc6:	88db      	ldrh	r3, [r3, #6]
 8011bc8:	b29b      	uxth	r3, r3
 8011bca:	8afa      	ldrh	r2, [r7, #22]
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d902      	bls.n	8011bd6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8011bd4:	e106      	b.n	8011de4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	685b      	ldr	r3, [r3, #4]
 8011bda:	627b      	str	r3, [r7, #36]	@ 0x24
 8011bdc:	e068      	b.n	8011cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8011bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011be0:	685b      	ldr	r3, [r3, #4]
 8011be2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8011be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011be6:	889b      	ldrh	r3, [r3, #4]
 8011be8:	b29a      	uxth	r2, r3
 8011bea:	693b      	ldr	r3, [r7, #16]
 8011bec:	889b      	ldrh	r3, [r3, #4]
 8011bee:	b29b      	uxth	r3, r3
 8011bf0:	429a      	cmp	r2, r3
 8011bf2:	d235      	bcs.n	8011c60 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011bf8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8011bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d020      	beq.n	8011c42 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c02:	889b      	ldrh	r3, [r3, #4]
 8011c04:	b29a      	uxth	r2, r3
 8011c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c08:	88db      	ldrh	r3, [r3, #6]
 8011c0a:	b29b      	uxth	r3, r3
 8011c0c:	429a      	cmp	r2, r3
 8011c0e:	d307      	bcc.n	8011c20 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8011c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c12:	88db      	ldrh	r3, [r3, #6]
 8011c14:	b29a      	uxth	r2, r3
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	889b      	ldrh	r3, [r3, #4]
 8011c1a:	b29b      	uxth	r3, r3
 8011c1c:	429a      	cmp	r2, r3
 8011c1e:	d902      	bls.n	8011c26 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011c20:	f04f 33ff 	mov.w	r3, #4294967295
 8011c24:	e0de      	b.n	8011de4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8011c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c28:	68ba      	ldr	r2, [r7, #8]
 8011c2a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c2e:	88db      	ldrh	r3, [r3, #6]
 8011c30:	b29a      	uxth	r2, r3
 8011c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c34:	889b      	ldrh	r3, [r3, #4]
 8011c36:	b29b      	uxth	r3, r3
 8011c38:	429a      	cmp	r2, r3
 8011c3a:	d03d      	beq.n	8011cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8011c40:	e03a      	b.n	8011cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8011c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c44:	88db      	ldrh	r3, [r3, #6]
 8011c46:	b29a      	uxth	r2, r3
 8011c48:	693b      	ldr	r3, [r7, #16]
 8011c4a:	889b      	ldrh	r3, [r3, #4]
 8011c4c:	b29b      	uxth	r3, r3
 8011c4e:	429a      	cmp	r2, r3
 8011c50:	d902      	bls.n	8011c58 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011c52:	f04f 33ff 	mov.w	r3, #4294967295
 8011c56:	e0c5      	b.n	8011de4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	68ba      	ldr	r2, [r7, #8]
 8011c5c:	605a      	str	r2, [r3, #4]
      break;
 8011c5e:	e02b      	b.n	8011cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8011c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c62:	889b      	ldrh	r3, [r3, #4]
 8011c64:	b29a      	uxth	r2, r3
 8011c66:	693b      	ldr	r3, [r7, #16]
 8011c68:	889b      	ldrh	r3, [r3, #4]
 8011c6a:	b29b      	uxth	r3, r3
 8011c6c:	429a      	cmp	r2, r3
 8011c6e:	d102      	bne.n	8011c76 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011c70:	f04f 33ff 	mov.w	r3, #4294967295
 8011c74:	e0b6      	b.n	8011de4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8011c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c78:	889b      	ldrh	r3, [r3, #4]
 8011c7a:	b29a      	uxth	r2, r3
 8011c7c:	693b      	ldr	r3, [r7, #16]
 8011c7e:	88db      	ldrh	r3, [r3, #6]
 8011c80:	b29b      	uxth	r3, r3
 8011c82:	429a      	cmp	r2, r3
 8011c84:	d202      	bcs.n	8011c8c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011c86:	f04f 33ff 	mov.w	r3, #4294967295
 8011c8a:	e0ab      	b.n	8011de4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d009      	beq.n	8011ca6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8011c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c94:	88db      	ldrh	r3, [r3, #6]
 8011c96:	b29a      	uxth	r2, r3
 8011c98:	693b      	ldr	r3, [r7, #16]
 8011c9a:	889b      	ldrh	r3, [r3, #4]
 8011c9c:	b29b      	uxth	r3, r3
 8011c9e:	429a      	cmp	r2, r3
 8011ca0:	d001      	beq.n	8011ca6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8011ca6:	693b      	ldr	r3, [r7, #16]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8011cac:	693b      	ldr	r3, [r7, #16]
 8011cae:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8011cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d193      	bne.n	8011bde <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8011cb6:	e000      	b.n	8011cba <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8011cb8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8011cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d12d      	bne.n	8011d1c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8011cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d01c      	beq.n	8011d00 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8011cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cc8:	88db      	ldrh	r3, [r3, #6]
 8011cca:	b29a      	uxth	r2, r3
 8011ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cce:	889b      	ldrh	r3, [r3, #4]
 8011cd0:	b29b      	uxth	r3, r3
 8011cd2:	429a      	cmp	r2, r3
 8011cd4:	d906      	bls.n	8011ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8011cd6:	4b45      	ldr	r3, [pc, #276]	@ (8011dec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011cd8:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8011cdc:	4944      	ldr	r1, [pc, #272]	@ (8011df0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011cde:	4845      	ldr	r0, [pc, #276]	@ (8011df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011ce0:	f002 fc68 	bl	80145b4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ce6:	68ba      	ldr	r2, [r7, #8]
 8011ce8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8011cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cec:	88db      	ldrh	r3, [r3, #6]
 8011cee:	b29a      	uxth	r2, r3
 8011cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cf2:	889b      	ldrh	r3, [r3, #4]
 8011cf4:	b29b      	uxth	r3, r3
 8011cf6:	429a      	cmp	r2, r3
 8011cf8:	d010      	beq.n	8011d1c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	623b      	str	r3, [r7, #32]
 8011cfe:	e00d      	b.n	8011d1c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	685b      	ldr	r3, [r3, #4]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d006      	beq.n	8011d16 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8011d08:	4b38      	ldr	r3, [pc, #224]	@ (8011dec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011d0a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8011d0e:	493a      	ldr	r1, [pc, #232]	@ (8011df8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011d10:	4838      	ldr	r0, [pc, #224]	@ (8011df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011d12:	f002 fc4f 	bl	80145b4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	68ba      	ldr	r2, [r7, #8]
 8011d1a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d105      	bne.n	8011d2e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	7f9b      	ldrb	r3, [r3, #30]
 8011d26:	f003 0301 	and.w	r3, r3, #1
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d059      	beq.n	8011de2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8011d2e:	6a3b      	ldr	r3, [r7, #32]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d04f      	beq.n	8011dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	685b      	ldr	r3, [r3, #4]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d006      	beq.n	8011d4a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	685b      	ldr	r3, [r3, #4]
 8011d40:	685b      	ldr	r3, [r3, #4]
 8011d42:	889b      	ldrh	r3, [r3, #4]
 8011d44:	b29b      	uxth	r3, r3
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d002      	beq.n	8011d50 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	623b      	str	r3, [r7, #32]
 8011d4e:	e041      	b.n	8011dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8011d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d52:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8011d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8011d5a:	e012      	b.n	8011d82 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8011d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d5e:	685b      	ldr	r3, [r3, #4]
 8011d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8011d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d64:	88db      	ldrh	r3, [r3, #6]
 8011d66:	b29a      	uxth	r2, r3
 8011d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d6a:	889b      	ldrh	r3, [r3, #4]
 8011d6c:	b29b      	uxth	r3, r3
 8011d6e:	429a      	cmp	r2, r3
 8011d70:	d002      	beq.n	8011d78 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8011d72:	2300      	movs	r3, #0
 8011d74:	623b      	str	r3, [r7, #32]
            break;
 8011d76:	e007      	b.n	8011d88 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8011d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8011d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8011d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d1e9      	bne.n	8011d5c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8011d88:	6a3b      	ldr	r3, [r7, #32]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d022      	beq.n	8011dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	685b      	ldr	r3, [r3, #4]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d106      	bne.n	8011da4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8011d96:	4b15      	ldr	r3, [pc, #84]	@ (8011dec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011d98:	f240 12df 	movw	r2, #479	@ 0x1df
 8011d9c:	4917      	ldr	r1, [pc, #92]	@ (8011dfc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011d9e:	4815      	ldr	r0, [pc, #84]	@ (8011df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011da0:	f002 fc08 	bl	80145b4 <iprintf>
          LWIP_ASSERT("sanity check",
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	685b      	ldr	r3, [r3, #4]
 8011da8:	685b      	ldr	r3, [r3, #4]
 8011daa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011dac:	429a      	cmp	r2, r3
 8011dae:	d106      	bne.n	8011dbe <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8011db0:	4b0e      	ldr	r3, [pc, #56]	@ (8011dec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011db2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8011db6:	4911      	ldr	r1, [pc, #68]	@ (8011dfc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011db8:	480e      	ldr	r0, [pc, #56]	@ (8011df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011dba:	f002 fbfb 	bl	80145b4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8011dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d006      	beq.n	8011dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8011dc6:	4b09      	ldr	r3, [pc, #36]	@ (8011dec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011dc8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8011dcc:	490c      	ldr	r1, [pc, #48]	@ (8011e00 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011dce:	4809      	ldr	r0, [pc, #36]	@ (8011df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011dd0:	f002 fbf0 	bl	80145b4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011dd4:	6a3b      	ldr	r3, [r7, #32]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	bf14      	ite	ne
 8011dda:	2301      	movne	r3, #1
 8011ddc:	2300      	moveq	r3, #0
 8011dde:	b2db      	uxtb	r3, r3
 8011de0:	e000      	b.n	8011de4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011de2:	2300      	movs	r3, #0
}
 8011de4:	4618      	mov	r0, r3
 8011de6:	3730      	adds	r7, #48	@ 0x30
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd80      	pop	{r7, pc}
 8011dec:	0801777c 	.word	0x0801777c
 8011df0:	08017860 	.word	0x08017860
 8011df4:	080177c4 	.word	0x080177c4
 8011df8:	08017880 	.word	0x08017880
 8011dfc:	080178b8 	.word	0x080178b8
 8011e00:	080178c8 	.word	0x080178c8

08011e04 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b08e      	sub	sp, #56	@ 0x38
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	685b      	ldr	r3, [r3, #4]
 8011e10:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8011e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e14:	781b      	ldrb	r3, [r3, #0]
 8011e16:	f003 030f 	and.w	r3, r3, #15
 8011e1a:	b2db      	uxtb	r3, r3
 8011e1c:	009b      	lsls	r3, r3, #2
 8011e1e:	b2db      	uxtb	r3, r3
 8011e20:	2b14      	cmp	r3, #20
 8011e22:	f040 8171 	bne.w	8012108 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8011e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e28:	88db      	ldrh	r3, [r3, #6]
 8011e2a:	b29b      	uxth	r3, r3
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	f7f6 ffad 	bl	8008d8c <lwip_htons>
 8011e32:	4603      	mov	r3, r0
 8011e34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011e38:	b29b      	uxth	r3, r3
 8011e3a:	00db      	lsls	r3, r3, #3
 8011e3c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e40:	885b      	ldrh	r3, [r3, #2]
 8011e42:	b29b      	uxth	r3, r3
 8011e44:	4618      	mov	r0, r3
 8011e46:	f7f6 ffa1 	bl	8008d8c <lwip_htons>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8011e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e50:	781b      	ldrb	r3, [r3, #0]
 8011e52:	f003 030f 	and.w	r3, r3, #15
 8011e56:	b2db      	uxtb	r3, r3
 8011e58:	009b      	lsls	r3, r3, #2
 8011e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8011e5e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011e62:	b29b      	uxth	r3, r3
 8011e64:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011e66:	429a      	cmp	r2, r3
 8011e68:	f0c0 8150 	bcc.w	801210c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8011e6c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011e70:	b29b      	uxth	r3, r3
 8011e72:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011e74:	1ad3      	subs	r3, r2, r3
 8011e76:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8011e78:	6878      	ldr	r0, [r7, #4]
 8011e7a:	f7f8 fc39 	bl	800a6f0 <pbuf_clen>
 8011e7e:	4603      	mov	r3, r0
 8011e80:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011e82:	4b8c      	ldr	r3, [pc, #560]	@ (80120b4 <ip4_reass+0x2b0>)
 8011e84:	881b      	ldrh	r3, [r3, #0]
 8011e86:	461a      	mov	r2, r3
 8011e88:	8c3b      	ldrh	r3, [r7, #32]
 8011e8a:	4413      	add	r3, r2
 8011e8c:	2b0a      	cmp	r3, #10
 8011e8e:	dd10      	ble.n	8011eb2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011e90:	8c3b      	ldrh	r3, [r7, #32]
 8011e92:	4619      	mov	r1, r3
 8011e94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011e96:	f7ff fd81 	bl	801199c <ip_reass_remove_oldest_datagram>
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	f000 8137 	beq.w	8012110 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8011ea2:	4b84      	ldr	r3, [pc, #528]	@ (80120b4 <ip4_reass+0x2b0>)
 8011ea4:	881b      	ldrh	r3, [r3, #0]
 8011ea6:	461a      	mov	r2, r3
 8011ea8:	8c3b      	ldrh	r3, [r7, #32]
 8011eaa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011eac:	2b0a      	cmp	r3, #10
 8011eae:	f300 812f 	bgt.w	8012110 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011eb2:	4b81      	ldr	r3, [pc, #516]	@ (80120b8 <ip4_reass+0x2b4>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8011eb8:	e015      	b.n	8011ee6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8011eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ebc:	695a      	ldr	r2, [r3, #20]
 8011ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ec0:	68db      	ldr	r3, [r3, #12]
 8011ec2:	429a      	cmp	r2, r3
 8011ec4:	d10c      	bne.n	8011ee0 <ip4_reass+0xdc>
 8011ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ec8:	699a      	ldr	r2, [r3, #24]
 8011eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ecc:	691b      	ldr	r3, [r3, #16]
 8011ece:	429a      	cmp	r2, r3
 8011ed0:	d106      	bne.n	8011ee0 <ip4_reass+0xdc>
 8011ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ed4:	899a      	ldrh	r2, [r3, #12]
 8011ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ed8:	889b      	ldrh	r3, [r3, #4]
 8011eda:	b29b      	uxth	r3, r3
 8011edc:	429a      	cmp	r2, r3
 8011ede:	d006      	beq.n	8011eee <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	633b      	str	r3, [r7, #48]	@ 0x30
 8011ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d1e6      	bne.n	8011eba <ip4_reass+0xb6>
 8011eec:	e000      	b.n	8011ef0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8011eee:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8011ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d109      	bne.n	8011f0a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8011ef6:	8c3b      	ldrh	r3, [r7, #32]
 8011ef8:	4619      	mov	r1, r3
 8011efa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011efc:	f7ff fdb0 	bl	8011a60 <ip_reass_enqueue_new_datagram>
 8011f00:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8011f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d11c      	bne.n	8011f42 <ip4_reass+0x13e>
      goto nullreturn;
 8011f08:	e105      	b.n	8012116 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f0c:	88db      	ldrh	r3, [r3, #6]
 8011f0e:	b29b      	uxth	r3, r3
 8011f10:	4618      	mov	r0, r3
 8011f12:	f7f6 ff3b 	bl	8008d8c <lwip_htons>
 8011f16:	4603      	mov	r3, r0
 8011f18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d110      	bne.n	8011f42 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8011f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f22:	89db      	ldrh	r3, [r3, #14]
 8011f24:	4618      	mov	r0, r3
 8011f26:	f7f6 ff31 	bl	8008d8c <lwip_htons>
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d006      	beq.n	8011f42 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8011f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f36:	3308      	adds	r3, #8
 8011f38:	2214      	movs	r2, #20
 8011f3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	f002 fc2a 	bl	8014796 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8011f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f44:	88db      	ldrh	r3, [r3, #6]
 8011f46:	b29b      	uxth	r3, r3
 8011f48:	f003 0320 	and.w	r3, r3, #32
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	bf0c      	ite	eq
 8011f50:	2301      	moveq	r3, #1
 8011f52:	2300      	movne	r3, #0
 8011f54:	b2db      	uxtb	r3, r3
 8011f56:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8011f58:	69fb      	ldr	r3, [r7, #28]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d00e      	beq.n	8011f7c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8011f5e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8011f60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011f62:	4413      	add	r3, r2
 8011f64:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8011f66:	8b7a      	ldrh	r2, [r7, #26]
 8011f68:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011f6a:	429a      	cmp	r2, r3
 8011f6c:	f0c0 80a0 	bcc.w	80120b0 <ip4_reass+0x2ac>
 8011f70:	8b7b      	ldrh	r3, [r7, #26]
 8011f72:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8011f76:	4293      	cmp	r3, r2
 8011f78:	f200 809a 	bhi.w	80120b0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8011f7c:	69fa      	ldr	r2, [r7, #28]
 8011f7e:	6879      	ldr	r1, [r7, #4]
 8011f80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011f82:	f7ff fdd5 	bl	8011b30 <ip_reass_chain_frag_into_datagram_and_validate>
 8011f86:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8011f88:	697b      	ldr	r3, [r7, #20]
 8011f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f8e:	f000 809b 	beq.w	80120c8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8011f92:	4b48      	ldr	r3, [pc, #288]	@ (80120b4 <ip4_reass+0x2b0>)
 8011f94:	881a      	ldrh	r2, [r3, #0]
 8011f96:	8c3b      	ldrh	r3, [r7, #32]
 8011f98:	4413      	add	r3, r2
 8011f9a:	b29a      	uxth	r2, r3
 8011f9c:	4b45      	ldr	r3, [pc, #276]	@ (80120b4 <ip4_reass+0x2b0>)
 8011f9e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8011fa0:	69fb      	ldr	r3, [r7, #28]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d00d      	beq.n	8011fc2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8011fa6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8011fa8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011faa:	4413      	add	r3, r2
 8011fac:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8011fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fb0:	8a7a      	ldrh	r2, [r7, #18]
 8011fb2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8011fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fb6:	7f9b      	ldrb	r3, [r3, #30]
 8011fb8:	f043 0301 	orr.w	r3, r3, #1
 8011fbc:	b2da      	uxtb	r2, r3
 8011fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fc0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8011fc2:	697b      	ldr	r3, [r7, #20]
 8011fc4:	2b01      	cmp	r3, #1
 8011fc6:	d171      	bne.n	80120ac <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8011fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fca:	8b9b      	ldrh	r3, [r3, #28]
 8011fcc:	3314      	adds	r3, #20
 8011fce:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8011fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fd2:	685b      	ldr	r3, [r3, #4]
 8011fd4:	685b      	ldr	r3, [r3, #4]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8011fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fdc:	685b      	ldr	r3, [r3, #4]
 8011fde:	685b      	ldr	r3, [r3, #4]
 8011fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8011fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fe4:	3308      	adds	r3, #8
 8011fe6:	2214      	movs	r2, #20
 8011fe8:	4619      	mov	r1, r3
 8011fea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011fec:	f002 fbd3 	bl	8014796 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8011ff0:	8a3b      	ldrh	r3, [r7, #16]
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f7f6 feca 	bl	8008d8c <lwip_htons>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	461a      	mov	r2, r3
 8011ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ffe:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012002:	2200      	movs	r2, #0
 8012004:	719a      	strb	r2, [r3, #6]
 8012006:	2200      	movs	r2, #0
 8012008:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801200a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801200c:	2200      	movs	r2, #0
 801200e:	729a      	strb	r2, [r3, #10]
 8012010:	2200      	movs	r2, #0
 8012012:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012016:	685b      	ldr	r3, [r3, #4]
 8012018:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801201a:	e00d      	b.n	8012038 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801201c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801201e:	685b      	ldr	r3, [r3, #4]
 8012020:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8012022:	2114      	movs	r1, #20
 8012024:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8012026:	f7f8 fa4f 	bl	800a4c8 <pbuf_remove_header>
      pbuf_cat(p, r);
 801202a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801202c:	6878      	ldr	r0, [r7, #4]
 801202e:	f7f8 fb9f 	bl	800a770 <pbuf_cat>
      r = iprh->next_pbuf;
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8012038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801203a:	2b00      	cmp	r3, #0
 801203c:	d1ee      	bne.n	801201c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801203e:	4b1e      	ldr	r3, [pc, #120]	@ (80120b8 <ip4_reass+0x2b4>)
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012044:	429a      	cmp	r2, r3
 8012046:	d102      	bne.n	801204e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8012048:	2300      	movs	r3, #0
 801204a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801204c:	e010      	b.n	8012070 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801204e:	4b1a      	ldr	r3, [pc, #104]	@ (80120b8 <ip4_reass+0x2b4>)
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012054:	e007      	b.n	8012066 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8012056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801205c:	429a      	cmp	r2, r3
 801205e:	d006      	beq.n	801206e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012068:	2b00      	cmp	r3, #0
 801206a:	d1f4      	bne.n	8012056 <ip4_reass+0x252>
 801206c:	e000      	b.n	8012070 <ip4_reass+0x26c>
          break;
 801206e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012070:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012072:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012074:	f7ff fd2e 	bl	8011ad4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012078:	6878      	ldr	r0, [r7, #4]
 801207a:	f7f8 fb39 	bl	800a6f0 <pbuf_clen>
 801207e:	4603      	mov	r3, r0
 8012080:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012082:	4b0c      	ldr	r3, [pc, #48]	@ (80120b4 <ip4_reass+0x2b0>)
 8012084:	881b      	ldrh	r3, [r3, #0]
 8012086:	8c3a      	ldrh	r2, [r7, #32]
 8012088:	429a      	cmp	r2, r3
 801208a:	d906      	bls.n	801209a <ip4_reass+0x296>
 801208c:	4b0b      	ldr	r3, [pc, #44]	@ (80120bc <ip4_reass+0x2b8>)
 801208e:	f240 229b 	movw	r2, #667	@ 0x29b
 8012092:	490b      	ldr	r1, [pc, #44]	@ (80120c0 <ip4_reass+0x2bc>)
 8012094:	480b      	ldr	r0, [pc, #44]	@ (80120c4 <ip4_reass+0x2c0>)
 8012096:	f002 fa8d 	bl	80145b4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801209a:	4b06      	ldr	r3, [pc, #24]	@ (80120b4 <ip4_reass+0x2b0>)
 801209c:	881a      	ldrh	r2, [r3, #0]
 801209e:	8c3b      	ldrh	r3, [r7, #32]
 80120a0:	1ad3      	subs	r3, r2, r3
 80120a2:	b29a      	uxth	r2, r3
 80120a4:	4b03      	ldr	r3, [pc, #12]	@ (80120b4 <ip4_reass+0x2b0>)
 80120a6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	e038      	b.n	801211e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80120ac:	2300      	movs	r3, #0
 80120ae:	e036      	b.n	801211e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80120b0:	bf00      	nop
 80120b2:	e00a      	b.n	80120ca <ip4_reass+0x2c6>
 80120b4:	2000e134 	.word	0x2000e134
 80120b8:	2000e130 	.word	0x2000e130
 80120bc:	0801777c 	.word	0x0801777c
 80120c0:	080178ec 	.word	0x080178ec
 80120c4:	080177c4 	.word	0x080177c4
    goto nullreturn_ipr;
 80120c8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80120ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d106      	bne.n	80120de <ip4_reass+0x2da>
 80120d0:	4b15      	ldr	r3, [pc, #84]	@ (8012128 <ip4_reass+0x324>)
 80120d2:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80120d6:	4915      	ldr	r1, [pc, #84]	@ (801212c <ip4_reass+0x328>)
 80120d8:	4815      	ldr	r0, [pc, #84]	@ (8012130 <ip4_reass+0x32c>)
 80120da:	f002 fa6b 	bl	80145b4 <iprintf>
  if (ipr->p == NULL) {
 80120de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120e0:	685b      	ldr	r3, [r3, #4]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d116      	bne.n	8012114 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80120e6:	4b13      	ldr	r3, [pc, #76]	@ (8012134 <ip4_reass+0x330>)
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80120ec:	429a      	cmp	r2, r3
 80120ee:	d006      	beq.n	80120fe <ip4_reass+0x2fa>
 80120f0:	4b0d      	ldr	r3, [pc, #52]	@ (8012128 <ip4_reass+0x324>)
 80120f2:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80120f6:	4910      	ldr	r1, [pc, #64]	@ (8012138 <ip4_reass+0x334>)
 80120f8:	480d      	ldr	r0, [pc, #52]	@ (8012130 <ip4_reass+0x32c>)
 80120fa:	f002 fa5b 	bl	80145b4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80120fe:	2100      	movs	r1, #0
 8012100:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012102:	f7ff fce7 	bl	8011ad4 <ip_reass_dequeue_datagram>
 8012106:	e006      	b.n	8012116 <ip4_reass+0x312>
    goto nullreturn;
 8012108:	bf00      	nop
 801210a:	e004      	b.n	8012116 <ip4_reass+0x312>
    goto nullreturn;
 801210c:	bf00      	nop
 801210e:	e002      	b.n	8012116 <ip4_reass+0x312>
      goto nullreturn;
 8012110:	bf00      	nop
 8012112:	e000      	b.n	8012116 <ip4_reass+0x312>
  }

nullreturn:
 8012114:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012116:	6878      	ldr	r0, [r7, #4]
 8012118:	f7f8 fa5c 	bl	800a5d4 <pbuf_free>
  return NULL;
 801211c:	2300      	movs	r3, #0
}
 801211e:	4618      	mov	r0, r3
 8012120:	3738      	adds	r7, #56	@ 0x38
 8012122:	46bd      	mov	sp, r7
 8012124:	bd80      	pop	{r7, pc}
 8012126:	bf00      	nop
 8012128:	0801777c 	.word	0x0801777c
 801212c:	08017908 	.word	0x08017908
 8012130:	080177c4 	.word	0x080177c4
 8012134:	2000e130 	.word	0x2000e130
 8012138:	08017914 	.word	0x08017914

0801213c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801213c:	b580      	push	{r7, lr}
 801213e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012140:	2004      	movs	r0, #4
 8012142:	f7f7 faf9 	bl	8009738 <memp_malloc>
 8012146:	4603      	mov	r3, r0
}
 8012148:	4618      	mov	r0, r3
 801214a:	bd80      	pop	{r7, pc}

0801214c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b082      	sub	sp, #8
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d106      	bne.n	8012168 <ip_frag_free_pbuf_custom_ref+0x1c>
 801215a:	4b07      	ldr	r3, [pc, #28]	@ (8012178 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801215c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8012160:	4906      	ldr	r1, [pc, #24]	@ (801217c <ip_frag_free_pbuf_custom_ref+0x30>)
 8012162:	4807      	ldr	r0, [pc, #28]	@ (8012180 <ip_frag_free_pbuf_custom_ref+0x34>)
 8012164:	f002 fa26 	bl	80145b4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012168:	6879      	ldr	r1, [r7, #4]
 801216a:	2004      	movs	r0, #4
 801216c:	f7f7 fb5a 	bl	8009824 <memp_free>
}
 8012170:	bf00      	nop
 8012172:	3708      	adds	r7, #8
 8012174:	46bd      	mov	sp, r7
 8012176:	bd80      	pop	{r7, pc}
 8012178:	0801777c 	.word	0x0801777c
 801217c:	08017934 	.word	0x08017934
 8012180:	080177c4 	.word	0x080177c4

08012184 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012184:	b580      	push	{r7, lr}
 8012186:	b084      	sub	sp, #16
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d106      	bne.n	80121a4 <ipfrag_free_pbuf_custom+0x20>
 8012196:	4b11      	ldr	r3, [pc, #68]	@ (80121dc <ipfrag_free_pbuf_custom+0x58>)
 8012198:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801219c:	4910      	ldr	r1, [pc, #64]	@ (80121e0 <ipfrag_free_pbuf_custom+0x5c>)
 801219e:	4811      	ldr	r0, [pc, #68]	@ (80121e4 <ipfrag_free_pbuf_custom+0x60>)
 80121a0:	f002 fa08 	bl	80145b4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80121a4:	68fa      	ldr	r2, [r7, #12]
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	429a      	cmp	r2, r3
 80121aa:	d006      	beq.n	80121ba <ipfrag_free_pbuf_custom+0x36>
 80121ac:	4b0b      	ldr	r3, [pc, #44]	@ (80121dc <ipfrag_free_pbuf_custom+0x58>)
 80121ae:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80121b2:	490d      	ldr	r1, [pc, #52]	@ (80121e8 <ipfrag_free_pbuf_custom+0x64>)
 80121b4:	480b      	ldr	r0, [pc, #44]	@ (80121e4 <ipfrag_free_pbuf_custom+0x60>)
 80121b6:	f002 f9fd 	bl	80145b4 <iprintf>
  if (pcr->original != NULL) {
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	695b      	ldr	r3, [r3, #20]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d004      	beq.n	80121cc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	695b      	ldr	r3, [r3, #20]
 80121c6:	4618      	mov	r0, r3
 80121c8:	f7f8 fa04 	bl	800a5d4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80121cc:	68f8      	ldr	r0, [r7, #12]
 80121ce:	f7ff ffbd 	bl	801214c <ip_frag_free_pbuf_custom_ref>
}
 80121d2:	bf00      	nop
 80121d4:	3710      	adds	r7, #16
 80121d6:	46bd      	mov	sp, r7
 80121d8:	bd80      	pop	{r7, pc}
 80121da:	bf00      	nop
 80121dc:	0801777c 	.word	0x0801777c
 80121e0:	08017940 	.word	0x08017940
 80121e4:	080177c4 	.word	0x080177c4
 80121e8:	0801794c 	.word	0x0801794c

080121ec <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80121ec:	b580      	push	{r7, lr}
 80121ee:	b094      	sub	sp, #80	@ 0x50
 80121f0:	af02      	add	r7, sp, #8
 80121f2:	60f8      	str	r0, [r7, #12]
 80121f4:	60b9      	str	r1, [r7, #8]
 80121f6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80121f8:	2300      	movs	r3, #0
 80121fa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80121fe:	68bb      	ldr	r3, [r7, #8]
 8012200:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012202:	3b14      	subs	r3, #20
 8012204:	2b00      	cmp	r3, #0
 8012206:	da00      	bge.n	801220a <ip4_frag+0x1e>
 8012208:	3307      	adds	r3, #7
 801220a:	10db      	asrs	r3, r3, #3
 801220c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801220e:	2314      	movs	r3, #20
 8012210:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	685b      	ldr	r3, [r3, #4]
 8012216:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8012218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801221a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801221c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801221e:	781b      	ldrb	r3, [r3, #0]
 8012220:	f003 030f 	and.w	r3, r3, #15
 8012224:	b2db      	uxtb	r3, r3
 8012226:	009b      	lsls	r3, r3, #2
 8012228:	b2db      	uxtb	r3, r3
 801222a:	2b14      	cmp	r3, #20
 801222c:	d002      	beq.n	8012234 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801222e:	f06f 0305 	mvn.w	r3, #5
 8012232:	e110      	b.n	8012456 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	895b      	ldrh	r3, [r3, #10]
 8012238:	2b13      	cmp	r3, #19
 801223a:	d809      	bhi.n	8012250 <ip4_frag+0x64>
 801223c:	4b88      	ldr	r3, [pc, #544]	@ (8012460 <ip4_frag+0x274>)
 801223e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8012242:	4988      	ldr	r1, [pc, #544]	@ (8012464 <ip4_frag+0x278>)
 8012244:	4888      	ldr	r0, [pc, #544]	@ (8012468 <ip4_frag+0x27c>)
 8012246:	f002 f9b5 	bl	80145b4 <iprintf>
 801224a:	f06f 0305 	mvn.w	r3, #5
 801224e:	e102      	b.n	8012456 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012252:	88db      	ldrh	r3, [r3, #6]
 8012254:	b29b      	uxth	r3, r3
 8012256:	4618      	mov	r0, r3
 8012258:	f7f6 fd98 	bl	8008d8c <lwip_htons>
 801225c:	4603      	mov	r3, r0
 801225e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8012260:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012262:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012266:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801226a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801226c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8012270:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	891b      	ldrh	r3, [r3, #8]
 8012276:	3b14      	subs	r3, #20
 8012278:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801227c:	e0e1      	b.n	8012442 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801227e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012280:	00db      	lsls	r3, r3, #3
 8012282:	b29b      	uxth	r3, r3
 8012284:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012288:	4293      	cmp	r3, r2
 801228a:	bf28      	it	cs
 801228c:	4613      	movcs	r3, r2
 801228e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012290:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012294:	2114      	movs	r1, #20
 8012296:	200e      	movs	r0, #14
 8012298:	f7f7 feb8 	bl	800a00c <pbuf_alloc>
 801229c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801229e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	f000 80d5 	beq.w	8012450 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80122a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122a8:	895b      	ldrh	r3, [r3, #10]
 80122aa:	2b13      	cmp	r3, #19
 80122ac:	d806      	bhi.n	80122bc <ip4_frag+0xd0>
 80122ae:	4b6c      	ldr	r3, [pc, #432]	@ (8012460 <ip4_frag+0x274>)
 80122b0:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80122b4:	496d      	ldr	r1, [pc, #436]	@ (801246c <ip4_frag+0x280>)
 80122b6:	486c      	ldr	r0, [pc, #432]	@ (8012468 <ip4_frag+0x27c>)
 80122b8:	f002 f97c 	bl	80145b4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80122bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122be:	685b      	ldr	r3, [r3, #4]
 80122c0:	2214      	movs	r2, #20
 80122c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80122c4:	4618      	mov	r0, r3
 80122c6:	f002 fa66 	bl	8014796 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80122ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122cc:	685b      	ldr	r3, [r3, #4]
 80122ce:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80122d0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80122d2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80122d6:	e064      	b.n	80123a2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	895a      	ldrh	r2, [r3, #10]
 80122dc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80122de:	1ad3      	subs	r3, r2, r3
 80122e0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	895b      	ldrh	r3, [r3, #10]
 80122e6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80122e8:	429a      	cmp	r2, r3
 80122ea:	d906      	bls.n	80122fa <ip4_frag+0x10e>
 80122ec:	4b5c      	ldr	r3, [pc, #368]	@ (8012460 <ip4_frag+0x274>)
 80122ee:	f240 322d 	movw	r2, #813	@ 0x32d
 80122f2:	495f      	ldr	r1, [pc, #380]	@ (8012470 <ip4_frag+0x284>)
 80122f4:	485c      	ldr	r0, [pc, #368]	@ (8012468 <ip4_frag+0x27c>)
 80122f6:	f002 f95d 	bl	80145b4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80122fa:	8bfa      	ldrh	r2, [r7, #30]
 80122fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8012300:	4293      	cmp	r3, r2
 8012302:	bf28      	it	cs
 8012304:	4613      	movcs	r3, r2
 8012306:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801230a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801230e:	2b00      	cmp	r3, #0
 8012310:	d105      	bne.n	801231e <ip4_frag+0x132>
        poff = 0;
 8012312:	2300      	movs	r3, #0
 8012314:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	60fb      	str	r3, [r7, #12]
        continue;
 801231c:	e041      	b.n	80123a2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801231e:	f7ff ff0d 	bl	801213c <ip_frag_alloc_pbuf_custom_ref>
 8012322:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8012324:	69bb      	ldr	r3, [r7, #24]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d103      	bne.n	8012332 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801232a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801232c:	f7f8 f952 	bl	800a5d4 <pbuf_free>
        goto memerr;
 8012330:	e08f      	b.n	8012452 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012332:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012338:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801233a:	4413      	add	r3, r2
 801233c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8012340:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8012344:	9201      	str	r2, [sp, #4]
 8012346:	9300      	str	r3, [sp, #0]
 8012348:	4603      	mov	r3, r0
 801234a:	2241      	movs	r2, #65	@ 0x41
 801234c:	2000      	movs	r0, #0
 801234e:	f7f7 ff87 	bl	800a260 <pbuf_alloced_custom>
 8012352:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012354:	697b      	ldr	r3, [r7, #20]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d106      	bne.n	8012368 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801235a:	69b8      	ldr	r0, [r7, #24]
 801235c:	f7ff fef6 	bl	801214c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012360:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012362:	f7f8 f937 	bl	800a5d4 <pbuf_free>
        goto memerr;
 8012366:	e074      	b.n	8012452 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012368:	68f8      	ldr	r0, [r7, #12]
 801236a:	f7f8 f9d9 	bl	800a720 <pbuf_ref>
      pcr->original = p;
 801236e:	69bb      	ldr	r3, [r7, #24]
 8012370:	68fa      	ldr	r2, [r7, #12]
 8012372:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012374:	69bb      	ldr	r3, [r7, #24]
 8012376:	4a3f      	ldr	r2, [pc, #252]	@ (8012474 <ip4_frag+0x288>)
 8012378:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801237a:	6979      	ldr	r1, [r7, #20]
 801237c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801237e:	f7f8 f9f7 	bl	800a770 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012382:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8012386:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801238a:	1ad3      	subs	r3, r2, r3
 801238c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8012390:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8012394:	2b00      	cmp	r3, #0
 8012396:	d004      	beq.n	80123a2 <ip4_frag+0x1b6>
        poff = 0;
 8012398:	2300      	movs	r3, #0
 801239a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80123a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d196      	bne.n	80122d8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80123aa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80123ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80123b0:	4413      	add	r3, r2
 80123b2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80123b4:	68bb      	ldr	r3, [r7, #8]
 80123b6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80123b8:	f1a3 0213 	sub.w	r2, r3, #19
 80123bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80123c0:	429a      	cmp	r2, r3
 80123c2:	bfcc      	ite	gt
 80123c4:	2301      	movgt	r3, #1
 80123c6:	2300      	movle	r3, #0
 80123c8:	b2db      	uxtb	r3, r3
 80123ca:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80123cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80123d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80123d4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80123d6:	6a3b      	ldr	r3, [r7, #32]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d002      	beq.n	80123e2 <ip4_frag+0x1f6>
 80123dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d003      	beq.n	80123ea <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80123e2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80123e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80123e8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80123ea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80123ec:	4618      	mov	r0, r3
 80123ee:	f7f6 fccd 	bl	8008d8c <lwip_htons>
 80123f2:	4603      	mov	r3, r0
 80123f4:	461a      	mov	r2, r3
 80123f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123f8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80123fa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80123fc:	3314      	adds	r3, #20
 80123fe:	b29b      	uxth	r3, r3
 8012400:	4618      	mov	r0, r3
 8012402:	f7f6 fcc3 	bl	8008d8c <lwip_htons>
 8012406:	4603      	mov	r3, r0
 8012408:	461a      	mov	r2, r3
 801240a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801240c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801240e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012410:	2200      	movs	r2, #0
 8012412:	729a      	strb	r2, [r3, #10]
 8012414:	2200      	movs	r2, #0
 8012416:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012418:	68bb      	ldr	r3, [r7, #8]
 801241a:	695b      	ldr	r3, [r3, #20]
 801241c:	687a      	ldr	r2, [r7, #4]
 801241e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012420:	68b8      	ldr	r0, [r7, #8]
 8012422:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012424:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012426:	f7f8 f8d5 	bl	800a5d4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801242a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801242e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012430:	1ad3      	subs	r3, r2, r3
 8012432:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8012436:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801243a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801243c:	4413      	add	r3, r2
 801243e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8012442:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012446:	2b00      	cmp	r3, #0
 8012448:	f47f af19 	bne.w	801227e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801244c:	2300      	movs	r3, #0
 801244e:	e002      	b.n	8012456 <ip4_frag+0x26a>
      goto memerr;
 8012450:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012452:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012456:	4618      	mov	r0, r3
 8012458:	3748      	adds	r7, #72	@ 0x48
 801245a:	46bd      	mov	sp, r7
 801245c:	bd80      	pop	{r7, pc}
 801245e:	bf00      	nop
 8012460:	0801777c 	.word	0x0801777c
 8012464:	08017958 	.word	0x08017958
 8012468:	080177c4 	.word	0x080177c4
 801246c:	08017974 	.word	0x08017974
 8012470:	08017994 	.word	0x08017994
 8012474:	08012185 	.word	0x08012185

08012478 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b086      	sub	sp, #24
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
 8012480:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012482:	230e      	movs	r3, #14
 8012484:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	895b      	ldrh	r3, [r3, #10]
 801248a:	2b0e      	cmp	r3, #14
 801248c:	d96e      	bls.n	801256c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	7bdb      	ldrb	r3, [r3, #15]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d106      	bne.n	80124a4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012496:	683b      	ldr	r3, [r7, #0]
 8012498:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801249c:	3301      	adds	r3, #1
 801249e:	b2da      	uxtb	r2, r3
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	685b      	ldr	r3, [r3, #4]
 80124a8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80124aa:	693b      	ldr	r3, [r7, #16]
 80124ac:	7b1a      	ldrb	r2, [r3, #12]
 80124ae:	7b5b      	ldrb	r3, [r3, #13]
 80124b0:	021b      	lsls	r3, r3, #8
 80124b2:	4313      	orrs	r3, r2
 80124b4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80124b6:	693b      	ldr	r3, [r7, #16]
 80124b8:	781b      	ldrb	r3, [r3, #0]
 80124ba:	f003 0301 	and.w	r3, r3, #1
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d023      	beq.n	801250a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80124c2:	693b      	ldr	r3, [r7, #16]
 80124c4:	781b      	ldrb	r3, [r3, #0]
 80124c6:	2b01      	cmp	r3, #1
 80124c8:	d10f      	bne.n	80124ea <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80124ca:	693b      	ldr	r3, [r7, #16]
 80124cc:	785b      	ldrb	r3, [r3, #1]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d11b      	bne.n	801250a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80124d2:	693b      	ldr	r3, [r7, #16]
 80124d4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80124d6:	2b5e      	cmp	r3, #94	@ 0x5e
 80124d8:	d117      	bne.n	801250a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	7b5b      	ldrb	r3, [r3, #13]
 80124de:	f043 0310 	orr.w	r3, r3, #16
 80124e2:	b2da      	uxtb	r2, r3
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	735a      	strb	r2, [r3, #13]
 80124e8:	e00f      	b.n	801250a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80124ea:	693b      	ldr	r3, [r7, #16]
 80124ec:	2206      	movs	r2, #6
 80124ee:	4928      	ldr	r1, [pc, #160]	@ (8012590 <ethernet_input+0x118>)
 80124f0:	4618      	mov	r0, r3
 80124f2:	f002 f8b4 	bl	801465e <memcmp>
 80124f6:	4603      	mov	r3, r0
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d106      	bne.n	801250a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	7b5b      	ldrb	r3, [r3, #13]
 8012500:	f043 0308 	orr.w	r3, r3, #8
 8012504:	b2da      	uxtb	r2, r3
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801250a:	89fb      	ldrh	r3, [r7, #14]
 801250c:	2b08      	cmp	r3, #8
 801250e:	d003      	beq.n	8012518 <ethernet_input+0xa0>
 8012510:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8012514:	d014      	beq.n	8012540 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012516:	e032      	b.n	801257e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012518:	683b      	ldr	r3, [r7, #0]
 801251a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801251e:	f003 0308 	and.w	r3, r3, #8
 8012522:	2b00      	cmp	r3, #0
 8012524:	d024      	beq.n	8012570 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012526:	8afb      	ldrh	r3, [r7, #22]
 8012528:	4619      	mov	r1, r3
 801252a:	6878      	ldr	r0, [r7, #4]
 801252c:	f7f7 ffcc 	bl	800a4c8 <pbuf_remove_header>
 8012530:	4603      	mov	r3, r0
 8012532:	2b00      	cmp	r3, #0
 8012534:	d11e      	bne.n	8012574 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012536:	6839      	ldr	r1, [r7, #0]
 8012538:	6878      	ldr	r0, [r7, #4]
 801253a:	f7fe ff2b 	bl	8011394 <ip4_input>
      break;
 801253e:	e013      	b.n	8012568 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012540:	683b      	ldr	r3, [r7, #0]
 8012542:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012546:	f003 0308 	and.w	r3, r3, #8
 801254a:	2b00      	cmp	r3, #0
 801254c:	d014      	beq.n	8012578 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801254e:	8afb      	ldrh	r3, [r7, #22]
 8012550:	4619      	mov	r1, r3
 8012552:	6878      	ldr	r0, [r7, #4]
 8012554:	f7f7 ffb8 	bl	800a4c8 <pbuf_remove_header>
 8012558:	4603      	mov	r3, r0
 801255a:	2b00      	cmp	r3, #0
 801255c:	d10e      	bne.n	801257c <ethernet_input+0x104>
        etharp_input(p, netif);
 801255e:	6839      	ldr	r1, [r7, #0]
 8012560:	6878      	ldr	r0, [r7, #4]
 8012562:	f7fe f8cb 	bl	80106fc <etharp_input>
      break;
 8012566:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012568:	2300      	movs	r3, #0
 801256a:	e00c      	b.n	8012586 <ethernet_input+0x10e>
    goto free_and_return;
 801256c:	bf00      	nop
 801256e:	e006      	b.n	801257e <ethernet_input+0x106>
        goto free_and_return;
 8012570:	bf00      	nop
 8012572:	e004      	b.n	801257e <ethernet_input+0x106>
        goto free_and_return;
 8012574:	bf00      	nop
 8012576:	e002      	b.n	801257e <ethernet_input+0x106>
        goto free_and_return;
 8012578:	bf00      	nop
 801257a:	e000      	b.n	801257e <ethernet_input+0x106>
        goto free_and_return;
 801257c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801257e:	6878      	ldr	r0, [r7, #4]
 8012580:	f7f8 f828 	bl	800a5d4 <pbuf_free>
  return ERR_OK;
 8012584:	2300      	movs	r3, #0
}
 8012586:	4618      	mov	r0, r3
 8012588:	3718      	adds	r7, #24
 801258a:	46bd      	mov	sp, r7
 801258c:	bd80      	pop	{r7, pc}
 801258e:	bf00      	nop
 8012590:	08017bd4 	.word	0x08017bd4

08012594 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012594:	b580      	push	{r7, lr}
 8012596:	b086      	sub	sp, #24
 8012598:	af00      	add	r7, sp, #0
 801259a:	60f8      	str	r0, [r7, #12]
 801259c:	60b9      	str	r1, [r7, #8]
 801259e:	607a      	str	r2, [r7, #4]
 80125a0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80125a2:	8c3b      	ldrh	r3, [r7, #32]
 80125a4:	4618      	mov	r0, r3
 80125a6:	f7f6 fbf1 	bl	8008d8c <lwip_htons>
 80125aa:	4603      	mov	r3, r0
 80125ac:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80125ae:	210e      	movs	r1, #14
 80125b0:	68b8      	ldr	r0, [r7, #8]
 80125b2:	f7f7 ff79 	bl	800a4a8 <pbuf_add_header>
 80125b6:	4603      	mov	r3, r0
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d125      	bne.n	8012608 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80125bc:	68bb      	ldr	r3, [r7, #8]
 80125be:	685b      	ldr	r3, [r3, #4]
 80125c0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80125c2:	693b      	ldr	r3, [r7, #16]
 80125c4:	8afa      	ldrh	r2, [r7, #22]
 80125c6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80125c8:	693b      	ldr	r3, [r7, #16]
 80125ca:	2206      	movs	r2, #6
 80125cc:	6839      	ldr	r1, [r7, #0]
 80125ce:	4618      	mov	r0, r3
 80125d0:	f002 f8e1 	bl	8014796 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80125d4:	693b      	ldr	r3, [r7, #16]
 80125d6:	3306      	adds	r3, #6
 80125d8:	2206      	movs	r2, #6
 80125da:	6879      	ldr	r1, [r7, #4]
 80125dc:	4618      	mov	r0, r3
 80125de:	f002 f8da 	bl	8014796 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80125e8:	2b06      	cmp	r3, #6
 80125ea:	d006      	beq.n	80125fa <ethernet_output+0x66>
 80125ec:	4b0a      	ldr	r3, [pc, #40]	@ (8012618 <ethernet_output+0x84>)
 80125ee:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80125f2:	490a      	ldr	r1, [pc, #40]	@ (801261c <ethernet_output+0x88>)
 80125f4:	480a      	ldr	r0, [pc, #40]	@ (8012620 <ethernet_output+0x8c>)
 80125f6:	f001 ffdd 	bl	80145b4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	699b      	ldr	r3, [r3, #24]
 80125fe:	68b9      	ldr	r1, [r7, #8]
 8012600:	68f8      	ldr	r0, [r7, #12]
 8012602:	4798      	blx	r3
 8012604:	4603      	mov	r3, r0
 8012606:	e002      	b.n	801260e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012608:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801260a:	f06f 0301 	mvn.w	r3, #1
}
 801260e:	4618      	mov	r0, r3
 8012610:	3718      	adds	r7, #24
 8012612:	46bd      	mov	sp, r7
 8012614:	bd80      	pop	{r7, pc}
 8012616:	bf00      	nop
 8012618:	080179a4 	.word	0x080179a4
 801261c:	080179dc 	.word	0x080179dc
 8012620:	08017a10 	.word	0x08017a10

08012624 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b082      	sub	sp, #8
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
 801262c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801262e:	683b      	ldr	r3, [r7, #0]
 8012630:	2200      	movs	r2, #0
 8012632:	2104      	movs	r1, #4
 8012634:	4618      	mov	r0, r3
 8012636:	f7f2 ff43 	bl	80054c0 <osMessageQueueNew>
 801263a:	4602      	mov	r2, r0
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d102      	bne.n	801264e <sys_mbox_new+0x2a>
    return ERR_MEM;
 8012648:	f04f 33ff 	mov.w	r3, #4294967295
 801264c:	e000      	b.n	8012650 <sys_mbox_new+0x2c>

  return ERR_OK;
 801264e:	2300      	movs	r3, #0
}
 8012650:	4618      	mov	r0, r3
 8012652:	3708      	adds	r7, #8
 8012654:	46bd      	mov	sp, r7
 8012656:	bd80      	pop	{r7, pc}

08012658 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8012658:	b580      	push	{r7, lr}
 801265a:	b084      	sub	sp, #16
 801265c:	af00      	add	r7, sp, #0
 801265e:	6078      	str	r0, [r7, #4]
 8012660:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	6818      	ldr	r0, [r3, #0]
 8012666:	4639      	mov	r1, r7
 8012668:	2300      	movs	r3, #0
 801266a:	2200      	movs	r2, #0
 801266c:	f7f2 ff9c 	bl	80055a8 <osMessageQueuePut>
 8012670:	4603      	mov	r3, r0
 8012672:	2b00      	cmp	r3, #0
 8012674:	d102      	bne.n	801267c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8012676:	2300      	movs	r3, #0
 8012678:	73fb      	strb	r3, [r7, #15]
 801267a:	e001      	b.n	8012680 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801267c:	23ff      	movs	r3, #255	@ 0xff
 801267e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8012680:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012684:	4618      	mov	r0, r3
 8012686:	3710      	adds	r7, #16
 8012688:	46bd      	mov	sp, r7
 801268a:	bd80      	pop	{r7, pc}

0801268c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801268c:	b580      	push	{r7, lr}
 801268e:	b086      	sub	sp, #24
 8012690:	af00      	add	r7, sp, #0
 8012692:	60f8      	str	r0, [r7, #12]
 8012694:	60b9      	str	r1, [r7, #8]
 8012696:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8012698:	f7f2 fc22 	bl	8004ee0 <osKernelGetTickCount>
 801269c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d013      	beq.n	80126cc <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	6818      	ldr	r0, [r3, #0]
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	2200      	movs	r2, #0
 80126ac:	68b9      	ldr	r1, [r7, #8]
 80126ae:	f7f2 ffdb 	bl	8005668 <osMessageQueueGet>
 80126b2:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80126b4:	693b      	ldr	r3, [r7, #16]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d105      	bne.n	80126c6 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80126ba:	f7f2 fc11 	bl	8004ee0 <osKernelGetTickCount>
 80126be:	4602      	mov	r2, r0
 80126c0:	697b      	ldr	r3, [r7, #20]
 80126c2:	1ad3      	subs	r3, r2, r3
 80126c4:	e00f      	b.n	80126e6 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80126c6:	f04f 33ff 	mov.w	r3, #4294967295
 80126ca:	e00c      	b.n	80126e6 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	6818      	ldr	r0, [r3, #0]
 80126d0:	f04f 33ff 	mov.w	r3, #4294967295
 80126d4:	2200      	movs	r2, #0
 80126d6:	68b9      	ldr	r1, [r7, #8]
 80126d8:	f7f2 ffc6 	bl	8005668 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80126dc:	f7f2 fc00 	bl	8004ee0 <osKernelGetTickCount>
 80126e0:	4602      	mov	r2, r0
 80126e2:	697b      	ldr	r3, [r7, #20]
 80126e4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80126e6:	4618      	mov	r0, r3
 80126e8:	3718      	adds	r7, #24
 80126ea:	46bd      	mov	sp, r7
 80126ec:	bd80      	pop	{r7, pc}

080126ee <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80126ee:	b480      	push	{r7}
 80126f0:	b083      	sub	sp, #12
 80126f2:	af00      	add	r7, sp, #0
 80126f4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d101      	bne.n	8012702 <sys_mbox_valid+0x14>
    return 0;
 80126fe:	2300      	movs	r3, #0
 8012700:	e000      	b.n	8012704 <sys_mbox_valid+0x16>
  else
    return 1;
 8012702:	2301      	movs	r3, #1
}
 8012704:	4618      	mov	r0, r3
 8012706:	370c      	adds	r7, #12
 8012708:	46bd      	mov	sp, r7
 801270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801270e:	4770      	bx	lr

08012710 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8012710:	b580      	push	{r7, lr}
 8012712:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8012714:	2000      	movs	r0, #0
 8012716:	f7f2 fca5 	bl	8005064 <osMutexNew>
 801271a:	4603      	mov	r3, r0
 801271c:	4a01      	ldr	r2, [pc, #4]	@ (8012724 <sys_init+0x14>)
 801271e:	6013      	str	r3, [r2, #0]
#endif
}
 8012720:	bf00      	nop
 8012722:	bd80      	pop	{r7, pc}
 8012724:	2000e13c 	.word	0x2000e13c

08012728 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8012728:	b580      	push	{r7, lr}
 801272a:	b082      	sub	sp, #8
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8012730:	2000      	movs	r0, #0
 8012732:	f7f2 fc97 	bl	8005064 <osMutexNew>
 8012736:	4602      	mov	r2, r0
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d102      	bne.n	801274a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8012744:	f04f 33ff 	mov.w	r3, #4294967295
 8012748:	e000      	b.n	801274c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801274a:	2300      	movs	r3, #0
}
 801274c:	4618      	mov	r0, r3
 801274e:	3708      	adds	r7, #8
 8012750:	46bd      	mov	sp, r7
 8012752:	bd80      	pop	{r7, pc}

08012754 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8012754:	b580      	push	{r7, lr}
 8012756:	b082      	sub	sp, #8
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	f04f 31ff 	mov.w	r1, #4294967295
 8012764:	4618      	mov	r0, r3
 8012766:	f7f2 fd03 	bl	8005170 <osMutexAcquire>
#endif
}
 801276a:	bf00      	nop
 801276c:	3708      	adds	r7, #8
 801276e:	46bd      	mov	sp, r7
 8012770:	bd80      	pop	{r7, pc}

08012772 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8012772:	b580      	push	{r7, lr}
 8012774:	b082      	sub	sp, #8
 8012776:	af00      	add	r7, sp, #0
 8012778:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	4618      	mov	r0, r3
 8012780:	f7f2 fd41 	bl	8005206 <osMutexRelease>
}
 8012784:	bf00      	nop
 8012786:	3708      	adds	r7, #8
 8012788:	46bd      	mov	sp, r7
 801278a:	bd80      	pop	{r7, pc}

0801278c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801278c:	b580      	push	{r7, lr}
 801278e:	b08e      	sub	sp, #56	@ 0x38
 8012790:	af00      	add	r7, sp, #0
 8012792:	60f8      	str	r0, [r7, #12]
 8012794:	60b9      	str	r1, [r7, #8]
 8012796:	607a      	str	r2, [r7, #4]
 8012798:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801279a:	f107 0314 	add.w	r3, r7, #20
 801279e:	2224      	movs	r2, #36	@ 0x24
 80127a0:	2100      	movs	r1, #0
 80127a2:	4618      	mov	r0, r3
 80127a4:	f001 ff6b 	bl	801467e <memset>
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	617b      	str	r3, [r7, #20]
 80127ac:	683b      	ldr	r3, [r7, #0]
 80127ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80127b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80127b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80127b4:	f107 0314 	add.w	r3, r7, #20
 80127b8:	461a      	mov	r2, r3
 80127ba:	6879      	ldr	r1, [r7, #4]
 80127bc:	68b8      	ldr	r0, [r7, #8]
 80127be:	f7f2 fba4 	bl	8004f0a <osThreadNew>
 80127c2:	4603      	mov	r3, r0
#endif
}
 80127c4:	4618      	mov	r0, r3
 80127c6:	3738      	adds	r7, #56	@ 0x38
 80127c8:	46bd      	mov	sp, r7
 80127ca:	bd80      	pop	{r7, pc}

080127cc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80127d0:	4b04      	ldr	r3, [pc, #16]	@ (80127e4 <sys_arch_protect+0x18>)
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	f04f 31ff 	mov.w	r1, #4294967295
 80127d8:	4618      	mov	r0, r3
 80127da:	f7f2 fcc9 	bl	8005170 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80127de:	2301      	movs	r3, #1
}
 80127e0:	4618      	mov	r0, r3
 80127e2:	bd80      	pop	{r7, pc}
 80127e4:	2000e13c 	.word	0x2000e13c

080127e8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b082      	sub	sp, #8
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80127f0:	4b04      	ldr	r3, [pc, #16]	@ (8012804 <sys_arch_unprotect+0x1c>)
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	4618      	mov	r0, r3
 80127f6:	f7f2 fd06 	bl	8005206 <osMutexRelease>
}
 80127fa:	bf00      	nop
 80127fc:	3708      	adds	r7, #8
 80127fe:	46bd      	mov	sp, r7
 8012800:	bd80      	pop	{r7, pc}
 8012802:	bf00      	nop
 8012804:	2000e13c 	.word	0x2000e13c

08012808 <IEC61850_SV_Task>:
// SVIds
char svId[8][12] = {"svpub1_test\0", "svpub2_test\0", "svpub3_test\0", "svpub4_test\0",
					"svpub5_test\0", "svpub6_test\0", "svpub7_test\0", "svpub8_test\0"};

// SV frame assembling and publishing task
void IEC61850_SV_Task(void *argument) {
 8012808:	b590      	push	{r4, r7, lr}
 801280a:	f5ad 7d15 	sub.w	sp, sp, #596	@ 0x254
 801280e:	af00      	add	r7, sp, #0
 8012810:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012814:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8012818:	6018      	str	r0, [r3, #0]

	// Create a signal semaphore
	signalSemHandle = osSemaphoreNew(1, 0, &signalSem_attr);
 801281a:	4a37      	ldr	r2, [pc, #220]	@ (80128f8 <IEC61850_SV_Task+0xf0>)
 801281c:	2100      	movs	r1, #0
 801281e:	2001      	movs	r0, #1
 8012820:	f7f2 fd2e 	bl	8005280 <osSemaphoreNew>
 8012824:	4603      	mov	r3, r0
 8012826:	4a35      	ldr	r2, [pc, #212]	@ (80128fc <IEC61850_SV_Task+0xf4>)
 8012828:	6013      	str	r3, [r2, #0]

	// Ethernet interface name in LWIP for STM32
	char* interface = "st";
 801282a:	4b35      	ldr	r3, [pc, #212]	@ (8012900 <IEC61850_SV_Task+0xf8>)
 801282c:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240

	// Destination MAC address
	uint8_t macAddr[6] = {0x01, 0x0C, 0xCD, 0x04, 0x00, 0x01};
 8012830:	4a34      	ldr	r2, [pc, #208]	@ (8012904 <IEC61850_SV_Task+0xfc>)
 8012832:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8012836:	e892 0003 	ldmia.w	r2, {r0, r1}
 801283a:	6018      	str	r0, [r3, #0]
 801283c:	3304      	adds	r3, #4
 801283e:	8019      	strh	r1, [r3, #0]

	// SV frame parameters configuration
	CommParameters frameParam;
	frameParam.vlanId = CONFIG_SV_CUSTOM_VLAN_ID;
 8012840:	2300      	movs	r3, #0
 8012842:	f8a7 322e 	strh.w	r3, [r7, #558]	@ 0x22e
	frameParam.vlanPriority = CONFIG_SV_CUSTOM_PRIORITY;
 8012846:	2304      	movs	r3, #4
 8012848:	f887 322c 	strb.w	r3, [r7, #556]	@ 0x22c
	frameParam.appId = CONFIG_SV_CUSTOM_APPID;
 801284c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8012850:	f8a7 3230 	strh.w	r3, [r7, #560]	@ 0x230
	for (int i = 0; i < 6; i++)
 8012854:	2300      	movs	r3, #0
 8012856:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 801285a:	e011      	b.n	8012880 <IEC61850_SV_Task+0x78>
	{
		frameParam.dstAddress[i] = macAddr[i];
 801285c:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 8012860:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8012864:	4413      	add	r3, r2
 8012866:	7819      	ldrb	r1, [r3, #0]
 8012868:	f207 2232 	addw	r2, r7, #562	@ 0x232
 801286c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8012870:	4413      	add	r3, r2
 8012872:	460a      	mov	r2, r1
 8012874:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 6; i++)
 8012876:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 801287a:	3301      	adds	r3, #1
 801287c:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8012880:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8012884:	2b05      	cmp	r3, #5
 8012886:	dde9      	ble.n	801285c <IEC61850_SV_Task+0x54>
	}

	// Create the SV Publisher object
	svPublisher = SVPublisher_create(&frameParam, interface);
 8012888:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 801288c:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
 8012890:	4618      	mov	r0, r3
 8012892:	f001 f986 	bl	8013ba2 <SVPublisher_create>
 8012896:	4603      	mov	r3, r0
 8012898:	4a1b      	ldr	r2, [pc, #108]	@ (8012908 <IEC61850_SV_Task+0x100>)
 801289a:	6013      	str	r3, [r2, #0]

	//SV frame ASDUs configuration
	if (svPublisher) {
 801289c:	4b1a      	ldr	r3, [pc, #104]	@ (8012908 <IEC61850_SV_Task+0x100>)
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	f000 8472 	beq.w	801318a <IEC61850_SV_Task+0x982>

		// ASDU info structure
		ASDU_Inf ASDUs[ASDU_NUM];

		// Samples (points) per second
		uint16_t smpCntMax = SIGNAL_FREQ * POINTS_PER_PERIOD;
 80128a6:	f44f 5348 	mov.w	r3, #12800	@ 0x3200
 80128aa:	f8a7 323e 	strh.w	r3, [r7, #574]	@ 0x23e

		// Adding ASDUs to svpublisher
	  	for (uint8_t i = 0; i < ASDU_NUM; ++i) {
 80128ae:	2300      	movs	r3, #0
 80128b0:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
 80128b4:	e018      	b.n	80128e8 <IEC61850_SV_Task+0xe0>
	  		ASDUs[i].asdu = SVPublisher_addASDU(svPublisher, svId[0], NULL, 1);
 80128b6:	4b14      	ldr	r3, [pc, #80]	@ (8012908 <IEC61850_SV_Task+0x100>)
 80128b8:	6818      	ldr	r0, [r3, #0]
 80128ba:	f897 424b 	ldrb.w	r4, [r7, #587]	@ 0x24b
 80128be:	2301      	movs	r3, #1
 80128c0:	2200      	movs	r2, #0
 80128c2:	4912      	ldr	r1, [pc, #72]	@ (801290c <IEC61850_SV_Task+0x104>)
 80128c4:	f001 f97c 	bl	8013bc0 <SVPublisher_addASDU>
 80128c8:	4601      	mov	r1, r0
 80128ca:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80128ce:	f5a3 7211 	sub.w	r2, r3, #580	@ 0x244
 80128d2:	4623      	mov	r3, r4
 80128d4:	011b      	lsls	r3, r3, #4
 80128d6:	4423      	add	r3, r4
 80128d8:	009b      	lsls	r3, r3, #2
 80128da:	4413      	add	r3, r2
 80128dc:	6019      	str	r1, [r3, #0]
	  	for (uint8_t i = 0; i < ASDU_NUM; ++i) {
 80128de:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 80128e2:	3301      	adds	r3, #1
 80128e4:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
 80128e8:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 80128ec:	2b07      	cmp	r3, #7
 80128ee:	d9e2      	bls.n	80128b6 <IEC61850_SV_Task+0xae>
	  	}

	  	// Adding 4 currents with quality (Q) and 4 voltages with Q
	  	// To add more data, use corresponding functions (addFLOAT, addINT etc. from sv_publisher.h)
        for (uint8_t i = 0; i < ASDU_NUM; ++i) {
 80128f0:	2300      	movs	r3, #0
 80128f2:	f887 324a 	strb.w	r3, [r7, #586]	@ 0x24a
 80128f6:	e1e0      	b.n	8012cba <IEC61850_SV_Task+0x4b2>
 80128f8:	08017be4 	.word	0x08017be4
 80128fc:	2000e140 	.word	0x2000e140
 8012900:	08017a48 	.word	0x08017a48
 8012904:	08017a4c 	.word	0x08017a4c
 8012908:	2000e1b0 	.word	0x2000e1b0
 801290c:	2000042c 	.word	0x2000042c

      	  ASDUs[i].CurrentA = SVPublisher_ASDU_addINT32(ASDUs[i].asdu);		// Current
 8012910:	f897 224a 	ldrb.w	r2, [r7, #586]	@ 0x24a
 8012914:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012918:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 801291c:	4613      	mov	r3, r2
 801291e:	011b      	lsls	r3, r3, #4
 8012920:	4413      	add	r3, r2
 8012922:	009b      	lsls	r3, r3, #2
 8012924:	440b      	add	r3, r1
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	f897 424a 	ldrb.w	r4, [r7, #586]	@ 0x24a
 801292c:	4618      	mov	r0, r3
 801292e:	f001 fb54 	bl	8013fda <SVPublisher_ASDU_addINT32>
 8012932:	4601      	mov	r1, r0
 8012934:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012938:	f5a3 7211 	sub.w	r2, r3, #580	@ 0x244
 801293c:	4623      	mov	r3, r4
 801293e:	011b      	lsls	r3, r3, #4
 8012940:	4423      	add	r3, r4
 8012942:	009b      	lsls	r3, r3, #2
 8012944:	4413      	add	r3, r2
 8012946:	3304      	adds	r3, #4
 8012948:	6019      	str	r1, [r3, #0]
      	  ASDUs[i].CurrA_Q = SVPublisher_ASDU_addQuality(ASDUs[i].asdu);	// Quality
 801294a:	f897 224a 	ldrb.w	r2, [r7, #586]	@ 0x24a
 801294e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012952:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012956:	4613      	mov	r3, r2
 8012958:	011b      	lsls	r3, r3, #4
 801295a:	4413      	add	r3, r2
 801295c:	009b      	lsls	r3, r3, #2
 801295e:	440b      	add	r3, r1
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	f897 424a 	ldrb.w	r4, [r7, #586]	@ 0x24a
 8012966:	4618      	mov	r0, r3
 8012968:	f001 fb5b 	bl	8014022 <SVPublisher_ASDU_addQuality>
 801296c:	4601      	mov	r1, r0
 801296e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012972:	f5a3 7211 	sub.w	r2, r3, #580	@ 0x244
 8012976:	4623      	mov	r3, r4
 8012978:	011b      	lsls	r3, r3, #4
 801297a:	4423      	add	r3, r4
 801297c:	009b      	lsls	r3, r3, #2
 801297e:	4413      	add	r3, r2
 8012980:	3308      	adds	r3, #8
 8012982:	6019      	str	r1, [r3, #0]
      	  ASDUs[i].CurrentB = SVPublisher_ASDU_addINT32(ASDUs[i].asdu);
 8012984:	f897 224a 	ldrb.w	r2, [r7, #586]	@ 0x24a
 8012988:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 801298c:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012990:	4613      	mov	r3, r2
 8012992:	011b      	lsls	r3, r3, #4
 8012994:	4413      	add	r3, r2
 8012996:	009b      	lsls	r3, r3, #2
 8012998:	440b      	add	r3, r1
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	f897 424a 	ldrb.w	r4, [r7, #586]	@ 0x24a
 80129a0:	4618      	mov	r0, r3
 80129a2:	f001 fb1a 	bl	8013fda <SVPublisher_ASDU_addINT32>
 80129a6:	4601      	mov	r1, r0
 80129a8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80129ac:	f5a3 7211 	sub.w	r2, r3, #580	@ 0x244
 80129b0:	4623      	mov	r3, r4
 80129b2:	011b      	lsls	r3, r3, #4
 80129b4:	4423      	add	r3, r4
 80129b6:	009b      	lsls	r3, r3, #2
 80129b8:	4413      	add	r3, r2
 80129ba:	330c      	adds	r3, #12
 80129bc:	6019      	str	r1, [r3, #0]
      	  ASDUs[i].CurrB_Q = SVPublisher_ASDU_addQuality(ASDUs[i].asdu);
 80129be:	f897 224a 	ldrb.w	r2, [r7, #586]	@ 0x24a
 80129c2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80129c6:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 80129ca:	4613      	mov	r3, r2
 80129cc:	011b      	lsls	r3, r3, #4
 80129ce:	4413      	add	r3, r2
 80129d0:	009b      	lsls	r3, r3, #2
 80129d2:	440b      	add	r3, r1
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	f897 424a 	ldrb.w	r4, [r7, #586]	@ 0x24a
 80129da:	4618      	mov	r0, r3
 80129dc:	f001 fb21 	bl	8014022 <SVPublisher_ASDU_addQuality>
 80129e0:	4601      	mov	r1, r0
 80129e2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80129e6:	f5a3 7211 	sub.w	r2, r3, #580	@ 0x244
 80129ea:	4623      	mov	r3, r4
 80129ec:	011b      	lsls	r3, r3, #4
 80129ee:	4423      	add	r3, r4
 80129f0:	009b      	lsls	r3, r3, #2
 80129f2:	4413      	add	r3, r2
 80129f4:	3310      	adds	r3, #16
 80129f6:	6019      	str	r1, [r3, #0]
      	  ASDUs[i].CurrentC = SVPublisher_ASDU_addINT32(ASDUs[i].asdu);
 80129f8:	f897 224a 	ldrb.w	r2, [r7, #586]	@ 0x24a
 80129fc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012a00:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012a04:	4613      	mov	r3, r2
 8012a06:	011b      	lsls	r3, r3, #4
 8012a08:	4413      	add	r3, r2
 8012a0a:	009b      	lsls	r3, r3, #2
 8012a0c:	440b      	add	r3, r1
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	f897 424a 	ldrb.w	r4, [r7, #586]	@ 0x24a
 8012a14:	4618      	mov	r0, r3
 8012a16:	f001 fae0 	bl	8013fda <SVPublisher_ASDU_addINT32>
 8012a1a:	4601      	mov	r1, r0
 8012a1c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012a20:	f5a3 7211 	sub.w	r2, r3, #580	@ 0x244
 8012a24:	4623      	mov	r3, r4
 8012a26:	011b      	lsls	r3, r3, #4
 8012a28:	4423      	add	r3, r4
 8012a2a:	009b      	lsls	r3, r3, #2
 8012a2c:	4413      	add	r3, r2
 8012a2e:	3314      	adds	r3, #20
 8012a30:	6019      	str	r1, [r3, #0]
      	  ASDUs[i].CurrC_Q = SVPublisher_ASDU_addQuality(ASDUs[i].asdu);
 8012a32:	f897 224a 	ldrb.w	r2, [r7, #586]	@ 0x24a
 8012a36:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012a3a:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012a3e:	4613      	mov	r3, r2
 8012a40:	011b      	lsls	r3, r3, #4
 8012a42:	4413      	add	r3, r2
 8012a44:	009b      	lsls	r3, r3, #2
 8012a46:	440b      	add	r3, r1
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	f897 424a 	ldrb.w	r4, [r7, #586]	@ 0x24a
 8012a4e:	4618      	mov	r0, r3
 8012a50:	f001 fae7 	bl	8014022 <SVPublisher_ASDU_addQuality>
 8012a54:	4601      	mov	r1, r0
 8012a56:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012a5a:	f5a3 7211 	sub.w	r2, r3, #580	@ 0x244
 8012a5e:	4623      	mov	r3, r4
 8012a60:	011b      	lsls	r3, r3, #4
 8012a62:	4423      	add	r3, r4
 8012a64:	009b      	lsls	r3, r3, #2
 8012a66:	4413      	add	r3, r2
 8012a68:	3318      	adds	r3, #24
 8012a6a:	6019      	str	r1, [r3, #0]
      	  ASDUs[i].CurrentN = SVPublisher_ASDU_addINT32(ASDUs[i].asdu);
 8012a6c:	f897 224a 	ldrb.w	r2, [r7, #586]	@ 0x24a
 8012a70:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012a74:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012a78:	4613      	mov	r3, r2
 8012a7a:	011b      	lsls	r3, r3, #4
 8012a7c:	4413      	add	r3, r2
 8012a7e:	009b      	lsls	r3, r3, #2
 8012a80:	440b      	add	r3, r1
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	f897 424a 	ldrb.w	r4, [r7, #586]	@ 0x24a
 8012a88:	4618      	mov	r0, r3
 8012a8a:	f001 faa6 	bl	8013fda <SVPublisher_ASDU_addINT32>
 8012a8e:	4601      	mov	r1, r0
 8012a90:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012a94:	f5a3 7211 	sub.w	r2, r3, #580	@ 0x244
 8012a98:	4623      	mov	r3, r4
 8012a9a:	011b      	lsls	r3, r3, #4
 8012a9c:	4423      	add	r3, r4
 8012a9e:	009b      	lsls	r3, r3, #2
 8012aa0:	4413      	add	r3, r2
 8012aa2:	331c      	adds	r3, #28
 8012aa4:	6019      	str	r1, [r3, #0]
      	  ASDUs[i].CurrN_Q = SVPublisher_ASDU_addQuality(ASDUs[i].asdu);
 8012aa6:	f897 224a 	ldrb.w	r2, [r7, #586]	@ 0x24a
 8012aaa:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012aae:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012ab2:	4613      	mov	r3, r2
 8012ab4:	011b      	lsls	r3, r3, #4
 8012ab6:	4413      	add	r3, r2
 8012ab8:	009b      	lsls	r3, r3, #2
 8012aba:	440b      	add	r3, r1
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	f897 424a 	ldrb.w	r4, [r7, #586]	@ 0x24a
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	f001 faad 	bl	8014022 <SVPublisher_ASDU_addQuality>
 8012ac8:	4601      	mov	r1, r0
 8012aca:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012ace:	f5a3 7211 	sub.w	r2, r3, #580	@ 0x244
 8012ad2:	4623      	mov	r3, r4
 8012ad4:	011b      	lsls	r3, r3, #4
 8012ad6:	4423      	add	r3, r4
 8012ad8:	009b      	lsls	r3, r3, #2
 8012ada:	4413      	add	r3, r2
 8012adc:	3320      	adds	r3, #32
 8012ade:	6019      	str	r1, [r3, #0]
      	  ASDUs[i].VoltageA = SVPublisher_ASDU_addINT32(ASDUs[i].asdu);
 8012ae0:	f897 224a 	ldrb.w	r2, [r7, #586]	@ 0x24a
 8012ae4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012ae8:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012aec:	4613      	mov	r3, r2
 8012aee:	011b      	lsls	r3, r3, #4
 8012af0:	4413      	add	r3, r2
 8012af2:	009b      	lsls	r3, r3, #2
 8012af4:	440b      	add	r3, r1
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	f897 424a 	ldrb.w	r4, [r7, #586]	@ 0x24a
 8012afc:	4618      	mov	r0, r3
 8012afe:	f001 fa6c 	bl	8013fda <SVPublisher_ASDU_addINT32>
 8012b02:	4601      	mov	r1, r0
 8012b04:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012b08:	f5a3 7211 	sub.w	r2, r3, #580	@ 0x244
 8012b0c:	4623      	mov	r3, r4
 8012b0e:	011b      	lsls	r3, r3, #4
 8012b10:	4423      	add	r3, r4
 8012b12:	009b      	lsls	r3, r3, #2
 8012b14:	4413      	add	r3, r2
 8012b16:	3324      	adds	r3, #36	@ 0x24
 8012b18:	6019      	str	r1, [r3, #0]
      	  ASDUs[i].VoltA_Q = SVPublisher_ASDU_addQuality(ASDUs[i].asdu);
 8012b1a:	f897 224a 	ldrb.w	r2, [r7, #586]	@ 0x24a
 8012b1e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012b22:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012b26:	4613      	mov	r3, r2
 8012b28:	011b      	lsls	r3, r3, #4
 8012b2a:	4413      	add	r3, r2
 8012b2c:	009b      	lsls	r3, r3, #2
 8012b2e:	440b      	add	r3, r1
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	f897 424a 	ldrb.w	r4, [r7, #586]	@ 0x24a
 8012b36:	4618      	mov	r0, r3
 8012b38:	f001 fa73 	bl	8014022 <SVPublisher_ASDU_addQuality>
 8012b3c:	4601      	mov	r1, r0
 8012b3e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012b42:	f5a3 7211 	sub.w	r2, r3, #580	@ 0x244
 8012b46:	4623      	mov	r3, r4
 8012b48:	011b      	lsls	r3, r3, #4
 8012b4a:	4423      	add	r3, r4
 8012b4c:	009b      	lsls	r3, r3, #2
 8012b4e:	4413      	add	r3, r2
 8012b50:	3328      	adds	r3, #40	@ 0x28
 8012b52:	6019      	str	r1, [r3, #0]
      	  ASDUs[i].VoltageB = SVPublisher_ASDU_addINT32(ASDUs[i].asdu);
 8012b54:	f897 224a 	ldrb.w	r2, [r7, #586]	@ 0x24a
 8012b58:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012b5c:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012b60:	4613      	mov	r3, r2
 8012b62:	011b      	lsls	r3, r3, #4
 8012b64:	4413      	add	r3, r2
 8012b66:	009b      	lsls	r3, r3, #2
 8012b68:	440b      	add	r3, r1
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	f897 424a 	ldrb.w	r4, [r7, #586]	@ 0x24a
 8012b70:	4618      	mov	r0, r3
 8012b72:	f001 fa32 	bl	8013fda <SVPublisher_ASDU_addINT32>
 8012b76:	4601      	mov	r1, r0
 8012b78:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012b7c:	f5a3 7211 	sub.w	r2, r3, #580	@ 0x244
 8012b80:	4623      	mov	r3, r4
 8012b82:	011b      	lsls	r3, r3, #4
 8012b84:	4423      	add	r3, r4
 8012b86:	009b      	lsls	r3, r3, #2
 8012b88:	4413      	add	r3, r2
 8012b8a:	332c      	adds	r3, #44	@ 0x2c
 8012b8c:	6019      	str	r1, [r3, #0]
      	  ASDUs[i].VoltB_Q = SVPublisher_ASDU_addQuality(ASDUs[i].asdu);
 8012b8e:	f897 224a 	ldrb.w	r2, [r7, #586]	@ 0x24a
 8012b92:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012b96:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012b9a:	4613      	mov	r3, r2
 8012b9c:	011b      	lsls	r3, r3, #4
 8012b9e:	4413      	add	r3, r2
 8012ba0:	009b      	lsls	r3, r3, #2
 8012ba2:	440b      	add	r3, r1
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	f897 424a 	ldrb.w	r4, [r7, #586]	@ 0x24a
 8012baa:	4618      	mov	r0, r3
 8012bac:	f001 fa39 	bl	8014022 <SVPublisher_ASDU_addQuality>
 8012bb0:	4601      	mov	r1, r0
 8012bb2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012bb6:	f5a3 7211 	sub.w	r2, r3, #580	@ 0x244
 8012bba:	4623      	mov	r3, r4
 8012bbc:	011b      	lsls	r3, r3, #4
 8012bbe:	4423      	add	r3, r4
 8012bc0:	009b      	lsls	r3, r3, #2
 8012bc2:	4413      	add	r3, r2
 8012bc4:	3330      	adds	r3, #48	@ 0x30
 8012bc6:	6019      	str	r1, [r3, #0]
      	  ASDUs[i].VoltageC = SVPublisher_ASDU_addINT32(ASDUs[i].asdu);
 8012bc8:	f897 224a 	ldrb.w	r2, [r7, #586]	@ 0x24a
 8012bcc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012bd0:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012bd4:	4613      	mov	r3, r2
 8012bd6:	011b      	lsls	r3, r3, #4
 8012bd8:	4413      	add	r3, r2
 8012bda:	009b      	lsls	r3, r3, #2
 8012bdc:	440b      	add	r3, r1
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	f897 424a 	ldrb.w	r4, [r7, #586]	@ 0x24a
 8012be4:	4618      	mov	r0, r3
 8012be6:	f001 f9f8 	bl	8013fda <SVPublisher_ASDU_addINT32>
 8012bea:	4601      	mov	r1, r0
 8012bec:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012bf0:	f5a3 7211 	sub.w	r2, r3, #580	@ 0x244
 8012bf4:	4623      	mov	r3, r4
 8012bf6:	011b      	lsls	r3, r3, #4
 8012bf8:	4423      	add	r3, r4
 8012bfa:	009b      	lsls	r3, r3, #2
 8012bfc:	4413      	add	r3, r2
 8012bfe:	3334      	adds	r3, #52	@ 0x34
 8012c00:	6019      	str	r1, [r3, #0]
      	  ASDUs[i].VoltC_Q = SVPublisher_ASDU_addQuality(ASDUs[i].asdu);
 8012c02:	f897 224a 	ldrb.w	r2, [r7, #586]	@ 0x24a
 8012c06:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012c0a:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012c0e:	4613      	mov	r3, r2
 8012c10:	011b      	lsls	r3, r3, #4
 8012c12:	4413      	add	r3, r2
 8012c14:	009b      	lsls	r3, r3, #2
 8012c16:	440b      	add	r3, r1
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	f897 424a 	ldrb.w	r4, [r7, #586]	@ 0x24a
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f001 f9ff 	bl	8014022 <SVPublisher_ASDU_addQuality>
 8012c24:	4601      	mov	r1, r0
 8012c26:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012c2a:	f5a3 7211 	sub.w	r2, r3, #580	@ 0x244
 8012c2e:	4623      	mov	r3, r4
 8012c30:	011b      	lsls	r3, r3, #4
 8012c32:	4423      	add	r3, r4
 8012c34:	009b      	lsls	r3, r3, #2
 8012c36:	4413      	add	r3, r2
 8012c38:	3338      	adds	r3, #56	@ 0x38
 8012c3a:	6019      	str	r1, [r3, #0]
      	  ASDUs[i].VoltageN = SVPublisher_ASDU_addINT32(ASDUs[i].asdu);
 8012c3c:	f897 224a 	ldrb.w	r2, [r7, #586]	@ 0x24a
 8012c40:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012c44:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012c48:	4613      	mov	r3, r2
 8012c4a:	011b      	lsls	r3, r3, #4
 8012c4c:	4413      	add	r3, r2
 8012c4e:	009b      	lsls	r3, r3, #2
 8012c50:	440b      	add	r3, r1
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	f897 424a 	ldrb.w	r4, [r7, #586]	@ 0x24a
 8012c58:	4618      	mov	r0, r3
 8012c5a:	f001 f9be 	bl	8013fda <SVPublisher_ASDU_addINT32>
 8012c5e:	4601      	mov	r1, r0
 8012c60:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012c64:	f5a3 7211 	sub.w	r2, r3, #580	@ 0x244
 8012c68:	4623      	mov	r3, r4
 8012c6a:	011b      	lsls	r3, r3, #4
 8012c6c:	4423      	add	r3, r4
 8012c6e:	009b      	lsls	r3, r3, #2
 8012c70:	4413      	add	r3, r2
 8012c72:	333c      	adds	r3, #60	@ 0x3c
 8012c74:	6019      	str	r1, [r3, #0]
      	  ASDUs[i].VoltN_Q = SVPublisher_ASDU_addQuality(ASDUs[i].asdu);
 8012c76:	f897 224a 	ldrb.w	r2, [r7, #586]	@ 0x24a
 8012c7a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012c7e:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012c82:	4613      	mov	r3, r2
 8012c84:	011b      	lsls	r3, r3, #4
 8012c86:	4413      	add	r3, r2
 8012c88:	009b      	lsls	r3, r3, #2
 8012c8a:	440b      	add	r3, r1
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	f897 424a 	ldrb.w	r4, [r7, #586]	@ 0x24a
 8012c92:	4618      	mov	r0, r3
 8012c94:	f001 f9c5 	bl	8014022 <SVPublisher_ASDU_addQuality>
 8012c98:	4601      	mov	r1, r0
 8012c9a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012c9e:	f5a3 7211 	sub.w	r2, r3, #580	@ 0x244
 8012ca2:	4623      	mov	r3, r4
 8012ca4:	011b      	lsls	r3, r3, #4
 8012ca6:	4423      	add	r3, r4
 8012ca8:	009b      	lsls	r3, r3, #2
 8012caa:	4413      	add	r3, r2
 8012cac:	3340      	adds	r3, #64	@ 0x40
 8012cae:	6019      	str	r1, [r3, #0]
        for (uint8_t i = 0; i < ASDU_NUM; ++i) {
 8012cb0:	f897 324a 	ldrb.w	r3, [r7, #586]	@ 0x24a
 8012cb4:	3301      	adds	r3, #1
 8012cb6:	f887 324a 	strb.w	r3, [r7, #586]	@ 0x24a
 8012cba:	f897 324a 	ldrb.w	r3, [r7, #586]	@ 0x24a
 8012cbe:	2b07      	cmp	r3, #7
 8012cc0:	f67f ae26 	bls.w	8012910 <IEC61850_SV_Task+0x108>
        }

        SVPublisher_setupComplete(svPublisher);
 8012cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8012d30 <IEC61850_SV_Task+0x528>)
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	4618      	mov	r0, r3
 8012cca:	f001 f8bf 	bl	8013e4c <SVPublisher_setupComplete>

        // Sample (point) counter
        uint16_t smpCnt = 0;
 8012cce:	2300      	movs	r3, #0
 8012cd0:	f8a7 3248 	strh.w	r3, [r7, #584]	@ 0x248

        // Start timer to simulate signals
        HAL_TIM_Base_Start_IT(&htim2);
 8012cd4:	4817      	ldr	r0, [pc, #92]	@ (8012d34 <IEC61850_SV_Task+0x52c>)
 8012cd6:	f7f0 fe51 	bl	800397c <HAL_TIM_Base_Start_IT>

        // Set synchronization status (in a real application it should be changed every time synch status changes)
		for (uint8_t i = 0; i < ASDU_NUM; ++i) {
 8012cda:	2300      	movs	r3, #0
 8012cdc:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
 8012ce0:	e014      	b.n	8012d0c <IEC61850_SV_Task+0x504>
			SVPublisher_ASDU_setSmpSynch(ASDUs[i].asdu, SV_SMPSYNCH_GLOBAL);
 8012ce2:	f897 2247 	ldrb.w	r2, [r7, #583]	@ 0x247
 8012ce6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012cea:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012cee:	4613      	mov	r3, r2
 8012cf0:	011b      	lsls	r3, r3, #4
 8012cf2:	4413      	add	r3, r2
 8012cf4:	009b      	lsls	r3, r3, #2
 8012cf6:	440b      	add	r3, r1
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	2102      	movs	r1, #2
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	f001 f9e1 	bl	80140c4 <SVPublisher_ASDU_setSmpSynch>
		for (uint8_t i = 0; i < ASDU_NUM; ++i) {
 8012d02:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8012d06:	3301      	adds	r3, #1
 8012d08:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
 8012d0c:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8012d10:	2b07      	cmp	r3, #7
 8012d12:	d9e6      	bls.n	8012ce2 <IEC61850_SV_Task+0x4da>
		}

        // You can add any condition of SV publisher operation
        while (1) {

        	if(osSemaphoreAcquire(signalSemHandle , portMAX_DELAY) == osOK) {
 8012d14:	4b08      	ldr	r3, [pc, #32]	@ (8012d38 <IEC61850_SV_Task+0x530>)
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	f04f 31ff 	mov.w	r1, #4294967295
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	f7f2 fb39 	bl	8005394 <osSemaphoreAcquire>
 8012d22:	4603      	mov	r3, r0
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d1f5      	bne.n	8012d14 <IEC61850_SV_Task+0x50c>

				for (uint8_t ASDU_num = 0; ASDU_num < ASDU_NUM; ++ASDU_num) {
 8012d28:	2300      	movs	r3, #0
 8012d2a:	f887 3246 	strb.w	r3, [r7, #582]	@ 0x246
 8012d2e:	e221      	b.n	8013174 <IEC61850_SV_Task+0x96c>
 8012d30:	2000e1b0 	.word	0x2000e1b0
 8012d34:	2000050c 	.word	0x2000050c
 8012d38:	2000e140 	.word	0x2000e140

					// Setting currents values in the frame
					SVPublisher_ASDU_setINT32(ASDUs[ASDU_num].asdu, ASDUs[ASDU_num].CurrentA, 0);
 8012d3c:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 8012d40:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012d44:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012d48:	4613      	mov	r3, r2
 8012d4a:	011b      	lsls	r3, r3, #4
 8012d4c:	4413      	add	r3, r2
 8012d4e:	009b      	lsls	r3, r3, #2
 8012d50:	440b      	add	r3, r1
 8012d52:	6818      	ldr	r0, [r3, #0]
 8012d54:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 8012d58:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012d5c:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012d60:	4613      	mov	r3, r2
 8012d62:	011b      	lsls	r3, r3, #4
 8012d64:	4413      	add	r3, r2
 8012d66:	009b      	lsls	r3, r3, #2
 8012d68:	440b      	add	r3, r1
 8012d6a:	3304      	adds	r3, #4
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	2200      	movs	r2, #0
 8012d70:	4619      	mov	r1, r3
 8012d72:	f001 f945 	bl	8014000 <SVPublisher_ASDU_setINT32>
					SVPublisher_ASDU_setQuality(ASDUs[ASDU_num].asdu, ASDUs[ASDU_num].CurrA_Q, QUALITY_VALIDITY_GOOD);
 8012d76:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 8012d7a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012d7e:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012d82:	4613      	mov	r3, r2
 8012d84:	011b      	lsls	r3, r3, #4
 8012d86:	4413      	add	r3, r2
 8012d88:	009b      	lsls	r3, r3, #2
 8012d8a:	440b      	add	r3, r1
 8012d8c:	6818      	ldr	r0, [r3, #0]
 8012d8e:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 8012d92:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012d96:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012d9a:	4613      	mov	r3, r2
 8012d9c:	011b      	lsls	r3, r3, #4
 8012d9e:	4413      	add	r3, r2
 8012da0:	009b      	lsls	r3, r3, #2
 8012da2:	440b      	add	r3, r1
 8012da4:	3308      	adds	r3, #8
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	2200      	movs	r2, #0
 8012daa:	4619      	mov	r1, r3
 8012dac:	f001 f94c 	bl	8014048 <SVPublisher_ASDU_setQuality>
					SVPublisher_ASDU_setINT32(ASDUs[ASDU_num].asdu, ASDUs[ASDU_num].CurrentB, 0);
 8012db0:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 8012db4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012db8:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012dbc:	4613      	mov	r3, r2
 8012dbe:	011b      	lsls	r3, r3, #4
 8012dc0:	4413      	add	r3, r2
 8012dc2:	009b      	lsls	r3, r3, #2
 8012dc4:	440b      	add	r3, r1
 8012dc6:	6818      	ldr	r0, [r3, #0]
 8012dc8:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 8012dcc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012dd0:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012dd4:	4613      	mov	r3, r2
 8012dd6:	011b      	lsls	r3, r3, #4
 8012dd8:	4413      	add	r3, r2
 8012dda:	009b      	lsls	r3, r3, #2
 8012ddc:	440b      	add	r3, r1
 8012dde:	330c      	adds	r3, #12
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	2200      	movs	r2, #0
 8012de4:	4619      	mov	r1, r3
 8012de6:	f001 f90b 	bl	8014000 <SVPublisher_ASDU_setINT32>
					SVPublisher_ASDU_setQuality(ASDUs[ASDU_num].asdu, ASDUs[ASDU_num].CurrB_Q, QUALITY_VALIDITY_GOOD);
 8012dea:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 8012dee:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012df2:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012df6:	4613      	mov	r3, r2
 8012df8:	011b      	lsls	r3, r3, #4
 8012dfa:	4413      	add	r3, r2
 8012dfc:	009b      	lsls	r3, r3, #2
 8012dfe:	440b      	add	r3, r1
 8012e00:	6818      	ldr	r0, [r3, #0]
 8012e02:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 8012e06:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012e0a:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012e0e:	4613      	mov	r3, r2
 8012e10:	011b      	lsls	r3, r3, #4
 8012e12:	4413      	add	r3, r2
 8012e14:	009b      	lsls	r3, r3, #2
 8012e16:	440b      	add	r3, r1
 8012e18:	3310      	adds	r3, #16
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	4619      	mov	r1, r3
 8012e20:	f001 f912 	bl	8014048 <SVPublisher_ASDU_setQuality>
					SVPublisher_ASDU_setINT32(ASDUs[ASDU_num].asdu, ASDUs[ASDU_num].CurrentC, 0);
 8012e24:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 8012e28:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012e2c:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012e30:	4613      	mov	r3, r2
 8012e32:	011b      	lsls	r3, r3, #4
 8012e34:	4413      	add	r3, r2
 8012e36:	009b      	lsls	r3, r3, #2
 8012e38:	440b      	add	r3, r1
 8012e3a:	6818      	ldr	r0, [r3, #0]
 8012e3c:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 8012e40:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012e44:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012e48:	4613      	mov	r3, r2
 8012e4a:	011b      	lsls	r3, r3, #4
 8012e4c:	4413      	add	r3, r2
 8012e4e:	009b      	lsls	r3, r3, #2
 8012e50:	440b      	add	r3, r1
 8012e52:	3314      	adds	r3, #20
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	2200      	movs	r2, #0
 8012e58:	4619      	mov	r1, r3
 8012e5a:	f001 f8d1 	bl	8014000 <SVPublisher_ASDU_setINT32>
					SVPublisher_ASDU_setQuality(ASDUs[ASDU_num].asdu, ASDUs[ASDU_num].CurrC_Q, QUALITY_VALIDITY_GOOD);
 8012e5e:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 8012e62:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012e66:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012e6a:	4613      	mov	r3, r2
 8012e6c:	011b      	lsls	r3, r3, #4
 8012e6e:	4413      	add	r3, r2
 8012e70:	009b      	lsls	r3, r3, #2
 8012e72:	440b      	add	r3, r1
 8012e74:	6818      	ldr	r0, [r3, #0]
 8012e76:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 8012e7a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012e7e:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012e82:	4613      	mov	r3, r2
 8012e84:	011b      	lsls	r3, r3, #4
 8012e86:	4413      	add	r3, r2
 8012e88:	009b      	lsls	r3, r3, #2
 8012e8a:	440b      	add	r3, r1
 8012e8c:	3318      	adds	r3, #24
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	2200      	movs	r2, #0
 8012e92:	4619      	mov	r1, r3
 8012e94:	f001 f8d8 	bl	8014048 <SVPublisher_ASDU_setQuality>
					SVPublisher_ASDU_setINT32(ASDUs[ASDU_num].asdu, ASDUs[ASDU_num].CurrentN, 0);
 8012e98:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 8012e9c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012ea0:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012ea4:	4613      	mov	r3, r2
 8012ea6:	011b      	lsls	r3, r3, #4
 8012ea8:	4413      	add	r3, r2
 8012eaa:	009b      	lsls	r3, r3, #2
 8012eac:	440b      	add	r3, r1
 8012eae:	6818      	ldr	r0, [r3, #0]
 8012eb0:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 8012eb4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012eb8:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012ebc:	4613      	mov	r3, r2
 8012ebe:	011b      	lsls	r3, r3, #4
 8012ec0:	4413      	add	r3, r2
 8012ec2:	009b      	lsls	r3, r3, #2
 8012ec4:	440b      	add	r3, r1
 8012ec6:	331c      	adds	r3, #28
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	2200      	movs	r2, #0
 8012ecc:	4619      	mov	r1, r3
 8012ece:	f001 f897 	bl	8014000 <SVPublisher_ASDU_setINT32>
					SVPublisher_ASDU_setQuality(ASDUs[ASDU_num].asdu, ASDUs[ASDU_num].CurrN_Q, QUALITY_VALIDITY_GOOD);
 8012ed2:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 8012ed6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012eda:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012ede:	4613      	mov	r3, r2
 8012ee0:	011b      	lsls	r3, r3, #4
 8012ee2:	4413      	add	r3, r2
 8012ee4:	009b      	lsls	r3, r3, #2
 8012ee6:	440b      	add	r3, r1
 8012ee8:	6818      	ldr	r0, [r3, #0]
 8012eea:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 8012eee:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012ef2:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012ef6:	4613      	mov	r3, r2
 8012ef8:	011b      	lsls	r3, r3, #4
 8012efa:	4413      	add	r3, r2
 8012efc:	009b      	lsls	r3, r3, #2
 8012efe:	440b      	add	r3, r1
 8012f00:	3320      	adds	r3, #32
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	2200      	movs	r2, #0
 8012f06:	4619      	mov	r1, r3
 8012f08:	f001 f89e 	bl	8014048 <SVPublisher_ASDU_setQuality>

					// Setting voltages values in the frame
					SVPublisher_ASDU_setINT32(ASDUs[ASDU_num].asdu, ASDUs[ASDU_num].VoltageA, 100 * VoltA[ASDU_num]);
 8012f0c:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 8012f10:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012f14:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012f18:	4613      	mov	r3, r2
 8012f1a:	011b      	lsls	r3, r3, #4
 8012f1c:	4413      	add	r3, r2
 8012f1e:	009b      	lsls	r3, r3, #2
 8012f20:	440b      	add	r3, r1
 8012f22:	6818      	ldr	r0, [r3, #0]
 8012f24:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 8012f28:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012f2c:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012f30:	4613      	mov	r3, r2
 8012f32:	011b      	lsls	r3, r3, #4
 8012f34:	4413      	add	r3, r2
 8012f36:	009b      	lsls	r3, r3, #2
 8012f38:	440b      	add	r3, r1
 8012f3a:	3324      	adds	r3, #36	@ 0x24
 8012f3c:	6819      	ldr	r1, [r3, #0]
 8012f3e:	f897 3246 	ldrb.w	r3, [r7, #582]	@ 0x246
 8012f42:	4a94      	ldr	r2, [pc, #592]	@ (8013194 <IEC61850_SV_Task+0x98c>)
 8012f44:	009b      	lsls	r3, r3, #2
 8012f46:	4413      	add	r3, r2
 8012f48:	edd3 7a00 	vldr	s15, [r3]
 8012f4c:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 8013198 <IEC61850_SV_Task+0x990>
 8012f50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012f54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012f58:	ee17 2a90 	vmov	r2, s15
 8012f5c:	f001 f850 	bl	8014000 <SVPublisher_ASDU_setINT32>
					SVPublisher_ASDU_setQuality(ASDUs[ASDU_num].asdu, ASDUs[ASDU_num].VoltA_Q, QUALITY_VALIDITY_GOOD);
 8012f60:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 8012f64:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012f68:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012f6c:	4613      	mov	r3, r2
 8012f6e:	011b      	lsls	r3, r3, #4
 8012f70:	4413      	add	r3, r2
 8012f72:	009b      	lsls	r3, r3, #2
 8012f74:	440b      	add	r3, r1
 8012f76:	6818      	ldr	r0, [r3, #0]
 8012f78:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 8012f7c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012f80:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012f84:	4613      	mov	r3, r2
 8012f86:	011b      	lsls	r3, r3, #4
 8012f88:	4413      	add	r3, r2
 8012f8a:	009b      	lsls	r3, r3, #2
 8012f8c:	440b      	add	r3, r1
 8012f8e:	3328      	adds	r3, #40	@ 0x28
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	2200      	movs	r2, #0
 8012f94:	4619      	mov	r1, r3
 8012f96:	f001 f857 	bl	8014048 <SVPublisher_ASDU_setQuality>
					SVPublisher_ASDU_setINT32(ASDUs[ASDU_num].asdu, ASDUs[ASDU_num].VoltageB, 100 * VoltB[ASDU_num]);
 8012f9a:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 8012f9e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012fa2:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012fa6:	4613      	mov	r3, r2
 8012fa8:	011b      	lsls	r3, r3, #4
 8012faa:	4413      	add	r3, r2
 8012fac:	009b      	lsls	r3, r3, #2
 8012fae:	440b      	add	r3, r1
 8012fb0:	6818      	ldr	r0, [r3, #0]
 8012fb2:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 8012fb6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012fba:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012fbe:	4613      	mov	r3, r2
 8012fc0:	011b      	lsls	r3, r3, #4
 8012fc2:	4413      	add	r3, r2
 8012fc4:	009b      	lsls	r3, r3, #2
 8012fc6:	440b      	add	r3, r1
 8012fc8:	332c      	adds	r3, #44	@ 0x2c
 8012fca:	6819      	ldr	r1, [r3, #0]
 8012fcc:	f897 3246 	ldrb.w	r3, [r7, #582]	@ 0x246
 8012fd0:	4a72      	ldr	r2, [pc, #456]	@ (801319c <IEC61850_SV_Task+0x994>)
 8012fd2:	009b      	lsls	r3, r3, #2
 8012fd4:	4413      	add	r3, r2
 8012fd6:	edd3 7a00 	vldr	s15, [r3]
 8012fda:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8013198 <IEC61850_SV_Task+0x990>
 8012fde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012fe2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012fe6:	ee17 2a90 	vmov	r2, s15
 8012fea:	f001 f809 	bl	8014000 <SVPublisher_ASDU_setINT32>
					SVPublisher_ASDU_setQuality(ASDUs[ASDU_num].asdu, ASDUs[ASDU_num].VoltB_Q, QUALITY_VALIDITY_GOOD);
 8012fee:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 8012ff2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8012ff6:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8012ffa:	4613      	mov	r3, r2
 8012ffc:	011b      	lsls	r3, r3, #4
 8012ffe:	4413      	add	r3, r2
 8013000:	009b      	lsls	r3, r3, #2
 8013002:	440b      	add	r3, r1
 8013004:	6818      	ldr	r0, [r3, #0]
 8013006:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 801300a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 801300e:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8013012:	4613      	mov	r3, r2
 8013014:	011b      	lsls	r3, r3, #4
 8013016:	4413      	add	r3, r2
 8013018:	009b      	lsls	r3, r3, #2
 801301a:	440b      	add	r3, r1
 801301c:	3330      	adds	r3, #48	@ 0x30
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	2200      	movs	r2, #0
 8013022:	4619      	mov	r1, r3
 8013024:	f001 f810 	bl	8014048 <SVPublisher_ASDU_setQuality>
					SVPublisher_ASDU_setINT32(ASDUs[ASDU_num].asdu, ASDUs[ASDU_num].VoltageC, 100 * VoltC[ASDU_num]);
 8013028:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 801302c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8013030:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8013034:	4613      	mov	r3, r2
 8013036:	011b      	lsls	r3, r3, #4
 8013038:	4413      	add	r3, r2
 801303a:	009b      	lsls	r3, r3, #2
 801303c:	440b      	add	r3, r1
 801303e:	6818      	ldr	r0, [r3, #0]
 8013040:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 8013044:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8013048:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 801304c:	4613      	mov	r3, r2
 801304e:	011b      	lsls	r3, r3, #4
 8013050:	4413      	add	r3, r2
 8013052:	009b      	lsls	r3, r3, #2
 8013054:	440b      	add	r3, r1
 8013056:	3334      	adds	r3, #52	@ 0x34
 8013058:	6819      	ldr	r1, [r3, #0]
 801305a:	f897 3246 	ldrb.w	r3, [r7, #582]	@ 0x246
 801305e:	4a50      	ldr	r2, [pc, #320]	@ (80131a0 <IEC61850_SV_Task+0x998>)
 8013060:	009b      	lsls	r3, r3, #2
 8013062:	4413      	add	r3, r2
 8013064:	edd3 7a00 	vldr	s15, [r3]
 8013068:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8013198 <IEC61850_SV_Task+0x990>
 801306c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013070:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013074:	ee17 2a90 	vmov	r2, s15
 8013078:	f000 ffc2 	bl	8014000 <SVPublisher_ASDU_setINT32>
					SVPublisher_ASDU_setQuality(ASDUs[ASDU_num].asdu, ASDUs[ASDU_num].VoltC_Q, QUALITY_VALIDITY_GOOD);
 801307c:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 8013080:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8013084:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8013088:	4613      	mov	r3, r2
 801308a:	011b      	lsls	r3, r3, #4
 801308c:	4413      	add	r3, r2
 801308e:	009b      	lsls	r3, r3, #2
 8013090:	440b      	add	r3, r1
 8013092:	6818      	ldr	r0, [r3, #0]
 8013094:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 8013098:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 801309c:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 80130a0:	4613      	mov	r3, r2
 80130a2:	011b      	lsls	r3, r3, #4
 80130a4:	4413      	add	r3, r2
 80130a6:	009b      	lsls	r3, r3, #2
 80130a8:	440b      	add	r3, r1
 80130aa:	3338      	adds	r3, #56	@ 0x38
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	2200      	movs	r2, #0
 80130b0:	4619      	mov	r1, r3
 80130b2:	f000 ffc9 	bl	8014048 <SVPublisher_ASDU_setQuality>
					SVPublisher_ASDU_setINT32(ASDUs[ASDU_num].asdu, ASDUs[ASDU_num].VoltageN, 0);
 80130b6:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 80130ba:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80130be:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 80130c2:	4613      	mov	r3, r2
 80130c4:	011b      	lsls	r3, r3, #4
 80130c6:	4413      	add	r3, r2
 80130c8:	009b      	lsls	r3, r3, #2
 80130ca:	440b      	add	r3, r1
 80130cc:	6818      	ldr	r0, [r3, #0]
 80130ce:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 80130d2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80130d6:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 80130da:	4613      	mov	r3, r2
 80130dc:	011b      	lsls	r3, r3, #4
 80130de:	4413      	add	r3, r2
 80130e0:	009b      	lsls	r3, r3, #2
 80130e2:	440b      	add	r3, r1
 80130e4:	333c      	adds	r3, #60	@ 0x3c
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	2200      	movs	r2, #0
 80130ea:	4619      	mov	r1, r3
 80130ec:	f000 ff88 	bl	8014000 <SVPublisher_ASDU_setINT32>
					SVPublisher_ASDU_setQuality(ASDUs[ASDU_num].asdu, ASDUs[ASDU_num].VoltN_Q, QUALITY_VALIDITY_GOOD);
 80130f0:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 80130f4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80130f8:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 80130fc:	4613      	mov	r3, r2
 80130fe:	011b      	lsls	r3, r3, #4
 8013100:	4413      	add	r3, r2
 8013102:	009b      	lsls	r3, r3, #2
 8013104:	440b      	add	r3, r1
 8013106:	6818      	ldr	r0, [r3, #0]
 8013108:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 801310c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8013110:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8013114:	4613      	mov	r3, r2
 8013116:	011b      	lsls	r3, r3, #4
 8013118:	4413      	add	r3, r2
 801311a:	009b      	lsls	r3, r3, #2
 801311c:	440b      	add	r3, r1
 801311e:	3340      	adds	r3, #64	@ 0x40
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	2200      	movs	r2, #0
 8013124:	4619      	mov	r1, r3
 8013126:	f000 ff8f 	bl	8014048 <SVPublisher_ASDU_setQuality>

					// Update sample counter
					SVPublisher_ASDU_setSmpCnt(ASDUs[ASDU_num].asdu, smpCnt);
 801312a:	f897 2246 	ldrb.w	r2, [r7, #582]	@ 0x246
 801312e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8013132:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8013136:	4613      	mov	r3, r2
 8013138:	011b      	lsls	r3, r3, #4
 801313a:	4413      	add	r3, r2
 801313c:	009b      	lsls	r3, r3, #2
 801313e:	440b      	add	r3, r1
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	f8b7 2248 	ldrh.w	r2, [r7, #584]	@ 0x248
 8013146:	4611      	mov	r1, r2
 8013148:	4618      	mov	r0, r3
 801314a:	f000 ffa2 	bl	8014092 <SVPublisher_ASDU_setSmpCnt>
					smpCnt++;
 801314e:	f8b7 3248 	ldrh.w	r3, [r7, #584]	@ 0x248
 8013152:	3301      	adds	r3, #1
 8013154:	f8a7 3248 	strh.w	r3, [r7, #584]	@ 0x248
					if (smpCnt >= smpCntMax) {
 8013158:	f8b7 2248 	ldrh.w	r2, [r7, #584]	@ 0x248
 801315c:	f8b7 323e 	ldrh.w	r3, [r7, #574]	@ 0x23e
 8013160:	429a      	cmp	r2, r3
 8013162:	d302      	bcc.n	801316a <IEC61850_SV_Task+0x962>
						smpCnt = 0;
 8013164:	2300      	movs	r3, #0
 8013166:	f8a7 3248 	strh.w	r3, [r7, #584]	@ 0x248
				for (uint8_t ASDU_num = 0; ASDU_num < ASDU_NUM; ++ASDU_num) {
 801316a:	f897 3246 	ldrb.w	r3, [r7, #582]	@ 0x246
 801316e:	3301      	adds	r3, #1
 8013170:	f887 3246 	strb.w	r3, [r7, #582]	@ 0x246
 8013174:	f897 3246 	ldrb.w	r3, [r7, #582]	@ 0x246
 8013178:	2b07      	cmp	r3, #7
 801317a:	f67f addf 	bls.w	8012d3c <IEC61850_SV_Task+0x534>
					}

				}
				// Publish SV frame
				SVPublisher_publish(svPublisher);
 801317e:	4b09      	ldr	r3, [pc, #36]	@ (80131a4 <IEC61850_SV_Task+0x99c>)
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	4618      	mov	r0, r3
 8013184:	f000 fee6 	bl	8013f54 <SVPublisher_publish>
        	if(osSemaphoreAcquire(signalSemHandle , portMAX_DELAY) == osOK) {
 8013188:	e5c4      	b.n	8012d14 <IEC61850_SV_Task+0x50c>

        }

	}

}
 801318a:	bf00      	nop
 801318c:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 8013190:	46bd      	mov	sp, r7
 8013192:	bd90      	pop	{r4, r7, pc}
 8013194:	2000e150 	.word	0x2000e150
 8013198:	42c80000 	.word	0x42c80000
 801319c:	2000e170 	.word	0x2000e170
 80131a0:	2000e190 	.word	0x2000e190
 80131a4:	2000e1b0 	.word	0x2000e1b0

080131a8 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80131a8:	b590      	push	{r4, r7, lr}
 80131aa:	b083      	sub	sp, #12
 80131ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80131ae:	4840      	ldr	r0, [pc, #256]	@ (80132b0 <TIM2_IRQHandler+0x108>)
 80131b0:	f7f0 fc54 	bl	8003a5c <HAL_TIM_IRQHandler>
  		static uint16_t currSample[3] = {0, 85, 171};
  		// Sample number in buffer
  		static uint8_t sampleNum = 0;

  		// 3 phased voltage emulation
  		for (uint8_t i = 0; i < 3; i++) {
 80131b4:	2300      	movs	r3, #0
 80131b6:	71fb      	strb	r3, [r7, #7]
 80131b8:	e02f      	b.n	801321a <TIM2_IRQHandler+0x72>
  			ThreePhasedVolt[i] =  230 * 1.41 * VoltageSamples[currSample[i]++];
 80131ba:	79fb      	ldrb	r3, [r7, #7]
 80131bc:	4a3d      	ldr	r2, [pc, #244]	@ (80132b4 <TIM2_IRQHandler+0x10c>)
 80131be:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80131c2:	1c51      	adds	r1, r2, #1
 80131c4:	b288      	uxth	r0, r1
 80131c6:	493b      	ldr	r1, [pc, #236]	@ (80132b4 <TIM2_IRQHandler+0x10c>)
 80131c8:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]
 80131cc:	4613      	mov	r3, r2
 80131ce:	4a3a      	ldr	r2, [pc, #232]	@ (80132b8 <TIM2_IRQHandler+0x110>)
 80131d0:	009b      	lsls	r3, r3, #2
 80131d2:	4413      	add	r3, r2
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	4618      	mov	r0, r3
 80131d8:	f7ed faf0 	bl	80007bc <__aeabi_f2d>
 80131dc:	a332      	add	r3, pc, #200	@ (adr r3, 80132a8 <TIM2_IRQHandler+0x100>)
 80131de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131e2:	f7ed f85d 	bl	80002a0 <__aeabi_dmul>
 80131e6:	4602      	mov	r2, r0
 80131e8:	460b      	mov	r3, r1
 80131ea:	79fc      	ldrb	r4, [r7, #7]
 80131ec:	4610      	mov	r0, r2
 80131ee:	4619      	mov	r1, r3
 80131f0:	f7ed fb3c 	bl	800086c <__aeabi_d2f>
 80131f4:	4602      	mov	r2, r0
 80131f6:	4931      	ldr	r1, [pc, #196]	@ (80132bc <TIM2_IRQHandler+0x114>)
 80131f8:	00a3      	lsls	r3, r4, #2
 80131fa:	440b      	add	r3, r1
 80131fc:	601a      	str	r2, [r3, #0]

  			if (currSample[i] > POINTS_PER_PERIOD - 1) {
 80131fe:	79fb      	ldrb	r3, [r7, #7]
 8013200:	4a2c      	ldr	r2, [pc, #176]	@ (80132b4 <TIM2_IRQHandler+0x10c>)
 8013202:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013206:	2bff      	cmp	r3, #255	@ 0xff
 8013208:	d904      	bls.n	8013214 <TIM2_IRQHandler+0x6c>
  				currSample[i] = 0;
 801320a:	79fb      	ldrb	r3, [r7, #7]
 801320c:	4a29      	ldr	r2, [pc, #164]	@ (80132b4 <TIM2_IRQHandler+0x10c>)
 801320e:	2100      	movs	r1, #0
 8013210:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  		for (uint8_t i = 0; i < 3; i++) {
 8013214:	79fb      	ldrb	r3, [r7, #7]
 8013216:	3301      	adds	r3, #1
 8013218:	71fb      	strb	r3, [r7, #7]
 801321a:	79fb      	ldrb	r3, [r7, #7]
 801321c:	2b02      	cmp	r3, #2
 801321e:	d9cc      	bls.n	80131ba <TIM2_IRQHandler+0x12>
  			}
  		}

  		// Put voltage in a buffer
  		VoltA[sampleNum] = ThreePhasedVolt[0];
 8013220:	4b27      	ldr	r3, [pc, #156]	@ (80132c0 <TIM2_IRQHandler+0x118>)
 8013222:	781b      	ldrb	r3, [r3, #0]
 8013224:	4618      	mov	r0, r3
 8013226:	4b25      	ldr	r3, [pc, #148]	@ (80132bc <TIM2_IRQHandler+0x114>)
 8013228:	681a      	ldr	r2, [r3, #0]
 801322a:	4926      	ldr	r1, [pc, #152]	@ (80132c4 <TIM2_IRQHandler+0x11c>)
 801322c:	0083      	lsls	r3, r0, #2
 801322e:	440b      	add	r3, r1
 8013230:	601a      	str	r2, [r3, #0]
  		VoltB[sampleNum] = ThreePhasedVolt[1];
 8013232:	4b23      	ldr	r3, [pc, #140]	@ (80132c0 <TIM2_IRQHandler+0x118>)
 8013234:	781b      	ldrb	r3, [r3, #0]
 8013236:	4618      	mov	r0, r3
 8013238:	4b20      	ldr	r3, [pc, #128]	@ (80132bc <TIM2_IRQHandler+0x114>)
 801323a:	685a      	ldr	r2, [r3, #4]
 801323c:	4922      	ldr	r1, [pc, #136]	@ (80132c8 <TIM2_IRQHandler+0x120>)
 801323e:	0083      	lsls	r3, r0, #2
 8013240:	440b      	add	r3, r1
 8013242:	601a      	str	r2, [r3, #0]
  		VoltC[sampleNum] = ThreePhasedVolt[2];
 8013244:	4b1e      	ldr	r3, [pc, #120]	@ (80132c0 <TIM2_IRQHandler+0x118>)
 8013246:	781b      	ldrb	r3, [r3, #0]
 8013248:	4618      	mov	r0, r3
 801324a:	4b1c      	ldr	r3, [pc, #112]	@ (80132bc <TIM2_IRQHandler+0x114>)
 801324c:	689a      	ldr	r2, [r3, #8]
 801324e:	491f      	ldr	r1, [pc, #124]	@ (80132cc <TIM2_IRQHandler+0x124>)
 8013250:	0083      	lsls	r3, r0, #2
 8013252:	440b      	add	r3, r1
 8013254:	601a      	str	r2, [r3, #0]

  		sampleNum++;
 8013256:	4b1a      	ldr	r3, [pc, #104]	@ (80132c0 <TIM2_IRQHandler+0x118>)
 8013258:	781b      	ldrb	r3, [r3, #0]
 801325a:	3301      	adds	r3, #1
 801325c:	b2da      	uxtb	r2, r3
 801325e:	4b18      	ldr	r3, [pc, #96]	@ (80132c0 <TIM2_IRQHandler+0x118>)
 8013260:	701a      	strb	r2, [r3, #0]

  		if (sampleNum > ASDU_NUM - 1) {
 8013262:	4b17      	ldr	r3, [pc, #92]	@ (80132c0 <TIM2_IRQHandler+0x118>)
 8013264:	781b      	ldrb	r3, [r3, #0]
 8013266:	2b07      	cmp	r3, #7
 8013268:	d917      	bls.n	801329a <TIM2_IRQHandler+0xf2>

  			sampleNum = 0;
 801326a:	4b15      	ldr	r3, [pc, #84]	@ (80132c0 <TIM2_IRQHandler+0x118>)
 801326c:	2200      	movs	r2, #0
 801326e:	701a      	strb	r2, [r3, #0]
  			// Give semaphore to SV task
  			static BaseType_t xHigherPriorityTaskWoken;
  			xHigherPriorityTaskWoken = pdFALSE;
 8013270:	4b17      	ldr	r3, [pc, #92]	@ (80132d0 <TIM2_IRQHandler+0x128>)
 8013272:	2200      	movs	r2, #0
 8013274:	601a      	str	r2, [r3, #0]

  			xSemaphoreGiveFromISR(signalSemHandle, &xHigherPriorityTaskWoken);
 8013276:	4b17      	ldr	r3, [pc, #92]	@ (80132d4 <TIM2_IRQHandler+0x12c>)
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	4915      	ldr	r1, [pc, #84]	@ (80132d0 <TIM2_IRQHandler+0x128>)
 801327c:	4618      	mov	r0, r3
 801327e:	f7f2 ff45 	bl	800610c <xQueueGiveFromISR>
  			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8013282:	4b13      	ldr	r3, [pc, #76]	@ (80132d0 <TIM2_IRQHandler+0x128>)
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d007      	beq.n	801329a <TIM2_IRQHandler+0xf2>
 801328a:	4b13      	ldr	r3, [pc, #76]	@ (80132d8 <TIM2_IRQHandler+0x130>)
 801328c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013290:	601a      	str	r2, [r3, #0]
 8013292:	f3bf 8f4f 	dsb	sy
 8013296:	f3bf 8f6f 	isb	sy

  		}

  /* USER CODE END TIM2_IRQn 1 */
}
 801329a:	bf00      	nop
 801329c:	370c      	adds	r7, #12
 801329e:	46bd      	mov	sp, r7
 80132a0:	bd90      	pop	{r4, r7, pc}
 80132a2:	bf00      	nop
 80132a4:	f3af 8000 	nop.w
 80132a8:	cccccccc 	.word	0xcccccccc
 80132ac:	407444cc 	.word	0x407444cc
 80132b0:	2000050c 	.word	0x2000050c
 80132b4:	2000048c 	.word	0x2000048c
 80132b8:	2000002c 	.word	0x2000002c
 80132bc:	2000e144 	.word	0x2000e144
 80132c0:	2000e1b4 	.word	0x2000e1b4
 80132c4:	2000e150 	.word	0x2000e150
 80132c8:	2000e170 	.word	0x2000e170
 80132cc:	2000e190 	.word	0x2000e190
 80132d0:	2000e1b8 	.word	0x2000e1b8
 80132d4:	2000e140 	.word	0x2000e140
 80132d8:	e000ed04 	.word	0xe000ed04

080132dc <BerEncoder_encodeLength>:
#include "libiec61850_platform_includes.h"
#include "ber_encoder.h"

int
BerEncoder_encodeLength(uint32_t length, uint8_t* buffer, int bufPos)
{
 80132dc:	b480      	push	{r7}
 80132de:	b085      	sub	sp, #20
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	60f8      	str	r0, [r7, #12]
 80132e4:	60b9      	str	r1, [r7, #8]
 80132e6:	607a      	str	r2, [r7, #4]
    if (length < 128) {
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80132ec:	d809      	bhi.n	8013302 <BerEncoder_encodeLength+0x26>
        buffer[bufPos++] = (uint8_t) length;
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	1c5a      	adds	r2, r3, #1
 80132f2:	607a      	str	r2, [r7, #4]
 80132f4:	461a      	mov	r2, r3
 80132f6:	68bb      	ldr	r3, [r7, #8]
 80132f8:	4413      	add	r3, r2
 80132fa:	68fa      	ldr	r2, [r7, #12]
 80132fc:	b2d2      	uxtb	r2, r2
 80132fe:	701a      	strb	r2, [r3, #0]
 8013300:	e05b      	b.n	80133ba <BerEncoder_encodeLength+0xde>
    }
    else if (length < 256) {
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	2bff      	cmp	r3, #255	@ 0xff
 8013306:	d811      	bhi.n	801332c <BerEncoder_encodeLength+0x50>
        buffer[bufPos++] = 0x81;
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	1c5a      	adds	r2, r3, #1
 801330c:	607a      	str	r2, [r7, #4]
 801330e:	461a      	mov	r2, r3
 8013310:	68bb      	ldr	r3, [r7, #8]
 8013312:	4413      	add	r3, r2
 8013314:	2281      	movs	r2, #129	@ 0x81
 8013316:	701a      	strb	r2, [r3, #0]
        buffer[bufPos++] = (uint8_t) length;
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	1c5a      	adds	r2, r3, #1
 801331c:	607a      	str	r2, [r7, #4]
 801331e:	461a      	mov	r2, r3
 8013320:	68bb      	ldr	r3, [r7, #8]
 8013322:	4413      	add	r3, r2
 8013324:	68fa      	ldr	r2, [r7, #12]
 8013326:	b2d2      	uxtb	r2, r2
 8013328:	701a      	strb	r2, [r3, #0]
 801332a:	e046      	b.n	80133ba <BerEncoder_encodeLength+0xde>
    }
    else if (length < 65535) {
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8013332:	4293      	cmp	r3, r2
 8013334:	d81b      	bhi.n	801336e <BerEncoder_encodeLength+0x92>
        buffer[bufPos++] = 0x82;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	1c5a      	adds	r2, r3, #1
 801333a:	607a      	str	r2, [r7, #4]
 801333c:	461a      	mov	r2, r3
 801333e:	68bb      	ldr	r3, [r7, #8]
 8013340:	4413      	add	r3, r2
 8013342:	2282      	movs	r2, #130	@ 0x82
 8013344:	701a      	strb	r2, [r3, #0]

        buffer[bufPos++] = (uint8_t) (length / 256);
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	0a19      	lsrs	r1, r3, #8
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	1c5a      	adds	r2, r3, #1
 801334e:	607a      	str	r2, [r7, #4]
 8013350:	461a      	mov	r2, r3
 8013352:	68bb      	ldr	r3, [r7, #8]
 8013354:	4413      	add	r3, r2
 8013356:	b2ca      	uxtb	r2, r1
 8013358:	701a      	strb	r2, [r3, #0]
        buffer[bufPos++] = (uint8_t) (length % 256);
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	1c5a      	adds	r2, r3, #1
 801335e:	607a      	str	r2, [r7, #4]
 8013360:	461a      	mov	r2, r3
 8013362:	68bb      	ldr	r3, [r7, #8]
 8013364:	4413      	add	r3, r2
 8013366:	68fa      	ldr	r2, [r7, #12]
 8013368:	b2d2      	uxtb	r2, r2
 801336a:	701a      	strb	r2, [r3, #0]
 801336c:	e025      	b.n	80133ba <BerEncoder_encodeLength+0xde>
    }
    else {
        buffer[bufPos++] = 0x83;
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	1c5a      	adds	r2, r3, #1
 8013372:	607a      	str	r2, [r7, #4]
 8013374:	461a      	mov	r2, r3
 8013376:	68bb      	ldr	r3, [r7, #8]
 8013378:	4413      	add	r3, r2
 801337a:	2283      	movs	r2, #131	@ 0x83
 801337c:	701a      	strb	r2, [r3, #0]

        buffer[bufPos++] = (uint8_t) (length / 0x10000);
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	0c19      	lsrs	r1, r3, #16
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	1c5a      	adds	r2, r3, #1
 8013386:	607a      	str	r2, [r7, #4]
 8013388:	461a      	mov	r2, r3
 801338a:	68bb      	ldr	r3, [r7, #8]
 801338c:	4413      	add	r3, r2
 801338e:	b2ca      	uxtb	r2, r1
 8013390:	701a      	strb	r2, [r3, #0]
        buffer[bufPos++] = (uint8_t) ((length & 0xffff) / 0x100);
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	b29b      	uxth	r3, r3
 8013396:	0a19      	lsrs	r1, r3, #8
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	1c5a      	adds	r2, r3, #1
 801339c:	607a      	str	r2, [r7, #4]
 801339e:	461a      	mov	r2, r3
 80133a0:	68bb      	ldr	r3, [r7, #8]
 80133a2:	4413      	add	r3, r2
 80133a4:	b2ca      	uxtb	r2, r1
 80133a6:	701a      	strb	r2, [r3, #0]
        buffer[bufPos++] = (uint8_t) (length % 256);
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	1c5a      	adds	r2, r3, #1
 80133ac:	607a      	str	r2, [r7, #4]
 80133ae:	461a      	mov	r2, r3
 80133b0:	68bb      	ldr	r3, [r7, #8]
 80133b2:	4413      	add	r3, r2
 80133b4:	68fa      	ldr	r2, [r7, #12]
 80133b6:	b2d2      	uxtb	r2, r2
 80133b8:	701a      	strb	r2, [r3, #0]
    }

    return bufPos;
 80133ba:	687b      	ldr	r3, [r7, #4]
}
 80133bc:	4618      	mov	r0, r3
 80133be:	3714      	adds	r7, #20
 80133c0:	46bd      	mov	sp, r7
 80133c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c6:	4770      	bx	lr

080133c8 <BerEncoder_encodeTL>:

int
BerEncoder_encodeTL(uint8_t tag, uint32_t length, uint8_t* buffer, int bufPos)
{
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b084      	sub	sp, #16
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	60b9      	str	r1, [r7, #8]
 80133d0:	607a      	str	r2, [r7, #4]
 80133d2:	603b      	str	r3, [r7, #0]
 80133d4:	4603      	mov	r3, r0
 80133d6:	73fb      	strb	r3, [r7, #15]
    buffer[bufPos++] = tag;
 80133d8:	683b      	ldr	r3, [r7, #0]
 80133da:	1c5a      	adds	r2, r3, #1
 80133dc:	603a      	str	r2, [r7, #0]
 80133de:	461a      	mov	r2, r3
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	4413      	add	r3, r2
 80133e4:	7bfa      	ldrb	r2, [r7, #15]
 80133e6:	701a      	strb	r2, [r3, #0]
    bufPos = BerEncoder_encodeLength(length, buffer, bufPos);
 80133e8:	683a      	ldr	r2, [r7, #0]
 80133ea:	6879      	ldr	r1, [r7, #4]
 80133ec:	68b8      	ldr	r0, [r7, #8]
 80133ee:	f7ff ff75 	bl	80132dc <BerEncoder_encodeLength>
 80133f2:	6038      	str	r0, [r7, #0]

    return bufPos;
 80133f4:	683b      	ldr	r3, [r7, #0]
}
 80133f6:	4618      	mov	r0, r3
 80133f8:	3710      	adds	r7, #16
 80133fa:	46bd      	mov	sp, r7
 80133fc:	bd80      	pop	{r7, pc}

080133fe <BerEncoder_encodeStringWithTag>:
    return bufPos;
}

int
BerEncoder_encodeStringWithTag(uint8_t tag, const char* string, uint8_t* buffer, int bufPos)
{
 80133fe:	b580      	push	{r7, lr}
 8013400:	b086      	sub	sp, #24
 8013402:	af00      	add	r7, sp, #0
 8013404:	60b9      	str	r1, [r7, #8]
 8013406:	607a      	str	r2, [r7, #4]
 8013408:	603b      	str	r3, [r7, #0]
 801340a:	4603      	mov	r3, r0
 801340c:	73fb      	strb	r3, [r7, #15]
    buffer[bufPos++] = tag;
 801340e:	683b      	ldr	r3, [r7, #0]
 8013410:	1c5a      	adds	r2, r3, #1
 8013412:	603a      	str	r2, [r7, #0]
 8013414:	461a      	mov	r2, r3
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	4413      	add	r3, r2
 801341a:	7bfa      	ldrb	r2, [r7, #15]
 801341c:	701a      	strb	r2, [r3, #0]

    if (string != NULL) {
 801341e:	68bb      	ldr	r3, [r7, #8]
 8013420:	2b00      	cmp	r3, #0
 8013422:	d021      	beq.n	8013468 <BerEncoder_encodeStringWithTag+0x6a>
        int length = (int) strlen(string);
 8013424:	68b8      	ldr	r0, [r7, #8]
 8013426:	f7ec fee3 	bl	80001f0 <strlen>
 801342a:	4603      	mov	r3, r0
 801342c:	613b      	str	r3, [r7, #16]

        bufPos = BerEncoder_encodeLength((uint32_t) length, buffer, bufPos);
 801342e:	693b      	ldr	r3, [r7, #16]
 8013430:	683a      	ldr	r2, [r7, #0]
 8013432:	6879      	ldr	r1, [r7, #4]
 8013434:	4618      	mov	r0, r3
 8013436:	f7ff ff51 	bl	80132dc <BerEncoder_encodeLength>
 801343a:	6038      	str	r0, [r7, #0]

        int i;
        for (i = 0; i < length; i++) {
 801343c:	2300      	movs	r3, #0
 801343e:	617b      	str	r3, [r7, #20]
 8013440:	e00d      	b.n	801345e <BerEncoder_encodeStringWithTag+0x60>
            buffer[bufPos++] = (uint8_t) string[i];
 8013442:	697b      	ldr	r3, [r7, #20]
 8013444:	68ba      	ldr	r2, [r7, #8]
 8013446:	441a      	add	r2, r3
 8013448:	683b      	ldr	r3, [r7, #0]
 801344a:	1c59      	adds	r1, r3, #1
 801344c:	6039      	str	r1, [r7, #0]
 801344e:	4619      	mov	r1, r3
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	440b      	add	r3, r1
 8013454:	7812      	ldrb	r2, [r2, #0]
 8013456:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < length; i++) {
 8013458:	697b      	ldr	r3, [r7, #20]
 801345a:	3301      	adds	r3, #1
 801345c:	617b      	str	r3, [r7, #20]
 801345e:	697a      	ldr	r2, [r7, #20]
 8013460:	693b      	ldr	r3, [r7, #16]
 8013462:	429a      	cmp	r2, r3
 8013464:	dbed      	blt.n	8013442 <BerEncoder_encodeStringWithTag+0x44>
 8013466:	e007      	b.n	8013478 <BerEncoder_encodeStringWithTag+0x7a>
        }
    }
    else
        buffer[bufPos++] = 0;
 8013468:	683b      	ldr	r3, [r7, #0]
 801346a:	1c5a      	adds	r2, r3, #1
 801346c:	603a      	str	r2, [r7, #0]
 801346e:	461a      	mov	r2, r3
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	4413      	add	r3, r2
 8013474:	2200      	movs	r2, #0
 8013476:	701a      	strb	r2, [r3, #0]

    return bufPos;
 8013478:	683b      	ldr	r3, [r7, #0]
}
 801347a:	4618      	mov	r0, r3
 801347c:	3718      	adds	r7, #24
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}

08013482 <BerEncoder_revertByteOrder>:
    return size;
}

void
BerEncoder_revertByteOrder(uint8_t* octets, const int size)
{
 8013482:	b480      	push	{r7}
 8013484:	b085      	sub	sp, #20
 8013486:	af00      	add	r7, sp, #0
 8013488:	6078      	str	r0, [r7, #4]
 801348a:	6039      	str	r1, [r7, #0]
    int i;

    for (i = 0; i < size / 2; i++) {
 801348c:	2300      	movs	r3, #0
 801348e:	60fb      	str	r3, [r7, #12]
 8013490:	e01c      	b.n	80134cc <BerEncoder_revertByteOrder+0x4a>
        uint8_t temp = octets[i];
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	687a      	ldr	r2, [r7, #4]
 8013496:	4413      	add	r3, r2
 8013498:	781b      	ldrb	r3, [r3, #0]
 801349a:	72fb      	strb	r3, [r7, #11]
        octets[i] = octets[(size - 1) - i];
 801349c:	683b      	ldr	r3, [r7, #0]
 801349e:	1e5a      	subs	r2, r3, #1
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	1ad3      	subs	r3, r2, r3
 80134a4:	461a      	mov	r2, r3
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	441a      	add	r2, r3
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	6879      	ldr	r1, [r7, #4]
 80134ae:	440b      	add	r3, r1
 80134b0:	7812      	ldrb	r2, [r2, #0]
 80134b2:	701a      	strb	r2, [r3, #0]
        octets[(size - 1) - i] = temp;
 80134b4:	683b      	ldr	r3, [r7, #0]
 80134b6:	1e5a      	subs	r2, r3, #1
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	1ad3      	subs	r3, r2, r3
 80134bc:	461a      	mov	r2, r3
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	4413      	add	r3, r2
 80134c2:	7afa      	ldrb	r2, [r7, #11]
 80134c4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size / 2; i++) {
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	3301      	adds	r3, #1
 80134ca:	60fb      	str	r3, [r7, #12]
 80134cc:	683b      	ldr	r3, [r7, #0]
 80134ce:	0fda      	lsrs	r2, r3, #31
 80134d0:	4413      	add	r3, r2
 80134d2:	105b      	asrs	r3, r3, #1
 80134d4:	461a      	mov	r2, r3
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	4293      	cmp	r3, r2
 80134da:	dbda      	blt.n	8013492 <BerEncoder_revertByteOrder+0x10>
    }
}
 80134dc:	bf00      	nop
 80134de:	bf00      	nop
 80134e0:	3714      	adds	r7, #20
 80134e2:	46bd      	mov	sp, r7
 80134e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e8:	4770      	bx	lr

080134ea <BerEncoder_compressInteger>:

int
BerEncoder_compressInteger(uint8_t* integer, int originalSize)
{
 80134ea:	b480      	push	{r7}
 80134ec:	b089      	sub	sp, #36	@ 0x24
 80134ee:	af00      	add	r7, sp, #0
 80134f0:	6078      	str	r0, [r7, #4]
 80134f2:	6039      	str	r1, [r7, #0]
    uint8_t* integerEnd = integer + originalSize - 1;
 80134f4:	683b      	ldr	r3, [r7, #0]
 80134f6:	3b01      	subs	r3, #1
 80134f8:	687a      	ldr	r2, [r7, #4]
 80134fa:	4413      	add	r3, r2
 80134fc:	613b      	str	r3, [r7, #16]
    uint8_t* bytePosition;

    for (bytePosition = integer; bytePosition < integerEnd; bytePosition++) {
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	61fb      	str	r3, [r7, #28]
 8013502:	e018      	b.n	8013536 <BerEncoder_compressInteger+0x4c>

        if (bytePosition[0] == 0x00) {
 8013504:	69fb      	ldr	r3, [r7, #28]
 8013506:	781b      	ldrb	r3, [r3, #0]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d106      	bne.n	801351a <BerEncoder_compressInteger+0x30>
            if ((bytePosition[1] & 0x80) == 0)
 801350c:	69fb      	ldr	r3, [r7, #28]
 801350e:	3301      	adds	r3, #1
 8013510:	781b      	ldrb	r3, [r3, #0]
 8013512:	b25b      	sxtb	r3, r3
 8013514:	2b00      	cmp	r3, #0
 8013516:	db13      	blt.n	8013540 <BerEncoder_compressInteger+0x56>
                continue;
 8013518:	e00a      	b.n	8013530 <BerEncoder_compressInteger+0x46>
        }
        else if (bytePosition[0] == 0xff) {
 801351a:	69fb      	ldr	r3, [r7, #28]
 801351c:	781b      	ldrb	r3, [r3, #0]
 801351e:	2bff      	cmp	r3, #255	@ 0xff
 8013520:	d10e      	bne.n	8013540 <BerEncoder_compressInteger+0x56>
            if ((bytePosition[1] & 0x80) == 0x80)
 8013522:	69fb      	ldr	r3, [r7, #28]
 8013524:	3301      	adds	r3, #1
 8013526:	781b      	ldrb	r3, [r3, #0]
 8013528:	b25b      	sxtb	r3, r3
 801352a:	2b00      	cmp	r3, #0
 801352c:	da08      	bge.n	8013540 <BerEncoder_compressInteger+0x56>
                continue;
 801352e:	bf00      	nop
    for (bytePosition = integer; bytePosition < integerEnd; bytePosition++) {
 8013530:	69fb      	ldr	r3, [r7, #28]
 8013532:	3301      	adds	r3, #1
 8013534:	61fb      	str	r3, [r7, #28]
 8013536:	69fa      	ldr	r2, [r7, #28]
 8013538:	693b      	ldr	r3, [r7, #16]
 801353a:	429a      	cmp	r2, r3
 801353c:	d3e2      	bcc.n	8013504 <BerEncoder_compressInteger+0x1a>
 801353e:	e000      	b.n	8013542 <BerEncoder_compressInteger+0x58>
        }

        break;
 8013540:	bf00      	nop
    }

    int bytesToDelete = bytePosition - integer;
 8013542:	69fa      	ldr	r2, [r7, #28]
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	1ad3      	subs	r3, r2, r3
 8013548:	60fb      	str	r3, [r7, #12]
    int newSize = originalSize;
 801354a:	683b      	ldr	r3, [r7, #0]
 801354c:	61bb      	str	r3, [r7, #24]

    if (bytesToDelete) {
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d018      	beq.n	8013586 <BerEncoder_compressInteger+0x9c>
        newSize -= bytesToDelete;
 8013554:	69ba      	ldr	r2, [r7, #24]
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	1ad3      	subs	r3, r2, r3
 801355a:	61bb      	str	r3, [r7, #24]
        uint8_t* newEnd = integer + newSize;
 801355c:	69bb      	ldr	r3, [r7, #24]
 801355e:	687a      	ldr	r2, [r7, #4]
 8013560:	4413      	add	r3, r2
 8013562:	60bb      	str	r3, [r7, #8]

        uint8_t *newBytePosition;

        for(newBytePosition = integer; newBytePosition < newEnd; newBytePosition++) {
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	617b      	str	r3, [r7, #20]
 8013568:	e009      	b.n	801357e <BerEncoder_compressInteger+0x94>
            *newBytePosition = *bytePosition;
 801356a:	69fb      	ldr	r3, [r7, #28]
 801356c:	781a      	ldrb	r2, [r3, #0]
 801356e:	697b      	ldr	r3, [r7, #20]
 8013570:	701a      	strb	r2, [r3, #0]
             bytePosition++;
 8013572:	69fb      	ldr	r3, [r7, #28]
 8013574:	3301      	adds	r3, #1
 8013576:	61fb      	str	r3, [r7, #28]
        for(newBytePosition = integer; newBytePosition < newEnd; newBytePosition++) {
 8013578:	697b      	ldr	r3, [r7, #20]
 801357a:	3301      	adds	r3, #1
 801357c:	617b      	str	r3, [r7, #20]
 801357e:	697a      	ldr	r2, [r7, #20]
 8013580:	68bb      	ldr	r3, [r7, #8]
 8013582:	429a      	cmp	r2, r3
 8013584:	d3f1      	bcc.n	801356a <BerEncoder_compressInteger+0x80>
        }

    }

    return newSize;
 8013586:	69bb      	ldr	r3, [r7, #24]
}
 8013588:	4618      	mov	r0, r3
 801358a:	3724      	adds	r7, #36	@ 0x24
 801358c:	46bd      	mov	sp, r7
 801358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013592:	4770      	bx	lr

08013594 <BerEncoder_encodeUInt32WithTL>:
    return bufPos;
}

int
BerEncoder_encodeUInt32WithTL(uint8_t tag, uint32_t value, uint8_t* buffer, int bufPos)
{
 8013594:	b580      	push	{r7, lr}
 8013596:	b08a      	sub	sp, #40	@ 0x28
 8013598:	af00      	add	r7, sp, #0
 801359a:	60b9      	str	r1, [r7, #8]
 801359c:	607a      	str	r2, [r7, #4]
 801359e:	603b      	str	r3, [r7, #0]
 80135a0:	4603      	mov	r3, r0
 80135a2:	73fb      	strb	r3, [r7, #15]
    uint8_t* valueArray = (uint8_t*) &value;
 80135a4:	f107 0308 	add.w	r3, r7, #8
 80135a8:	623b      	str	r3, [r7, #32]
    uint8_t valueBuffer[5];

    valueBuffer[0] = 0;
 80135aa:	2300      	movs	r3, #0
 80135ac:	753b      	strb	r3, [r7, #20]

    int i;
    for (i = 0; i < 4; i++) {
 80135ae:	2300      	movs	r3, #0
 80135b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80135b2:	e00c      	b.n	80135ce <BerEncoder_encodeUInt32WithTL+0x3a>
        valueBuffer[i + 1] = valueArray[i];
 80135b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135b6:	6a3a      	ldr	r2, [r7, #32]
 80135b8:	441a      	add	r2, r3
 80135ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135bc:	3301      	adds	r3, #1
 80135be:	7812      	ldrb	r2, [r2, #0]
 80135c0:	3328      	adds	r3, #40	@ 0x28
 80135c2:	443b      	add	r3, r7
 80135c4:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i = 0; i < 4; i++) {
 80135c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135ca:	3301      	adds	r3, #1
 80135cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80135ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135d0:	2b03      	cmp	r3, #3
 80135d2:	ddef      	ble.n	80135b4 <BerEncoder_encodeUInt32WithTL+0x20>
    }

#if (ORDER_LITTLE_ENDIAN == 1)
    BerEncoder_revertByteOrder(valueBuffer + 1, 4);
 80135d4:	f107 0314 	add.w	r3, r7, #20
 80135d8:	3301      	adds	r3, #1
 80135da:	2104      	movs	r1, #4
 80135dc:	4618      	mov	r0, r3
 80135de:	f7ff ff50 	bl	8013482 <BerEncoder_revertByteOrder>
#endif

    int size = BerEncoder_compressInteger(valueBuffer, 5);
 80135e2:	f107 0314 	add.w	r3, r7, #20
 80135e6:	2105      	movs	r1, #5
 80135e8:	4618      	mov	r0, r3
 80135ea:	f7ff ff7e 	bl	80134ea <BerEncoder_compressInteger>
 80135ee:	61f8      	str	r0, [r7, #28]

    buffer[bufPos++] = tag;
 80135f0:	683b      	ldr	r3, [r7, #0]
 80135f2:	1c5a      	adds	r2, r3, #1
 80135f4:	603a      	str	r2, [r7, #0]
 80135f6:	461a      	mov	r2, r3
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	4413      	add	r3, r2
 80135fc:	7bfa      	ldrb	r2, [r7, #15]
 80135fe:	701a      	strb	r2, [r3, #0]
    buffer[bufPos++] = (uint8_t) size;
 8013600:	683b      	ldr	r3, [r7, #0]
 8013602:	1c5a      	adds	r2, r3, #1
 8013604:	603a      	str	r2, [r7, #0]
 8013606:	461a      	mov	r2, r3
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	4413      	add	r3, r2
 801360c:	69fa      	ldr	r2, [r7, #28]
 801360e:	b2d2      	uxtb	r2, r2
 8013610:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < size; i++) {
 8013612:	2300      	movs	r3, #0
 8013614:	627b      	str	r3, [r7, #36]	@ 0x24
 8013616:	e00e      	b.n	8013636 <BerEncoder_encodeUInt32WithTL+0xa2>
        buffer[bufPos++] = valueBuffer[i];
 8013618:	683b      	ldr	r3, [r7, #0]
 801361a:	1c5a      	adds	r2, r3, #1
 801361c:	603a      	str	r2, [r7, #0]
 801361e:	461a      	mov	r2, r3
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	4413      	add	r3, r2
 8013624:	f107 0114 	add.w	r1, r7, #20
 8013628:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801362a:	440a      	add	r2, r1
 801362c:	7812      	ldrb	r2, [r2, #0]
 801362e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++) {
 8013630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013632:	3301      	adds	r3, #1
 8013634:	627b      	str	r3, [r7, #36]	@ 0x24
 8013636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013638:	69fb      	ldr	r3, [r7, #28]
 801363a:	429a      	cmp	r2, r3
 801363c:	dbec      	blt.n	8013618 <BerEncoder_encodeUInt32WithTL+0x84>
    }

    return bufPos;
 801363e:	683b      	ldr	r3, [r7, #0]
}
 8013640:	4618      	mov	r0, r3
 8013642:	3728      	adds	r7, #40	@ 0x28
 8013644:	46bd      	mov	sp, r7
 8013646:	bd80      	pop	{r7, pc}

08013648 <BerEncoder_UInt32determineEncodedSize>:
    return bufPos;
}

int
BerEncoder_UInt32determineEncodedSize(uint32_t value)
{
 8013648:	b580      	push	{r7, lr}
 801364a:	b088      	sub	sp, #32
 801364c:	af00      	add	r7, sp, #0
 801364e:	6078      	str	r0, [r7, #4]
    uint8_t* valueArray = (uint8_t*) &value;
 8013650:	1d3b      	adds	r3, r7, #4
 8013652:	61bb      	str	r3, [r7, #24]
    uint8_t valueBuffer[5];

    valueBuffer[0] = 0;
 8013654:	2300      	movs	r3, #0
 8013656:	733b      	strb	r3, [r7, #12]

    int i;
    for (i = 0; i < 4; i++) {
 8013658:	2300      	movs	r3, #0
 801365a:	61fb      	str	r3, [r7, #28]
 801365c:	e00c      	b.n	8013678 <BerEncoder_UInt32determineEncodedSize+0x30>
       valueBuffer[i + 1] = valueArray[i];
 801365e:	69fb      	ldr	r3, [r7, #28]
 8013660:	69ba      	ldr	r2, [r7, #24]
 8013662:	441a      	add	r2, r3
 8013664:	69fb      	ldr	r3, [r7, #28]
 8013666:	3301      	adds	r3, #1
 8013668:	7812      	ldrb	r2, [r2, #0]
 801366a:	3320      	adds	r3, #32
 801366c:	443b      	add	r3, r7
 801366e:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i = 0; i < 4; i++) {
 8013672:	69fb      	ldr	r3, [r7, #28]
 8013674:	3301      	adds	r3, #1
 8013676:	61fb      	str	r3, [r7, #28]
 8013678:	69fb      	ldr	r3, [r7, #28]
 801367a:	2b03      	cmp	r3, #3
 801367c:	ddef      	ble.n	801365e <BerEncoder_UInt32determineEncodedSize+0x16>
    }

#if (ORDER_LITTLE_ENDIAN == 1)
    BerEncoder_revertByteOrder(valueBuffer + 1, 4);
 801367e:	f107 030c 	add.w	r3, r7, #12
 8013682:	3301      	adds	r3, #1
 8013684:	2104      	movs	r1, #4
 8013686:	4618      	mov	r0, r3
 8013688:	f7ff fefb 	bl	8013482 <BerEncoder_revertByteOrder>
#endif

    int size = BerEncoder_compressInteger(valueBuffer, 5);
 801368c:	f107 030c 	add.w	r3, r7, #12
 8013690:	2105      	movs	r1, #5
 8013692:	4618      	mov	r0, r3
 8013694:	f7ff ff29 	bl	80134ea <BerEncoder_compressInteger>
 8013698:	6178      	str	r0, [r7, #20]

    return size;
 801369a:	697b      	ldr	r3, [r7, #20]
}
 801369c:	4618      	mov	r0, r3
 801369e:	3720      	adds	r7, #32
 80136a0:	46bd      	mov	sp, r7
 80136a2:	bd80      	pop	{r7, pc}

080136a4 <BerEncoder_determineLengthSize>:

int
BerEncoder_determineLengthSize(uint32_t length)
{
 80136a4:	b480      	push	{r7}
 80136a6:	b083      	sub	sp, #12
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	6078      	str	r0, [r7, #4]
    if (length < 128)
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80136b0:	d801      	bhi.n	80136b6 <BerEncoder_determineLengthSize+0x12>
        return 1;
 80136b2:	2301      	movs	r3, #1
 80136b4:	e00b      	b.n	80136ce <BerEncoder_determineLengthSize+0x2a>
    if (length < 256)
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	2bff      	cmp	r3, #255	@ 0xff
 80136ba:	d801      	bhi.n	80136c0 <BerEncoder_determineLengthSize+0x1c>
        return 2;
 80136bc:	2302      	movs	r3, #2
 80136be:	e006      	b.n	80136ce <BerEncoder_determineLengthSize+0x2a>
    if (length < 65536)
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80136c6:	d201      	bcs.n	80136cc <BerEncoder_determineLengthSize+0x28>
        return 3;
 80136c8:	2303      	movs	r3, #3
 80136ca:	e000      	b.n	80136ce <BerEncoder_determineLengthSize+0x2a>
    else
        return 4;
 80136cc:	2304      	movs	r3, #4
}
 80136ce:	4618      	mov	r0, r3
 80136d0:	370c      	adds	r7, #12
 80136d2:	46bd      	mov	sp, r7
 80136d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d8:	4770      	bx	lr

080136da <Ethernet_getInterfaceMACAddress>:
	uint8_t* destAddress;
};


void Ethernet_getInterfaceMACAddress(const char* interfaceId, uint8_t* addr)
{
 80136da:	b580      	push	{r7, lr}
 80136dc:	b084      	sub	sp, #16
 80136de:	af00      	add	r7, sp, #0
 80136e0:	6078      	str	r0, [r7, #4]
 80136e2:	6039      	str	r1, [r7, #0]

	struct netif * netif = netif_find(interfaceId);
 80136e4:	6878      	ldr	r0, [r7, #4]
 80136e6:	f7f6 fbd5 	bl	8009e94 <netif_find>
 80136ea:	60b8      	str	r0, [r7, #8]
	for (int i = 0; i < 6; ++i) {
 80136ec:	2300      	movs	r3, #0
 80136ee:	60fb      	str	r3, [r7, #12]
 80136f0:	e00b      	b.n	801370a <Ethernet_getInterfaceMACAddress+0x30>
		addr[i] = netif->hwaddr[i];
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	683a      	ldr	r2, [r7, #0]
 80136f6:	4413      	add	r3, r2
 80136f8:	68b9      	ldr	r1, [r7, #8]
 80136fa:	68fa      	ldr	r2, [r7, #12]
 80136fc:	440a      	add	r2, r1
 80136fe:	3226      	adds	r2, #38	@ 0x26
 8013700:	7812      	ldrb	r2, [r2, #0]
 8013702:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 6; ++i) {
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	3301      	adds	r3, #1
 8013708:	60fb      	str	r3, [r7, #12]
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	2b05      	cmp	r3, #5
 801370e:	ddf0      	ble.n	80136f2 <Ethernet_getInterfaceMACAddress+0x18>
	}

}
 8013710:	bf00      	nop
 8013712:	bf00      	nop
 8013714:	3710      	adds	r7, #16
 8013716:	46bd      	mov	sp, r7
 8013718:	bd80      	pop	{r7, pc}

0801371a <Ethernet_createSocket>:


EthernetSocket Ethernet_createSocket(const char* interfaceId, uint8_t* destAddress)
{
 801371a:	b580      	push	{r7, lr}
 801371c:	b084      	sub	sp, #16
 801371e:	af00      	add	r7, sp, #0
 8013720:	6078      	str	r0, [r7, #4]
 8013722:	6039      	str	r1, [r7, #0]

	EthernetSocket ethernetSocket = (EthernetSocket) calloc(1, sizeof(struct sEthernetSocket));
 8013724:	2108      	movs	r1, #8
 8013726:	2001      	movs	r0, #1
 8013728:	f000 fce6 	bl	80140f8 <calloc>
 801372c:	4603      	mov	r3, r0
 801372e:	60fb      	str	r3, [r7, #12]
	ethernetSocket->netif = netif_find(interfaceId);
 8013730:	6878      	ldr	r0, [r7, #4]
 8013732:	f7f6 fbaf 	bl	8009e94 <netif_find>
 8013736:	4602      	mov	r2, r0
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	601a      	str	r2, [r3, #0]
	ethernetSocket->destAddress = destAddress;
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	683a      	ldr	r2, [r7, #0]
 8013740:	605a      	str	r2, [r3, #4]
	return ethernetSocket;
 8013742:	68fb      	ldr	r3, [r7, #12]

}
 8013744:	4618      	mov	r0, r3
 8013746:	3710      	adds	r7, #16
 8013748:	46bd      	mov	sp, r7
 801374a:	bd80      	pop	{r7, pc}

0801374c <Ethernet_destroySocket>:


void Ethernet_destroySocket(EthernetSocket ethSocket)
{
 801374c:	b580      	push	{r7, lr}
 801374e:	b082      	sub	sp, #8
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]

	free(ethSocket);
 8013754:	6878      	ldr	r0, [r7, #4]
 8013756:	f000 fcf3 	bl	8014140 <free>

}
 801375a:	bf00      	nop
 801375c:	3708      	adds	r7, #8
 801375e:	46bd      	mov	sp, r7
 8013760:	bd80      	pop	{r7, pc}

08013762 <Ethernet_sendPacket>:

void Ethernet_sendPacket(EthernetSocket ethSocket, uint8_t* buffer, int packetSize)
{
 8013762:	b580      	push	{r7, lr}
 8013764:	b088      	sub	sp, #32
 8013766:	af00      	add	r7, sp, #0
 8013768:	60f8      	str	r0, [r7, #12]
 801376a:	60b9      	str	r1, [r7, #8]
 801376c:	607a      	str	r2, [r7, #4]
	struct pbuf bufToSend;
	bufToSend.next = NULL;
 801376e:	2300      	movs	r3, #0
 8013770:	613b      	str	r3, [r7, #16]
	bufToSend.payload = (void *)buffer;
 8013772:	68bb      	ldr	r3, [r7, #8]
 8013774:	617b      	str	r3, [r7, #20]
	bufToSend.tot_len = packetSize;
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	b29b      	uxth	r3, r3
 801377a:	833b      	strh	r3, [r7, #24]
	bufToSend.len = packetSize;
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	b29b      	uxth	r3, r3
 8013780:	837b      	strh	r3, [r7, #26]
	bufToSend.flags = 117;
 8013782:	2375      	movs	r3, #117	@ 0x75
 8013784:	777b      	strb	r3, [r7, #29]
	ethSocket->netif->linkoutput(ethSocket->netif, &bufToSend);
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	699b      	ldr	r3, [r3, #24]
 801378c:	68fa      	ldr	r2, [r7, #12]
 801378e:	6812      	ldr	r2, [r2, #0]
 8013790:	f107 0110 	add.w	r1, r7, #16
 8013794:	4610      	mov	r0, r2
 8013796:	4798      	blx	r3

}
 8013798:	bf00      	nop
 801379a:	3720      	adds	r7, #32
 801379c:	46bd      	mov	sp, r7
 801379e:	bd80      	pop	{r7, pc}

080137a0 <noMemoryAvailableHandler>:
static MemoryExceptionHandler exceptionHandler = NULL;
static void* exceptionHandlerParameter = NULL;

static void
noMemoryAvailableHandler(void)
{
 80137a0:	b580      	push	{r7, lr}
 80137a2:	af00      	add	r7, sp, #0
    if (exceptionHandler != NULL)
 80137a4:	4b05      	ldr	r3, [pc, #20]	@ (80137bc <noMemoryAvailableHandler+0x1c>)
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d005      	beq.n	80137b8 <noMemoryAvailableHandler+0x18>
        exceptionHandler(exceptionHandlerParameter);
 80137ac:	4b03      	ldr	r3, [pc, #12]	@ (80137bc <noMemoryAvailableHandler+0x1c>)
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	4a03      	ldr	r2, [pc, #12]	@ (80137c0 <noMemoryAvailableHandler+0x20>)
 80137b2:	6812      	ldr	r2, [r2, #0]
 80137b4:	4610      	mov	r0, r2
 80137b6:	4798      	blx	r3
}
 80137b8:	bf00      	nop
 80137ba:	bd80      	pop	{r7, pc}
 80137bc:	2000e1bc 	.word	0x2000e1bc
 80137c0:	2000e1c0 	.word	0x2000e1c0

080137c4 <Memory_malloc>:
    exceptionHandlerParameter = parameter;
}

void*
Memory_malloc(size_t size)
{
 80137c4:	b580      	push	{r7, lr}
 80137c6:	b084      	sub	sp, #16
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6078      	str	r0, [r7, #4]
    void* memory = malloc(size);
 80137cc:	6878      	ldr	r0, [r7, #4]
 80137ce:	f000 fcaf 	bl	8014130 <malloc>
 80137d2:	4603      	mov	r3, r0
 80137d4:	60fb      	str	r3, [r7, #12]

    if (memory == NULL)
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d101      	bne.n	80137e0 <Memory_malloc+0x1c>
        noMemoryAvailableHandler();
 80137dc:	f7ff ffe0 	bl	80137a0 <noMemoryAvailableHandler>

    return memory;
 80137e0:	68fb      	ldr	r3, [r7, #12]
}
 80137e2:	4618      	mov	r0, r3
 80137e4:	3710      	adds	r7, #16
 80137e6:	46bd      	mov	sp, r7
 80137e8:	bd80      	pop	{r7, pc}

080137ea <Memory_calloc>:


void*
Memory_calloc(size_t nmemb, size_t size)
{
 80137ea:	b580      	push	{r7, lr}
 80137ec:	b084      	sub	sp, #16
 80137ee:	af00      	add	r7, sp, #0
 80137f0:	6078      	str	r0, [r7, #4]
 80137f2:	6039      	str	r1, [r7, #0]
    void* memory = calloc(nmemb, size);
 80137f4:	6839      	ldr	r1, [r7, #0]
 80137f6:	6878      	ldr	r0, [r7, #4]
 80137f8:	f000 fc7e 	bl	80140f8 <calloc>
 80137fc:	4603      	mov	r3, r0
 80137fe:	60fb      	str	r3, [r7, #12]

    if (memory == NULL)
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d101      	bne.n	801380a <Memory_calloc+0x20>
        noMemoryAvailableHandler();
 8013806:	f7ff ffcb 	bl	80137a0 <noMemoryAvailableHandler>

    return memory;
 801380a:	68fb      	ldr	r3, [r7, #12]
}
 801380c:	4618      	mov	r0, r3
 801380e:	3710      	adds	r7, #16
 8013810:	46bd      	mov	sp, r7
 8013812:	bd80      	pop	{r7, pc}

08013814 <Memory_free>:
    return memory;
}

void
Memory_free(void* memb)
{
 8013814:	b580      	push	{r7, lr}
 8013816:	b082      	sub	sp, #8
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
    free(memb);
 801381c:	6878      	ldr	r0, [r7, #4]
 801381e:	f000 fc8f 	bl	8014140 <free>
}
 8013822:	bf00      	nop
 8013824:	3708      	adds	r7, #8
 8013826:	46bd      	mov	sp, r7
 8013828:	bd80      	pop	{r7, pc}
	...

0801382c <preparePacketBuffer>:
};


static bool
preparePacketBuffer(SVPublisher self, CommParameters* parameters, const char* interfaceId, bool useVlanTags)
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b08c      	sub	sp, #48	@ 0x30
 8013830:	af00      	add	r7, sp, #0
 8013832:	60f8      	str	r0, [r7, #12]
 8013834:	60b9      	str	r1, [r7, #8]
 8013836:	607a      	str	r2, [r7, #4]
 8013838:	70fb      	strb	r3, [r7, #3]
    uint8_t defaultDstAddr[] = CONFIG_SV_DEFAULT_DST_ADDRESS;
 801383a:	4a7e      	ldr	r2, [pc, #504]	@ (8013a34 <preparePacketBuffer+0x208>)
 801383c:	f107 0318 	add.w	r3, r7, #24
 8013840:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013844:	6018      	str	r0, [r3, #0]
 8013846:	3304      	adds	r3, #4
 8013848:	8019      	strh	r1, [r3, #0]
    uint16_t vlanId;
    uint16_t appId;

    uint8_t srcAddr[6];

    if (interfaceId != NULL)
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d006      	beq.n	801385e <preparePacketBuffer+0x32>
        Ethernet_getInterfaceMACAddress(interfaceId, srcAddr);
 8013850:	f107 0310 	add.w	r3, r7, #16
 8013854:	4619      	mov	r1, r3
 8013856:	6878      	ldr	r0, [r7, #4]
 8013858:	f7ff ff3f 	bl	80136da <Ethernet_getInterfaceMACAddress>
 801385c:	e005      	b.n	801386a <preparePacketBuffer+0x3e>
    else
        Ethernet_getInterfaceMACAddress(CONFIG_ETHERNET_INTERFACE_ID, srcAddr);
 801385e:	f107 0310 	add.w	r3, r7, #16
 8013862:	4619      	mov	r1, r3
 8013864:	4874      	ldr	r0, [pc, #464]	@ (8013a38 <preparePacketBuffer+0x20c>)
 8013866:	f7ff ff38 	bl	80136da <Ethernet_getInterfaceMACAddress>

    if (parameters == NULL) {
 801386a:	68bb      	ldr	r3, [r7, #8]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d10b      	bne.n	8013888 <preparePacketBuffer+0x5c>
        dstAddr = defaultDstAddr;
 8013870:	f107 0318 	add.w	r3, r7, #24
 8013874:	62fb      	str	r3, [r7, #44]	@ 0x2c
        priority = CONFIG_SV_DEFAULT_PRIORITY;
 8013876:	2304      	movs	r3, #4
 8013878:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        vlanId = CONFIG_SV_DEFAULT_VLAN_ID;
 801387c:	2300      	movs	r3, #0
 801387e:	853b      	strh	r3, [r7, #40]	@ 0x28
        appId = CONFIG_SV_DEFAULT_APPID;
 8013880:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8013884:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8013886:	e00c      	b.n	80138a2 <preparePacketBuffer+0x76>
    }
    else {
        dstAddr = parameters->dstAddress;
 8013888:	68bb      	ldr	r3, [r7, #8]
 801388a:	3306      	adds	r3, #6
 801388c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        priority = parameters->vlanPriority;
 801388e:	68bb      	ldr	r3, [r7, #8]
 8013890:	781b      	ldrb	r3, [r3, #0]
 8013892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        vlanId = parameters->vlanId;
 8013896:	68bb      	ldr	r3, [r7, #8]
 8013898:	885b      	ldrh	r3, [r3, #2]
 801389a:	853b      	strh	r3, [r7, #40]	@ 0x28
        appId = parameters->appId;
 801389c:	68bb      	ldr	r3, [r7, #8]
 801389e:	889b      	ldrh	r3, [r3, #4]
 80138a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    if (interfaceId != NULL)
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d007      	beq.n	80138b8 <preparePacketBuffer+0x8c>
        self->ethernetSocket = Ethernet_createSocket(interfaceId, dstAddr);
 80138a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80138aa:	6878      	ldr	r0, [r7, #4]
 80138ac:	f7ff ff35 	bl	801371a <Ethernet_createSocket>
 80138b0:	4602      	mov	r2, r0
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	609a      	str	r2, [r3, #8]
 80138b6:	e006      	b.n	80138c6 <preparePacketBuffer+0x9a>
    else
        self->ethernetSocket = Ethernet_createSocket(CONFIG_ETHERNET_INTERFACE_ID, dstAddr);
 80138b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80138ba:	485f      	ldr	r0, [pc, #380]	@ (8013a38 <preparePacketBuffer+0x20c>)
 80138bc:	f7ff ff2d 	bl	801371a <Ethernet_createSocket>
 80138c0:	4602      	mov	r2, r0
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	609a      	str	r2, [r3, #8]

    if (self->ethernetSocket == NULL) {
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	689b      	ldr	r3, [r3, #8]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d101      	bne.n	80138d2 <preparePacketBuffer+0xa6>

        if (DEBUG_SV_PUBLISHER)
            printf("SV_PUBLISHER: Failed to allocate Ethernet interface\n");

        return false;
 80138ce:	2300      	movs	r3, #0
 80138d0:	e0ab      	b.n	8013a2a <preparePacketBuffer+0x1fe>
    }

    self->buffer = (uint8_t*) GLOBAL_MALLOC(SV_MAX_MESSAGE_SIZE);
 80138d2:	f240 50ee 	movw	r0, #1518	@ 0x5ee
 80138d6:	f7ff ff75 	bl	80137c4 <Memory_malloc>
 80138da:	4602      	mov	r2, r0
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	601a      	str	r2, [r3, #0]

    if (self->buffer) {
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	f000 809f 	beq.w	8013a28 <preparePacketBuffer+0x1fc>
        memcpy(self->buffer, dstAddr, 6);
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	2206      	movs	r2, #6
 80138f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80138f2:	4618      	mov	r0, r3
 80138f4:	f000 ff4f 	bl	8014796 <memcpy>
        memcpy(self->buffer + 6, srcAddr, 6);
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	3306      	adds	r3, #6
 80138fe:	461a      	mov	r2, r3
 8013900:	f107 0310 	add.w	r3, r7, #16
 8013904:	6818      	ldr	r0, [r3, #0]
 8013906:	6010      	str	r0, [r2, #0]
 8013908:	889b      	ldrh	r3, [r3, #4]
 801390a:	8093      	strh	r3, [r2, #4]

        int bufPos = 12;
 801390c:	230c      	movs	r3, #12
 801390e:	623b      	str	r3, [r7, #32]

        if (useVlanTags) {
 8013910:	78fb      	ldrb	r3, [r7, #3]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d02c      	beq.n	8013970 <preparePacketBuffer+0x144>
            /* Priority tag - IEEE 802.1Q */
            self->buffer[bufPos++] = 0x81;
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	681a      	ldr	r2, [r3, #0]
 801391a:	6a3b      	ldr	r3, [r7, #32]
 801391c:	1c59      	adds	r1, r3, #1
 801391e:	6239      	str	r1, [r7, #32]
 8013920:	4413      	add	r3, r2
 8013922:	2281      	movs	r2, #129	@ 0x81
 8013924:	701a      	strb	r2, [r3, #0]
            self->buffer[bufPos++] = 0x00;
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	681a      	ldr	r2, [r3, #0]
 801392a:	6a3b      	ldr	r3, [r7, #32]
 801392c:	1c59      	adds	r1, r3, #1
 801392e:	6239      	str	r1, [r7, #32]
 8013930:	4413      	add	r3, r2
 8013932:	2200      	movs	r2, #0
 8013934:	701a      	strb	r2, [r3, #0]

            uint8_t tci1 = priority << 5;
 8013936:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801393a:	015b      	lsls	r3, r3, #5
 801393c:	77fb      	strb	r3, [r7, #31]
            tci1 += vlanId / 256;
 801393e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8013940:	0a1b      	lsrs	r3, r3, #8
 8013942:	b29b      	uxth	r3, r3
 8013944:	b2da      	uxtb	r2, r3
 8013946:	7ffb      	ldrb	r3, [r7, #31]
 8013948:	4413      	add	r3, r2
 801394a:	77fb      	strb	r3, [r7, #31]

            uint8_t tci2 = vlanId % 256;
 801394c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801394e:	77bb      	strb	r3, [r7, #30]

            self->buffer[bufPos++] = tci1; /* Priority + VLAN-ID */
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	681a      	ldr	r2, [r3, #0]
 8013954:	6a3b      	ldr	r3, [r7, #32]
 8013956:	1c59      	adds	r1, r3, #1
 8013958:	6239      	str	r1, [r7, #32]
 801395a:	4413      	add	r3, r2
 801395c:	7ffa      	ldrb	r2, [r7, #31]
 801395e:	701a      	strb	r2, [r3, #0]
            self->buffer[bufPos++] = tci2; /* VLAN-ID */
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	681a      	ldr	r2, [r3, #0]
 8013964:	6a3b      	ldr	r3, [r7, #32]
 8013966:	1c59      	adds	r1, r3, #1
 8013968:	6239      	str	r1, [r7, #32]
 801396a:	4413      	add	r3, r2
 801396c:	7fba      	ldrb	r2, [r7, #30]
 801396e:	701a      	strb	r2, [r3, #0]
        }

        /* EtherType Sampled Values */
        self->buffer[bufPos++] = 0x88;
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	681a      	ldr	r2, [r3, #0]
 8013974:	6a3b      	ldr	r3, [r7, #32]
 8013976:	1c59      	adds	r1, r3, #1
 8013978:	6239      	str	r1, [r7, #32]
 801397a:	4413      	add	r3, r2
 801397c:	2288      	movs	r2, #136	@ 0x88
 801397e:	701a      	strb	r2, [r3, #0]
        self->buffer[bufPos++] = 0xBa;
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	681a      	ldr	r2, [r3, #0]
 8013984:	6a3b      	ldr	r3, [r7, #32]
 8013986:	1c59      	adds	r1, r3, #1
 8013988:	6239      	str	r1, [r7, #32]
 801398a:	4413      	add	r3, r2
 801398c:	22ba      	movs	r2, #186	@ 0xba
 801398e:	701a      	strb	r2, [r3, #0]

        /* APPID */
        self->buffer[bufPos++] = appId / 256;
 8013990:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013992:	0a1b      	lsrs	r3, r3, #8
 8013994:	b298      	uxth	r0, r3
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	681a      	ldr	r2, [r3, #0]
 801399a:	6a3b      	ldr	r3, [r7, #32]
 801399c:	1c59      	adds	r1, r3, #1
 801399e:	6239      	str	r1, [r7, #32]
 80139a0:	4413      	add	r3, r2
 80139a2:	b2c2      	uxtb	r2, r0
 80139a4:	701a      	strb	r2, [r3, #0]
        self->buffer[bufPos++] = appId % 256;
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	681a      	ldr	r2, [r3, #0]
 80139aa:	6a3b      	ldr	r3, [r7, #32]
 80139ac:	1c59      	adds	r1, r3, #1
 80139ae:	6239      	str	r1, [r7, #32]
 80139b0:	4413      	add	r3, r2
 80139b2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80139b4:	b2d2      	uxtb	r2, r2
 80139b6:	701a      	strb	r2, [r3, #0]

        self->lengthField = bufPos;
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	6a3a      	ldr	r2, [r7, #32]
 80139bc:	60da      	str	r2, [r3, #12]

        /* Length */
        self->buffer[bufPos++] = 0x00;
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	681a      	ldr	r2, [r3, #0]
 80139c2:	6a3b      	ldr	r3, [r7, #32]
 80139c4:	1c59      	adds	r1, r3, #1
 80139c6:	6239      	str	r1, [r7, #32]
 80139c8:	4413      	add	r3, r2
 80139ca:	2200      	movs	r2, #0
 80139cc:	701a      	strb	r2, [r3, #0]
        self->buffer[bufPos++] = 0x08;
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	681a      	ldr	r2, [r3, #0]
 80139d2:	6a3b      	ldr	r3, [r7, #32]
 80139d4:	1c59      	adds	r1, r3, #1
 80139d6:	6239      	str	r1, [r7, #32]
 80139d8:	4413      	add	r3, r2
 80139da:	2208      	movs	r2, #8
 80139dc:	701a      	strb	r2, [r3, #0]

        /* Reserved1 */
        self->buffer[bufPos++] = 0x00;
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	681a      	ldr	r2, [r3, #0]
 80139e2:	6a3b      	ldr	r3, [r7, #32]
 80139e4:	1c59      	adds	r1, r3, #1
 80139e6:	6239      	str	r1, [r7, #32]
 80139e8:	4413      	add	r3, r2
 80139ea:	2200      	movs	r2, #0
 80139ec:	701a      	strb	r2, [r3, #0]
        self->buffer[bufPos++] = 0x00;
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	681a      	ldr	r2, [r3, #0]
 80139f2:	6a3b      	ldr	r3, [r7, #32]
 80139f4:	1c59      	adds	r1, r3, #1
 80139f6:	6239      	str	r1, [r7, #32]
 80139f8:	4413      	add	r3, r2
 80139fa:	2200      	movs	r2, #0
 80139fc:	701a      	strb	r2, [r3, #0]

        /* Reserved2 */
        self->buffer[bufPos++] = 0x00;
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	681a      	ldr	r2, [r3, #0]
 8013a02:	6a3b      	ldr	r3, [r7, #32]
 8013a04:	1c59      	adds	r1, r3, #1
 8013a06:	6239      	str	r1, [r7, #32]
 8013a08:	4413      	add	r3, r2
 8013a0a:	2200      	movs	r2, #0
 8013a0c:	701a      	strb	r2, [r3, #0]
        self->buffer[bufPos++] = 0x00;
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	681a      	ldr	r2, [r3, #0]
 8013a12:	6a3b      	ldr	r3, [r7, #32]
 8013a14:	1c59      	adds	r1, r3, #1
 8013a16:	6239      	str	r1, [r7, #32]
 8013a18:	4413      	add	r3, r2
 8013a1a:	2200      	movs	r2, #0
 8013a1c:	701a      	strb	r2, [r3, #0]

        self->payloadStart = bufPos;
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	6a3a      	ldr	r2, [r7, #32]
 8013a22:	611a      	str	r2, [r3, #16]
    }
    else {
        return false;
    }

    return true;
 8013a24:	2301      	movs	r3, #1
 8013a26:	e000      	b.n	8013a2a <preparePacketBuffer+0x1fe>
        return false;
 8013a28:	2300      	movs	r3, #0
}
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	3730      	adds	r7, #48	@ 0x30
 8013a2e:	46bd      	mov	sp, r7
 8013a30:	bd80      	pop	{r7, pc}
 8013a32:	bf00      	nop
 8013a34:	08017a5c 	.word	0x08017a5c
 8013a38:	08017a54 	.word	0x08017a54

08013a3c <encodeUInt16FixedSize>:


static int
encodeUInt16FixedSize(uint16_t value, uint8_t* buffer, int bufPos)
{
 8013a3c:	b480      	push	{r7}
 8013a3e:	b087      	sub	sp, #28
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	4603      	mov	r3, r0
 8013a44:	60b9      	str	r1, [r7, #8]
 8013a46:	607a      	str	r2, [r7, #4]
 8013a48:	81fb      	strh	r3, [r7, #14]
    uint8_t* valueArray = (uint8_t*) &value;
 8013a4a:	f107 030e 	add.w	r3, r7, #14
 8013a4e:	617b      	str	r3, [r7, #20]

#if (ORDER_LITTLE_ENDIAN == 1)
    buffer[bufPos++] = valueArray[1];
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	1c5a      	adds	r2, r3, #1
 8013a54:	607a      	str	r2, [r7, #4]
 8013a56:	461a      	mov	r2, r3
 8013a58:	68bb      	ldr	r3, [r7, #8]
 8013a5a:	4413      	add	r3, r2
 8013a5c:	697a      	ldr	r2, [r7, #20]
 8013a5e:	7852      	ldrb	r2, [r2, #1]
 8013a60:	701a      	strb	r2, [r3, #0]
    buffer[bufPos++] = valueArray[0];
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	1c5a      	adds	r2, r3, #1
 8013a66:	607a      	str	r2, [r7, #4]
 8013a68:	461a      	mov	r2, r3
 8013a6a:	68bb      	ldr	r3, [r7, #8]
 8013a6c:	4413      	add	r3, r2
 8013a6e:	697a      	ldr	r2, [r7, #20]
 8013a70:	7812      	ldrb	r2, [r2, #0]
 8013a72:	701a      	strb	r2, [r3, #0]
#else
    buffer[bufPos++] = valueArray[0];
    buffer[bufPos++] = valueArray[1];
#endif

    return bufPos;
 8013a74:	687b      	ldr	r3, [r7, #4]
}
 8013a76:	4618      	mov	r0, r3
 8013a78:	371c      	adds	r7, #28
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a80:	4770      	bx	lr

08013a82 <encodeUInt32FixedSize>:

static int
encodeUInt32FixedSize(uint32_t value, uint8_t* buffer, int bufPos)
{
 8013a82:	b480      	push	{r7}
 8013a84:	b087      	sub	sp, #28
 8013a86:	af00      	add	r7, sp, #0
 8013a88:	60f8      	str	r0, [r7, #12]
 8013a8a:	60b9      	str	r1, [r7, #8]
 8013a8c:	607a      	str	r2, [r7, #4]
    uint8_t* valueArray = (uint8_t*) &value;
 8013a8e:	f107 030c 	add.w	r3, r7, #12
 8013a92:	617b      	str	r3, [r7, #20]

#if (ORDER_LITTLE_ENDIAN == 1)
    buffer[bufPos++] = valueArray[3];
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	1c5a      	adds	r2, r3, #1
 8013a98:	607a      	str	r2, [r7, #4]
 8013a9a:	461a      	mov	r2, r3
 8013a9c:	68bb      	ldr	r3, [r7, #8]
 8013a9e:	4413      	add	r3, r2
 8013aa0:	697a      	ldr	r2, [r7, #20]
 8013aa2:	78d2      	ldrb	r2, [r2, #3]
 8013aa4:	701a      	strb	r2, [r3, #0]
    buffer[bufPos++] = valueArray[2];
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	1c5a      	adds	r2, r3, #1
 8013aaa:	607a      	str	r2, [r7, #4]
 8013aac:	461a      	mov	r2, r3
 8013aae:	68bb      	ldr	r3, [r7, #8]
 8013ab0:	4413      	add	r3, r2
 8013ab2:	697a      	ldr	r2, [r7, #20]
 8013ab4:	7892      	ldrb	r2, [r2, #2]
 8013ab6:	701a      	strb	r2, [r3, #0]
    buffer[bufPos++] = valueArray[1];
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	1c5a      	adds	r2, r3, #1
 8013abc:	607a      	str	r2, [r7, #4]
 8013abe:	461a      	mov	r2, r3
 8013ac0:	68bb      	ldr	r3, [r7, #8]
 8013ac2:	4413      	add	r3, r2
 8013ac4:	697a      	ldr	r2, [r7, #20]
 8013ac6:	7852      	ldrb	r2, [r2, #1]
 8013ac8:	701a      	strb	r2, [r3, #0]
    buffer[bufPos++] = valueArray[0];
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	1c5a      	adds	r2, r3, #1
 8013ace:	607a      	str	r2, [r7, #4]
 8013ad0:	461a      	mov	r2, r3
 8013ad2:	68bb      	ldr	r3, [r7, #8]
 8013ad4:	4413      	add	r3, r2
 8013ad6:	697a      	ldr	r2, [r7, #20]
 8013ad8:	7812      	ldrb	r2, [r2, #0]
 8013ada:	701a      	strb	r2, [r3, #0]
    buffer[bufPos++] = valueArray[1];
    buffer[bufPos++] = valueArray[2];
    buffer[bufPos++] = valueArray[3];
#endif

    return bufPos;
 8013adc:	687b      	ldr	r3, [r7, #4]
}
 8013ade:	4618      	mov	r0, r3
 8013ae0:	371c      	adds	r7, #28
 8013ae2:	46bd      	mov	sp, r7
 8013ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae8:	4770      	bx	lr

08013aea <encodeInt32FixedSize>:

static int
encodeInt32FixedSize(int32_t value, uint8_t* buffer, int bufPos)
{
 8013aea:	b480      	push	{r7}
 8013aec:	b087      	sub	sp, #28
 8013aee:	af00      	add	r7, sp, #0
 8013af0:	60f8      	str	r0, [r7, #12]
 8013af2:	60b9      	str	r1, [r7, #8]
 8013af4:	607a      	str	r2, [r7, #4]
    uint8_t* valueArray = (uint8_t*) &value;
 8013af6:	f107 030c 	add.w	r3, r7, #12
 8013afa:	617b      	str	r3, [r7, #20]

#if (ORDER_LITTLE_ENDIAN == 1)
    buffer[bufPos++] = valueArray[3];
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	1c5a      	adds	r2, r3, #1
 8013b00:	607a      	str	r2, [r7, #4]
 8013b02:	461a      	mov	r2, r3
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	4413      	add	r3, r2
 8013b08:	697a      	ldr	r2, [r7, #20]
 8013b0a:	78d2      	ldrb	r2, [r2, #3]
 8013b0c:	701a      	strb	r2, [r3, #0]
    buffer[bufPos++] = valueArray[2];
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	1c5a      	adds	r2, r3, #1
 8013b12:	607a      	str	r2, [r7, #4]
 8013b14:	461a      	mov	r2, r3
 8013b16:	68bb      	ldr	r3, [r7, #8]
 8013b18:	4413      	add	r3, r2
 8013b1a:	697a      	ldr	r2, [r7, #20]
 8013b1c:	7892      	ldrb	r2, [r2, #2]
 8013b1e:	701a      	strb	r2, [r3, #0]
    buffer[bufPos++] = valueArray[1];
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	1c5a      	adds	r2, r3, #1
 8013b24:	607a      	str	r2, [r7, #4]
 8013b26:	461a      	mov	r2, r3
 8013b28:	68bb      	ldr	r3, [r7, #8]
 8013b2a:	4413      	add	r3, r2
 8013b2c:	697a      	ldr	r2, [r7, #20]
 8013b2e:	7852      	ldrb	r2, [r2, #1]
 8013b30:	701a      	strb	r2, [r3, #0]
    buffer[bufPos++] = valueArray[0];
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	1c5a      	adds	r2, r3, #1
 8013b36:	607a      	str	r2, [r7, #4]
 8013b38:	461a      	mov	r2, r3
 8013b3a:	68bb      	ldr	r3, [r7, #8]
 8013b3c:	4413      	add	r3, r2
 8013b3e:	697a      	ldr	r2, [r7, #20]
 8013b40:	7812      	ldrb	r2, [r2, #0]
 8013b42:	701a      	strb	r2, [r3, #0]
    buffer[bufPos++] = valueArray[1];
    buffer[bufPos++] = valueArray[2];
    buffer[bufPos++] = valueArray[3];
#endif

    return bufPos;
 8013b44:	687b      	ldr	r3, [r7, #4]
}
 8013b46:	4618      	mov	r0, r3
 8013b48:	371c      	adds	r7, #28
 8013b4a:	46bd      	mov	sp, r7
 8013b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b50:	4770      	bx	lr

08013b52 <SVPublisher_createEx>:
    return bufPos;
}

SVPublisher
SVPublisher_createEx(CommParameters* parameters, const char* interfaceId, bool useVlanTag)
{
 8013b52:	b580      	push	{r7, lr}
 8013b54:	b086      	sub	sp, #24
 8013b56:	af00      	add	r7, sp, #0
 8013b58:	60f8      	str	r0, [r7, #12]
 8013b5a:	60b9      	str	r1, [r7, #8]
 8013b5c:	4613      	mov	r3, r2
 8013b5e:	71fb      	strb	r3, [r7, #7]
    SVPublisher self = (SVPublisher) GLOBAL_CALLOC(1, sizeof(struct sSVPublisher));
 8013b60:	2120      	movs	r1, #32
 8013b62:	2001      	movs	r0, #1
 8013b64:	f7ff fe41 	bl	80137ea <Memory_calloc>
 8013b68:	6178      	str	r0, [r7, #20]

    if (self) {
 8013b6a:	697b      	ldr	r3, [r7, #20]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d013      	beq.n	8013b98 <SVPublisher_createEx+0x46>
        self->asduList = NULL;
 8013b70:	697b      	ldr	r3, [r7, #20]
 8013b72:	2200      	movs	r2, #0
 8013b74:	61da      	str	r2, [r3, #28]

        if (preparePacketBuffer(self, parameters, interfaceId, useVlanTag) == false) {
 8013b76:	79fb      	ldrb	r3, [r7, #7]
 8013b78:	68ba      	ldr	r2, [r7, #8]
 8013b7a:	68f9      	ldr	r1, [r7, #12]
 8013b7c:	6978      	ldr	r0, [r7, #20]
 8013b7e:	f7ff fe55 	bl	801382c <preparePacketBuffer>
 8013b82:	4603      	mov	r3, r0
 8013b84:	f083 0301 	eor.w	r3, r3, #1
 8013b88:	b2db      	uxtb	r3, r3
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d004      	beq.n	8013b98 <SVPublisher_createEx+0x46>
            SVPublisher_destroy(self);
 8013b8e:	6978      	ldr	r0, [r7, #20]
 8013b90:	f000 f9f4 	bl	8013f7c <SVPublisher_destroy>
            self = NULL;
 8013b94:	2300      	movs	r3, #0
 8013b96:	617b      	str	r3, [r7, #20]
        }

    }

    return self;
 8013b98:	697b      	ldr	r3, [r7, #20]
}
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	3718      	adds	r7, #24
 8013b9e:	46bd      	mov	sp, r7
 8013ba0:	bd80      	pop	{r7, pc}

08013ba2 <SVPublisher_create>:

SVPublisher
SVPublisher_create(CommParameters* parameters, const char* interfaceId)
{
 8013ba2:	b580      	push	{r7, lr}
 8013ba4:	b082      	sub	sp, #8
 8013ba6:	af00      	add	r7, sp, #0
 8013ba8:	6078      	str	r0, [r7, #4]
 8013baa:	6039      	str	r1, [r7, #0]
    return SVPublisher_createEx(parameters, interfaceId, true);
 8013bac:	2201      	movs	r2, #1
 8013bae:	6839      	ldr	r1, [r7, #0]
 8013bb0:	6878      	ldr	r0, [r7, #4]
 8013bb2:	f7ff ffce 	bl	8013b52 <SVPublisher_createEx>
 8013bb6:	4603      	mov	r3, r0
}
 8013bb8:	4618      	mov	r0, r3
 8013bba:	3708      	adds	r7, #8
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	bd80      	pop	{r7, pc}

08013bc0 <SVPublisher_addASDU>:

SVPublisher_ASDU
SVPublisher_addASDU(SVPublisher self, const char* svID, const char* datset, uint32_t confRev)
{
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b086      	sub	sp, #24
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	60f8      	str	r0, [r7, #12]
 8013bc8:	60b9      	str	r1, [r7, #8]
 8013bca:	607a      	str	r2, [r7, #4]
 8013bcc:	603b      	str	r3, [r7, #0]
    SVPublisher_ASDU newAsdu = (SVPublisher_ASDU) GLOBAL_CALLOC(1, sizeof(struct sSVPublisher_ASDU));
 8013bce:	2134      	movs	r1, #52	@ 0x34
 8013bd0:	2001      	movs	r0, #1
 8013bd2:	f7ff fe0a 	bl	80137ea <Memory_calloc>
 8013bd6:	6138      	str	r0, [r7, #16]

    newAsdu->svID = svID;
 8013bd8:	693b      	ldr	r3, [r7, #16]
 8013bda:	68ba      	ldr	r2, [r7, #8]
 8013bdc:	601a      	str	r2, [r3, #0]
    newAsdu->datset = datset;
 8013bde:	693b      	ldr	r3, [r7, #16]
 8013be0:	687a      	ldr	r2, [r7, #4]
 8013be2:	605a      	str	r2, [r3, #4]
    newAsdu->confRev = confRev;
 8013be4:	693b      	ldr	r3, [r7, #16]
 8013be6:	683a      	ldr	r2, [r7, #0]
 8013be8:	61da      	str	r2, [r3, #28]
    newAsdu->smpCntLimit = UINT16_MAX;
 8013bea:	693b      	ldr	r3, [r7, #16]
 8013bec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013bf0:	831a      	strh	r2, [r3, #24]
    newAsdu->_next = NULL;
 8013bf2:	693b      	ldr	r3, [r7, #16]
 8013bf4:	2200      	movs	r2, #0
 8013bf6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* append new ASDU to list */
    if (self->asduList == NULL)
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	69db      	ldr	r3, [r3, #28]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d103      	bne.n	8013c08 <SVPublisher_addASDU+0x48>
        self->asduList = newAsdu;
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	693a      	ldr	r2, [r7, #16]
 8013c04:	61da      	str	r2, [r3, #28]
 8013c06:	e00d      	b.n	8013c24 <SVPublisher_addASDU+0x64>
    else {
        SVPublisher_ASDU lastAsdu = self->asduList;
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	69db      	ldr	r3, [r3, #28]
 8013c0c:	617b      	str	r3, [r7, #20]

        while (lastAsdu->_next != NULL)
 8013c0e:	e002      	b.n	8013c16 <SVPublisher_addASDU+0x56>
            lastAsdu = lastAsdu->_next;
 8013c10:	697b      	ldr	r3, [r7, #20]
 8013c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013c14:	617b      	str	r3, [r7, #20]
        while (lastAsdu->_next != NULL)
 8013c16:	697b      	ldr	r3, [r7, #20]
 8013c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d1f8      	bne.n	8013c10 <SVPublisher_addASDU+0x50>

        lastAsdu->_next = newAsdu;
 8013c1e:	697b      	ldr	r3, [r7, #20]
 8013c20:	693a      	ldr	r2, [r7, #16]
 8013c22:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    return newAsdu;
 8013c24:	693b      	ldr	r3, [r7, #16]
}
 8013c26:	4618      	mov	r0, r3
 8013c28:	3718      	adds	r7, #24
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	bd80      	pop	{r7, pc}

08013c2e <SVPublisher_ASDU_getEncodedSize>:

static int
SVPublisher_ASDU_getEncodedSize(SVPublisher_ASDU self)
{
 8013c2e:	b580      	push	{r7, lr}
 8013c30:	b086      	sub	sp, #24
 8013c32:	af00      	add	r7, sp, #0
 8013c34:	6078      	str	r0, [r7, #4]
    int encodedSize = 0;
 8013c36:	2300      	movs	r3, #0
 8013c38:	617b      	str	r3, [r7, #20]

    /* svID */
    int svIdLen = strlen(self->svID);
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	4618      	mov	r0, r3
 8013c40:	f7ec fad6 	bl	80001f0 <strlen>
 8013c44:	4603      	mov	r3, r0
 8013c46:	613b      	str	r3, [r7, #16]
    encodedSize += (1 + BerEncoder_determineLengthSize(svIdLen) + svIdLen);
 8013c48:	693b      	ldr	r3, [r7, #16]
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	f7ff fd2a 	bl	80136a4 <BerEncoder_determineLengthSize>
 8013c50:	4603      	mov	r3, r0
 8013c52:	1c5a      	adds	r2, r3, #1
 8013c54:	693b      	ldr	r3, [r7, #16]
 8013c56:	4413      	add	r3, r2
 8013c58:	697a      	ldr	r2, [r7, #20]
 8013c5a:	4413      	add	r3, r2
 8013c5c:	617b      	str	r3, [r7, #20]

    /* datset */
    if (self->datset != NULL) {
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	685b      	ldr	r3, [r3, #4]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d011      	beq.n	8013c8a <SVPublisher_ASDU_getEncodedSize+0x5c>
        int datSetLen = strlen(self->datset);
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	685b      	ldr	r3, [r3, #4]
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f7ec fac0 	bl	80001f0 <strlen>
 8013c70:	4603      	mov	r3, r0
 8013c72:	60fb      	str	r3, [r7, #12]
        encodedSize += (1 + BerEncoder_determineLengthSize(datSetLen) + datSetLen);
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	4618      	mov	r0, r3
 8013c78:	f7ff fd14 	bl	80136a4 <BerEncoder_determineLengthSize>
 8013c7c:	4603      	mov	r3, r0
 8013c7e:	1c5a      	adds	r2, r3, #1
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	4413      	add	r3, r2
 8013c84:	697a      	ldr	r2, [r7, #20]
 8013c86:	4413      	add	r3, r2
 8013c88:	617b      	str	r3, [r7, #20]
    }

    /* smpCnt */
    encodedSize += 4;
 8013c8a:	697b      	ldr	r3, [r7, #20]
 8013c8c:	3304      	adds	r3, #4
 8013c8e:	617b      	str	r3, [r7, #20]

    /* confRef */
    encodedSize += 6;
 8013c90:	697b      	ldr	r3, [r7, #20]
 8013c92:	3306      	adds	r3, #6
 8013c94:	617b      	str	r3, [r7, #20]

    /* refrTm */
    if (self->hasRefrTm)
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	7b1b      	ldrb	r3, [r3, #12]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d002      	beq.n	8013ca4 <SVPublisher_ASDU_getEncodedSize+0x76>
        encodedSize += 10; /* ??? */
 8013c9e:	697b      	ldr	r3, [r7, #20]
 8013ca0:	330a      	adds	r3, #10
 8013ca2:	617b      	str	r3, [r7, #20]

    /* smpSynch */
    encodedSize += 3;
 8013ca4:	697b      	ldr	r3, [r7, #20]
 8013ca6:	3303      	adds	r3, #3
 8013ca8:	617b      	str	r3, [r7, #20]

    /* smpRate */
    if (self->hasSmpRate)
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	7b5b      	ldrb	r3, [r3, #13]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d002      	beq.n	8013cb8 <SVPublisher_ASDU_getEncodedSize+0x8a>
        encodedSize += 4;
 8013cb2:	697b      	ldr	r3, [r7, #20]
 8013cb4:	3304      	adds	r3, #4
 8013cb6:	617b      	str	r3, [r7, #20]

    /* sample */
    encodedSize += (1 + BerEncoder_determineLengthSize(self->dataSize));
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	689b      	ldr	r3, [r3, #8]
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	f7ff fcf1 	bl	80136a4 <BerEncoder_determineLengthSize>
 8013cc2:	4603      	mov	r3, r0
 8013cc4:	3301      	adds	r3, #1
 8013cc6:	697a      	ldr	r2, [r7, #20]
 8013cc8:	4413      	add	r3, r2
 8013cca:	617b      	str	r3, [r7, #20]
    encodedSize += self->dataSize;
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	689b      	ldr	r3, [r3, #8]
 8013cd0:	697a      	ldr	r2, [r7, #20]
 8013cd2:	4413      	add	r3, r2
 8013cd4:	617b      	str	r3, [r7, #20]

    /* smpMod */
    if (self->hasSmpMod)
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	7b9b      	ldrb	r3, [r3, #14]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d002      	beq.n	8013ce4 <SVPublisher_ASDU_getEncodedSize+0xb6>
        encodedSize += 4;
 8013cde:	697b      	ldr	r3, [r7, #20]
 8013ce0:	3304      	adds	r3, #4
 8013ce2:	617b      	str	r3, [r7, #20]

    return encodedSize;
 8013ce4:	697b      	ldr	r3, [r7, #20]
}
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	3718      	adds	r7, #24
 8013cea:	46bd      	mov	sp, r7
 8013cec:	bd80      	pop	{r7, pc}

08013cee <SVPublisher_ASDU_encodeToBuffer>:

static int
SVPublisher_ASDU_encodeToBuffer(SVPublisher_ASDU self, uint8_t* buffer, int bufPos)
{
 8013cee:	b580      	push	{r7, lr}
 8013cf0:	b086      	sub	sp, #24
 8013cf2:	af00      	add	r7, sp, #0
 8013cf4:	60f8      	str	r0, [r7, #12]
 8013cf6:	60b9      	str	r1, [r7, #8]
 8013cf8:	607a      	str	r2, [r7, #4]
    int encodedSize = SVPublisher_ASDU_getEncodedSize(self);
 8013cfa:	68f8      	ldr	r0, [r7, #12]
 8013cfc:	f7ff ff97 	bl	8013c2e <SVPublisher_ASDU_getEncodedSize>
 8013d00:	6178      	str	r0, [r7, #20]

    /* tag and length field */
    bufPos = BerEncoder_encodeTL(0x30, encodedSize, buffer, bufPos);
 8013d02:	6979      	ldr	r1, [r7, #20]
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	68ba      	ldr	r2, [r7, #8]
 8013d08:	2030      	movs	r0, #48	@ 0x30
 8013d0a:	f7ff fb5d 	bl	80133c8 <BerEncoder_encodeTL>
 8013d0e:	6078      	str	r0, [r7, #4]

    /* svID */
    bufPos = BerEncoder_encodeStringWithTag(0x80, self->svID, buffer, bufPos);
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	6819      	ldr	r1, [r3, #0]
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	68ba      	ldr	r2, [r7, #8]
 8013d18:	2080      	movs	r0, #128	@ 0x80
 8013d1a:	f7ff fb70 	bl	80133fe <BerEncoder_encodeStringWithTag>
 8013d1e:	6078      	str	r0, [r7, #4]

    /* DatSet */
    if (self->datset != NULL)
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	685b      	ldr	r3, [r3, #4]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d007      	beq.n	8013d38 <SVPublisher_ASDU_encodeToBuffer+0x4a>
        bufPos = BerEncoder_encodeStringWithTag(0x81, self->datset, buffer, bufPos);
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	6859      	ldr	r1, [r3, #4]
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	68ba      	ldr	r2, [r7, #8]
 8013d30:	2081      	movs	r0, #129	@ 0x81
 8013d32:	f7ff fb64 	bl	80133fe <BerEncoder_encodeStringWithTag>
 8013d36:	6078      	str	r0, [r7, #4]

    /* SmpCnt */
    bufPos = BerEncoder_encodeTL(0x82, 2, buffer, bufPos);
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	68ba      	ldr	r2, [r7, #8]
 8013d3c:	2102      	movs	r1, #2
 8013d3e:	2082      	movs	r0, #130	@ 0x82
 8013d40:	f7ff fb42 	bl	80133c8 <BerEncoder_encodeTL>
 8013d44:	6078      	str	r0, [r7, #4]
    self->smpCntBuf = buffer + bufPos;
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	68ba      	ldr	r2, [r7, #8]
 8013d4a:	441a      	add	r2, r3
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	629a      	str	r2, [r3, #40]	@ 0x28
    bufPos = encodeUInt16FixedSize(self->smpCnt, buffer, bufPos);
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	8adb      	ldrh	r3, [r3, #22]
 8013d54:	687a      	ldr	r2, [r7, #4]
 8013d56:	68b9      	ldr	r1, [r7, #8]
 8013d58:	4618      	mov	r0, r3
 8013d5a:	f7ff fe6f 	bl	8013a3c <encodeUInt16FixedSize>
 8013d5e:	6078      	str	r0, [r7, #4]

    /* ConfRev */
    bufPos = BerEncoder_encodeTL(0x83, 4, buffer, bufPos);
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	68ba      	ldr	r2, [r7, #8]
 8013d64:	2104      	movs	r1, #4
 8013d66:	2083      	movs	r0, #131	@ 0x83
 8013d68:	f7ff fb2e 	bl	80133c8 <BerEncoder_encodeTL>
 8013d6c:	6078      	str	r0, [r7, #4]
    bufPos = encodeUInt32FixedSize(self->confRev, buffer, bufPos);
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	69db      	ldr	r3, [r3, #28]
 8013d72:	687a      	ldr	r2, [r7, #4]
 8013d74:	68b9      	ldr	r1, [r7, #8]
 8013d76:	4618      	mov	r0, r3
 8013d78:	f7ff fe83 	bl	8013a82 <encodeUInt32FixedSize>
 8013d7c:	6078      	str	r0, [r7, #4]

    /* RefrTm */
    if (self->hasRefrTm) {
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	7b1b      	ldrb	r3, [r3, #12]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d00e      	beq.n	8013da4 <SVPublisher_ASDU_encodeToBuffer+0xb6>
        bufPos = BerEncoder_encodeTL(0x84, 8, buffer, bufPos);
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	68ba      	ldr	r2, [r7, #8]
 8013d8a:	2108      	movs	r1, #8
 8013d8c:	2084      	movs	r0, #132	@ 0x84
 8013d8e:	f7ff fb1b 	bl	80133c8 <BerEncoder_encodeTL>
 8013d92:	6078      	str	r0, [r7, #4]
        self->refrTm = (Timestamp*) (buffer + bufPos);
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	68ba      	ldr	r2, [r7, #8]
 8013d98:	441a      	add	r2, r3
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	621a      	str	r2, [r3, #32]
        bufPos += 8;
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	3308      	adds	r3, #8
 8013da2:	607b      	str	r3, [r7, #4]
    }

    /* SmpSynch */
    bufPos = BerEncoder_encodeTL(0x85, 1, buffer, bufPos);
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	68ba      	ldr	r2, [r7, #8]
 8013da8:	2101      	movs	r1, #1
 8013daa:	2085      	movs	r0, #133	@ 0x85
 8013dac:	f7ff fb0c 	bl	80133c8 <BerEncoder_encodeTL>
 8013db0:	6078      	str	r0, [r7, #4]
    self->smpSynchBuf = buffer + bufPos;
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	68ba      	ldr	r2, [r7, #8]
 8013db6:	441a      	add	r2, r3
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	62da      	str	r2, [r3, #44]	@ 0x2c
    buffer[bufPos++] = self->smpSynch;
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	1c5a      	adds	r2, r3, #1
 8013dc0:	607a      	str	r2, [r7, #4]
 8013dc2:	461a      	mov	r2, r3
 8013dc4:	68bb      	ldr	r3, [r7, #8]
 8013dc6:	4413      	add	r3, r2
 8013dc8:	68fa      	ldr	r2, [r7, #12]
 8013dca:	7d12      	ldrb	r2, [r2, #20]
 8013dcc:	701a      	strb	r2, [r3, #0]

    /* SmpRate */
    if (self->hasSmpRate) {
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	7b5b      	ldrb	r3, [r3, #13]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d00e      	beq.n	8013df4 <SVPublisher_ASDU_encodeToBuffer+0x106>
        bufPos = BerEncoder_encodeTL(0x86, 2, buffer, bufPos);
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	68ba      	ldr	r2, [r7, #8]
 8013dda:	2102      	movs	r1, #2
 8013ddc:	2086      	movs	r0, #134	@ 0x86
 8013dde:	f7ff faf3 	bl	80133c8 <BerEncoder_encodeTL>
 8013de2:	6078      	str	r0, [r7, #4]
        bufPos = encodeUInt16FixedSize(self->smpRate, buffer, bufPos);
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8013de8:	687a      	ldr	r2, [r7, #4]
 8013dea:	68b9      	ldr	r1, [r7, #8]
 8013dec:	4618      	mov	r0, r3
 8013dee:	f7ff fe25 	bl	8013a3c <encodeUInt16FixedSize>
 8013df2:	6078      	str	r0, [r7, #4]
    }

    /* Sample */
    bufPos = BerEncoder_encodeTL(0x87, self->dataSize, buffer, bufPos);
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	689b      	ldr	r3, [r3, #8]
 8013df8:	4619      	mov	r1, r3
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	68ba      	ldr	r2, [r7, #8]
 8013dfe:	2087      	movs	r0, #135	@ 0x87
 8013e00:	f7ff fae2 	bl	80133c8 <BerEncoder_encodeTL>
 8013e04:	6078      	str	r0, [r7, #4]

    self->_dataBuffer = buffer + bufPos;
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	68ba      	ldr	r2, [r7, #8]
 8013e0a:	441a      	add	r2, r3
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	611a      	str	r2, [r3, #16]

    bufPos += self->dataSize; /* data has to be inserted by user before sending message */
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	689b      	ldr	r3, [r3, #8]
 8013e14:	687a      	ldr	r2, [r7, #4]
 8013e16:	4413      	add	r3, r2
 8013e18:	607b      	str	r3, [r7, #4]
    
    /* SmpMod */
    if (self->hasSmpMod) {
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	7b9b      	ldrb	r3, [r3, #14]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d00f      	beq.n	8013e42 <SVPublisher_ASDU_encodeToBuffer+0x154>
        bufPos = BerEncoder_encodeTL(0x88, 2, buffer, bufPos);
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	68ba      	ldr	r2, [r7, #8]
 8013e26:	2102      	movs	r1, #2
 8013e28:	2088      	movs	r0, #136	@ 0x88
 8013e2a:	f7ff facd 	bl	80133c8 <BerEncoder_encodeTL>
 8013e2e:	6078      	str	r0, [r7, #4]
        bufPos = encodeUInt16FixedSize(self->smpMod, buffer, bufPos);
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8013e36:	687a      	ldr	r2, [r7, #4]
 8013e38:	68b9      	ldr	r1, [r7, #8]
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	f7ff fdfe 	bl	8013a3c <encodeUInt16FixedSize>
 8013e40:	6078      	str	r0, [r7, #4]
    }

    return bufPos;
 8013e42:	687b      	ldr	r3, [r7, #4]
}
 8013e44:	4618      	mov	r0, r3
 8013e46:	3718      	adds	r7, #24
 8013e48:	46bd      	mov	sp, r7
 8013e4a:	bd80      	pop	{r7, pc}

08013e4c <SVPublisher_setupComplete>:

void
SVPublisher_setupComplete(SVPublisher self)
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b08e      	sub	sp, #56	@ 0x38
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	6078      	str	r0, [r7, #4]
    int numberOfAsdu = 0;
 8013e54:	2300      	movs	r3, #0
 8013e56:	637b      	str	r3, [r7, #52]	@ 0x34

    /* determine number of ASDUs and length of all ASDUs */
    SVPublisher_ASDU nextAsdu = self->asduList;
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	69db      	ldr	r3, [r3, #28]
 8013e5c:	633b      	str	r3, [r7, #48]	@ 0x30
    int totalASDULength = 0;
 8013e5e:	2300      	movs	r3, #0
 8013e60:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (nextAsdu != NULL) {
 8013e62:	e018      	b.n	8013e96 <SVPublisher_setupComplete+0x4a>
        numberOfAsdu++;
 8013e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e66:	3301      	adds	r3, #1
 8013e68:	637b      	str	r3, [r7, #52]	@ 0x34
        int asduLength = SVPublisher_ASDU_getEncodedSize(nextAsdu);
 8013e6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013e6c:	f7ff fedf 	bl	8013c2e <SVPublisher_ASDU_getEncodedSize>
 8013e70:	60f8      	str	r0, [r7, #12]

        /* tag and length field */
        asduLength += BerEncoder_determineLengthSize(asduLength);
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	4618      	mov	r0, r3
 8013e76:	f7ff fc15 	bl	80136a4 <BerEncoder_determineLengthSize>
 8013e7a:	4602      	mov	r2, r0
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	4413      	add	r3, r2
 8013e80:	60fb      	str	r3, [r7, #12]
        asduLength++;
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	3301      	adds	r3, #1
 8013e86:	60fb      	str	r3, [r7, #12]

        totalASDULength += asduLength;
 8013e88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	4413      	add	r3, r2
 8013e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        nextAsdu = nextAsdu->_next;
 8013e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e94:	633b      	str	r3, [r7, #48]	@ 0x30
    while (nextAsdu != NULL) {
 8013e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d1e3      	bne.n	8013e64 <SVPublisher_setupComplete+0x18>
    }

    /* encode frame to buffer */
    int sequenceSize = 1 + BerEncoder_determineLengthSize(totalASDULength) + totalASDULength;
 8013e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	f7ff fc00 	bl	80136a4 <BerEncoder_determineLengthSize>
 8013ea4:	4603      	mov	r3, r0
 8013ea6:	3301      	adds	r3, #1
 8013ea8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013eaa:	4413      	add	r3, r2
 8013eac:	627b      	str	r3, [r7, #36]	@ 0x24

    int innerSize = 2 + BerEncoder_UInt32determineEncodedSize(numberOfAsdu) + sequenceSize;
 8013eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	f7ff fbc9 	bl	8013648 <BerEncoder_UInt32determineEncodedSize>
 8013eb6:	4603      	mov	r3, r0
 8013eb8:	3302      	adds	r3, #2
 8013eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013ebc:	4413      	add	r3, r2
 8013ebe:	623b      	str	r3, [r7, #32]

    uint8_t* buffer = self->buffer + self->payloadStart;
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	687a      	ldr	r2, [r7, #4]
 8013ec6:	6912      	ldr	r2, [r2, #16]
 8013ec8:	4413      	add	r3, r2
 8013eca:	61fb      	str	r3, [r7, #28]

    int bufPos = BerEncoder_encodeTL(0x60, innerSize, buffer, 0);
 8013ecc:	6a39      	ldr	r1, [r7, #32]
 8013ece:	2300      	movs	r3, #0
 8013ed0:	69fa      	ldr	r2, [r7, #28]
 8013ed2:	2060      	movs	r0, #96	@ 0x60
 8013ed4:	f7ff fa78 	bl	80133c8 <BerEncoder_encodeTL>
 8013ed8:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* noASDU */
    bufPos = BerEncoder_encodeUInt32WithTL(0x80, numberOfAsdu, buffer, bufPos);
 8013eda:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ede:	69fa      	ldr	r2, [r7, #28]
 8013ee0:	2080      	movs	r0, #128	@ 0x80
 8013ee2:	f7ff fb57 	bl	8013594 <BerEncoder_encodeUInt32WithTL>
 8013ee6:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* seqASDU */
    bufPos = BerEncoder_encodeTL(0xa2, totalASDULength, buffer, bufPos);
 8013ee8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013eec:	69fa      	ldr	r2, [r7, #28]
 8013eee:	20a2      	movs	r0, #162	@ 0xa2
 8013ef0:	f7ff fa6a 	bl	80133c8 <BerEncoder_encodeTL>
 8013ef4:	62b8      	str	r0, [r7, #40]	@ 0x28

    nextAsdu = self->asduList;
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	69db      	ldr	r3, [r3, #28]
 8013efa:	633b      	str	r3, [r7, #48]	@ 0x30

    while (nextAsdu != NULL) {
 8013efc:	e008      	b.n	8013f10 <SVPublisher_setupComplete+0xc4>
        bufPos = SVPublisher_ASDU_encodeToBuffer(nextAsdu, buffer, bufPos);
 8013efe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013f00:	69f9      	ldr	r1, [r7, #28]
 8013f02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013f04:	f7ff fef3 	bl	8013cee <SVPublisher_ASDU_encodeToBuffer>
 8013f08:	62b8      	str	r0, [r7, #40]	@ 0x28

        nextAsdu = nextAsdu->_next;
 8013f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f0e:	633b      	str	r3, [r7, #48]	@ 0x30
    while (nextAsdu != NULL) {
 8013f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d1f3      	bne.n	8013efe <SVPublisher_setupComplete+0xb2>
    }

    /* Update length field */
    int payloadLength = bufPos;
 8013f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f18:	61bb      	str	r3, [r7, #24]

    size_t msgLength = payloadLength + 8;
 8013f1a:	69bb      	ldr	r3, [r7, #24]
 8013f1c:	3308      	adds	r3, #8
 8013f1e:	617b      	str	r3, [r7, #20]

    int lengthIndex = self->lengthField;
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	68db      	ldr	r3, [r3, #12]
 8013f24:	613b      	str	r3, [r7, #16]

    self->buffer[lengthIndex] = msgLength / 256;
 8013f26:	697b      	ldr	r3, [r7, #20]
 8013f28:	0a19      	lsrs	r1, r3, #8
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	681a      	ldr	r2, [r3, #0]
 8013f2e:	693b      	ldr	r3, [r7, #16]
 8013f30:	4413      	add	r3, r2
 8013f32:	b2ca      	uxtb	r2, r1
 8013f34:	701a      	strb	r2, [r3, #0]
    self->buffer[lengthIndex + 1] = msgLength & 0xff;
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	681a      	ldr	r2, [r3, #0]
 8013f3a:	693b      	ldr	r3, [r7, #16]
 8013f3c:	3301      	adds	r3, #1
 8013f3e:	4413      	add	r3, r2
 8013f40:	697a      	ldr	r2, [r7, #20]
 8013f42:	b2d2      	uxtb	r2, r2
 8013f44:	701a      	strb	r2, [r3, #0]

    self->payloadLength = payloadLength;
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	69ba      	ldr	r2, [r7, #24]
 8013f4a:	615a      	str	r2, [r3, #20]

}
 8013f4c:	bf00      	nop
 8013f4e:	3738      	adds	r7, #56	@ 0x38
 8013f50:	46bd      	mov	sp, r7
 8013f52:	bd80      	pop	{r7, pc}

08013f54 <SVPublisher_publish>:

void
SVPublisher_publish(SVPublisher self)
{
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b082      	sub	sp, #8
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]
    if (DEBUG_SV_PUBLISHER)
        printf("SV_PUBLISHER: send SV message\n");

    Ethernet_sendPacket(self->ethernetSocket, self->buffer, self->payloadStart + self->payloadLength);
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	6898      	ldr	r0, [r3, #8]
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	6819      	ldr	r1, [r3, #0]
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	691a      	ldr	r2, [r3, #16]
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	695b      	ldr	r3, [r3, #20]
 8013f6c:	4413      	add	r3, r2
 8013f6e:	461a      	mov	r2, r3
 8013f70:	f7ff fbf7 	bl	8013762 <Ethernet_sendPacket>
}
 8013f74:	bf00      	nop
 8013f76:	3708      	adds	r7, #8
 8013f78:	46bd      	mov	sp, r7
 8013f7a:	bd80      	pop	{r7, pc}

08013f7c <SVPublisher_destroy>:

void
SVPublisher_destroy(SVPublisher self)
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b084      	sub	sp, #16
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
    if (self) {
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d023      	beq.n	8013fd2 <SVPublisher_destroy+0x56>
        if (self->ethernetSocket)
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	689b      	ldr	r3, [r3, #8]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d004      	beq.n	8013f9c <SVPublisher_destroy+0x20>
            Ethernet_destroySocket(self->ethernetSocket);
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	689b      	ldr	r3, [r3, #8]
 8013f96:	4618      	mov	r0, r3
 8013f98:	f7ff fbd8 	bl	801374c <Ethernet_destroySocket>

        if (self->buffer)
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d004      	beq.n	8013fae <SVPublisher_destroy+0x32>
            GLOBAL_FREEMEM(self->buffer);
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	4618      	mov	r0, r3
 8013faa:	f7ff fc33 	bl	8013814 <Memory_free>

        SVPublisher_ASDU asdu = self->asduList;
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	69db      	ldr	r3, [r3, #28]
 8013fb2:	60fb      	str	r3, [r7, #12]

        while (asdu) {
 8013fb4:	e007      	b.n	8013fc6 <SVPublisher_destroy+0x4a>
            SVPublisher_ASDU nextAsdu = asdu->_next;
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013fba:	60bb      	str	r3, [r7, #8]

            GLOBAL_FREEMEM(asdu);
 8013fbc:	68f8      	ldr	r0, [r7, #12]
 8013fbe:	f7ff fc29 	bl	8013814 <Memory_free>

            asdu = nextAsdu;
 8013fc2:	68bb      	ldr	r3, [r7, #8]
 8013fc4:	60fb      	str	r3, [r7, #12]
        while (asdu) {
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d1f4      	bne.n	8013fb6 <SVPublisher_destroy+0x3a>
        }

        GLOBAL_FREEMEM(self);
 8013fcc:	6878      	ldr	r0, [r7, #4]
 8013fce:	f7ff fc21 	bl	8013814 <Memory_free>
    }
}
 8013fd2:	bf00      	nop
 8013fd4:	3710      	adds	r7, #16
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	bd80      	pop	{r7, pc}

08013fda <SVPublisher_ASDU_addINT32>:
    self->_dataBuffer[index] = value;
}

int
SVPublisher_ASDU_addINT32(SVPublisher_ASDU self)
{
 8013fda:	b480      	push	{r7}
 8013fdc:	b085      	sub	sp, #20
 8013fde:	af00      	add	r7, sp, #0
 8013fe0:	6078      	str	r0, [r7, #4]
    int index = self->dataSize;
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	689b      	ldr	r3, [r3, #8]
 8013fe6:	60fb      	str	r3, [r7, #12]

    self->dataSize += 4;
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	689b      	ldr	r3, [r3, #8]
 8013fec:	1d1a      	adds	r2, r3, #4
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	609a      	str	r2, [r3, #8]

    return index;
 8013ff2:	68fb      	ldr	r3, [r7, #12]
}
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	3714      	adds	r7, #20
 8013ff8:	46bd      	mov	sp, r7
 8013ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ffe:	4770      	bx	lr

08014000 <SVPublisher_ASDU_setINT32>:

void
SVPublisher_ASDU_setINT32(SVPublisher_ASDU self, int index, int32_t value)
{
 8014000:	b580      	push	{r7, lr}
 8014002:	b084      	sub	sp, #16
 8014004:	af00      	add	r7, sp, #0
 8014006:	60f8      	str	r0, [r7, #12]
 8014008:	60b9      	str	r1, [r7, #8]
 801400a:	607a      	str	r2, [r7, #4]
    encodeInt32FixedSize(value, self->_dataBuffer, index);
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	691b      	ldr	r3, [r3, #16]
 8014010:	68ba      	ldr	r2, [r7, #8]
 8014012:	4619      	mov	r1, r3
 8014014:	6878      	ldr	r0, [r7, #4]
 8014016:	f7ff fd68 	bl	8013aea <encodeInt32FixedSize>
}
 801401a:	bf00      	nop
 801401c:	3710      	adds	r7, #16
 801401e:	46bd      	mov	sp, r7
 8014020:	bd80      	pop	{r7, pc}

08014022 <SVPublisher_ASDU_addQuality>:
    }
}

int
SVPublisher_ASDU_addQuality(SVPublisher_ASDU self)
{
 8014022:	b480      	push	{r7}
 8014024:	b085      	sub	sp, #20
 8014026:	af00      	add	r7, sp, #0
 8014028:	6078      	str	r0, [r7, #4]
    int index = self->dataSize;
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	689b      	ldr	r3, [r3, #8]
 801402e:	60fb      	str	r3, [r7, #12]
    self->dataSize += 4;
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	689b      	ldr	r3, [r3, #8]
 8014034:	1d1a      	adds	r2, r3, #4
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	609a      	str	r2, [r3, #8]
    return index;
 801403a:	68fb      	ldr	r3, [r7, #12]
}
 801403c:	4618      	mov	r0, r3
 801403e:	3714      	adds	r7, #20
 8014040:	46bd      	mov	sp, r7
 8014042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014046:	4770      	bx	lr

08014048 <SVPublisher_ASDU_setQuality>:

void
SVPublisher_ASDU_setQuality(SVPublisher_ASDU self, int index, Quality value)
{
 8014048:	b480      	push	{r7}
 801404a:	b087      	sub	sp, #28
 801404c:	af00      	add	r7, sp, #0
 801404e:	60f8      	str	r0, [r7, #12]
 8014050:	60b9      	str	r1, [r7, #8]
 8014052:	4613      	mov	r3, r2
 8014054:	80fb      	strh	r3, [r7, #6]
    uint8_t* buffer = self->_dataBuffer + index;
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	691a      	ldr	r2, [r3, #16]
 801405a:	68bb      	ldr	r3, [r7, #8]
 801405c:	4413      	add	r3, r2
 801405e:	617b      	str	r3, [r7, #20]
    buffer[0] = 0;
 8014060:	697b      	ldr	r3, [r7, #20]
 8014062:	2200      	movs	r2, #0
 8014064:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 8014066:	697b      	ldr	r3, [r7, #20]
 8014068:	3301      	adds	r3, #1
 801406a:	2200      	movs	r2, #0
 801406c:	701a      	strb	r2, [r3, #0]
    buffer[2] = value / 0x100;
 801406e:	88fb      	ldrh	r3, [r7, #6]
 8014070:	0a1b      	lsrs	r3, r3, #8
 8014072:	b29a      	uxth	r2, r3
 8014074:	697b      	ldr	r3, [r7, #20]
 8014076:	3302      	adds	r3, #2
 8014078:	b2d2      	uxtb	r2, r2
 801407a:	701a      	strb	r2, [r3, #0]
    buffer[3] = value % 0x100;
 801407c:	697b      	ldr	r3, [r7, #20]
 801407e:	3303      	adds	r3, #3
 8014080:	88fa      	ldrh	r2, [r7, #6]
 8014082:	b2d2      	uxtb	r2, r2
 8014084:	701a      	strb	r2, [r3, #0]
}
 8014086:	bf00      	nop
 8014088:	371c      	adds	r7, #28
 801408a:	46bd      	mov	sp, r7
 801408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014090:	4770      	bx	lr

08014092 <SVPublisher_ASDU_setSmpCnt>:
    return self->smpCnt;
}

void
SVPublisher_ASDU_setSmpCnt(SVPublisher_ASDU self, uint16_t value)
{
 8014092:	b580      	push	{r7, lr}
 8014094:	b082      	sub	sp, #8
 8014096:	af00      	add	r7, sp, #0
 8014098:	6078      	str	r0, [r7, #4]
 801409a:	460b      	mov	r3, r1
 801409c:	807b      	strh	r3, [r7, #2]
    self->smpCnt = value;
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	887a      	ldrh	r2, [r7, #2]
 80140a2:	82da      	strh	r2, [r3, #22]

    if (self->smpCntBuf != NULL)
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d007      	beq.n	80140bc <SVPublisher_ASDU_setSmpCnt+0x2a>
        encodeUInt16FixedSize(self->smpCnt, self->smpCntBuf, 0);
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	8ad8      	ldrh	r0, [r3, #22]
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80140b4:	2200      	movs	r2, #0
 80140b6:	4619      	mov	r1, r3
 80140b8:	f7ff fcc0 	bl	8013a3c <encodeUInt16FixedSize>
}
 80140bc:	bf00      	nop
 80140be:	3708      	adds	r7, #8
 80140c0:	46bd      	mov	sp, r7
 80140c2:	bd80      	pop	{r7, pc}

080140c4 <SVPublisher_ASDU_setSmpSynch>:
    self->smpRate = smpRate;
}

void
SVPublisher_ASDU_setSmpSynch(SVPublisher_ASDU self, uint16_t smpSynch)
{
 80140c4:	b480      	push	{r7}
 80140c6:	b083      	sub	sp, #12
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
 80140cc:	460b      	mov	r3, r1
 80140ce:	807b      	strh	r3, [r7, #2]
    self->smpSynch = smpSynch;
 80140d0:	887b      	ldrh	r3, [r7, #2]
 80140d2:	b2da      	uxtb	r2, r3
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	751a      	strb	r2, [r3, #20]
    *(self->smpSynchBuf) = self->smpSynch;
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80140dc:	687a      	ldr	r2, [r7, #4]
 80140de:	7d12      	ldrb	r2, [r2, #20]
 80140e0:	701a      	strb	r2, [r3, #0]
}
 80140e2:	bf00      	nop
 80140e4:	370c      	adds	r7, #12
 80140e6:	46bd      	mov	sp, r7
 80140e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ec:	4770      	bx	lr

080140ee <atoi>:
 80140ee:	220a      	movs	r2, #10
 80140f0:	2100      	movs	r1, #0
 80140f2:	f000 b993 	b.w	801441c <strtol>
	...

080140f8 <calloc>:
 80140f8:	4b02      	ldr	r3, [pc, #8]	@ (8014104 <calloc+0xc>)
 80140fa:	460a      	mov	r2, r1
 80140fc:	4601      	mov	r1, r0
 80140fe:	6818      	ldr	r0, [r3, #0]
 8014100:	f000 b802 	b.w	8014108 <_calloc_r>
 8014104:	200004a0 	.word	0x200004a0

08014108 <_calloc_r>:
 8014108:	b570      	push	{r4, r5, r6, lr}
 801410a:	fba1 5402 	umull	r5, r4, r1, r2
 801410e:	b93c      	cbnz	r4, 8014120 <_calloc_r+0x18>
 8014110:	4629      	mov	r1, r5
 8014112:	f000 f83f 	bl	8014194 <_malloc_r>
 8014116:	4606      	mov	r6, r0
 8014118:	b928      	cbnz	r0, 8014126 <_calloc_r+0x1e>
 801411a:	2600      	movs	r6, #0
 801411c:	4630      	mov	r0, r6
 801411e:	bd70      	pop	{r4, r5, r6, pc}
 8014120:	220c      	movs	r2, #12
 8014122:	6002      	str	r2, [r0, #0]
 8014124:	e7f9      	b.n	801411a <_calloc_r+0x12>
 8014126:	462a      	mov	r2, r5
 8014128:	4621      	mov	r1, r4
 801412a:	f000 faa8 	bl	801467e <memset>
 801412e:	e7f5      	b.n	801411c <_calloc_r+0x14>

08014130 <malloc>:
 8014130:	4b02      	ldr	r3, [pc, #8]	@ (801413c <malloc+0xc>)
 8014132:	4601      	mov	r1, r0
 8014134:	6818      	ldr	r0, [r3, #0]
 8014136:	f000 b82d 	b.w	8014194 <_malloc_r>
 801413a:	bf00      	nop
 801413c:	200004a0 	.word	0x200004a0

08014140 <free>:
 8014140:	4b02      	ldr	r3, [pc, #8]	@ (801414c <free+0xc>)
 8014142:	4601      	mov	r1, r0
 8014144:	6818      	ldr	r0, [r3, #0]
 8014146:	f000 bb53 	b.w	80147f0 <_free_r>
 801414a:	bf00      	nop
 801414c:	200004a0 	.word	0x200004a0

08014150 <sbrk_aligned>:
 8014150:	b570      	push	{r4, r5, r6, lr}
 8014152:	4e0f      	ldr	r6, [pc, #60]	@ (8014190 <sbrk_aligned+0x40>)
 8014154:	460c      	mov	r4, r1
 8014156:	6831      	ldr	r1, [r6, #0]
 8014158:	4605      	mov	r5, r0
 801415a:	b911      	cbnz	r1, 8014162 <sbrk_aligned+0x12>
 801415c:	f000 facc 	bl	80146f8 <_sbrk_r>
 8014160:	6030      	str	r0, [r6, #0]
 8014162:	4621      	mov	r1, r4
 8014164:	4628      	mov	r0, r5
 8014166:	f000 fac7 	bl	80146f8 <_sbrk_r>
 801416a:	1c43      	adds	r3, r0, #1
 801416c:	d103      	bne.n	8014176 <sbrk_aligned+0x26>
 801416e:	f04f 34ff 	mov.w	r4, #4294967295
 8014172:	4620      	mov	r0, r4
 8014174:	bd70      	pop	{r4, r5, r6, pc}
 8014176:	1cc4      	adds	r4, r0, #3
 8014178:	f024 0403 	bic.w	r4, r4, #3
 801417c:	42a0      	cmp	r0, r4
 801417e:	d0f8      	beq.n	8014172 <sbrk_aligned+0x22>
 8014180:	1a21      	subs	r1, r4, r0
 8014182:	4628      	mov	r0, r5
 8014184:	f000 fab8 	bl	80146f8 <_sbrk_r>
 8014188:	3001      	adds	r0, #1
 801418a:	d1f2      	bne.n	8014172 <sbrk_aligned+0x22>
 801418c:	e7ef      	b.n	801416e <sbrk_aligned+0x1e>
 801418e:	bf00      	nop
 8014190:	2000e1c4 	.word	0x2000e1c4

08014194 <_malloc_r>:
 8014194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014198:	1ccd      	adds	r5, r1, #3
 801419a:	f025 0503 	bic.w	r5, r5, #3
 801419e:	3508      	adds	r5, #8
 80141a0:	2d0c      	cmp	r5, #12
 80141a2:	bf38      	it	cc
 80141a4:	250c      	movcc	r5, #12
 80141a6:	2d00      	cmp	r5, #0
 80141a8:	4606      	mov	r6, r0
 80141aa:	db01      	blt.n	80141b0 <_malloc_r+0x1c>
 80141ac:	42a9      	cmp	r1, r5
 80141ae:	d904      	bls.n	80141ba <_malloc_r+0x26>
 80141b0:	230c      	movs	r3, #12
 80141b2:	6033      	str	r3, [r6, #0]
 80141b4:	2000      	movs	r0, #0
 80141b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014290 <_malloc_r+0xfc>
 80141be:	f000 f869 	bl	8014294 <__malloc_lock>
 80141c2:	f8d8 3000 	ldr.w	r3, [r8]
 80141c6:	461c      	mov	r4, r3
 80141c8:	bb44      	cbnz	r4, 801421c <_malloc_r+0x88>
 80141ca:	4629      	mov	r1, r5
 80141cc:	4630      	mov	r0, r6
 80141ce:	f7ff ffbf 	bl	8014150 <sbrk_aligned>
 80141d2:	1c43      	adds	r3, r0, #1
 80141d4:	4604      	mov	r4, r0
 80141d6:	d158      	bne.n	801428a <_malloc_r+0xf6>
 80141d8:	f8d8 4000 	ldr.w	r4, [r8]
 80141dc:	4627      	mov	r7, r4
 80141de:	2f00      	cmp	r7, #0
 80141e0:	d143      	bne.n	801426a <_malloc_r+0xd6>
 80141e2:	2c00      	cmp	r4, #0
 80141e4:	d04b      	beq.n	801427e <_malloc_r+0xea>
 80141e6:	6823      	ldr	r3, [r4, #0]
 80141e8:	4639      	mov	r1, r7
 80141ea:	4630      	mov	r0, r6
 80141ec:	eb04 0903 	add.w	r9, r4, r3
 80141f0:	f000 fa82 	bl	80146f8 <_sbrk_r>
 80141f4:	4581      	cmp	r9, r0
 80141f6:	d142      	bne.n	801427e <_malloc_r+0xea>
 80141f8:	6821      	ldr	r1, [r4, #0]
 80141fa:	1a6d      	subs	r5, r5, r1
 80141fc:	4629      	mov	r1, r5
 80141fe:	4630      	mov	r0, r6
 8014200:	f7ff ffa6 	bl	8014150 <sbrk_aligned>
 8014204:	3001      	adds	r0, #1
 8014206:	d03a      	beq.n	801427e <_malloc_r+0xea>
 8014208:	6823      	ldr	r3, [r4, #0]
 801420a:	442b      	add	r3, r5
 801420c:	6023      	str	r3, [r4, #0]
 801420e:	f8d8 3000 	ldr.w	r3, [r8]
 8014212:	685a      	ldr	r2, [r3, #4]
 8014214:	bb62      	cbnz	r2, 8014270 <_malloc_r+0xdc>
 8014216:	f8c8 7000 	str.w	r7, [r8]
 801421a:	e00f      	b.n	801423c <_malloc_r+0xa8>
 801421c:	6822      	ldr	r2, [r4, #0]
 801421e:	1b52      	subs	r2, r2, r5
 8014220:	d420      	bmi.n	8014264 <_malloc_r+0xd0>
 8014222:	2a0b      	cmp	r2, #11
 8014224:	d917      	bls.n	8014256 <_malloc_r+0xc2>
 8014226:	1961      	adds	r1, r4, r5
 8014228:	42a3      	cmp	r3, r4
 801422a:	6025      	str	r5, [r4, #0]
 801422c:	bf18      	it	ne
 801422e:	6059      	strne	r1, [r3, #4]
 8014230:	6863      	ldr	r3, [r4, #4]
 8014232:	bf08      	it	eq
 8014234:	f8c8 1000 	streq.w	r1, [r8]
 8014238:	5162      	str	r2, [r4, r5]
 801423a:	604b      	str	r3, [r1, #4]
 801423c:	4630      	mov	r0, r6
 801423e:	f000 f82f 	bl	80142a0 <__malloc_unlock>
 8014242:	f104 000b 	add.w	r0, r4, #11
 8014246:	1d23      	adds	r3, r4, #4
 8014248:	f020 0007 	bic.w	r0, r0, #7
 801424c:	1ac2      	subs	r2, r0, r3
 801424e:	bf1c      	itt	ne
 8014250:	1a1b      	subne	r3, r3, r0
 8014252:	50a3      	strne	r3, [r4, r2]
 8014254:	e7af      	b.n	80141b6 <_malloc_r+0x22>
 8014256:	6862      	ldr	r2, [r4, #4]
 8014258:	42a3      	cmp	r3, r4
 801425a:	bf0c      	ite	eq
 801425c:	f8c8 2000 	streq.w	r2, [r8]
 8014260:	605a      	strne	r2, [r3, #4]
 8014262:	e7eb      	b.n	801423c <_malloc_r+0xa8>
 8014264:	4623      	mov	r3, r4
 8014266:	6864      	ldr	r4, [r4, #4]
 8014268:	e7ae      	b.n	80141c8 <_malloc_r+0x34>
 801426a:	463c      	mov	r4, r7
 801426c:	687f      	ldr	r7, [r7, #4]
 801426e:	e7b6      	b.n	80141de <_malloc_r+0x4a>
 8014270:	461a      	mov	r2, r3
 8014272:	685b      	ldr	r3, [r3, #4]
 8014274:	42a3      	cmp	r3, r4
 8014276:	d1fb      	bne.n	8014270 <_malloc_r+0xdc>
 8014278:	2300      	movs	r3, #0
 801427a:	6053      	str	r3, [r2, #4]
 801427c:	e7de      	b.n	801423c <_malloc_r+0xa8>
 801427e:	230c      	movs	r3, #12
 8014280:	6033      	str	r3, [r6, #0]
 8014282:	4630      	mov	r0, r6
 8014284:	f000 f80c 	bl	80142a0 <__malloc_unlock>
 8014288:	e794      	b.n	80141b4 <_malloc_r+0x20>
 801428a:	6005      	str	r5, [r0, #0]
 801428c:	e7d6      	b.n	801423c <_malloc_r+0xa8>
 801428e:	bf00      	nop
 8014290:	2000e1c8 	.word	0x2000e1c8

08014294 <__malloc_lock>:
 8014294:	4801      	ldr	r0, [pc, #4]	@ (801429c <__malloc_lock+0x8>)
 8014296:	f000 ba7c 	b.w	8014792 <__retarget_lock_acquire_recursive>
 801429a:	bf00      	nop
 801429c:	2000e308 	.word	0x2000e308

080142a0 <__malloc_unlock>:
 80142a0:	4801      	ldr	r0, [pc, #4]	@ (80142a8 <__malloc_unlock+0x8>)
 80142a2:	f000 ba77 	b.w	8014794 <__retarget_lock_release_recursive>
 80142a6:	bf00      	nop
 80142a8:	2000e308 	.word	0x2000e308

080142ac <rand>:
 80142ac:	4b16      	ldr	r3, [pc, #88]	@ (8014308 <rand+0x5c>)
 80142ae:	b510      	push	{r4, lr}
 80142b0:	681c      	ldr	r4, [r3, #0]
 80142b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80142b4:	b9b3      	cbnz	r3, 80142e4 <rand+0x38>
 80142b6:	2018      	movs	r0, #24
 80142b8:	f7ff ff3a 	bl	8014130 <malloc>
 80142bc:	4602      	mov	r2, r0
 80142be:	6320      	str	r0, [r4, #48]	@ 0x30
 80142c0:	b920      	cbnz	r0, 80142cc <rand+0x20>
 80142c2:	4b12      	ldr	r3, [pc, #72]	@ (801430c <rand+0x60>)
 80142c4:	4812      	ldr	r0, [pc, #72]	@ (8014310 <rand+0x64>)
 80142c6:	2152      	movs	r1, #82	@ 0x52
 80142c8:	f000 fa74 	bl	80147b4 <__assert_func>
 80142cc:	4911      	ldr	r1, [pc, #68]	@ (8014314 <rand+0x68>)
 80142ce:	4b12      	ldr	r3, [pc, #72]	@ (8014318 <rand+0x6c>)
 80142d0:	e9c0 1300 	strd	r1, r3, [r0]
 80142d4:	4b11      	ldr	r3, [pc, #68]	@ (801431c <rand+0x70>)
 80142d6:	6083      	str	r3, [r0, #8]
 80142d8:	230b      	movs	r3, #11
 80142da:	8183      	strh	r3, [r0, #12]
 80142dc:	2100      	movs	r1, #0
 80142de:	2001      	movs	r0, #1
 80142e0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80142e4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80142e6:	480e      	ldr	r0, [pc, #56]	@ (8014320 <rand+0x74>)
 80142e8:	690b      	ldr	r3, [r1, #16]
 80142ea:	694c      	ldr	r4, [r1, #20]
 80142ec:	4a0d      	ldr	r2, [pc, #52]	@ (8014324 <rand+0x78>)
 80142ee:	4358      	muls	r0, r3
 80142f0:	fb02 0004 	mla	r0, r2, r4, r0
 80142f4:	fba3 3202 	umull	r3, r2, r3, r2
 80142f8:	3301      	adds	r3, #1
 80142fa:	eb40 0002 	adc.w	r0, r0, r2
 80142fe:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8014302:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8014306:	bd10      	pop	{r4, pc}
 8014308:	200004a0 	.word	0x200004a0
 801430c:	08017bf4 	.word	0x08017bf4
 8014310:	08017c0b 	.word	0x08017c0b
 8014314:	abcd330e 	.word	0xabcd330e
 8014318:	e66d1234 	.word	0xe66d1234
 801431c:	0005deec 	.word	0x0005deec
 8014320:	5851f42d 	.word	0x5851f42d
 8014324:	4c957f2d 	.word	0x4c957f2d

08014328 <_strtol_l.constprop.0>:
 8014328:	2b24      	cmp	r3, #36	@ 0x24
 801432a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801432e:	4686      	mov	lr, r0
 8014330:	4690      	mov	r8, r2
 8014332:	d801      	bhi.n	8014338 <_strtol_l.constprop.0+0x10>
 8014334:	2b01      	cmp	r3, #1
 8014336:	d106      	bne.n	8014346 <_strtol_l.constprop.0+0x1e>
 8014338:	f000 fa00 	bl	801473c <__errno>
 801433c:	2316      	movs	r3, #22
 801433e:	6003      	str	r3, [r0, #0]
 8014340:	2000      	movs	r0, #0
 8014342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014346:	4834      	ldr	r0, [pc, #208]	@ (8014418 <_strtol_l.constprop.0+0xf0>)
 8014348:	460d      	mov	r5, r1
 801434a:	462a      	mov	r2, r5
 801434c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014350:	5d06      	ldrb	r6, [r0, r4]
 8014352:	f016 0608 	ands.w	r6, r6, #8
 8014356:	d1f8      	bne.n	801434a <_strtol_l.constprop.0+0x22>
 8014358:	2c2d      	cmp	r4, #45	@ 0x2d
 801435a:	d12d      	bne.n	80143b8 <_strtol_l.constprop.0+0x90>
 801435c:	782c      	ldrb	r4, [r5, #0]
 801435e:	2601      	movs	r6, #1
 8014360:	1c95      	adds	r5, r2, #2
 8014362:	f033 0210 	bics.w	r2, r3, #16
 8014366:	d109      	bne.n	801437c <_strtol_l.constprop.0+0x54>
 8014368:	2c30      	cmp	r4, #48	@ 0x30
 801436a:	d12a      	bne.n	80143c2 <_strtol_l.constprop.0+0x9a>
 801436c:	782a      	ldrb	r2, [r5, #0]
 801436e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8014372:	2a58      	cmp	r2, #88	@ 0x58
 8014374:	d125      	bne.n	80143c2 <_strtol_l.constprop.0+0x9a>
 8014376:	786c      	ldrb	r4, [r5, #1]
 8014378:	2310      	movs	r3, #16
 801437a:	3502      	adds	r5, #2
 801437c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8014380:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014384:	2200      	movs	r2, #0
 8014386:	fbbc f9f3 	udiv	r9, ip, r3
 801438a:	4610      	mov	r0, r2
 801438c:	fb03 ca19 	mls	sl, r3, r9, ip
 8014390:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8014394:	2f09      	cmp	r7, #9
 8014396:	d81b      	bhi.n	80143d0 <_strtol_l.constprop.0+0xa8>
 8014398:	463c      	mov	r4, r7
 801439a:	42a3      	cmp	r3, r4
 801439c:	dd27      	ble.n	80143ee <_strtol_l.constprop.0+0xc6>
 801439e:	1c57      	adds	r7, r2, #1
 80143a0:	d007      	beq.n	80143b2 <_strtol_l.constprop.0+0x8a>
 80143a2:	4581      	cmp	r9, r0
 80143a4:	d320      	bcc.n	80143e8 <_strtol_l.constprop.0+0xc0>
 80143a6:	d101      	bne.n	80143ac <_strtol_l.constprop.0+0x84>
 80143a8:	45a2      	cmp	sl, r4
 80143aa:	db1d      	blt.n	80143e8 <_strtol_l.constprop.0+0xc0>
 80143ac:	fb00 4003 	mla	r0, r0, r3, r4
 80143b0:	2201      	movs	r2, #1
 80143b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80143b6:	e7eb      	b.n	8014390 <_strtol_l.constprop.0+0x68>
 80143b8:	2c2b      	cmp	r4, #43	@ 0x2b
 80143ba:	bf04      	itt	eq
 80143bc:	782c      	ldrbeq	r4, [r5, #0]
 80143be:	1c95      	addeq	r5, r2, #2
 80143c0:	e7cf      	b.n	8014362 <_strtol_l.constprop.0+0x3a>
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d1da      	bne.n	801437c <_strtol_l.constprop.0+0x54>
 80143c6:	2c30      	cmp	r4, #48	@ 0x30
 80143c8:	bf0c      	ite	eq
 80143ca:	2308      	moveq	r3, #8
 80143cc:	230a      	movne	r3, #10
 80143ce:	e7d5      	b.n	801437c <_strtol_l.constprop.0+0x54>
 80143d0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80143d4:	2f19      	cmp	r7, #25
 80143d6:	d801      	bhi.n	80143dc <_strtol_l.constprop.0+0xb4>
 80143d8:	3c37      	subs	r4, #55	@ 0x37
 80143da:	e7de      	b.n	801439a <_strtol_l.constprop.0+0x72>
 80143dc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80143e0:	2f19      	cmp	r7, #25
 80143e2:	d804      	bhi.n	80143ee <_strtol_l.constprop.0+0xc6>
 80143e4:	3c57      	subs	r4, #87	@ 0x57
 80143e6:	e7d8      	b.n	801439a <_strtol_l.constprop.0+0x72>
 80143e8:	f04f 32ff 	mov.w	r2, #4294967295
 80143ec:	e7e1      	b.n	80143b2 <_strtol_l.constprop.0+0x8a>
 80143ee:	1c53      	adds	r3, r2, #1
 80143f0:	d108      	bne.n	8014404 <_strtol_l.constprop.0+0xdc>
 80143f2:	2322      	movs	r3, #34	@ 0x22
 80143f4:	f8ce 3000 	str.w	r3, [lr]
 80143f8:	4660      	mov	r0, ip
 80143fa:	f1b8 0f00 	cmp.w	r8, #0
 80143fe:	d0a0      	beq.n	8014342 <_strtol_l.constprop.0+0x1a>
 8014400:	1e69      	subs	r1, r5, #1
 8014402:	e006      	b.n	8014412 <_strtol_l.constprop.0+0xea>
 8014404:	b106      	cbz	r6, 8014408 <_strtol_l.constprop.0+0xe0>
 8014406:	4240      	negs	r0, r0
 8014408:	f1b8 0f00 	cmp.w	r8, #0
 801440c:	d099      	beq.n	8014342 <_strtol_l.constprop.0+0x1a>
 801440e:	2a00      	cmp	r2, #0
 8014410:	d1f6      	bne.n	8014400 <_strtol_l.constprop.0+0xd8>
 8014412:	f8c8 1000 	str.w	r1, [r8]
 8014416:	e794      	b.n	8014342 <_strtol_l.constprop.0+0x1a>
 8014418:	08017c64 	.word	0x08017c64

0801441c <strtol>:
 801441c:	4613      	mov	r3, r2
 801441e:	460a      	mov	r2, r1
 8014420:	4601      	mov	r1, r0
 8014422:	4802      	ldr	r0, [pc, #8]	@ (801442c <strtol+0x10>)
 8014424:	6800      	ldr	r0, [r0, #0]
 8014426:	f7ff bf7f 	b.w	8014328 <_strtol_l.constprop.0>
 801442a:	bf00      	nop
 801442c:	200004a0 	.word	0x200004a0

08014430 <std>:
 8014430:	2300      	movs	r3, #0
 8014432:	b510      	push	{r4, lr}
 8014434:	4604      	mov	r4, r0
 8014436:	e9c0 3300 	strd	r3, r3, [r0]
 801443a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801443e:	6083      	str	r3, [r0, #8]
 8014440:	8181      	strh	r1, [r0, #12]
 8014442:	6643      	str	r3, [r0, #100]	@ 0x64
 8014444:	81c2      	strh	r2, [r0, #14]
 8014446:	6183      	str	r3, [r0, #24]
 8014448:	4619      	mov	r1, r3
 801444a:	2208      	movs	r2, #8
 801444c:	305c      	adds	r0, #92	@ 0x5c
 801444e:	f000 f916 	bl	801467e <memset>
 8014452:	4b0d      	ldr	r3, [pc, #52]	@ (8014488 <std+0x58>)
 8014454:	6263      	str	r3, [r4, #36]	@ 0x24
 8014456:	4b0d      	ldr	r3, [pc, #52]	@ (801448c <std+0x5c>)
 8014458:	62a3      	str	r3, [r4, #40]	@ 0x28
 801445a:	4b0d      	ldr	r3, [pc, #52]	@ (8014490 <std+0x60>)
 801445c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801445e:	4b0d      	ldr	r3, [pc, #52]	@ (8014494 <std+0x64>)
 8014460:	6323      	str	r3, [r4, #48]	@ 0x30
 8014462:	4b0d      	ldr	r3, [pc, #52]	@ (8014498 <std+0x68>)
 8014464:	6224      	str	r4, [r4, #32]
 8014466:	429c      	cmp	r4, r3
 8014468:	d006      	beq.n	8014478 <std+0x48>
 801446a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801446e:	4294      	cmp	r4, r2
 8014470:	d002      	beq.n	8014478 <std+0x48>
 8014472:	33d0      	adds	r3, #208	@ 0xd0
 8014474:	429c      	cmp	r4, r3
 8014476:	d105      	bne.n	8014484 <std+0x54>
 8014478:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801447c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014480:	f000 b986 	b.w	8014790 <__retarget_lock_init_recursive>
 8014484:	bd10      	pop	{r4, pc}
 8014486:	bf00      	nop
 8014488:	080145d9 	.word	0x080145d9
 801448c:	080145fb 	.word	0x080145fb
 8014490:	08014633 	.word	0x08014633
 8014494:	08014657 	.word	0x08014657
 8014498:	2000e1cc 	.word	0x2000e1cc

0801449c <stdio_exit_handler>:
 801449c:	4a02      	ldr	r2, [pc, #8]	@ (80144a8 <stdio_exit_handler+0xc>)
 801449e:	4903      	ldr	r1, [pc, #12]	@ (80144ac <stdio_exit_handler+0x10>)
 80144a0:	4803      	ldr	r0, [pc, #12]	@ (80144b0 <stdio_exit_handler+0x14>)
 80144a2:	f000 b869 	b.w	8014578 <_fwalk_sglue>
 80144a6:	bf00      	nop
 80144a8:	20000494 	.word	0x20000494
 80144ac:	08014f2d 	.word	0x08014f2d
 80144b0:	200004a4 	.word	0x200004a4

080144b4 <cleanup_stdio>:
 80144b4:	6841      	ldr	r1, [r0, #4]
 80144b6:	4b0c      	ldr	r3, [pc, #48]	@ (80144e8 <cleanup_stdio+0x34>)
 80144b8:	4299      	cmp	r1, r3
 80144ba:	b510      	push	{r4, lr}
 80144bc:	4604      	mov	r4, r0
 80144be:	d001      	beq.n	80144c4 <cleanup_stdio+0x10>
 80144c0:	f000 fd34 	bl	8014f2c <_fflush_r>
 80144c4:	68a1      	ldr	r1, [r4, #8]
 80144c6:	4b09      	ldr	r3, [pc, #36]	@ (80144ec <cleanup_stdio+0x38>)
 80144c8:	4299      	cmp	r1, r3
 80144ca:	d002      	beq.n	80144d2 <cleanup_stdio+0x1e>
 80144cc:	4620      	mov	r0, r4
 80144ce:	f000 fd2d 	bl	8014f2c <_fflush_r>
 80144d2:	68e1      	ldr	r1, [r4, #12]
 80144d4:	4b06      	ldr	r3, [pc, #24]	@ (80144f0 <cleanup_stdio+0x3c>)
 80144d6:	4299      	cmp	r1, r3
 80144d8:	d004      	beq.n	80144e4 <cleanup_stdio+0x30>
 80144da:	4620      	mov	r0, r4
 80144dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80144e0:	f000 bd24 	b.w	8014f2c <_fflush_r>
 80144e4:	bd10      	pop	{r4, pc}
 80144e6:	bf00      	nop
 80144e8:	2000e1cc 	.word	0x2000e1cc
 80144ec:	2000e234 	.word	0x2000e234
 80144f0:	2000e29c 	.word	0x2000e29c

080144f4 <global_stdio_init.part.0>:
 80144f4:	b510      	push	{r4, lr}
 80144f6:	4b0b      	ldr	r3, [pc, #44]	@ (8014524 <global_stdio_init.part.0+0x30>)
 80144f8:	4c0b      	ldr	r4, [pc, #44]	@ (8014528 <global_stdio_init.part.0+0x34>)
 80144fa:	4a0c      	ldr	r2, [pc, #48]	@ (801452c <global_stdio_init.part.0+0x38>)
 80144fc:	601a      	str	r2, [r3, #0]
 80144fe:	4620      	mov	r0, r4
 8014500:	2200      	movs	r2, #0
 8014502:	2104      	movs	r1, #4
 8014504:	f7ff ff94 	bl	8014430 <std>
 8014508:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801450c:	2201      	movs	r2, #1
 801450e:	2109      	movs	r1, #9
 8014510:	f7ff ff8e 	bl	8014430 <std>
 8014514:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014518:	2202      	movs	r2, #2
 801451a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801451e:	2112      	movs	r1, #18
 8014520:	f7ff bf86 	b.w	8014430 <std>
 8014524:	2000e304 	.word	0x2000e304
 8014528:	2000e1cc 	.word	0x2000e1cc
 801452c:	0801449d 	.word	0x0801449d

08014530 <__sfp_lock_acquire>:
 8014530:	4801      	ldr	r0, [pc, #4]	@ (8014538 <__sfp_lock_acquire+0x8>)
 8014532:	f000 b92e 	b.w	8014792 <__retarget_lock_acquire_recursive>
 8014536:	bf00      	nop
 8014538:	2000e309 	.word	0x2000e309

0801453c <__sfp_lock_release>:
 801453c:	4801      	ldr	r0, [pc, #4]	@ (8014544 <__sfp_lock_release+0x8>)
 801453e:	f000 b929 	b.w	8014794 <__retarget_lock_release_recursive>
 8014542:	bf00      	nop
 8014544:	2000e309 	.word	0x2000e309

08014548 <__sinit>:
 8014548:	b510      	push	{r4, lr}
 801454a:	4604      	mov	r4, r0
 801454c:	f7ff fff0 	bl	8014530 <__sfp_lock_acquire>
 8014550:	6a23      	ldr	r3, [r4, #32]
 8014552:	b11b      	cbz	r3, 801455c <__sinit+0x14>
 8014554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014558:	f7ff bff0 	b.w	801453c <__sfp_lock_release>
 801455c:	4b04      	ldr	r3, [pc, #16]	@ (8014570 <__sinit+0x28>)
 801455e:	6223      	str	r3, [r4, #32]
 8014560:	4b04      	ldr	r3, [pc, #16]	@ (8014574 <__sinit+0x2c>)
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d1f5      	bne.n	8014554 <__sinit+0xc>
 8014568:	f7ff ffc4 	bl	80144f4 <global_stdio_init.part.0>
 801456c:	e7f2      	b.n	8014554 <__sinit+0xc>
 801456e:	bf00      	nop
 8014570:	080144b5 	.word	0x080144b5
 8014574:	2000e304 	.word	0x2000e304

08014578 <_fwalk_sglue>:
 8014578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801457c:	4607      	mov	r7, r0
 801457e:	4688      	mov	r8, r1
 8014580:	4614      	mov	r4, r2
 8014582:	2600      	movs	r6, #0
 8014584:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014588:	f1b9 0901 	subs.w	r9, r9, #1
 801458c:	d505      	bpl.n	801459a <_fwalk_sglue+0x22>
 801458e:	6824      	ldr	r4, [r4, #0]
 8014590:	2c00      	cmp	r4, #0
 8014592:	d1f7      	bne.n	8014584 <_fwalk_sglue+0xc>
 8014594:	4630      	mov	r0, r6
 8014596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801459a:	89ab      	ldrh	r3, [r5, #12]
 801459c:	2b01      	cmp	r3, #1
 801459e:	d907      	bls.n	80145b0 <_fwalk_sglue+0x38>
 80145a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80145a4:	3301      	adds	r3, #1
 80145a6:	d003      	beq.n	80145b0 <_fwalk_sglue+0x38>
 80145a8:	4629      	mov	r1, r5
 80145aa:	4638      	mov	r0, r7
 80145ac:	47c0      	blx	r8
 80145ae:	4306      	orrs	r6, r0
 80145b0:	3568      	adds	r5, #104	@ 0x68
 80145b2:	e7e9      	b.n	8014588 <_fwalk_sglue+0x10>

080145b4 <iprintf>:
 80145b4:	b40f      	push	{r0, r1, r2, r3}
 80145b6:	b507      	push	{r0, r1, r2, lr}
 80145b8:	4906      	ldr	r1, [pc, #24]	@ (80145d4 <iprintf+0x20>)
 80145ba:	ab04      	add	r3, sp, #16
 80145bc:	6808      	ldr	r0, [r1, #0]
 80145be:	f853 2b04 	ldr.w	r2, [r3], #4
 80145c2:	6881      	ldr	r1, [r0, #8]
 80145c4:	9301      	str	r3, [sp, #4]
 80145c6:	f000 f987 	bl	80148d8 <_vfiprintf_r>
 80145ca:	b003      	add	sp, #12
 80145cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80145d0:	b004      	add	sp, #16
 80145d2:	4770      	bx	lr
 80145d4:	200004a0 	.word	0x200004a0

080145d8 <__sread>:
 80145d8:	b510      	push	{r4, lr}
 80145da:	460c      	mov	r4, r1
 80145dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145e0:	f000 f878 	bl	80146d4 <_read_r>
 80145e4:	2800      	cmp	r0, #0
 80145e6:	bfab      	itete	ge
 80145e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80145ea:	89a3      	ldrhlt	r3, [r4, #12]
 80145ec:	181b      	addge	r3, r3, r0
 80145ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80145f2:	bfac      	ite	ge
 80145f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80145f6:	81a3      	strhlt	r3, [r4, #12]
 80145f8:	bd10      	pop	{r4, pc}

080145fa <__swrite>:
 80145fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145fe:	461f      	mov	r7, r3
 8014600:	898b      	ldrh	r3, [r1, #12]
 8014602:	05db      	lsls	r3, r3, #23
 8014604:	4605      	mov	r5, r0
 8014606:	460c      	mov	r4, r1
 8014608:	4616      	mov	r6, r2
 801460a:	d505      	bpl.n	8014618 <__swrite+0x1e>
 801460c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014610:	2302      	movs	r3, #2
 8014612:	2200      	movs	r2, #0
 8014614:	f000 f84c 	bl	80146b0 <_lseek_r>
 8014618:	89a3      	ldrh	r3, [r4, #12]
 801461a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801461e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014622:	81a3      	strh	r3, [r4, #12]
 8014624:	4632      	mov	r2, r6
 8014626:	463b      	mov	r3, r7
 8014628:	4628      	mov	r0, r5
 801462a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801462e:	f000 b873 	b.w	8014718 <_write_r>

08014632 <__sseek>:
 8014632:	b510      	push	{r4, lr}
 8014634:	460c      	mov	r4, r1
 8014636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801463a:	f000 f839 	bl	80146b0 <_lseek_r>
 801463e:	1c43      	adds	r3, r0, #1
 8014640:	89a3      	ldrh	r3, [r4, #12]
 8014642:	bf15      	itete	ne
 8014644:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014646:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801464a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801464e:	81a3      	strheq	r3, [r4, #12]
 8014650:	bf18      	it	ne
 8014652:	81a3      	strhne	r3, [r4, #12]
 8014654:	bd10      	pop	{r4, pc}

08014656 <__sclose>:
 8014656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801465a:	f000 b819 	b.w	8014690 <_close_r>

0801465e <memcmp>:
 801465e:	b510      	push	{r4, lr}
 8014660:	3901      	subs	r1, #1
 8014662:	4402      	add	r2, r0
 8014664:	4290      	cmp	r0, r2
 8014666:	d101      	bne.n	801466c <memcmp+0xe>
 8014668:	2000      	movs	r0, #0
 801466a:	e005      	b.n	8014678 <memcmp+0x1a>
 801466c:	7803      	ldrb	r3, [r0, #0]
 801466e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014672:	42a3      	cmp	r3, r4
 8014674:	d001      	beq.n	801467a <memcmp+0x1c>
 8014676:	1b18      	subs	r0, r3, r4
 8014678:	bd10      	pop	{r4, pc}
 801467a:	3001      	adds	r0, #1
 801467c:	e7f2      	b.n	8014664 <memcmp+0x6>

0801467e <memset>:
 801467e:	4402      	add	r2, r0
 8014680:	4603      	mov	r3, r0
 8014682:	4293      	cmp	r3, r2
 8014684:	d100      	bne.n	8014688 <memset+0xa>
 8014686:	4770      	bx	lr
 8014688:	f803 1b01 	strb.w	r1, [r3], #1
 801468c:	e7f9      	b.n	8014682 <memset+0x4>
	...

08014690 <_close_r>:
 8014690:	b538      	push	{r3, r4, r5, lr}
 8014692:	4d06      	ldr	r5, [pc, #24]	@ (80146ac <_close_r+0x1c>)
 8014694:	2300      	movs	r3, #0
 8014696:	4604      	mov	r4, r0
 8014698:	4608      	mov	r0, r1
 801469a:	602b      	str	r3, [r5, #0]
 801469c:	f7ec fd4c 	bl	8001138 <_close>
 80146a0:	1c43      	adds	r3, r0, #1
 80146a2:	d102      	bne.n	80146aa <_close_r+0x1a>
 80146a4:	682b      	ldr	r3, [r5, #0]
 80146a6:	b103      	cbz	r3, 80146aa <_close_r+0x1a>
 80146a8:	6023      	str	r3, [r4, #0]
 80146aa:	bd38      	pop	{r3, r4, r5, pc}
 80146ac:	2000e138 	.word	0x2000e138

080146b0 <_lseek_r>:
 80146b0:	b538      	push	{r3, r4, r5, lr}
 80146b2:	4d07      	ldr	r5, [pc, #28]	@ (80146d0 <_lseek_r+0x20>)
 80146b4:	4604      	mov	r4, r0
 80146b6:	4608      	mov	r0, r1
 80146b8:	4611      	mov	r1, r2
 80146ba:	2200      	movs	r2, #0
 80146bc:	602a      	str	r2, [r5, #0]
 80146be:	461a      	mov	r2, r3
 80146c0:	f7ec fd61 	bl	8001186 <_lseek>
 80146c4:	1c43      	adds	r3, r0, #1
 80146c6:	d102      	bne.n	80146ce <_lseek_r+0x1e>
 80146c8:	682b      	ldr	r3, [r5, #0]
 80146ca:	b103      	cbz	r3, 80146ce <_lseek_r+0x1e>
 80146cc:	6023      	str	r3, [r4, #0]
 80146ce:	bd38      	pop	{r3, r4, r5, pc}
 80146d0:	2000e138 	.word	0x2000e138

080146d4 <_read_r>:
 80146d4:	b538      	push	{r3, r4, r5, lr}
 80146d6:	4d07      	ldr	r5, [pc, #28]	@ (80146f4 <_read_r+0x20>)
 80146d8:	4604      	mov	r4, r0
 80146da:	4608      	mov	r0, r1
 80146dc:	4611      	mov	r1, r2
 80146de:	2200      	movs	r2, #0
 80146e0:	602a      	str	r2, [r5, #0]
 80146e2:	461a      	mov	r2, r3
 80146e4:	f7ec fcef 	bl	80010c6 <_read>
 80146e8:	1c43      	adds	r3, r0, #1
 80146ea:	d102      	bne.n	80146f2 <_read_r+0x1e>
 80146ec:	682b      	ldr	r3, [r5, #0]
 80146ee:	b103      	cbz	r3, 80146f2 <_read_r+0x1e>
 80146f0:	6023      	str	r3, [r4, #0]
 80146f2:	bd38      	pop	{r3, r4, r5, pc}
 80146f4:	2000e138 	.word	0x2000e138

080146f8 <_sbrk_r>:
 80146f8:	b538      	push	{r3, r4, r5, lr}
 80146fa:	4d06      	ldr	r5, [pc, #24]	@ (8014714 <_sbrk_r+0x1c>)
 80146fc:	2300      	movs	r3, #0
 80146fe:	4604      	mov	r4, r0
 8014700:	4608      	mov	r0, r1
 8014702:	602b      	str	r3, [r5, #0]
 8014704:	f7ec fd4c 	bl	80011a0 <_sbrk>
 8014708:	1c43      	adds	r3, r0, #1
 801470a:	d102      	bne.n	8014712 <_sbrk_r+0x1a>
 801470c:	682b      	ldr	r3, [r5, #0]
 801470e:	b103      	cbz	r3, 8014712 <_sbrk_r+0x1a>
 8014710:	6023      	str	r3, [r4, #0]
 8014712:	bd38      	pop	{r3, r4, r5, pc}
 8014714:	2000e138 	.word	0x2000e138

08014718 <_write_r>:
 8014718:	b538      	push	{r3, r4, r5, lr}
 801471a:	4d07      	ldr	r5, [pc, #28]	@ (8014738 <_write_r+0x20>)
 801471c:	4604      	mov	r4, r0
 801471e:	4608      	mov	r0, r1
 8014720:	4611      	mov	r1, r2
 8014722:	2200      	movs	r2, #0
 8014724:	602a      	str	r2, [r5, #0]
 8014726:	461a      	mov	r2, r3
 8014728:	f7ec fcea 	bl	8001100 <_write>
 801472c:	1c43      	adds	r3, r0, #1
 801472e:	d102      	bne.n	8014736 <_write_r+0x1e>
 8014730:	682b      	ldr	r3, [r5, #0]
 8014732:	b103      	cbz	r3, 8014736 <_write_r+0x1e>
 8014734:	6023      	str	r3, [r4, #0]
 8014736:	bd38      	pop	{r3, r4, r5, pc}
 8014738:	2000e138 	.word	0x2000e138

0801473c <__errno>:
 801473c:	4b01      	ldr	r3, [pc, #4]	@ (8014744 <__errno+0x8>)
 801473e:	6818      	ldr	r0, [r3, #0]
 8014740:	4770      	bx	lr
 8014742:	bf00      	nop
 8014744:	200004a0 	.word	0x200004a0

08014748 <__libc_init_array>:
 8014748:	b570      	push	{r4, r5, r6, lr}
 801474a:	4d0d      	ldr	r5, [pc, #52]	@ (8014780 <__libc_init_array+0x38>)
 801474c:	4c0d      	ldr	r4, [pc, #52]	@ (8014784 <__libc_init_array+0x3c>)
 801474e:	1b64      	subs	r4, r4, r5
 8014750:	10a4      	asrs	r4, r4, #2
 8014752:	2600      	movs	r6, #0
 8014754:	42a6      	cmp	r6, r4
 8014756:	d109      	bne.n	801476c <__libc_init_array+0x24>
 8014758:	4d0b      	ldr	r5, [pc, #44]	@ (8014788 <__libc_init_array+0x40>)
 801475a:	4c0c      	ldr	r4, [pc, #48]	@ (801478c <__libc_init_array+0x44>)
 801475c:	f000 fd84 	bl	8015268 <_init>
 8014760:	1b64      	subs	r4, r4, r5
 8014762:	10a4      	asrs	r4, r4, #2
 8014764:	2600      	movs	r6, #0
 8014766:	42a6      	cmp	r6, r4
 8014768:	d105      	bne.n	8014776 <__libc_init_array+0x2e>
 801476a:	bd70      	pop	{r4, r5, r6, pc}
 801476c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014770:	4798      	blx	r3
 8014772:	3601      	adds	r6, #1
 8014774:	e7ee      	b.n	8014754 <__libc_init_array+0xc>
 8014776:	f855 3b04 	ldr.w	r3, [r5], #4
 801477a:	4798      	blx	r3
 801477c:	3601      	adds	r6, #1
 801477e:	e7f2      	b.n	8014766 <__libc_init_array+0x1e>
 8014780:	08017ddc 	.word	0x08017ddc
 8014784:	08017ddc 	.word	0x08017ddc
 8014788:	08017ddc 	.word	0x08017ddc
 801478c:	08017de0 	.word	0x08017de0

08014790 <__retarget_lock_init_recursive>:
 8014790:	4770      	bx	lr

08014792 <__retarget_lock_acquire_recursive>:
 8014792:	4770      	bx	lr

08014794 <__retarget_lock_release_recursive>:
 8014794:	4770      	bx	lr

08014796 <memcpy>:
 8014796:	440a      	add	r2, r1
 8014798:	4291      	cmp	r1, r2
 801479a:	f100 33ff 	add.w	r3, r0, #4294967295
 801479e:	d100      	bne.n	80147a2 <memcpy+0xc>
 80147a0:	4770      	bx	lr
 80147a2:	b510      	push	{r4, lr}
 80147a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80147a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80147ac:	4291      	cmp	r1, r2
 80147ae:	d1f9      	bne.n	80147a4 <memcpy+0xe>
 80147b0:	bd10      	pop	{r4, pc}
	...

080147b4 <__assert_func>:
 80147b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80147b6:	4614      	mov	r4, r2
 80147b8:	461a      	mov	r2, r3
 80147ba:	4b09      	ldr	r3, [pc, #36]	@ (80147e0 <__assert_func+0x2c>)
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	4605      	mov	r5, r0
 80147c0:	68d8      	ldr	r0, [r3, #12]
 80147c2:	b954      	cbnz	r4, 80147da <__assert_func+0x26>
 80147c4:	4b07      	ldr	r3, [pc, #28]	@ (80147e4 <__assert_func+0x30>)
 80147c6:	461c      	mov	r4, r3
 80147c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80147cc:	9100      	str	r1, [sp, #0]
 80147ce:	462b      	mov	r3, r5
 80147d0:	4905      	ldr	r1, [pc, #20]	@ (80147e8 <__assert_func+0x34>)
 80147d2:	f000 fbd3 	bl	8014f7c <fiprintf>
 80147d6:	f000 fc77 	bl	80150c8 <abort>
 80147da:	4b04      	ldr	r3, [pc, #16]	@ (80147ec <__assert_func+0x38>)
 80147dc:	e7f4      	b.n	80147c8 <__assert_func+0x14>
 80147de:	bf00      	nop
 80147e0:	200004a0 	.word	0x200004a0
 80147e4:	08017d9f 	.word	0x08017d9f
 80147e8:	08017d71 	.word	0x08017d71
 80147ec:	08017d64 	.word	0x08017d64

080147f0 <_free_r>:
 80147f0:	b538      	push	{r3, r4, r5, lr}
 80147f2:	4605      	mov	r5, r0
 80147f4:	2900      	cmp	r1, #0
 80147f6:	d041      	beq.n	801487c <_free_r+0x8c>
 80147f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80147fc:	1f0c      	subs	r4, r1, #4
 80147fe:	2b00      	cmp	r3, #0
 8014800:	bfb8      	it	lt
 8014802:	18e4      	addlt	r4, r4, r3
 8014804:	f7ff fd46 	bl	8014294 <__malloc_lock>
 8014808:	4a1d      	ldr	r2, [pc, #116]	@ (8014880 <_free_r+0x90>)
 801480a:	6813      	ldr	r3, [r2, #0]
 801480c:	b933      	cbnz	r3, 801481c <_free_r+0x2c>
 801480e:	6063      	str	r3, [r4, #4]
 8014810:	6014      	str	r4, [r2, #0]
 8014812:	4628      	mov	r0, r5
 8014814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014818:	f7ff bd42 	b.w	80142a0 <__malloc_unlock>
 801481c:	42a3      	cmp	r3, r4
 801481e:	d908      	bls.n	8014832 <_free_r+0x42>
 8014820:	6820      	ldr	r0, [r4, #0]
 8014822:	1821      	adds	r1, r4, r0
 8014824:	428b      	cmp	r3, r1
 8014826:	bf01      	itttt	eq
 8014828:	6819      	ldreq	r1, [r3, #0]
 801482a:	685b      	ldreq	r3, [r3, #4]
 801482c:	1809      	addeq	r1, r1, r0
 801482e:	6021      	streq	r1, [r4, #0]
 8014830:	e7ed      	b.n	801480e <_free_r+0x1e>
 8014832:	461a      	mov	r2, r3
 8014834:	685b      	ldr	r3, [r3, #4]
 8014836:	b10b      	cbz	r3, 801483c <_free_r+0x4c>
 8014838:	42a3      	cmp	r3, r4
 801483a:	d9fa      	bls.n	8014832 <_free_r+0x42>
 801483c:	6811      	ldr	r1, [r2, #0]
 801483e:	1850      	adds	r0, r2, r1
 8014840:	42a0      	cmp	r0, r4
 8014842:	d10b      	bne.n	801485c <_free_r+0x6c>
 8014844:	6820      	ldr	r0, [r4, #0]
 8014846:	4401      	add	r1, r0
 8014848:	1850      	adds	r0, r2, r1
 801484a:	4283      	cmp	r3, r0
 801484c:	6011      	str	r1, [r2, #0]
 801484e:	d1e0      	bne.n	8014812 <_free_r+0x22>
 8014850:	6818      	ldr	r0, [r3, #0]
 8014852:	685b      	ldr	r3, [r3, #4]
 8014854:	6053      	str	r3, [r2, #4]
 8014856:	4408      	add	r0, r1
 8014858:	6010      	str	r0, [r2, #0]
 801485a:	e7da      	b.n	8014812 <_free_r+0x22>
 801485c:	d902      	bls.n	8014864 <_free_r+0x74>
 801485e:	230c      	movs	r3, #12
 8014860:	602b      	str	r3, [r5, #0]
 8014862:	e7d6      	b.n	8014812 <_free_r+0x22>
 8014864:	6820      	ldr	r0, [r4, #0]
 8014866:	1821      	adds	r1, r4, r0
 8014868:	428b      	cmp	r3, r1
 801486a:	bf04      	itt	eq
 801486c:	6819      	ldreq	r1, [r3, #0]
 801486e:	685b      	ldreq	r3, [r3, #4]
 8014870:	6063      	str	r3, [r4, #4]
 8014872:	bf04      	itt	eq
 8014874:	1809      	addeq	r1, r1, r0
 8014876:	6021      	streq	r1, [r4, #0]
 8014878:	6054      	str	r4, [r2, #4]
 801487a:	e7ca      	b.n	8014812 <_free_r+0x22>
 801487c:	bd38      	pop	{r3, r4, r5, pc}
 801487e:	bf00      	nop
 8014880:	2000e1c8 	.word	0x2000e1c8

08014884 <__sfputc_r>:
 8014884:	6893      	ldr	r3, [r2, #8]
 8014886:	3b01      	subs	r3, #1
 8014888:	2b00      	cmp	r3, #0
 801488a:	b410      	push	{r4}
 801488c:	6093      	str	r3, [r2, #8]
 801488e:	da08      	bge.n	80148a2 <__sfputc_r+0x1e>
 8014890:	6994      	ldr	r4, [r2, #24]
 8014892:	42a3      	cmp	r3, r4
 8014894:	db01      	blt.n	801489a <__sfputc_r+0x16>
 8014896:	290a      	cmp	r1, #10
 8014898:	d103      	bne.n	80148a2 <__sfputc_r+0x1e>
 801489a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801489e:	f000 bb7f 	b.w	8014fa0 <__swbuf_r>
 80148a2:	6813      	ldr	r3, [r2, #0]
 80148a4:	1c58      	adds	r0, r3, #1
 80148a6:	6010      	str	r0, [r2, #0]
 80148a8:	7019      	strb	r1, [r3, #0]
 80148aa:	4608      	mov	r0, r1
 80148ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80148b0:	4770      	bx	lr

080148b2 <__sfputs_r>:
 80148b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148b4:	4606      	mov	r6, r0
 80148b6:	460f      	mov	r7, r1
 80148b8:	4614      	mov	r4, r2
 80148ba:	18d5      	adds	r5, r2, r3
 80148bc:	42ac      	cmp	r4, r5
 80148be:	d101      	bne.n	80148c4 <__sfputs_r+0x12>
 80148c0:	2000      	movs	r0, #0
 80148c2:	e007      	b.n	80148d4 <__sfputs_r+0x22>
 80148c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148c8:	463a      	mov	r2, r7
 80148ca:	4630      	mov	r0, r6
 80148cc:	f7ff ffda 	bl	8014884 <__sfputc_r>
 80148d0:	1c43      	adds	r3, r0, #1
 80148d2:	d1f3      	bne.n	80148bc <__sfputs_r+0xa>
 80148d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080148d8 <_vfiprintf_r>:
 80148d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148dc:	460d      	mov	r5, r1
 80148de:	b09d      	sub	sp, #116	@ 0x74
 80148e0:	4614      	mov	r4, r2
 80148e2:	4698      	mov	r8, r3
 80148e4:	4606      	mov	r6, r0
 80148e6:	b118      	cbz	r0, 80148f0 <_vfiprintf_r+0x18>
 80148e8:	6a03      	ldr	r3, [r0, #32]
 80148ea:	b90b      	cbnz	r3, 80148f0 <_vfiprintf_r+0x18>
 80148ec:	f7ff fe2c 	bl	8014548 <__sinit>
 80148f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80148f2:	07d9      	lsls	r1, r3, #31
 80148f4:	d405      	bmi.n	8014902 <_vfiprintf_r+0x2a>
 80148f6:	89ab      	ldrh	r3, [r5, #12]
 80148f8:	059a      	lsls	r2, r3, #22
 80148fa:	d402      	bmi.n	8014902 <_vfiprintf_r+0x2a>
 80148fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80148fe:	f7ff ff48 	bl	8014792 <__retarget_lock_acquire_recursive>
 8014902:	89ab      	ldrh	r3, [r5, #12]
 8014904:	071b      	lsls	r3, r3, #28
 8014906:	d501      	bpl.n	801490c <_vfiprintf_r+0x34>
 8014908:	692b      	ldr	r3, [r5, #16]
 801490a:	b99b      	cbnz	r3, 8014934 <_vfiprintf_r+0x5c>
 801490c:	4629      	mov	r1, r5
 801490e:	4630      	mov	r0, r6
 8014910:	f000 fb84 	bl	801501c <__swsetup_r>
 8014914:	b170      	cbz	r0, 8014934 <_vfiprintf_r+0x5c>
 8014916:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014918:	07dc      	lsls	r4, r3, #31
 801491a:	d504      	bpl.n	8014926 <_vfiprintf_r+0x4e>
 801491c:	f04f 30ff 	mov.w	r0, #4294967295
 8014920:	b01d      	add	sp, #116	@ 0x74
 8014922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014926:	89ab      	ldrh	r3, [r5, #12]
 8014928:	0598      	lsls	r0, r3, #22
 801492a:	d4f7      	bmi.n	801491c <_vfiprintf_r+0x44>
 801492c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801492e:	f7ff ff31 	bl	8014794 <__retarget_lock_release_recursive>
 8014932:	e7f3      	b.n	801491c <_vfiprintf_r+0x44>
 8014934:	2300      	movs	r3, #0
 8014936:	9309      	str	r3, [sp, #36]	@ 0x24
 8014938:	2320      	movs	r3, #32
 801493a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801493e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014942:	2330      	movs	r3, #48	@ 0x30
 8014944:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014af4 <_vfiprintf_r+0x21c>
 8014948:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801494c:	f04f 0901 	mov.w	r9, #1
 8014950:	4623      	mov	r3, r4
 8014952:	469a      	mov	sl, r3
 8014954:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014958:	b10a      	cbz	r2, 801495e <_vfiprintf_r+0x86>
 801495a:	2a25      	cmp	r2, #37	@ 0x25
 801495c:	d1f9      	bne.n	8014952 <_vfiprintf_r+0x7a>
 801495e:	ebba 0b04 	subs.w	fp, sl, r4
 8014962:	d00b      	beq.n	801497c <_vfiprintf_r+0xa4>
 8014964:	465b      	mov	r3, fp
 8014966:	4622      	mov	r2, r4
 8014968:	4629      	mov	r1, r5
 801496a:	4630      	mov	r0, r6
 801496c:	f7ff ffa1 	bl	80148b2 <__sfputs_r>
 8014970:	3001      	adds	r0, #1
 8014972:	f000 80a7 	beq.w	8014ac4 <_vfiprintf_r+0x1ec>
 8014976:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014978:	445a      	add	r2, fp
 801497a:	9209      	str	r2, [sp, #36]	@ 0x24
 801497c:	f89a 3000 	ldrb.w	r3, [sl]
 8014980:	2b00      	cmp	r3, #0
 8014982:	f000 809f 	beq.w	8014ac4 <_vfiprintf_r+0x1ec>
 8014986:	2300      	movs	r3, #0
 8014988:	f04f 32ff 	mov.w	r2, #4294967295
 801498c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014990:	f10a 0a01 	add.w	sl, sl, #1
 8014994:	9304      	str	r3, [sp, #16]
 8014996:	9307      	str	r3, [sp, #28]
 8014998:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801499c:	931a      	str	r3, [sp, #104]	@ 0x68
 801499e:	4654      	mov	r4, sl
 80149a0:	2205      	movs	r2, #5
 80149a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149a6:	4853      	ldr	r0, [pc, #332]	@ (8014af4 <_vfiprintf_r+0x21c>)
 80149a8:	f7eb fc2a 	bl	8000200 <memchr>
 80149ac:	9a04      	ldr	r2, [sp, #16]
 80149ae:	b9d8      	cbnz	r0, 80149e8 <_vfiprintf_r+0x110>
 80149b0:	06d1      	lsls	r1, r2, #27
 80149b2:	bf44      	itt	mi
 80149b4:	2320      	movmi	r3, #32
 80149b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80149ba:	0713      	lsls	r3, r2, #28
 80149bc:	bf44      	itt	mi
 80149be:	232b      	movmi	r3, #43	@ 0x2b
 80149c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80149c4:	f89a 3000 	ldrb.w	r3, [sl]
 80149c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80149ca:	d015      	beq.n	80149f8 <_vfiprintf_r+0x120>
 80149cc:	9a07      	ldr	r2, [sp, #28]
 80149ce:	4654      	mov	r4, sl
 80149d0:	2000      	movs	r0, #0
 80149d2:	f04f 0c0a 	mov.w	ip, #10
 80149d6:	4621      	mov	r1, r4
 80149d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80149dc:	3b30      	subs	r3, #48	@ 0x30
 80149de:	2b09      	cmp	r3, #9
 80149e0:	d94b      	bls.n	8014a7a <_vfiprintf_r+0x1a2>
 80149e2:	b1b0      	cbz	r0, 8014a12 <_vfiprintf_r+0x13a>
 80149e4:	9207      	str	r2, [sp, #28]
 80149e6:	e014      	b.n	8014a12 <_vfiprintf_r+0x13a>
 80149e8:	eba0 0308 	sub.w	r3, r0, r8
 80149ec:	fa09 f303 	lsl.w	r3, r9, r3
 80149f0:	4313      	orrs	r3, r2
 80149f2:	9304      	str	r3, [sp, #16]
 80149f4:	46a2      	mov	sl, r4
 80149f6:	e7d2      	b.n	801499e <_vfiprintf_r+0xc6>
 80149f8:	9b03      	ldr	r3, [sp, #12]
 80149fa:	1d19      	adds	r1, r3, #4
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	9103      	str	r1, [sp, #12]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	bfbb      	ittet	lt
 8014a04:	425b      	neglt	r3, r3
 8014a06:	f042 0202 	orrlt.w	r2, r2, #2
 8014a0a:	9307      	strge	r3, [sp, #28]
 8014a0c:	9307      	strlt	r3, [sp, #28]
 8014a0e:	bfb8      	it	lt
 8014a10:	9204      	strlt	r2, [sp, #16]
 8014a12:	7823      	ldrb	r3, [r4, #0]
 8014a14:	2b2e      	cmp	r3, #46	@ 0x2e
 8014a16:	d10a      	bne.n	8014a2e <_vfiprintf_r+0x156>
 8014a18:	7863      	ldrb	r3, [r4, #1]
 8014a1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8014a1c:	d132      	bne.n	8014a84 <_vfiprintf_r+0x1ac>
 8014a1e:	9b03      	ldr	r3, [sp, #12]
 8014a20:	1d1a      	adds	r2, r3, #4
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	9203      	str	r2, [sp, #12]
 8014a26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014a2a:	3402      	adds	r4, #2
 8014a2c:	9305      	str	r3, [sp, #20]
 8014a2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014b04 <_vfiprintf_r+0x22c>
 8014a32:	7821      	ldrb	r1, [r4, #0]
 8014a34:	2203      	movs	r2, #3
 8014a36:	4650      	mov	r0, sl
 8014a38:	f7eb fbe2 	bl	8000200 <memchr>
 8014a3c:	b138      	cbz	r0, 8014a4e <_vfiprintf_r+0x176>
 8014a3e:	9b04      	ldr	r3, [sp, #16]
 8014a40:	eba0 000a 	sub.w	r0, r0, sl
 8014a44:	2240      	movs	r2, #64	@ 0x40
 8014a46:	4082      	lsls	r2, r0
 8014a48:	4313      	orrs	r3, r2
 8014a4a:	3401      	adds	r4, #1
 8014a4c:	9304      	str	r3, [sp, #16]
 8014a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a52:	4829      	ldr	r0, [pc, #164]	@ (8014af8 <_vfiprintf_r+0x220>)
 8014a54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014a58:	2206      	movs	r2, #6
 8014a5a:	f7eb fbd1 	bl	8000200 <memchr>
 8014a5e:	2800      	cmp	r0, #0
 8014a60:	d03f      	beq.n	8014ae2 <_vfiprintf_r+0x20a>
 8014a62:	4b26      	ldr	r3, [pc, #152]	@ (8014afc <_vfiprintf_r+0x224>)
 8014a64:	bb1b      	cbnz	r3, 8014aae <_vfiprintf_r+0x1d6>
 8014a66:	9b03      	ldr	r3, [sp, #12]
 8014a68:	3307      	adds	r3, #7
 8014a6a:	f023 0307 	bic.w	r3, r3, #7
 8014a6e:	3308      	adds	r3, #8
 8014a70:	9303      	str	r3, [sp, #12]
 8014a72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a74:	443b      	add	r3, r7
 8014a76:	9309      	str	r3, [sp, #36]	@ 0x24
 8014a78:	e76a      	b.n	8014950 <_vfiprintf_r+0x78>
 8014a7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8014a7e:	460c      	mov	r4, r1
 8014a80:	2001      	movs	r0, #1
 8014a82:	e7a8      	b.n	80149d6 <_vfiprintf_r+0xfe>
 8014a84:	2300      	movs	r3, #0
 8014a86:	3401      	adds	r4, #1
 8014a88:	9305      	str	r3, [sp, #20]
 8014a8a:	4619      	mov	r1, r3
 8014a8c:	f04f 0c0a 	mov.w	ip, #10
 8014a90:	4620      	mov	r0, r4
 8014a92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a96:	3a30      	subs	r2, #48	@ 0x30
 8014a98:	2a09      	cmp	r2, #9
 8014a9a:	d903      	bls.n	8014aa4 <_vfiprintf_r+0x1cc>
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d0c6      	beq.n	8014a2e <_vfiprintf_r+0x156>
 8014aa0:	9105      	str	r1, [sp, #20]
 8014aa2:	e7c4      	b.n	8014a2e <_vfiprintf_r+0x156>
 8014aa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8014aa8:	4604      	mov	r4, r0
 8014aaa:	2301      	movs	r3, #1
 8014aac:	e7f0      	b.n	8014a90 <_vfiprintf_r+0x1b8>
 8014aae:	ab03      	add	r3, sp, #12
 8014ab0:	9300      	str	r3, [sp, #0]
 8014ab2:	462a      	mov	r2, r5
 8014ab4:	4b12      	ldr	r3, [pc, #72]	@ (8014b00 <_vfiprintf_r+0x228>)
 8014ab6:	a904      	add	r1, sp, #16
 8014ab8:	4630      	mov	r0, r6
 8014aba:	f3af 8000 	nop.w
 8014abe:	4607      	mov	r7, r0
 8014ac0:	1c78      	adds	r0, r7, #1
 8014ac2:	d1d6      	bne.n	8014a72 <_vfiprintf_r+0x19a>
 8014ac4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014ac6:	07d9      	lsls	r1, r3, #31
 8014ac8:	d405      	bmi.n	8014ad6 <_vfiprintf_r+0x1fe>
 8014aca:	89ab      	ldrh	r3, [r5, #12]
 8014acc:	059a      	lsls	r2, r3, #22
 8014ace:	d402      	bmi.n	8014ad6 <_vfiprintf_r+0x1fe>
 8014ad0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014ad2:	f7ff fe5f 	bl	8014794 <__retarget_lock_release_recursive>
 8014ad6:	89ab      	ldrh	r3, [r5, #12]
 8014ad8:	065b      	lsls	r3, r3, #25
 8014ada:	f53f af1f 	bmi.w	801491c <_vfiprintf_r+0x44>
 8014ade:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014ae0:	e71e      	b.n	8014920 <_vfiprintf_r+0x48>
 8014ae2:	ab03      	add	r3, sp, #12
 8014ae4:	9300      	str	r3, [sp, #0]
 8014ae6:	462a      	mov	r2, r5
 8014ae8:	4b05      	ldr	r3, [pc, #20]	@ (8014b00 <_vfiprintf_r+0x228>)
 8014aea:	a904      	add	r1, sp, #16
 8014aec:	4630      	mov	r0, r6
 8014aee:	f000 f879 	bl	8014be4 <_printf_i>
 8014af2:	e7e4      	b.n	8014abe <_vfiprintf_r+0x1e6>
 8014af4:	08017da0 	.word	0x08017da0
 8014af8:	08017daa 	.word	0x08017daa
 8014afc:	00000000 	.word	0x00000000
 8014b00:	080148b3 	.word	0x080148b3
 8014b04:	08017da6 	.word	0x08017da6

08014b08 <_printf_common>:
 8014b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b0c:	4616      	mov	r6, r2
 8014b0e:	4698      	mov	r8, r3
 8014b10:	688a      	ldr	r2, [r1, #8]
 8014b12:	690b      	ldr	r3, [r1, #16]
 8014b14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014b18:	4293      	cmp	r3, r2
 8014b1a:	bfb8      	it	lt
 8014b1c:	4613      	movlt	r3, r2
 8014b1e:	6033      	str	r3, [r6, #0]
 8014b20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014b24:	4607      	mov	r7, r0
 8014b26:	460c      	mov	r4, r1
 8014b28:	b10a      	cbz	r2, 8014b2e <_printf_common+0x26>
 8014b2a:	3301      	adds	r3, #1
 8014b2c:	6033      	str	r3, [r6, #0]
 8014b2e:	6823      	ldr	r3, [r4, #0]
 8014b30:	0699      	lsls	r1, r3, #26
 8014b32:	bf42      	ittt	mi
 8014b34:	6833      	ldrmi	r3, [r6, #0]
 8014b36:	3302      	addmi	r3, #2
 8014b38:	6033      	strmi	r3, [r6, #0]
 8014b3a:	6825      	ldr	r5, [r4, #0]
 8014b3c:	f015 0506 	ands.w	r5, r5, #6
 8014b40:	d106      	bne.n	8014b50 <_printf_common+0x48>
 8014b42:	f104 0a19 	add.w	sl, r4, #25
 8014b46:	68e3      	ldr	r3, [r4, #12]
 8014b48:	6832      	ldr	r2, [r6, #0]
 8014b4a:	1a9b      	subs	r3, r3, r2
 8014b4c:	42ab      	cmp	r3, r5
 8014b4e:	dc26      	bgt.n	8014b9e <_printf_common+0x96>
 8014b50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014b54:	6822      	ldr	r2, [r4, #0]
 8014b56:	3b00      	subs	r3, #0
 8014b58:	bf18      	it	ne
 8014b5a:	2301      	movne	r3, #1
 8014b5c:	0692      	lsls	r2, r2, #26
 8014b5e:	d42b      	bmi.n	8014bb8 <_printf_common+0xb0>
 8014b60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014b64:	4641      	mov	r1, r8
 8014b66:	4638      	mov	r0, r7
 8014b68:	47c8      	blx	r9
 8014b6a:	3001      	adds	r0, #1
 8014b6c:	d01e      	beq.n	8014bac <_printf_common+0xa4>
 8014b6e:	6823      	ldr	r3, [r4, #0]
 8014b70:	6922      	ldr	r2, [r4, #16]
 8014b72:	f003 0306 	and.w	r3, r3, #6
 8014b76:	2b04      	cmp	r3, #4
 8014b78:	bf02      	ittt	eq
 8014b7a:	68e5      	ldreq	r5, [r4, #12]
 8014b7c:	6833      	ldreq	r3, [r6, #0]
 8014b7e:	1aed      	subeq	r5, r5, r3
 8014b80:	68a3      	ldr	r3, [r4, #8]
 8014b82:	bf0c      	ite	eq
 8014b84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014b88:	2500      	movne	r5, #0
 8014b8a:	4293      	cmp	r3, r2
 8014b8c:	bfc4      	itt	gt
 8014b8e:	1a9b      	subgt	r3, r3, r2
 8014b90:	18ed      	addgt	r5, r5, r3
 8014b92:	2600      	movs	r6, #0
 8014b94:	341a      	adds	r4, #26
 8014b96:	42b5      	cmp	r5, r6
 8014b98:	d11a      	bne.n	8014bd0 <_printf_common+0xc8>
 8014b9a:	2000      	movs	r0, #0
 8014b9c:	e008      	b.n	8014bb0 <_printf_common+0xa8>
 8014b9e:	2301      	movs	r3, #1
 8014ba0:	4652      	mov	r2, sl
 8014ba2:	4641      	mov	r1, r8
 8014ba4:	4638      	mov	r0, r7
 8014ba6:	47c8      	blx	r9
 8014ba8:	3001      	adds	r0, #1
 8014baa:	d103      	bne.n	8014bb4 <_printf_common+0xac>
 8014bac:	f04f 30ff 	mov.w	r0, #4294967295
 8014bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bb4:	3501      	adds	r5, #1
 8014bb6:	e7c6      	b.n	8014b46 <_printf_common+0x3e>
 8014bb8:	18e1      	adds	r1, r4, r3
 8014bba:	1c5a      	adds	r2, r3, #1
 8014bbc:	2030      	movs	r0, #48	@ 0x30
 8014bbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014bc2:	4422      	add	r2, r4
 8014bc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014bc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014bcc:	3302      	adds	r3, #2
 8014bce:	e7c7      	b.n	8014b60 <_printf_common+0x58>
 8014bd0:	2301      	movs	r3, #1
 8014bd2:	4622      	mov	r2, r4
 8014bd4:	4641      	mov	r1, r8
 8014bd6:	4638      	mov	r0, r7
 8014bd8:	47c8      	blx	r9
 8014bda:	3001      	adds	r0, #1
 8014bdc:	d0e6      	beq.n	8014bac <_printf_common+0xa4>
 8014bde:	3601      	adds	r6, #1
 8014be0:	e7d9      	b.n	8014b96 <_printf_common+0x8e>
	...

08014be4 <_printf_i>:
 8014be4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014be8:	7e0f      	ldrb	r7, [r1, #24]
 8014bea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014bec:	2f78      	cmp	r7, #120	@ 0x78
 8014bee:	4691      	mov	r9, r2
 8014bf0:	4680      	mov	r8, r0
 8014bf2:	460c      	mov	r4, r1
 8014bf4:	469a      	mov	sl, r3
 8014bf6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014bfa:	d807      	bhi.n	8014c0c <_printf_i+0x28>
 8014bfc:	2f62      	cmp	r7, #98	@ 0x62
 8014bfe:	d80a      	bhi.n	8014c16 <_printf_i+0x32>
 8014c00:	2f00      	cmp	r7, #0
 8014c02:	f000 80d2 	beq.w	8014daa <_printf_i+0x1c6>
 8014c06:	2f58      	cmp	r7, #88	@ 0x58
 8014c08:	f000 80b9 	beq.w	8014d7e <_printf_i+0x19a>
 8014c0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014c10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014c14:	e03a      	b.n	8014c8c <_printf_i+0xa8>
 8014c16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014c1a:	2b15      	cmp	r3, #21
 8014c1c:	d8f6      	bhi.n	8014c0c <_printf_i+0x28>
 8014c1e:	a101      	add	r1, pc, #4	@ (adr r1, 8014c24 <_printf_i+0x40>)
 8014c20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014c24:	08014c7d 	.word	0x08014c7d
 8014c28:	08014c91 	.word	0x08014c91
 8014c2c:	08014c0d 	.word	0x08014c0d
 8014c30:	08014c0d 	.word	0x08014c0d
 8014c34:	08014c0d 	.word	0x08014c0d
 8014c38:	08014c0d 	.word	0x08014c0d
 8014c3c:	08014c91 	.word	0x08014c91
 8014c40:	08014c0d 	.word	0x08014c0d
 8014c44:	08014c0d 	.word	0x08014c0d
 8014c48:	08014c0d 	.word	0x08014c0d
 8014c4c:	08014c0d 	.word	0x08014c0d
 8014c50:	08014d91 	.word	0x08014d91
 8014c54:	08014cbb 	.word	0x08014cbb
 8014c58:	08014d4b 	.word	0x08014d4b
 8014c5c:	08014c0d 	.word	0x08014c0d
 8014c60:	08014c0d 	.word	0x08014c0d
 8014c64:	08014db3 	.word	0x08014db3
 8014c68:	08014c0d 	.word	0x08014c0d
 8014c6c:	08014cbb 	.word	0x08014cbb
 8014c70:	08014c0d 	.word	0x08014c0d
 8014c74:	08014c0d 	.word	0x08014c0d
 8014c78:	08014d53 	.word	0x08014d53
 8014c7c:	6833      	ldr	r3, [r6, #0]
 8014c7e:	1d1a      	adds	r2, r3, #4
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	6032      	str	r2, [r6, #0]
 8014c84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014c88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014c8c:	2301      	movs	r3, #1
 8014c8e:	e09d      	b.n	8014dcc <_printf_i+0x1e8>
 8014c90:	6833      	ldr	r3, [r6, #0]
 8014c92:	6820      	ldr	r0, [r4, #0]
 8014c94:	1d19      	adds	r1, r3, #4
 8014c96:	6031      	str	r1, [r6, #0]
 8014c98:	0606      	lsls	r6, r0, #24
 8014c9a:	d501      	bpl.n	8014ca0 <_printf_i+0xbc>
 8014c9c:	681d      	ldr	r5, [r3, #0]
 8014c9e:	e003      	b.n	8014ca8 <_printf_i+0xc4>
 8014ca0:	0645      	lsls	r5, r0, #25
 8014ca2:	d5fb      	bpl.n	8014c9c <_printf_i+0xb8>
 8014ca4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014ca8:	2d00      	cmp	r5, #0
 8014caa:	da03      	bge.n	8014cb4 <_printf_i+0xd0>
 8014cac:	232d      	movs	r3, #45	@ 0x2d
 8014cae:	426d      	negs	r5, r5
 8014cb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014cb4:	4859      	ldr	r0, [pc, #356]	@ (8014e1c <_printf_i+0x238>)
 8014cb6:	230a      	movs	r3, #10
 8014cb8:	e011      	b.n	8014cde <_printf_i+0xfa>
 8014cba:	6821      	ldr	r1, [r4, #0]
 8014cbc:	6833      	ldr	r3, [r6, #0]
 8014cbe:	0608      	lsls	r0, r1, #24
 8014cc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8014cc4:	d402      	bmi.n	8014ccc <_printf_i+0xe8>
 8014cc6:	0649      	lsls	r1, r1, #25
 8014cc8:	bf48      	it	mi
 8014cca:	b2ad      	uxthmi	r5, r5
 8014ccc:	2f6f      	cmp	r7, #111	@ 0x6f
 8014cce:	4853      	ldr	r0, [pc, #332]	@ (8014e1c <_printf_i+0x238>)
 8014cd0:	6033      	str	r3, [r6, #0]
 8014cd2:	bf14      	ite	ne
 8014cd4:	230a      	movne	r3, #10
 8014cd6:	2308      	moveq	r3, #8
 8014cd8:	2100      	movs	r1, #0
 8014cda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014cde:	6866      	ldr	r6, [r4, #4]
 8014ce0:	60a6      	str	r6, [r4, #8]
 8014ce2:	2e00      	cmp	r6, #0
 8014ce4:	bfa2      	ittt	ge
 8014ce6:	6821      	ldrge	r1, [r4, #0]
 8014ce8:	f021 0104 	bicge.w	r1, r1, #4
 8014cec:	6021      	strge	r1, [r4, #0]
 8014cee:	b90d      	cbnz	r5, 8014cf4 <_printf_i+0x110>
 8014cf0:	2e00      	cmp	r6, #0
 8014cf2:	d04b      	beq.n	8014d8c <_printf_i+0x1a8>
 8014cf4:	4616      	mov	r6, r2
 8014cf6:	fbb5 f1f3 	udiv	r1, r5, r3
 8014cfa:	fb03 5711 	mls	r7, r3, r1, r5
 8014cfe:	5dc7      	ldrb	r7, [r0, r7]
 8014d00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014d04:	462f      	mov	r7, r5
 8014d06:	42bb      	cmp	r3, r7
 8014d08:	460d      	mov	r5, r1
 8014d0a:	d9f4      	bls.n	8014cf6 <_printf_i+0x112>
 8014d0c:	2b08      	cmp	r3, #8
 8014d0e:	d10b      	bne.n	8014d28 <_printf_i+0x144>
 8014d10:	6823      	ldr	r3, [r4, #0]
 8014d12:	07df      	lsls	r7, r3, #31
 8014d14:	d508      	bpl.n	8014d28 <_printf_i+0x144>
 8014d16:	6923      	ldr	r3, [r4, #16]
 8014d18:	6861      	ldr	r1, [r4, #4]
 8014d1a:	4299      	cmp	r1, r3
 8014d1c:	bfde      	ittt	le
 8014d1e:	2330      	movle	r3, #48	@ 0x30
 8014d20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014d24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014d28:	1b92      	subs	r2, r2, r6
 8014d2a:	6122      	str	r2, [r4, #16]
 8014d2c:	f8cd a000 	str.w	sl, [sp]
 8014d30:	464b      	mov	r3, r9
 8014d32:	aa03      	add	r2, sp, #12
 8014d34:	4621      	mov	r1, r4
 8014d36:	4640      	mov	r0, r8
 8014d38:	f7ff fee6 	bl	8014b08 <_printf_common>
 8014d3c:	3001      	adds	r0, #1
 8014d3e:	d14a      	bne.n	8014dd6 <_printf_i+0x1f2>
 8014d40:	f04f 30ff 	mov.w	r0, #4294967295
 8014d44:	b004      	add	sp, #16
 8014d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d4a:	6823      	ldr	r3, [r4, #0]
 8014d4c:	f043 0320 	orr.w	r3, r3, #32
 8014d50:	6023      	str	r3, [r4, #0]
 8014d52:	4833      	ldr	r0, [pc, #204]	@ (8014e20 <_printf_i+0x23c>)
 8014d54:	2778      	movs	r7, #120	@ 0x78
 8014d56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014d5a:	6823      	ldr	r3, [r4, #0]
 8014d5c:	6831      	ldr	r1, [r6, #0]
 8014d5e:	061f      	lsls	r7, r3, #24
 8014d60:	f851 5b04 	ldr.w	r5, [r1], #4
 8014d64:	d402      	bmi.n	8014d6c <_printf_i+0x188>
 8014d66:	065f      	lsls	r7, r3, #25
 8014d68:	bf48      	it	mi
 8014d6a:	b2ad      	uxthmi	r5, r5
 8014d6c:	6031      	str	r1, [r6, #0]
 8014d6e:	07d9      	lsls	r1, r3, #31
 8014d70:	bf44      	itt	mi
 8014d72:	f043 0320 	orrmi.w	r3, r3, #32
 8014d76:	6023      	strmi	r3, [r4, #0]
 8014d78:	b11d      	cbz	r5, 8014d82 <_printf_i+0x19e>
 8014d7a:	2310      	movs	r3, #16
 8014d7c:	e7ac      	b.n	8014cd8 <_printf_i+0xf4>
 8014d7e:	4827      	ldr	r0, [pc, #156]	@ (8014e1c <_printf_i+0x238>)
 8014d80:	e7e9      	b.n	8014d56 <_printf_i+0x172>
 8014d82:	6823      	ldr	r3, [r4, #0]
 8014d84:	f023 0320 	bic.w	r3, r3, #32
 8014d88:	6023      	str	r3, [r4, #0]
 8014d8a:	e7f6      	b.n	8014d7a <_printf_i+0x196>
 8014d8c:	4616      	mov	r6, r2
 8014d8e:	e7bd      	b.n	8014d0c <_printf_i+0x128>
 8014d90:	6833      	ldr	r3, [r6, #0]
 8014d92:	6825      	ldr	r5, [r4, #0]
 8014d94:	6961      	ldr	r1, [r4, #20]
 8014d96:	1d18      	adds	r0, r3, #4
 8014d98:	6030      	str	r0, [r6, #0]
 8014d9a:	062e      	lsls	r6, r5, #24
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	d501      	bpl.n	8014da4 <_printf_i+0x1c0>
 8014da0:	6019      	str	r1, [r3, #0]
 8014da2:	e002      	b.n	8014daa <_printf_i+0x1c6>
 8014da4:	0668      	lsls	r0, r5, #25
 8014da6:	d5fb      	bpl.n	8014da0 <_printf_i+0x1bc>
 8014da8:	8019      	strh	r1, [r3, #0]
 8014daa:	2300      	movs	r3, #0
 8014dac:	6123      	str	r3, [r4, #16]
 8014dae:	4616      	mov	r6, r2
 8014db0:	e7bc      	b.n	8014d2c <_printf_i+0x148>
 8014db2:	6833      	ldr	r3, [r6, #0]
 8014db4:	1d1a      	adds	r2, r3, #4
 8014db6:	6032      	str	r2, [r6, #0]
 8014db8:	681e      	ldr	r6, [r3, #0]
 8014dba:	6862      	ldr	r2, [r4, #4]
 8014dbc:	2100      	movs	r1, #0
 8014dbe:	4630      	mov	r0, r6
 8014dc0:	f7eb fa1e 	bl	8000200 <memchr>
 8014dc4:	b108      	cbz	r0, 8014dca <_printf_i+0x1e6>
 8014dc6:	1b80      	subs	r0, r0, r6
 8014dc8:	6060      	str	r0, [r4, #4]
 8014dca:	6863      	ldr	r3, [r4, #4]
 8014dcc:	6123      	str	r3, [r4, #16]
 8014dce:	2300      	movs	r3, #0
 8014dd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014dd4:	e7aa      	b.n	8014d2c <_printf_i+0x148>
 8014dd6:	6923      	ldr	r3, [r4, #16]
 8014dd8:	4632      	mov	r2, r6
 8014dda:	4649      	mov	r1, r9
 8014ddc:	4640      	mov	r0, r8
 8014dde:	47d0      	blx	sl
 8014de0:	3001      	adds	r0, #1
 8014de2:	d0ad      	beq.n	8014d40 <_printf_i+0x15c>
 8014de4:	6823      	ldr	r3, [r4, #0]
 8014de6:	079b      	lsls	r3, r3, #30
 8014de8:	d413      	bmi.n	8014e12 <_printf_i+0x22e>
 8014dea:	68e0      	ldr	r0, [r4, #12]
 8014dec:	9b03      	ldr	r3, [sp, #12]
 8014dee:	4298      	cmp	r0, r3
 8014df0:	bfb8      	it	lt
 8014df2:	4618      	movlt	r0, r3
 8014df4:	e7a6      	b.n	8014d44 <_printf_i+0x160>
 8014df6:	2301      	movs	r3, #1
 8014df8:	4632      	mov	r2, r6
 8014dfa:	4649      	mov	r1, r9
 8014dfc:	4640      	mov	r0, r8
 8014dfe:	47d0      	blx	sl
 8014e00:	3001      	adds	r0, #1
 8014e02:	d09d      	beq.n	8014d40 <_printf_i+0x15c>
 8014e04:	3501      	adds	r5, #1
 8014e06:	68e3      	ldr	r3, [r4, #12]
 8014e08:	9903      	ldr	r1, [sp, #12]
 8014e0a:	1a5b      	subs	r3, r3, r1
 8014e0c:	42ab      	cmp	r3, r5
 8014e0e:	dcf2      	bgt.n	8014df6 <_printf_i+0x212>
 8014e10:	e7eb      	b.n	8014dea <_printf_i+0x206>
 8014e12:	2500      	movs	r5, #0
 8014e14:	f104 0619 	add.w	r6, r4, #25
 8014e18:	e7f5      	b.n	8014e06 <_printf_i+0x222>
 8014e1a:	bf00      	nop
 8014e1c:	08017db1 	.word	0x08017db1
 8014e20:	08017dc2 	.word	0x08017dc2

08014e24 <__sflush_r>:
 8014e24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e2c:	0716      	lsls	r6, r2, #28
 8014e2e:	4605      	mov	r5, r0
 8014e30:	460c      	mov	r4, r1
 8014e32:	d454      	bmi.n	8014ede <__sflush_r+0xba>
 8014e34:	684b      	ldr	r3, [r1, #4]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	dc02      	bgt.n	8014e40 <__sflush_r+0x1c>
 8014e3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	dd48      	ble.n	8014ed2 <__sflush_r+0xae>
 8014e40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014e42:	2e00      	cmp	r6, #0
 8014e44:	d045      	beq.n	8014ed2 <__sflush_r+0xae>
 8014e46:	2300      	movs	r3, #0
 8014e48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014e4c:	682f      	ldr	r7, [r5, #0]
 8014e4e:	6a21      	ldr	r1, [r4, #32]
 8014e50:	602b      	str	r3, [r5, #0]
 8014e52:	d030      	beq.n	8014eb6 <__sflush_r+0x92>
 8014e54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014e56:	89a3      	ldrh	r3, [r4, #12]
 8014e58:	0759      	lsls	r1, r3, #29
 8014e5a:	d505      	bpl.n	8014e68 <__sflush_r+0x44>
 8014e5c:	6863      	ldr	r3, [r4, #4]
 8014e5e:	1ad2      	subs	r2, r2, r3
 8014e60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014e62:	b10b      	cbz	r3, 8014e68 <__sflush_r+0x44>
 8014e64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014e66:	1ad2      	subs	r2, r2, r3
 8014e68:	2300      	movs	r3, #0
 8014e6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014e6c:	6a21      	ldr	r1, [r4, #32]
 8014e6e:	4628      	mov	r0, r5
 8014e70:	47b0      	blx	r6
 8014e72:	1c43      	adds	r3, r0, #1
 8014e74:	89a3      	ldrh	r3, [r4, #12]
 8014e76:	d106      	bne.n	8014e86 <__sflush_r+0x62>
 8014e78:	6829      	ldr	r1, [r5, #0]
 8014e7a:	291d      	cmp	r1, #29
 8014e7c:	d82b      	bhi.n	8014ed6 <__sflush_r+0xb2>
 8014e7e:	4a2a      	ldr	r2, [pc, #168]	@ (8014f28 <__sflush_r+0x104>)
 8014e80:	410a      	asrs	r2, r1
 8014e82:	07d6      	lsls	r6, r2, #31
 8014e84:	d427      	bmi.n	8014ed6 <__sflush_r+0xb2>
 8014e86:	2200      	movs	r2, #0
 8014e88:	6062      	str	r2, [r4, #4]
 8014e8a:	04d9      	lsls	r1, r3, #19
 8014e8c:	6922      	ldr	r2, [r4, #16]
 8014e8e:	6022      	str	r2, [r4, #0]
 8014e90:	d504      	bpl.n	8014e9c <__sflush_r+0x78>
 8014e92:	1c42      	adds	r2, r0, #1
 8014e94:	d101      	bne.n	8014e9a <__sflush_r+0x76>
 8014e96:	682b      	ldr	r3, [r5, #0]
 8014e98:	b903      	cbnz	r3, 8014e9c <__sflush_r+0x78>
 8014e9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8014e9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014e9e:	602f      	str	r7, [r5, #0]
 8014ea0:	b1b9      	cbz	r1, 8014ed2 <__sflush_r+0xae>
 8014ea2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014ea6:	4299      	cmp	r1, r3
 8014ea8:	d002      	beq.n	8014eb0 <__sflush_r+0x8c>
 8014eaa:	4628      	mov	r0, r5
 8014eac:	f7ff fca0 	bl	80147f0 <_free_r>
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	6363      	str	r3, [r4, #52]	@ 0x34
 8014eb4:	e00d      	b.n	8014ed2 <__sflush_r+0xae>
 8014eb6:	2301      	movs	r3, #1
 8014eb8:	4628      	mov	r0, r5
 8014eba:	47b0      	blx	r6
 8014ebc:	4602      	mov	r2, r0
 8014ebe:	1c50      	adds	r0, r2, #1
 8014ec0:	d1c9      	bne.n	8014e56 <__sflush_r+0x32>
 8014ec2:	682b      	ldr	r3, [r5, #0]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d0c6      	beq.n	8014e56 <__sflush_r+0x32>
 8014ec8:	2b1d      	cmp	r3, #29
 8014eca:	d001      	beq.n	8014ed0 <__sflush_r+0xac>
 8014ecc:	2b16      	cmp	r3, #22
 8014ece:	d11e      	bne.n	8014f0e <__sflush_r+0xea>
 8014ed0:	602f      	str	r7, [r5, #0]
 8014ed2:	2000      	movs	r0, #0
 8014ed4:	e022      	b.n	8014f1c <__sflush_r+0xf8>
 8014ed6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014eda:	b21b      	sxth	r3, r3
 8014edc:	e01b      	b.n	8014f16 <__sflush_r+0xf2>
 8014ede:	690f      	ldr	r7, [r1, #16]
 8014ee0:	2f00      	cmp	r7, #0
 8014ee2:	d0f6      	beq.n	8014ed2 <__sflush_r+0xae>
 8014ee4:	0793      	lsls	r3, r2, #30
 8014ee6:	680e      	ldr	r6, [r1, #0]
 8014ee8:	bf08      	it	eq
 8014eea:	694b      	ldreq	r3, [r1, #20]
 8014eec:	600f      	str	r7, [r1, #0]
 8014eee:	bf18      	it	ne
 8014ef0:	2300      	movne	r3, #0
 8014ef2:	eba6 0807 	sub.w	r8, r6, r7
 8014ef6:	608b      	str	r3, [r1, #8]
 8014ef8:	f1b8 0f00 	cmp.w	r8, #0
 8014efc:	dde9      	ble.n	8014ed2 <__sflush_r+0xae>
 8014efe:	6a21      	ldr	r1, [r4, #32]
 8014f00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014f02:	4643      	mov	r3, r8
 8014f04:	463a      	mov	r2, r7
 8014f06:	4628      	mov	r0, r5
 8014f08:	47b0      	blx	r6
 8014f0a:	2800      	cmp	r0, #0
 8014f0c:	dc08      	bgt.n	8014f20 <__sflush_r+0xfc>
 8014f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014f16:	81a3      	strh	r3, [r4, #12]
 8014f18:	f04f 30ff 	mov.w	r0, #4294967295
 8014f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f20:	4407      	add	r7, r0
 8014f22:	eba8 0800 	sub.w	r8, r8, r0
 8014f26:	e7e7      	b.n	8014ef8 <__sflush_r+0xd4>
 8014f28:	dfbffffe 	.word	0xdfbffffe

08014f2c <_fflush_r>:
 8014f2c:	b538      	push	{r3, r4, r5, lr}
 8014f2e:	690b      	ldr	r3, [r1, #16]
 8014f30:	4605      	mov	r5, r0
 8014f32:	460c      	mov	r4, r1
 8014f34:	b913      	cbnz	r3, 8014f3c <_fflush_r+0x10>
 8014f36:	2500      	movs	r5, #0
 8014f38:	4628      	mov	r0, r5
 8014f3a:	bd38      	pop	{r3, r4, r5, pc}
 8014f3c:	b118      	cbz	r0, 8014f46 <_fflush_r+0x1a>
 8014f3e:	6a03      	ldr	r3, [r0, #32]
 8014f40:	b90b      	cbnz	r3, 8014f46 <_fflush_r+0x1a>
 8014f42:	f7ff fb01 	bl	8014548 <__sinit>
 8014f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d0f3      	beq.n	8014f36 <_fflush_r+0xa>
 8014f4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014f50:	07d0      	lsls	r0, r2, #31
 8014f52:	d404      	bmi.n	8014f5e <_fflush_r+0x32>
 8014f54:	0599      	lsls	r1, r3, #22
 8014f56:	d402      	bmi.n	8014f5e <_fflush_r+0x32>
 8014f58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014f5a:	f7ff fc1a 	bl	8014792 <__retarget_lock_acquire_recursive>
 8014f5e:	4628      	mov	r0, r5
 8014f60:	4621      	mov	r1, r4
 8014f62:	f7ff ff5f 	bl	8014e24 <__sflush_r>
 8014f66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014f68:	07da      	lsls	r2, r3, #31
 8014f6a:	4605      	mov	r5, r0
 8014f6c:	d4e4      	bmi.n	8014f38 <_fflush_r+0xc>
 8014f6e:	89a3      	ldrh	r3, [r4, #12]
 8014f70:	059b      	lsls	r3, r3, #22
 8014f72:	d4e1      	bmi.n	8014f38 <_fflush_r+0xc>
 8014f74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014f76:	f7ff fc0d 	bl	8014794 <__retarget_lock_release_recursive>
 8014f7a:	e7dd      	b.n	8014f38 <_fflush_r+0xc>

08014f7c <fiprintf>:
 8014f7c:	b40e      	push	{r1, r2, r3}
 8014f7e:	b503      	push	{r0, r1, lr}
 8014f80:	4601      	mov	r1, r0
 8014f82:	ab03      	add	r3, sp, #12
 8014f84:	4805      	ldr	r0, [pc, #20]	@ (8014f9c <fiprintf+0x20>)
 8014f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f8a:	6800      	ldr	r0, [r0, #0]
 8014f8c:	9301      	str	r3, [sp, #4]
 8014f8e:	f7ff fca3 	bl	80148d8 <_vfiprintf_r>
 8014f92:	b002      	add	sp, #8
 8014f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8014f98:	b003      	add	sp, #12
 8014f9a:	4770      	bx	lr
 8014f9c:	200004a0 	.word	0x200004a0

08014fa0 <__swbuf_r>:
 8014fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fa2:	460e      	mov	r6, r1
 8014fa4:	4614      	mov	r4, r2
 8014fa6:	4605      	mov	r5, r0
 8014fa8:	b118      	cbz	r0, 8014fb2 <__swbuf_r+0x12>
 8014faa:	6a03      	ldr	r3, [r0, #32]
 8014fac:	b90b      	cbnz	r3, 8014fb2 <__swbuf_r+0x12>
 8014fae:	f7ff facb 	bl	8014548 <__sinit>
 8014fb2:	69a3      	ldr	r3, [r4, #24]
 8014fb4:	60a3      	str	r3, [r4, #8]
 8014fb6:	89a3      	ldrh	r3, [r4, #12]
 8014fb8:	071a      	lsls	r2, r3, #28
 8014fba:	d501      	bpl.n	8014fc0 <__swbuf_r+0x20>
 8014fbc:	6923      	ldr	r3, [r4, #16]
 8014fbe:	b943      	cbnz	r3, 8014fd2 <__swbuf_r+0x32>
 8014fc0:	4621      	mov	r1, r4
 8014fc2:	4628      	mov	r0, r5
 8014fc4:	f000 f82a 	bl	801501c <__swsetup_r>
 8014fc8:	b118      	cbz	r0, 8014fd2 <__swbuf_r+0x32>
 8014fca:	f04f 37ff 	mov.w	r7, #4294967295
 8014fce:	4638      	mov	r0, r7
 8014fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fd2:	6823      	ldr	r3, [r4, #0]
 8014fd4:	6922      	ldr	r2, [r4, #16]
 8014fd6:	1a98      	subs	r0, r3, r2
 8014fd8:	6963      	ldr	r3, [r4, #20]
 8014fda:	b2f6      	uxtb	r6, r6
 8014fdc:	4283      	cmp	r3, r0
 8014fde:	4637      	mov	r7, r6
 8014fe0:	dc05      	bgt.n	8014fee <__swbuf_r+0x4e>
 8014fe2:	4621      	mov	r1, r4
 8014fe4:	4628      	mov	r0, r5
 8014fe6:	f7ff ffa1 	bl	8014f2c <_fflush_r>
 8014fea:	2800      	cmp	r0, #0
 8014fec:	d1ed      	bne.n	8014fca <__swbuf_r+0x2a>
 8014fee:	68a3      	ldr	r3, [r4, #8]
 8014ff0:	3b01      	subs	r3, #1
 8014ff2:	60a3      	str	r3, [r4, #8]
 8014ff4:	6823      	ldr	r3, [r4, #0]
 8014ff6:	1c5a      	adds	r2, r3, #1
 8014ff8:	6022      	str	r2, [r4, #0]
 8014ffa:	701e      	strb	r6, [r3, #0]
 8014ffc:	6962      	ldr	r2, [r4, #20]
 8014ffe:	1c43      	adds	r3, r0, #1
 8015000:	429a      	cmp	r2, r3
 8015002:	d004      	beq.n	801500e <__swbuf_r+0x6e>
 8015004:	89a3      	ldrh	r3, [r4, #12]
 8015006:	07db      	lsls	r3, r3, #31
 8015008:	d5e1      	bpl.n	8014fce <__swbuf_r+0x2e>
 801500a:	2e0a      	cmp	r6, #10
 801500c:	d1df      	bne.n	8014fce <__swbuf_r+0x2e>
 801500e:	4621      	mov	r1, r4
 8015010:	4628      	mov	r0, r5
 8015012:	f7ff ff8b 	bl	8014f2c <_fflush_r>
 8015016:	2800      	cmp	r0, #0
 8015018:	d0d9      	beq.n	8014fce <__swbuf_r+0x2e>
 801501a:	e7d6      	b.n	8014fca <__swbuf_r+0x2a>

0801501c <__swsetup_r>:
 801501c:	b538      	push	{r3, r4, r5, lr}
 801501e:	4b29      	ldr	r3, [pc, #164]	@ (80150c4 <__swsetup_r+0xa8>)
 8015020:	4605      	mov	r5, r0
 8015022:	6818      	ldr	r0, [r3, #0]
 8015024:	460c      	mov	r4, r1
 8015026:	b118      	cbz	r0, 8015030 <__swsetup_r+0x14>
 8015028:	6a03      	ldr	r3, [r0, #32]
 801502a:	b90b      	cbnz	r3, 8015030 <__swsetup_r+0x14>
 801502c:	f7ff fa8c 	bl	8014548 <__sinit>
 8015030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015034:	0719      	lsls	r1, r3, #28
 8015036:	d422      	bmi.n	801507e <__swsetup_r+0x62>
 8015038:	06da      	lsls	r2, r3, #27
 801503a:	d407      	bmi.n	801504c <__swsetup_r+0x30>
 801503c:	2209      	movs	r2, #9
 801503e:	602a      	str	r2, [r5, #0]
 8015040:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015044:	81a3      	strh	r3, [r4, #12]
 8015046:	f04f 30ff 	mov.w	r0, #4294967295
 801504a:	e033      	b.n	80150b4 <__swsetup_r+0x98>
 801504c:	0758      	lsls	r0, r3, #29
 801504e:	d512      	bpl.n	8015076 <__swsetup_r+0x5a>
 8015050:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015052:	b141      	cbz	r1, 8015066 <__swsetup_r+0x4a>
 8015054:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015058:	4299      	cmp	r1, r3
 801505a:	d002      	beq.n	8015062 <__swsetup_r+0x46>
 801505c:	4628      	mov	r0, r5
 801505e:	f7ff fbc7 	bl	80147f0 <_free_r>
 8015062:	2300      	movs	r3, #0
 8015064:	6363      	str	r3, [r4, #52]	@ 0x34
 8015066:	89a3      	ldrh	r3, [r4, #12]
 8015068:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801506c:	81a3      	strh	r3, [r4, #12]
 801506e:	2300      	movs	r3, #0
 8015070:	6063      	str	r3, [r4, #4]
 8015072:	6923      	ldr	r3, [r4, #16]
 8015074:	6023      	str	r3, [r4, #0]
 8015076:	89a3      	ldrh	r3, [r4, #12]
 8015078:	f043 0308 	orr.w	r3, r3, #8
 801507c:	81a3      	strh	r3, [r4, #12]
 801507e:	6923      	ldr	r3, [r4, #16]
 8015080:	b94b      	cbnz	r3, 8015096 <__swsetup_r+0x7a>
 8015082:	89a3      	ldrh	r3, [r4, #12]
 8015084:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015088:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801508c:	d003      	beq.n	8015096 <__swsetup_r+0x7a>
 801508e:	4621      	mov	r1, r4
 8015090:	4628      	mov	r0, r5
 8015092:	f000 f846 	bl	8015122 <__smakebuf_r>
 8015096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801509a:	f013 0201 	ands.w	r2, r3, #1
 801509e:	d00a      	beq.n	80150b6 <__swsetup_r+0x9a>
 80150a0:	2200      	movs	r2, #0
 80150a2:	60a2      	str	r2, [r4, #8]
 80150a4:	6962      	ldr	r2, [r4, #20]
 80150a6:	4252      	negs	r2, r2
 80150a8:	61a2      	str	r2, [r4, #24]
 80150aa:	6922      	ldr	r2, [r4, #16]
 80150ac:	b942      	cbnz	r2, 80150c0 <__swsetup_r+0xa4>
 80150ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80150b2:	d1c5      	bne.n	8015040 <__swsetup_r+0x24>
 80150b4:	bd38      	pop	{r3, r4, r5, pc}
 80150b6:	0799      	lsls	r1, r3, #30
 80150b8:	bf58      	it	pl
 80150ba:	6962      	ldrpl	r2, [r4, #20]
 80150bc:	60a2      	str	r2, [r4, #8]
 80150be:	e7f4      	b.n	80150aa <__swsetup_r+0x8e>
 80150c0:	2000      	movs	r0, #0
 80150c2:	e7f7      	b.n	80150b4 <__swsetup_r+0x98>
 80150c4:	200004a0 	.word	0x200004a0

080150c8 <abort>:
 80150c8:	b508      	push	{r3, lr}
 80150ca:	2006      	movs	r0, #6
 80150cc:	f000 f88e 	bl	80151ec <raise>
 80150d0:	2001      	movs	r0, #1
 80150d2:	f7eb ffed 	bl	80010b0 <_exit>

080150d6 <__swhatbuf_r>:
 80150d6:	b570      	push	{r4, r5, r6, lr}
 80150d8:	460c      	mov	r4, r1
 80150da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150de:	2900      	cmp	r1, #0
 80150e0:	b096      	sub	sp, #88	@ 0x58
 80150e2:	4615      	mov	r5, r2
 80150e4:	461e      	mov	r6, r3
 80150e6:	da0d      	bge.n	8015104 <__swhatbuf_r+0x2e>
 80150e8:	89a3      	ldrh	r3, [r4, #12]
 80150ea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80150ee:	f04f 0100 	mov.w	r1, #0
 80150f2:	bf14      	ite	ne
 80150f4:	2340      	movne	r3, #64	@ 0x40
 80150f6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80150fa:	2000      	movs	r0, #0
 80150fc:	6031      	str	r1, [r6, #0]
 80150fe:	602b      	str	r3, [r5, #0]
 8015100:	b016      	add	sp, #88	@ 0x58
 8015102:	bd70      	pop	{r4, r5, r6, pc}
 8015104:	466a      	mov	r2, sp
 8015106:	f000 f879 	bl	80151fc <_fstat_r>
 801510a:	2800      	cmp	r0, #0
 801510c:	dbec      	blt.n	80150e8 <__swhatbuf_r+0x12>
 801510e:	9901      	ldr	r1, [sp, #4]
 8015110:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015114:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015118:	4259      	negs	r1, r3
 801511a:	4159      	adcs	r1, r3
 801511c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015120:	e7eb      	b.n	80150fa <__swhatbuf_r+0x24>

08015122 <__smakebuf_r>:
 8015122:	898b      	ldrh	r3, [r1, #12]
 8015124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015126:	079d      	lsls	r5, r3, #30
 8015128:	4606      	mov	r6, r0
 801512a:	460c      	mov	r4, r1
 801512c:	d507      	bpl.n	801513e <__smakebuf_r+0x1c>
 801512e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015132:	6023      	str	r3, [r4, #0]
 8015134:	6123      	str	r3, [r4, #16]
 8015136:	2301      	movs	r3, #1
 8015138:	6163      	str	r3, [r4, #20]
 801513a:	b003      	add	sp, #12
 801513c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801513e:	ab01      	add	r3, sp, #4
 8015140:	466a      	mov	r2, sp
 8015142:	f7ff ffc8 	bl	80150d6 <__swhatbuf_r>
 8015146:	9f00      	ldr	r7, [sp, #0]
 8015148:	4605      	mov	r5, r0
 801514a:	4639      	mov	r1, r7
 801514c:	4630      	mov	r0, r6
 801514e:	f7ff f821 	bl	8014194 <_malloc_r>
 8015152:	b948      	cbnz	r0, 8015168 <__smakebuf_r+0x46>
 8015154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015158:	059a      	lsls	r2, r3, #22
 801515a:	d4ee      	bmi.n	801513a <__smakebuf_r+0x18>
 801515c:	f023 0303 	bic.w	r3, r3, #3
 8015160:	f043 0302 	orr.w	r3, r3, #2
 8015164:	81a3      	strh	r3, [r4, #12]
 8015166:	e7e2      	b.n	801512e <__smakebuf_r+0xc>
 8015168:	89a3      	ldrh	r3, [r4, #12]
 801516a:	6020      	str	r0, [r4, #0]
 801516c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015170:	81a3      	strh	r3, [r4, #12]
 8015172:	9b01      	ldr	r3, [sp, #4]
 8015174:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015178:	b15b      	cbz	r3, 8015192 <__smakebuf_r+0x70>
 801517a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801517e:	4630      	mov	r0, r6
 8015180:	f000 f84e 	bl	8015220 <_isatty_r>
 8015184:	b128      	cbz	r0, 8015192 <__smakebuf_r+0x70>
 8015186:	89a3      	ldrh	r3, [r4, #12]
 8015188:	f023 0303 	bic.w	r3, r3, #3
 801518c:	f043 0301 	orr.w	r3, r3, #1
 8015190:	81a3      	strh	r3, [r4, #12]
 8015192:	89a3      	ldrh	r3, [r4, #12]
 8015194:	431d      	orrs	r5, r3
 8015196:	81a5      	strh	r5, [r4, #12]
 8015198:	e7cf      	b.n	801513a <__smakebuf_r+0x18>

0801519a <_raise_r>:
 801519a:	291f      	cmp	r1, #31
 801519c:	b538      	push	{r3, r4, r5, lr}
 801519e:	4605      	mov	r5, r0
 80151a0:	460c      	mov	r4, r1
 80151a2:	d904      	bls.n	80151ae <_raise_r+0x14>
 80151a4:	2316      	movs	r3, #22
 80151a6:	6003      	str	r3, [r0, #0]
 80151a8:	f04f 30ff 	mov.w	r0, #4294967295
 80151ac:	bd38      	pop	{r3, r4, r5, pc}
 80151ae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80151b0:	b112      	cbz	r2, 80151b8 <_raise_r+0x1e>
 80151b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80151b6:	b94b      	cbnz	r3, 80151cc <_raise_r+0x32>
 80151b8:	4628      	mov	r0, r5
 80151ba:	f000 f853 	bl	8015264 <_getpid_r>
 80151be:	4622      	mov	r2, r4
 80151c0:	4601      	mov	r1, r0
 80151c2:	4628      	mov	r0, r5
 80151c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80151c8:	f000 b83a 	b.w	8015240 <_kill_r>
 80151cc:	2b01      	cmp	r3, #1
 80151ce:	d00a      	beq.n	80151e6 <_raise_r+0x4c>
 80151d0:	1c59      	adds	r1, r3, #1
 80151d2:	d103      	bne.n	80151dc <_raise_r+0x42>
 80151d4:	2316      	movs	r3, #22
 80151d6:	6003      	str	r3, [r0, #0]
 80151d8:	2001      	movs	r0, #1
 80151da:	e7e7      	b.n	80151ac <_raise_r+0x12>
 80151dc:	2100      	movs	r1, #0
 80151de:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80151e2:	4620      	mov	r0, r4
 80151e4:	4798      	blx	r3
 80151e6:	2000      	movs	r0, #0
 80151e8:	e7e0      	b.n	80151ac <_raise_r+0x12>
	...

080151ec <raise>:
 80151ec:	4b02      	ldr	r3, [pc, #8]	@ (80151f8 <raise+0xc>)
 80151ee:	4601      	mov	r1, r0
 80151f0:	6818      	ldr	r0, [r3, #0]
 80151f2:	f7ff bfd2 	b.w	801519a <_raise_r>
 80151f6:	bf00      	nop
 80151f8:	200004a0 	.word	0x200004a0

080151fc <_fstat_r>:
 80151fc:	b538      	push	{r3, r4, r5, lr}
 80151fe:	4d07      	ldr	r5, [pc, #28]	@ (801521c <_fstat_r+0x20>)
 8015200:	2300      	movs	r3, #0
 8015202:	4604      	mov	r4, r0
 8015204:	4608      	mov	r0, r1
 8015206:	4611      	mov	r1, r2
 8015208:	602b      	str	r3, [r5, #0]
 801520a:	f7eb ffa1 	bl	8001150 <_fstat>
 801520e:	1c43      	adds	r3, r0, #1
 8015210:	d102      	bne.n	8015218 <_fstat_r+0x1c>
 8015212:	682b      	ldr	r3, [r5, #0]
 8015214:	b103      	cbz	r3, 8015218 <_fstat_r+0x1c>
 8015216:	6023      	str	r3, [r4, #0]
 8015218:	bd38      	pop	{r3, r4, r5, pc}
 801521a:	bf00      	nop
 801521c:	2000e138 	.word	0x2000e138

08015220 <_isatty_r>:
 8015220:	b538      	push	{r3, r4, r5, lr}
 8015222:	4d06      	ldr	r5, [pc, #24]	@ (801523c <_isatty_r+0x1c>)
 8015224:	2300      	movs	r3, #0
 8015226:	4604      	mov	r4, r0
 8015228:	4608      	mov	r0, r1
 801522a:	602b      	str	r3, [r5, #0]
 801522c:	f7eb ffa0 	bl	8001170 <_isatty>
 8015230:	1c43      	adds	r3, r0, #1
 8015232:	d102      	bne.n	801523a <_isatty_r+0x1a>
 8015234:	682b      	ldr	r3, [r5, #0]
 8015236:	b103      	cbz	r3, 801523a <_isatty_r+0x1a>
 8015238:	6023      	str	r3, [r4, #0]
 801523a:	bd38      	pop	{r3, r4, r5, pc}
 801523c:	2000e138 	.word	0x2000e138

08015240 <_kill_r>:
 8015240:	b538      	push	{r3, r4, r5, lr}
 8015242:	4d07      	ldr	r5, [pc, #28]	@ (8015260 <_kill_r+0x20>)
 8015244:	2300      	movs	r3, #0
 8015246:	4604      	mov	r4, r0
 8015248:	4608      	mov	r0, r1
 801524a:	4611      	mov	r1, r2
 801524c:	602b      	str	r3, [r5, #0]
 801524e:	f7eb ff1d 	bl	800108c <_kill>
 8015252:	1c43      	adds	r3, r0, #1
 8015254:	d102      	bne.n	801525c <_kill_r+0x1c>
 8015256:	682b      	ldr	r3, [r5, #0]
 8015258:	b103      	cbz	r3, 801525c <_kill_r+0x1c>
 801525a:	6023      	str	r3, [r4, #0]
 801525c:	bd38      	pop	{r3, r4, r5, pc}
 801525e:	bf00      	nop
 8015260:	2000e138 	.word	0x2000e138

08015264 <_getpid_r>:
 8015264:	f7eb bf0a 	b.w	800107c <_getpid>

08015268 <_init>:
 8015268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801526a:	bf00      	nop
 801526c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801526e:	bc08      	pop	{r3}
 8015270:	469e      	mov	lr, r3
 8015272:	4770      	bx	lr

08015274 <_fini>:
 8015274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015276:	bf00      	nop
 8015278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801527a:	bc08      	pop	{r3}
 801527c:	469e      	mov	lr, r3
 801527e:	4770      	bx	lr
